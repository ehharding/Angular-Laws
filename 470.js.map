{"version":3,"mappings":"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","names":["MAT_SNACK_BAR_DATA","InjectionToken","constructor","this","MAX_TIMEOUT","Math","pow","containerInstance","_overlayRef","Subject","onAction","subscribe","dismiss","_onExit","_finishDismiss","_afterDismissed","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","_onAction","_dismissedByAction","next","complete","closeWithAction","_dismissAfter","duration","setTimeout","min","_open","_afterOpened","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","SimpleSnackBar","snackBarRef","data","action","hasAction","MatSnackBarRef","i3","matSnackBarAnimations","snackBarState","trigger","state","style","transform","opacity","transition","animate","MatSnackBarContainer","BasePortalOutlet","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","super","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachDomPortal","_live","c","politeness","announcementMessage","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","_destroyed","_animationState","detectChanges","_screenReaderAnnounce","nativeElement","setAttribute","_announceTimeoutId","ngOnDestroy","onMicrotaskEmpty","pipe","take","element","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","horizontalPosition","verticalPosition","hasAttached","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","removeAttribute","appendChild","focus","_onAnnounce","_announceDelay","i0","CdkPortalOutlet","n","i3$1","MatSnackBarModule","OverlayModule","PortalModule","CommonModule","MatButtonModule","MatCommonModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MatSnackBarConfig","MatSnackBar","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_openedSnackBarRef","parent","_snackBarRefAtThisLevel","value","openFromComponent","component","config","_attach","openFromTemplate","template","open","message","_config","undefined","simpleSnackBarComponent","_attachSnackBarContainer","overlayRef","injector","Injector","viewContainerRef","providers","provide","useValue","containerPortal","ComponentPortal","snackBarContainerComponent","containerRef","attach","instance","content","userConfig","_createOverlay","container","TemplateRef","TemplatePortal","$implicit","_createInjector","contentRef","observe","Breakpoints","takeUntil","detachments","overlayElement","toggle","handsetCssClass","matches","announce","_animateSnackBar","clear","overlayConfig","OverlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","create","i1$1","ROUTES","path","_router","_snackBar","_userService","FormGroup","userName","FormControl","Validators","password","ReplaySubject","_componentDestroyed$","login","e","login$","loginFormGroup","_user","DEFAULT_MAT_SNACKBAR_CONFIG","navigate","error","_errorResponse","LoginComponent","selectors","ctx","LoginRoutingModule","RouterModule","LoginModule","MatCardModule","MatDividerModule","SharedModule"],"sources":["../src/material/snack-bar/simple-snack-bar.html","../src/material/snack-bar/snack-bar-config.ts","../src/material/snack-bar/snack-bar-ref.ts","../src/material/snack-bar/simple-snack-bar.ts","../src/material/snack-bar/snack-bar-animations.ts","../src/material/snack-bar/snack-bar-container.ts","../src/material/snack-bar/snack-bar-container.html","../src/material/snack-bar/snack-bar-module.ts","../src/material/snack-bar/snack-bar.ts","./src/app/login/login-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/login/login.module.ts"],"sourcesContent":["<span>{{data.message}}</span>\n<div class=\"mat-simple-snackbar-action\"  *ngIf=\"hasAction\">\n  <button mat-button (click)=\"action()\">{{data.action}}</button>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /**\n   * The view container that serves as the parent for the snackbar for the purposes of dependency\n   * injection. Note: this does not affect where the snackbar is inserted in the DOM.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {_SnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: _SnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: _SnackBarContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed;\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Inject, ViewEncapsulation} from '@angular/core';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n/**\n * Interface for a simple snack bar component that has a message and a single action.\n */\nexport interface TextOnlySnackBar {\n  data: {message: string; action: string};\n  snackBarRef: MatSnackBarRef<TextOnlySnackBar>;\n  action: () => void;\n  hasAction: boolean;\n}\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  },\n})\nexport class SimpleSnackBar implements TextOnlySnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string; action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any,\n  ) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state(\n      'void, hidden',\n      style({\n        transform: 'scale(0.8)',\n        opacity: 0,\n      }),\n    ),\n    state(\n      'visible',\n      style({\n        transform: 'scale(1)',\n        opacity: 1,\n      }),\n    ),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition(\n      '* => void, * => hidden',\n      animate(\n        '75ms cubic-bezier(0.4, 0.0, 1, 1)',\n        style({\n          opacity: 0,\n        }),\n      ),\n    ),\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  DomPortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n/**\n * Internal interface for a snack bar container.\n * @docs-private\n */\nexport interface _SnackBarContainer {\n  snackBarConfig: MatSnackBarConfig;\n  readonly _onAnnounce: Subject<any>;\n  readonly _onExit: Subject<any>;\n  readonly _onEnter: Subject<any>;\n  enter: () => void;\n  exit: () => Observable<void>;\n  attachTemplatePortal: <C>(portal: TemplatePortal<C>) => EmbeddedViewRef<C>;\n  attachComponentPortal: <T>(portal: ComponentPortal<T>) => ComponentRef<T>;\n}\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)',\n  },\n})\nexport class MatSnackBarContainer\n  extends BasePortalOutlet\n  implements OnDestroy, _SnackBarContainer\n{\n  /** The number of milliseconds to wait before announcing the snack bar's content. */\n  private readonly _announceDelay: number = 150;\n\n  /** The timeout for announcing the snack bar's content. */\n  private _announceTimeoutId: number;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has announced to screen readers. */\n  readonly _onAnnounce: Subject<void> = new Subject();\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<void> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<void> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** aria-live value for the live region. */\n  _live: AriaLivePoliteness;\n\n  /**\n   * Role of the live region. This is only for Firefox as there is a known issue where Firefox +\n   * JAWS does not read out aria-live message.\n   */\n  _role?: 'status' | 'alert';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _platform: Platform,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig,\n  ) {\n    super();\n\n    // Use aria-live rather than a live role like 'alert' or 'status'\n    // because NVDA and JAWS have show inconsistent behavior with live roles.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._live = 'assertive';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._live = 'off';\n    } else {\n      this._live = 'polite';\n    }\n\n    // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n    // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n    if (this._platform.FIREFOX) {\n      if (this._live === 'polite') {\n        this._role = 'status';\n      }\n      if (this._live === 'assertive') {\n        this._role = 'alert';\n      }\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /**\n   * Attaches a DOM portal to the snack bar container.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  override attachDomPortal = (portal: DomPortal) => {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachDomPortal(portal);\n  };\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n      this._screenReaderAnnounce();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n\n    // Mark this element with an 'exit' attribute to indicate that the snackbar has\n    // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n    // test harness.\n    this._elementRef.nativeElement.setAttribute('mat-exit', '');\n\n    // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n    // long enough to visually read it either, so clear the timeout for announcing.\n    clearTimeout(this._announceTimeoutId);\n\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n\n  /**\n   * Starts a timeout to move the snack bar content to the live region so screen readers will\n   * announce it.\n   */\n  private _screenReaderAnnounce() {\n    if (!this._announceTimeoutId) {\n      this._ngZone.runOutsideAngular(() => {\n        this._announceTimeoutId = setTimeout(() => {\n          const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n          const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n\n          if (inertElement && liveElement) {\n            // If an element in the snack bar content is focused before being moved\n            // track it and restore focus after moving to the live region.\n            let focusedElement: HTMLElement | null = null;\n            if (\n              this._platform.isBrowser &&\n              document.activeElement instanceof HTMLElement &&\n              inertElement.contains(document.activeElement)\n            ) {\n              focusedElement = document.activeElement;\n            }\n\n            inertElement.removeAttribute('aria-hidden');\n            liveElement.appendChild(inertElement);\n            focusedElement?.focus();\n\n            this._onAnnounce.next();\n            this._onAnnounce.complete();\n          }\n        }, this._announceDelay);\n      });\n    }\n  }\n}\n","<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\n<div aria-hidden=\"true\">\n  <ng-template cdkPortalOutlet></ng-template>\n</div>\n\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\n<div [attr.aria-live]=\"_live\" [attr.role]=\"_role\"></div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n@NgModule({\n  imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n  Type,\n} from '@angular/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {TextOnlySnackBar, SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer, _SnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken<MatSnackBarConfig>(\n  'mat-snack-bar-default-options',\n  {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n  },\n);\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** The component that should be rendered as the snack bar's simple component. */\n  protected simpleSnackBarComponent: Type<TextOnlySnackBar> = SimpleSnackBar;\n\n  /** The container component that attaches the provided template or component. */\n  protected snackBarContainerComponent: Type<_SnackBarContainer> = MatSnackBarContainer;\n\n  /** The CSS class to apply for handset mode. */\n  protected handsetCssClass = 'mat-snack-bar-handset';\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n    private _overlay: Overlay,\n    private _live: LiveAnnouncer,\n    private _injector: Injector,\n    private _breakpointObserver: BreakpointObserver,\n    @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n    @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig,\n  ) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(\n    template: TemplateRef<any>,\n    config?: MatSnackBarConfig,\n  ): MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(\n    message: string,\n    action: string = '',\n    config?: MatSnackBarConfig,\n  ): MatSnackBarRef<TextOnlySnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    // Since the snack bar has `role=\"alert\"`, we don't\n    // want to announce the same message twice.\n    if (_config.announcementMessage === message) {\n      _config.announcementMessage = undefined;\n    }\n\n    return this.openFromComponent(this.simpleSnackBarComponent, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(\n    overlayRef: OverlayRef,\n    config: MatSnackBarConfig,\n  ): _SnackBarContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{provide: MatSnackBarConfig, useValue: config}],\n    });\n\n    const containerPortal = new ComponentPortal(\n      this.snackBarContainerComponent,\n      config.viewContainerRef,\n      injector,\n    );\n    const containerRef: ComponentRef<_SnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(\n    content: ComponentType<T> | TemplateRef<T>,\n    userConfig?: MatSnackBarConfig,\n  ): MatSnackBarRef<T | EmbeddedViewRef<any>> {\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef,\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver\n      .observe(Breakpoints.HandsetPortrait)\n      .pipe(takeUntil(overlayRef.detachments()))\n      .subscribe(state => {\n        overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n      });\n\n    if (config.announcementMessage) {\n      // Wait until the snack bar contents have been announced then deliver this message.\n      container._onAnnounce.subscribe(() => {\n        this._live.announce(config.announcementMessage!, config.politeness);\n      });\n    }\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft =\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl);\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(config: MatSnackBarConfig, snackBarRef: MatSnackBarRef<T>): Injector {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return Injector.create({\n      parent: userInjector || this._injector,\n      providers: [\n        {provide: MatSnackBarRef, useValue: snackBarRef},\n        {provide: MAT_SNACK_BAR_DATA, useValue: config.data},\n      ],\n    });\n  }\n}\n","/******************************************************************************************************************************************************************************\n * This file handles navigation for the \"Login\" module. The URLs defined here are children of the \"/login\" route.\n *****************************************************************************************************************************************************************************/\n\nimport { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\n\nimport { LoginComponent } from '@login/login.component';\n\nconst ROUTES : Routes = [\n  { path : '', component : LoginComponent }\n];\n\n@NgModule({\n  exports : [RouterModule],\n  imports : [RouterModule.forChild(ROUTES)]\n})\nexport class LoginRoutingModule { }\n","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\n\nimport { ReplaySubject, takeUntil } from 'rxjs';\n\nimport { DEFAULT_MAT_SNACKBAR_CONFIG } from '@core/services/config/config.model';\nimport { User } from '@core/services/user/user.model';\n\nimport { UserService } from '@core/services/user/user.service';\n\n@Component({\n  changeDetection : ChangeDetectionStrategy.OnPush,\n  selector : 'pf-login',\n  styleUrls : ['login.component.scss'],\n  templateUrl : 'login.component.html'\n})\nexport class LoginComponent implements OnDestroy {\n  public loginFormGroup : FormGroup = new FormGroup({\n    userName : new FormControl('', Validators.required),\n    password : new FormControl('', Validators.required)\n  });\n\n  private readonly _componentDestroyed$ : ReplaySubject<boolean> = new ReplaySubject<boolean>(1);\n\n  public constructor(private readonly _router : Router, private readonly _snackBar : MatSnackBar, private readonly _userService : UserService) { }\n\n  public ngOnDestroy() : void {\n    this._componentDestroyed$.next(true);\n    this._componentDestroyed$.complete();\n  }\n\n  /**\n   * This function logs the user into the application but should only be callable when the status of the login FormGroup is valid. For now, beyond logging the user in, it\n   * merely navigates the user back to the home page.\n   */\n  public login() : void {\n    this._userService.login$(this.loginFormGroup.value.userName, this.loginFormGroup.value.password).pipe(takeUntil(this._componentDestroyed$)).subscribe({\n      next : async(_user : User) : Promise<void> => {\n        this._snackBar.open('Login Successful', 'OK', DEFAULT_MAT_SNACKBAR_CONFIG);\n        await this._router.navigate(['']);\n      },\n      error : (_errorResponse : HttpErrorResponse) : void => {\n        this._snackBar.open('Failed to Login. Please Try Again.', 'OK', { ...DEFAULT_MAT_SNACKBAR_CONFIG, politeness : 'assertive' });\n      }\n    });\n  }\n}\n","<main>\n  <div class=\"align-items-center justify-content-center text-center d-flex flex-row w-100\">\n    <div class=\"position-absolute pf-t-30 pf-w-40\">\n      <mat-card>\n        <h1 class=\"fs-4\"><strong>Login</strong></h1>\n        <mat-divider></mat-divider>\n\n        <form [formGroup]=\"loginFormGroup\">\n          <div class=\"mb-3 mt-3 row\">\n            <div class=\"col w-50\">\n              <mat-form-field appearance=\"outline\" class=\"w-100\">\n                <mat-label>USERNAME</mat-label>\n                <input matInput formControlName=\"userName\" type=\"text\"/>\n                <mat-error><strong>USERNAME</strong> is required.</mat-error>\n              </mat-form-field>\n            </div>\n\n            <div class=\"col w-50\">\n              <mat-form-field appearance=\"outline\" class=\"w-100\">\n                <mat-label>PASSWORD</mat-label>\n                <input matInput formControlName=\"password\" type=\"text\"/>\n                <mat-error><strong>PASSWORD</strong> is required.</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n\n          <button mat-raised-button class=\"w-100\" color=\"primary\" [disabled]=\"loginFormGroup.invalid\" (click)=\"login()\">LOGIN</button>\n        </form>\n      </mat-card>\n    </div>\n  </div>\n</main>\n","/******************************************************************************************************************************************************************************\n * This module serves as the repository for all modules and components associated with the \"Login\" portion of the application.\n *****************************************************************************************************************************************************************************/\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { NgModule } from '@angular/core';\n\nimport { LoginRoutingModule } from '@login/login-routing.module';\nimport { SharedModule } from '@shared/shared.module';\n\nimport { LoginComponent } from '@login/login.component';\n\n@NgModule({\n  declarations : [LoginComponent],\n  imports : [MatButtonModule, MatCardModule, MatDividerModule, MatSnackBarModule, LoginRoutingModule, SharedModule]\n})\nexport class LoginModule { }\n"],"sourceRoot":"webpack:///","file":"470.js"}