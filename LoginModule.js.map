{"version":3,"file":"LoginModule.js","mappings":"gPASA,MAAMA,EAAkB,CACtB,CAAEC,KAAO,GAAIC,UCUTC,MANN,QAgBEC,YAAoCC,EAAmCC,EAA0CC,GAA7EC,eAAmCA,iBAA0CA,oBAT1GA,iBAAuB,EAEvBA,oBAA6B,IAAIC,KAAU,CAChDC,SAAW,IAAIC,KAAY,GAAIC,eAC/BC,SAAW,IAAIF,KAAY,GAAIC,iBAGhBJ,0BAAgD,IAAIM,IAAuB,GAWpFC,UAAUC,EAAoCC,GAAuB,GAEzET,KAAKU,WADHD,EACgBE,OAAOC,WAAaC,0DAEpBL,EAAmBI,WAAaC,0DAI/CC,WACLd,KAAKO,UAAUI,QAAQ,GAGlBI,cACLf,KAAKgB,qBAAqBC,MAAK,GAC/BjB,KAAKgB,qBAAqBE,WAOrBC,QAAK,IAEJC,EAFIC,OACVrB,KAAKD,aAAauB,OAAOtB,KAAKuB,eAAeC,MAAMtB,SAAUF,KAAKuB,eAAeC,MAAMnB,UAAUoB,MAAKC,OAAU1B,KAAKgB,uBAAuBW,UAAU,CACpJV,MAAIG,UAAG,UAAMQ,GACXP,EAAKvB,UAAU+B,KAAK,oBAAqB,KAAMC,WACzCT,EAAKxB,QAAQkC,SAAS,CAAC,OAF3B,6CAIJC,MAASC,IACPjC,KAAKF,UAAU+B,KAAK,sCAAuC,KAAM,IAAKC,IAA6BI,WAAa,+DA/ClHvC,GAAcwC,6DAAdxC,EAAcyC,2FAAdC,wBAAwB,qDCpB9BF,iDDoBMxC,YDHA2C,QAJN,sDAIMA,4DAFM,CAACC,cAAsB/C,IADtB+C,QAGPD,wBGDAE,QAJN,sDAIMA,4DAFM,CAACC,KAAmBH,EAAoBI,QAE9CF","names":["ROUTES","path","component","LoginComponent","constructor","_router","_snackBar","_userService","this","FormGroup","userName","FormControl","Validators","password","ReplaySubject","_onResize","$windowResizeEvent","initialize","mobileView","window","innerWidth","ConfigService","ngOnInit","ngOnDestroy","_componentDestroyed$","next","complete","login","i","o","login$","loginFormGroup","value","pipe","takeUntil","subscribe","_user","open","DEFAULT_MAT_SNACKBAR_CONFIG","navigate","error","_errorResponse","politeness","i0","selectors","ctx","LoginRoutingModule","RouterModule","LoginModule","MatSnackBarModule","SharedModule"],"sourceRoot":"webpack:///","sources":["./src/app/login/login-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/login/login.module.ts"],"sourcesContent":["/**\r\n * This file handles navigation for the \"Login\" module. The URLs defined here are children of the \"/login\" route.\r\n */\r\n\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { LoginComponent } from '@login/login.component';\r\n\r\nconst ROUTES : Routes = [\r\n  { path : '', component : LoginComponent }\r\n];\r\n\r\n@NgModule({\r\n  exports : [RouterModule],\r\n  imports : [RouterModule.forChild(ROUTES)]\r\n})\r\nclass LoginRoutingModule { }\r\n\r\nexport {\r\n  LoginRoutingModule\r\n};\r\n","import { ChangeDetectionStrategy, Component, HostListener, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { ReplaySubject, takeUntil } from 'rxjs';\r\n\r\nimport { DEFAULT_MAT_SNACKBAR_CONFIG } from '@core/services/config/config.model';\r\nimport { User } from '@core/services/user/user.model';\r\n\r\nimport { ConfigService } from '@core/services/config/config.service';\r\nimport { UserService } from '@core/services/user/user.service';\r\n\r\n@Component({\r\n  changeDetection : ChangeDetectionStrategy.OnPush,\r\n  selector : 'pf-login',\r\n  styleUrls : ['login.component.scss'],\r\n  templateUrl : 'login.component.html'\r\n})\r\nclass LoginComponent implements OnInit, OnDestroy {\r\n  public mobileView : boolean = false;\r\n\r\n  public loginFormGroup : FormGroup = new FormGroup({\r\n    userName : new FormControl('', Validators.required),\r\n    password : new FormControl('', Validators.required)\r\n  });\r\n\r\n  private readonly _componentDestroyed$ : ReplaySubject<boolean> = new ReplaySubject<boolean>(1);\r\n\r\n  public constructor(private readonly _router : Router, private readonly _snackBar : MatSnackBar, private readonly _userService : UserService) { }\r\n\r\n  /**\r\n   * Executes certain actions whenever the window changes size. In this case, we set a flag that indicates if we should show a mobile-centric view or not.\r\n   *\r\n   * @param $windowResizeEvent - the resize event that triggered the function call (unless we are called when initializing)\r\n   * @param initialize - a flag that indicates we are in startup and should set the mobile view flag after the view is initialized\r\n   */\r\n  @HostListener('window:resize', ['$event.target'])\r\n  private _onResize($windowResizeEvent : typeof window, initialize : boolean = false) : void {\r\n    if (initialize) {\r\n      this.mobileView = window.innerWidth < ConfigService.appConfiguration.constants.mobileViewThresholdWidthPX;\r\n    } else {\r\n      this.mobileView = $windowResizeEvent.innerWidth < ConfigService.appConfiguration.constants.mobileViewThresholdWidthPX;\r\n    }\r\n  }\r\n\r\n  public ngOnInit() : void {\r\n    this._onResize(window, true);\r\n  }\r\n\r\n  public ngOnDestroy() : void {\r\n    this._componentDestroyed$.next(true);\r\n    this._componentDestroyed$.complete();\r\n  }\r\n\r\n  /**\r\n   * This function logs the user into the application but should only be callable when the status of the login FormGroup is valid. For now, beyond logging the user in, it\r\n   * merely navigates the user back to the home page.\r\n   */\r\n  public login() : void {\r\n    this._userService.login$(this.loginFormGroup.value.userName, this.loginFormGroup.value.password).pipe(takeUntil(this._componentDestroyed$)).subscribe({\r\n      next : async(_user : User) : Promise<void> => {\r\n        this._snackBar.open('Log In Successful', 'OK', DEFAULT_MAT_SNACKBAR_CONFIG);\r\n        await this._router.navigate(['']);\r\n      },\r\n      error : (_errorResponse : HttpErrorResponse) : void => {\r\n        this._snackBar.open('Failed to Log In. Please Try Again.', 'OK', { ...DEFAULT_MAT_SNACKBAR_CONFIG, politeness : 'assertive' });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport {\r\n  LoginComponent\r\n};\r\n","<main></main>\n","/**\r\n * This module serves as the repository for all modules and components associated with the \"Login\" module of the application.\r\n */\r\n\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { LoginRoutingModule } from '@login/login-routing.module';\r\nimport { SharedModule } from '@shared/shared.module';\r\n\r\nimport { LoginComponent } from '@login/login.component';\r\n\r\n@NgModule({\r\n  declarations : [LoginComponent],\r\n  imports : [MatSnackBarModule, LoginRoutingModule, SharedModule]\r\n})\r\nclass LoginModule { }\r\n\r\nexport {\r\n  LoginModule\r\n};\r\n"]}