{"version":3,"file":"LoginModule.js","mappings":"8NAsBaA,8ECcAC,MDdA,sBCcAA,gBDlBDC,KAAeC,KAAcC,KAAcC,KAAiBC,KACtCA,QAGrBN,8BElBb,MAMMO,EANNC,cAOEC,0FAA8B,IAStBC,UAAUC,EAAoCC,GAAuB,GAEzEC,KAAKC,WADHF,EACgBG,OAAOC,WAAaC,0DAEpBN,EAAmBK,WAAaC,0DAI/CC,WACLL,KAAKH,UAAUK,QAAQ,mHAnBrBR,yGAAcY,2FAAdC,wBAAwB,qDCV9BnB,uCCSA,MAAMoB,EAAkB,CACtB,CAAEC,KAAO,GAAIC,UAAYhB,IAG3B,MAIMiB,oUAFOC,cAAsBJ,GADtBI,wBCFb,MAIMC,oUAFO1B,EAAmBwB,EAAoBG","names":["MatSnackBarModule","i0","OverlayModule","PortalModule","CommonModule","MatButtonModule","MatCommonModule","LoginComponent","constructor","Object","_onResize","$windowResizeEvent","initialize","this","mobileView","window","innerWidth","ConfigService","ngOnInit","selectors","ctx","ROUTES","path","component","LoginRoutingModule","RouterModule","LoginModule","SharedModule"],"sourceRoot":"webpack:///","sources":["../src/material/snack-bar/snack-bar-module.ts","../src/material/snack-bar/simple-snack-bar.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/login/login-routing.module.ts","./src/app/login/login.module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n@NgModule({\n  imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Inject, ViewEncapsulation} from '@angular/core';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n/**\n * Interface for a simple snack bar component that has a message and a single action.\n */\nexport interface TextOnlySnackBar {\n  data: {message: string; action: string};\n  snackBarRef: MatSnackBarRef<TextOnlySnackBar>;\n  action: () => void;\n  hasAction: boolean;\n}\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  },\n})\nexport class SimpleSnackBar implements TextOnlySnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string; action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any,\n  ) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","import { ChangeDetectionStrategy, Component, HostListener, OnInit } from '@angular/core';\r\n\r\nimport { ConfigService } from '@core/services/config/config.service';\r\n\r\n@Component({\r\n  selector : 'pf-login',\r\n  styleUrls : ['login.component.scss'],\r\n  templateUrl : 'login.component.html',\r\n  changeDetection : ChangeDetectionStrategy.OnPush\r\n})\r\nclass LoginComponent implements OnInit {\r\n  public mobileView : boolean = false;\r\n\r\n  /**\r\n   * Executes certain actions whenever the window changes size. In this case, we set a flag that indicates if we should show a mobile-centric view or not.\r\n   *\r\n   * @param $windowResizeEvent - the resize event that triggered the function call (unless we are called when initializing)\r\n   * @param initialize - a flag that indicates we are in startup and should set the mobile view flag after the view is initialized\r\n   */\r\n  @HostListener('window:resize', ['$event.target'])\r\n  private _onResize($windowResizeEvent : typeof window, initialize : boolean = false) : void {\r\n    if (initialize) {\r\n      this.mobileView = window.innerWidth < ConfigService.appConfiguration.constants.mobileViewThresholdWidthPX;\r\n    } else {\r\n      this.mobileView = $windowResizeEvent.innerWidth < ConfigService.appConfiguration.constants.mobileViewThresholdWidthPX;\r\n    }\r\n  }\r\n\r\n  public ngOnInit() : void {\r\n    this._onResize(window, true);\r\n  }\r\n}\r\n\r\nexport {\r\n  LoginComponent\r\n};\r\n","<main></main>\n","/**\r\n * This file handles navigation for the \"Login\" module. The URLs defined here are children of the \"/login\" route.\r\n */\r\n\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { LoginComponent } from '@login/login.component';\r\n\r\nconst ROUTES : Routes = [\r\n  { path : '', component : LoginComponent }\r\n];\r\n\r\n@NgModule({\r\n  exports : [RouterModule],\r\n  imports : [RouterModule.forChild(ROUTES)]\r\n})\r\nclass LoginRoutingModule { }\r\n\r\nexport {\r\n  LoginRoutingModule\r\n};\r\n","/**\r\n * This module serves as the repository for all modules and components associated with the \"Login\" module of the application.\r\n */\r\n\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { LoginRoutingModule } from '@login/login-routing.module';\r\nimport { SharedModule } from '@shared/shared.module';\r\n\r\nimport { LoginComponent } from '@login/login.component';\r\n\r\n@NgModule({\r\n  declarations : [LoginComponent],\r\n  imports : [MatSnackBarModule, LoginRoutingModule, SharedModule]\r\n})\r\nclass LoginModule { }\r\n\r\nexport {\r\n  LoginModule\r\n};\r\n"]}