{"version":3,"sources":["node_modules/rxjs/src/internal/symbol/rxSubscriber.ts","node_modules/rxjs/src/internal/BehaviorSubject.ts","node_modules/rxjs/src/internal/config.ts","node_modules/rxjs/src/internal/util/ArgumentOutOfRangeError.ts","node_modules/rxjs/src/internal/operators/mergeMap.ts","node_modules/rxjs/src/internal/Subscriber.ts","node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","node_modules/rxjs/src/internal/observable/from.ts","node_modules/rxjs/src/internal/scheduled/scheduled.ts","node_modules/rxjs/src/internal/util/isInteropObservable.ts","node_modules/rxjs/src/internal/scheduled/scheduleObservable.ts","node_modules/rxjs/src/internal/scheduled/schedulePromise.ts","node_modules/rxjs/src/internal/util/isIterable.ts","node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts","node_modules/rxjs/src/internal/util/isArray.ts","node_modules/rxjs/src/internal/observable/ConnectableObservable.ts","node_modules/rxjs/src/internal/observable/empty.ts","node_modules/rxjs/src/internal/observable/concat.ts","node_modules/rxjs/src/internal/operators/concatAll.ts","node_modules/rxjs/src/internal/Observable.ts","node_modules/rxjs/src/internal/util/toSubscriber.ts","node_modules/rxjs/src/internal/util/canReportError.ts","node_modules/rxjs/src/internal/util/pipe.ts","node_modules/rxjs/src/internal/util/isArrayLike.ts","node_modules/rxjs/src/internal/operators/take.ts","node_modules/rxjs/src/internal/operators/catchError.ts","node_modules/rxjs/src/internal/operators/startWith.ts","node_modules/rxjs/src/internal/observable/of.ts","node_modules/rxjs/src/internal/symbol/iterator.ts","node_modules/rxjs/src/internal/util/hostReportError.ts","node_modules/rxjs/src/internal/util/subscribeTo.ts","node_modules/rxjs/src/internal/util/subscribeToObservable.ts","node_modules/rxjs/src/internal/util/subscribeToPromise.ts","node_modules/rxjs/src/internal/util/subscribeToIterable.ts","node_modules/rxjs/src/internal/util/identity.ts","node_modules/rxjs/src/internal/observable/merge.ts","node_modules/rxjs/src/internal/Subject.ts","node_modules/rxjs/src/internal/util/isObject.ts","node_modules/rxjs/src/internal/SubjectSubscription.ts","node_modules/rxjs/src/internal/operators/mergeAll.ts","node_modules/rxjs/src/internal/operators/concatMap.ts","node_modules/rxjs/src/internal/util/isPromise.ts","node_modules/rxjs/src/internal/operators/switchMap.ts","../packages/core/src/util/property.ts","../packages/core/src/util/stringify.ts","../packages/core/src/di/forward_ref.ts","../packages/core/src/render3/error_code.ts","../packages/core/src/render3/util/stringify_utils.ts","../packages/core/src/render3/errors_di.ts","../packages/core/src/di/interface/defs.ts","../packages/core/src/di/inject_switch.ts","../packages/core/src/di/interface/injector.ts","../packages/core/src/util/closure.ts","../packages/core/src/change_detection/constants.ts","../packages/core/src/metadata/view.ts","../packages/core/src/util/global.ts","../packages/core/src/render3/empty.ts","../packages/core/src/render3/fields.ts","../packages/core/src/render3/definition.ts","../packages/core/src/render3/interfaces/type_checks.ts","../packages/core/src/render3/interfaces/container.ts","../packages/core/src/render3/definition_factory.ts","../packages/core/src/interface/simple_change.ts","../packages/core/src/render3/interfaces/document.ts","../packages/core/src/render3/features/ng_onchanges_feature.ts","../packages/core/src/render3/interfaces/renderer.ts","../packages/core/src/render3/util/view_utils.ts","../packages/core/src/render3/interfaces/view.ts","../packages/core/src/render3/state.ts","../packages/core/src/render3/namespaces.ts","../packages/core/src/render3/hooks.ts","../packages/core/src/render3/interfaces/injector.ts","../packages/core/src/render3/util/attrs_utils.ts","../packages/core/src/render3/util/injector_utils.ts","../packages/core/src/render3/di.ts","../packages/core/src/render3/instructions/di_attr.ts","../packages/core/src/util/decorators.ts","../packages/core/src/di/injection_token.ts","../packages/core/src/metadata/di.ts","../packages/core/src/interface/type.ts","../packages/core/src/util/array_utils.ts","../packages/core/src/di/injector_compatibility.ts","../packages/core/src/di/metadata.ts","../packages/core/src/util/security/trusted_types.ts","../packages/core/src/sanitization/bypass.ts","../packages/core/src/sanitization/inert_body.ts","../packages/core/src/sanitization/url_sanitizer.ts","../packages/core/src/sanitization/html_sanitizer.ts","../packages/core/src/sanitization/security.ts","../packages/core/src/sanitization/sanitization.ts","../packages/core/src/errors.ts","../packages/core/src/error_handler.ts","../packages/core/src/render3/context_discovery.ts","../packages/core/src/render3/util/misc_utils.ts","../packages/core/src/render/api_flags.ts","../packages/core/src/render3/i18n/i18n_tree_shaking.ts","../packages/core/src/render3/util/view_traversal_utils.ts","../packages/core/src/render3/node_manipulation.ts","../packages/core/src/render3/styling/class_differ.ts","../packages/core/src/render3/node_selector_matcher.ts","../packages/core/src/render3/tokens.ts","../packages/core/src/render3/instructions/advance.ts","../packages/core/src/render3/interfaces/styling.ts","../packages/core/src/render3/instructions/shared.ts","../packages/core/src/render3/styling/static_styling.ts","../packages/core/src/di/injector_token.ts","../packages/core/src/di/r3_injector.ts","../packages/core/src/di/null_injector.ts","../packages/core/src/di/scope.ts","../packages/core/src/di/injector.ts","../packages/core/src/render3/component.ts","../packages/core/src/render3/features/inherit_definition_feature.ts","../packages/core/src/util/symbol.ts","../packages/core/src/change_detection/change_detection_util.ts","../packages/core/src/render3/bindings.ts","../packages/core/src/render3/instructions/attribute.ts","../packages/core/src/render3/instructions/interpolation.ts","../packages/core/src/render3/instructions/template.ts","../packages/core/src/render3/instructions/storage.ts","../packages/core/src/render3/instructions/di.ts","../packages/core/src/render3/instructions/property.ts","../packages/core/src/render3/instructions/element.ts","../packages/core/src/render3/interfaces/node.ts","../packages/core/src/render3/instructions/get_current_view.ts","../packages/core/src/util/lang.ts","../packages/core/src/render3/instructions/listener.ts","../packages/core/src/render3/instructions/next_context.ts","../packages/core/src/render3/instructions/projection.ts","../packages/core/src/render3/instructions/property_interpolation.ts","../packages/core/src/util/empty.ts","../packages/core/src/render3/styling/style_binding_list.ts","../packages/core/src/render3/instructions/styling.ts","../packages/core/src/render3/instructions/text.ts","../packages/core/src/render3/instructions/text_interpolation.ts","../packages/core/src/render3/instructions/host_property.ts","../packages/core/src/i18n/locale_en.ts","../packages/core/src/i18n/locale_data_api.ts","../packages/core/src/render3/i18n/i18n_locale_id.ts","../packages/core/src/util/assert.ts","../packages/core/src/render3/di_setup.ts","../packages/core/src/render3/features/providers_feature.ts","../packages/core/src/linker/component_factory.ts","../packages/core/src/linker/component_factory_resolver.ts","../packages/core/src/util/noop.ts","../packages/core/src/linker/element_ref.ts","../packages/core/src/render/api.ts","../packages/core/src/sanitization/sanitizer.ts","../packages/core/src/version.ts","../packages/core/src/change_detection/differs/default_iterable_differ.ts","../packages/core/src/change_detection/differs/default_keyvalue_differ.ts","../packages/core/src/change_detection/differs/iterable_differs.ts","../packages/core/src/change_detection/differs/keyvalue_differs.ts","../packages/core/src/render3/collect_native_nodes.ts","../packages/core/src/render3/view_ref.ts","../packages/core/src/change_detection/change_detector_ref.ts","../packages/core/src/change_detection/change_detection.ts","../packages/core/src/linker/template_ref.ts","../packages/core/src/linker/ng_module_factory.ts","../packages/core/src/linker/view_container_ref.ts","../packages/core/src/view/provider.ts","../packages/core/src/render3/component_ref.ts","../packages/core/src/linker/ng_module_factory_registration.ts","../packages/core/src/render3/ng_module_ref.ts","../packages/core/src/render3/pipe.ts","../packages/core/src/render3/pure_function.ts","../packages/core/src/event_emitter.ts","../packages/core/src/linker/query_list.ts","../packages/core/src/render3/query.ts","../packages/core/src/render3/view_engine_compatibility_prebound.ts","../packages/core/src/metadata/ng_module.ts","../packages/core/src/application_init.ts","../packages/core/src/application_tokens.ts","../packages/core/src/console.ts","../packages/core/src/i18n/tokens.ts","../packages/core/src/linker/compiler.ts","../packages/core/src/util/microtask.ts","../packages/core/src/zone/ng_zone.ts","../packages/core/src/util/raf.ts","../packages/core/src/testability/testability.ts","../packages/core/src/application_ref.ts","../packages/core/src/util/is_dev_mode.ts","../packages/core/src/i18n/localization.ts","../packages/core/src/linker/ng_module_factory_loader.ts","../packages/core/src/linker/system_js_ng_module_factory_loader.ts","../packages/core/src/debug/debug_node.ts","../packages/core/src/platform_core_providers.ts","../packages/core/src/application_module.ts","node_modules/rxjs/src/internal/Observer.ts","node_modules/rxjs/src/internal/OuterSubscriber.ts","node_modules/rxjs/src/internal/InnerSubscriber.ts","node_modules/rxjs/src/internal/util/subscribeToResult.ts","node_modules/rxjs/src/internal/observable/combineLatest.ts","node_modules/rxjs/src/internal/scheduled/scheduleArray.ts","node_modules/rxjs/src/internal/symbol/observable.ts","node_modules/rxjs/src/internal/operators/map.ts","node_modules/rxjs/src/internal/util/isFunction.ts","node_modules/rxjs/src/internal/operators/finalize.ts","node_modules/rxjs/src/internal/util/subscribeToArray.ts","../packages/common/src/dom_adapter.ts","../packages/common/src/dom_tokens.ts","../packages/common/src/location/platform_location.ts","../packages/common/src/location/util.ts","../packages/common/src/location/location_strategy.ts","../packages/common/src/location/hash_location_strategy.ts","../packages/common/src/location/location.ts","../packages/common/src/i18n/locale_data_api.ts","../packages/common/src/i18n/localization.ts","../packages/common/src/cookie.ts","../packages/common/src/directives/ng_class.ts","../packages/common/src/directives/ng_for_of.ts","../packages/common/src/directives/ng_if.ts","../packages/common/src/pipes/async_pipe.ts","../packages/common/src/pipes/invalid_pipe_argument_error.ts","../packages/common/src/common_module.ts","../packages/common/src/platform_id.ts","../packages/common/src/viewport_scroller.ts","node_modules/rxjs/src/internal/operators/filter.ts","node_modules/rxjs/src/internal/Subscription.ts","node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","node_modules/rxjs/src/internal/util/EmptyError.ts","node_modules/rxjs/src/internal/observable/defer.ts","node_modules/rxjs/src/internal/operators/scan.ts","node_modules/rxjs/src/internal/operators/takeLast.ts","node_modules/rxjs/src/internal/operators/throwIfEmpty.ts","node_modules/rxjs/src/internal/operators/defaultIfEmpty.ts","node_modules/rxjs/src/internal/operators/first.ts","../packages/router/src/events.ts","../packages/router/src/shared.ts","../packages/router/src/utils/collection.ts","../packages/router/src/url_tree.ts","../packages/router/src/utils/tree.ts","../packages/router/src/router_state.ts","../packages/router/src/create_router_state.ts","../packages/router/src/create_url_tree.ts","../packages/router/src/operators/activate_routes.ts","../packages/router/src/config.ts","../packages/router/src/utils/type_guards.ts","../packages/router/src/operators/prioritized_guard_value.ts","../packages/router/src/components/empty_outlet.ts","../packages/router/src/utils/config.ts","../packages/router/src/utils/config_matching.ts","../packages/router/src/apply_redirects.ts","node_modules/rxjs/src/internal/operators/last.ts","../packages/router/src/utils/preactivation.ts","../packages/router/src/recognize.ts","../packages/router/src/operators/switch_tap.ts","../packages/router/src/route_reuse_strategy.ts","../packages/router/src/router_config_loader.ts","../packages/router/src/router_outlet_context.ts","../packages/router/src/url_handling_strategy.ts","../packages/router/src/router.ts","../packages/router/src/directives/router_link.ts","../packages/router/src/operators/apply_redirects.ts","../packages/router/src/operators/recognize.ts","../packages/router/src/operators/check_guards.ts","../packages/router/src/operators/resolve_data.ts","../packages/router/src/directives/router_outlet.ts","../packages/router/src/router_scroller.ts","../packages/router/src/router_preloader.ts","../packages/router/src/router_module.ts","node_modules/rxjs/src/internal/util/noop.ts","node_modules/rxjs/src/internal/operators/tap.ts","node_modules/rxjs/src/internal/operators/share.ts","node_modules/rxjs/src/internal/operators/multicast.ts","node_modules/rxjs/src/internal/operators/refCount.ts","node_modules/rxjs/src/internal/observable/fromArray.ts","node_modules/rxjs/src/internal/util/isScheduler.ts","../packages/platform-browser/src/browser/browser_adapter.ts","../packages/platform-browser/src/dom/events/event_manager.ts","../packages/platform-browser/src/dom/shared_styles_host.ts","../packages/platform-browser/src/browser/generic_browser_adapter.ts","../packages/platform-browser/src/browser/server-transition.ts","../packages/platform-browser/src/browser/testability.ts","../packages/platform-browser/src/dom/debug/ng_probe.ts","../packages/platform-browser/src/dom/dom_renderer.ts","../packages/platform-browser/src/dom/events/dom_events.ts","../packages/platform-browser/src/security/dom_sanitization_service.ts","../packages/platform-browser/src/dom/events/key_events.ts","../packages/platform-browser/src/browser.ts","../packages/platform-browser/src/dom/events/hammer_gestures.ts","../packages/platform-browser/src/browser/title.ts","../packages/platform-browser/src/browser/tools/browser.ts","src/app/app-routing.module.ts","node_modules/tslib/tslib.es6.js","../src/cdk/keycodes/modifiers.ts","node_modules/rxjs/src/internal/scheduler/AsyncAction.ts","node_modules/rxjs/src/internal/scheduler/Action.ts","node_modules/rxjs/src/internal/Scheduler.ts","node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts","node_modules/rxjs/src/internal/scheduler/async.ts","node_modules/rxjs/src/internal/operators/debounceTime.ts","../src/cdk/platform/platform.ts","/home/runner/work/src/cdk/coercion/boolean-property.ts","/home/runner/work/src/cdk/coercion/array.ts","/home/runner/work/src/cdk/coercion/css-pixel-value.ts","/home/runner/work/src/cdk/coercion/element.ts","../src/cdk/platform/features/passive-listeners.ts","../src/cdk/platform/features/scrolling.ts","../src/cdk/platform/features/shadow-dom.ts","../src/cdk/platform/platform-module.ts","../src/cdk/observers/observe-content.ts","../src/cdk/a11y/aria-describer/aria-reference.ts","../src/cdk/a11y/aria-describer/aria-describer.ts","../src/cdk/a11y/key-manager/focus-key-manager.ts","../src/cdk/a11y/key-manager/list-key-manager.ts","../src/cdk/keycodes/keycodes.ts","../src/cdk/a11y/fake-mousedown.ts","../src/cdk/a11y/focus-trap/polyfill.ts","../src/cdk/a11y/focus-monitor/focus-monitor.ts","../src/cdk/a11y/a11y-module.ts","../src/cdk/a11y/high-contrast-mode/high-contrast-mode-detector.ts","../src/cdk/bidi/bidi-module.ts","../src/cdk/bidi/directionality.ts","../src/cdk/bidi/dir-document-token.ts","/home/runner/work/src/cdk/version.ts","../packages/animations/src/animation_builder.ts","../packages/animations/src/animation_metadata.ts","../packages/animations/src/util.ts","../packages/animations/src/players/animation_player.ts","../packages/animations/src/players/animation_group_player.ts","../packages/animations/browser/src/render/shared.ts","../packages/animations/src/private_export.ts","../packages/animations/browser/src/render/animation_driver.ts","../packages/animations/browser/src/util.ts","../packages/animations/browser/src/dsl/animation_transition_expr.ts","../packages/animations/browser/src/dsl/animation_ast_builder.ts","../packages/animations/browser/src/dsl/animation_timeline_instruction.ts","../packages/animations/browser/src/dsl/element_instruction_map.ts","../packages/animations/browser/src/dsl/animation_timeline_builder.ts","../packages/animations/browser/src/dsl/style_normalization/animation_style_normalizer.ts","../packages/animations/browser/src/dsl/style_normalization/web_animations_style_normalizer.ts","../packages/animations/browser/src/dsl/animation_transition_instruction.ts","../packages/animations/browser/src/dsl/animation_transition_factory.ts","../packages/animations/browser/src/dsl/animation_trigger.ts","../packages/animations/browser/src/render/timeline_animation_engine.ts","../packages/animations/browser/src/render/transition_animation_engine.ts","../packages/animations/browser/src/render/animation_engine_next.ts","../packages/animations/browser/src/render/special_cased_styles.ts","../packages/animations/browser/src/render/css_keyframes/element_animation_style_handler.ts","../packages/animations/browser/src/render/css_keyframes/css_keyframes_player.ts","../packages/animations/browser/src/render/css_keyframes/direct_style_player.ts","../packages/animations/browser/src/render/css_keyframes/css_keyframes_driver.ts","../packages/animations/browser/src/render/web_animations/web_animations_player.ts","../packages/animations/browser/src/render/web_animations/web_animations_driver.ts","../packages/platform-browser/animations/src/animation_builder.ts","../packages/platform-browser/animations/src/animation_renderer.ts","../packages/platform-browser/animations/src/providers.ts","../packages/platform-browser/animations/src/module.ts","../src/material/core/common-behaviors/common-module.ts","../src/material/core/datetime/native-date-adapter.ts","../src/material/core/common-behaviors/disabled.ts","../src/material/core/common-behaviors/color.ts","../src/material/core/common-behaviors/disable-ripple.ts","../src/material/core/ripple/ripple-ref.ts","../src/material/core/ripple/index.ts","../src/material/core/ripple/ripple.ts","../src/material/button/button-module.ts","../src/material/button/button.ts","../src/material/core/ripple/ripple-renderer.ts","node_modules/rxjs/src/internal/observable/throwError.ts","node_modules/rxjs/src/internal/observable/forkJoin.ts","../packages/common/http/src/backend.ts","../packages/common/http/src/headers.ts","../packages/common/http/src/params.ts","../packages/common/http/src/request.ts","../packages/common/http/src/response.ts","../packages/common/http/src/client.ts","../packages/common/http/src/interceptor.ts","../packages/common/http/src/xhr.ts","../packages/common/http/src/module.ts","../packages/common/http/src/xsrf.ts","../src/material/icon/icon-registry.ts","../src/material/icon/icon.ts","../src/material/icon/icon-module.ts","node_modules/rxjs/src/internal/util/Immediate.ts","node_modules/rxjs/src/internal/scheduler/AsapAction.ts","node_modules/rxjs/src/internal/scheduler/asap.ts","node_modules/rxjs/src/internal/scheduler/AsapScheduler.ts","node_modules/rxjs/src/internal/operators/takeUntil.ts","node_modules/rxjs/src/internal/Notification.ts","node_modules/rxjs/src/internal/operators/delay.ts","node_modules/rxjs/src/internal/util/isDate.ts","../src/cdk/portal/portal-directives.ts","../src/cdk/portal/portal.ts","../src/cdk/portal/dom-portal-outlet.ts","node_modules/rxjs/src/internal/observable/fromEvent.ts","node_modules/rxjs/src/internal/operators/audit.ts","node_modules/rxjs/src/internal/util/isNumeric.ts","node_modules/rxjs/src/internal/observable/timer.ts","node_modules/rxjs/src/internal/operators/auditTime.ts","node_modules/rxjs/src/internal/scheduler/QueueAction.ts","../src/cdk/scrolling/scrolling-module.ts","../src/cdk/scrolling/viewport-ruler.ts","../src/cdk/scrolling/scroll-dispatcher.ts","node_modules/rxjs/src/internal/scheduler/queue.ts","node_modules/rxjs/src/internal/scheduler/QueueScheduler.ts","node_modules/rxjs/src/internal/operators/observeOn.ts","node_modules/rxjs/src/internal/ReplaySubject.ts","../src/cdk/overlay/scroll/block-scroll-strategy.ts","../src/cdk/overlay/scroll/close-scroll-strategy.ts","../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../src/cdk/overlay/position/scroll-clip.ts","../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../src/cdk/overlay/scroll/scroll-strategy-options.ts","../src/cdk/overlay/dispatchers/overlay-outside-click-dispatcher.ts","../src/cdk/overlay/dispatchers/overlay-keyboard-dispatcher.ts","../src/cdk/overlay/dispatchers/base-overlay-dispatcher.ts","../src/cdk/overlay/overlay-container.ts","../src/cdk/overlay/overlay-config.ts","../src/cdk/overlay/position/connected-position.ts","../src/cdk/overlay/overlay-ref.ts","../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../src/cdk/overlay/position/connected-position-strategy.ts","../src/cdk/overlay/overlay.ts","../src/cdk/overlay/position/overlay-position-builder.ts","../src/cdk/overlay/overlay-module.ts","../src/cdk/overlay/position/global-position-strategy.ts","../src/cdk/overlay/overlay-directives.ts","../src/material/menu/menu-animations.ts","../src/material/menu/menu-item.ts","../src/material/menu/menu.ts","../src/material/menu/menu-module.ts","../src/material/menu/menu-trigger.ts","../src/material/toolbar/toolbar-module.ts","../src/material/toolbar/toolbar.ts","../src/cdk/layout/media-matcher.ts","../src/material/menu/menu-content.ts","../src/material/menu/menu-panel.ts","node_modules/rxjs/src/internal/operators/skip.ts","../src/cdk/layout/breakpoints-observer.ts","../src/cdk/layout/breakpoints.ts","src/app/shared/shared.module.ts","../packages/forms/src/form_providers.ts","../packages/forms/src/directives.ts","../packages/forms/src/directives/radio_control_value_accessor.ts","../src/material/tooltip/tooltip-module.ts","../src/material/tooltip/tooltip.ts","src/app/core/core.module.ts","src/app/core/services/theme/theme.service.ts","../src/material/tooltip/tooltip-animations.ts","src/app/core/services/theme/theme.configuration.ts","src/app/core/guards/module-import.guard.ts","src/app/core/components/toolbar/toolbar.component.html","src/app/core/components/toolbar/toolbar.component.ts","src/app/app.module.ts","src/app/app.component.ts","src/app/app.component.html","src/main.ts","$_lazy_route_resource lazy namespace object","node_modules/rxjs/src/internal/innerSubscribe.ts"],"names":["rxSubscriber","Symbol","Math","random","BehaviorSubject","_value","super","value","this","getValue","subscriber","subscription","closed","next","hasError","thrownError","_enable_super_gross_mode_that_will_cause_bad_things","config","Promise","error","Error","console","warn","stack","log","ArgumentOutOfRangeError","ArgumentOutOfRangeErrorImpl","call","message","name","prototype","Object","create","mergeMap","project","resultSelector","POSITIVE_INFINITY","concurrent","Number","source","pipe","a","i","b","ii","lift","MergeMapOperator","observer","subscribe","MergeMapSubscriber","destination","hasCompleted","buffer","active","index","complete","_tryNext","push","result","err","_innerSub","ish","innerSubscriber","add","innerSubscription","length","unsubscribe","innerValue","_next","shift","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","arguments","SafeSubscriber","_error","_complete","_parentOrParents","_parentSubscriber","observerOrNext","context","bind","_context","useDeprecatedSynchronousErrorHandling","__tryOrSetError","__tryOrUnsub","wrappedComplete","fn","parent","ObjectUnsubscribedError","ObjectUnsubscribedErrorImpl","from","input","scheduler","Observable","sub","Subscription","schedule","observable","isPromise","then","isArrayLike","scheduleArray","iterator","done","TypeError","subscribeTo","isArray","Array","x","connectableProto","ConnectableObservable","subjectFactory","_refCount","_isComplete","getSubject","subject","_subject","connection","_connection","ConnectableSubscriber","EMPTY","connectableObservableDescriptor","operator","writable","_subscribe","connect","refCount","connectable","_unsubscribe","empty","concat","mergeAll","of","observables","_isScalar","sink","nextOrObserver","_trySubscribe","promiseCtor","getPromiseCtor","resolve","reject","operations","fns","identity","reduce","prev","take","count","TakeOperator","total","TakeSubscriber","catchError","selector","CatchOperator","caught","CatchSubscriber","err2","_unsubscribeAndRecycle","startWith","array","pop","args","getSymbolIterator","hostReportError","setTimeout","obj","obs","subscribeToArray","promise","iterable","item","isObject","merge","last","SubjectSubscriber","Subject","observers","AnonymousSubject","len","copy","slice","SubjectSubscription","subscriberIndex","indexOf","splice","concatMap","switchMap","SwitchMapOperator","SwitchMapSubscriber","getClosureSafeProperty","objWithPropertyToExtract","key","fillProperties","target","hasOwnProperty","stringify","token","map","join","overriddenName","res","toString","newLineIndex","substring","concatStringsWithSpace","before","after","__forward_ref__","forwardRef","forwardRefFn","resolveForwardRef","type","isForwardRef","RuntimeError","code","renderStringify","String","stringifyForError","throwProviderNotFoundError","injectorName","injectorDetails","ɵɵdefineInjectable","opts","providedIn","factory","ɵɵdefineInjector","options","providers","imports","getInjectableDef","getOwnDefinition","NG_PROV_DEF","NG_INJECTABLE_DEF","field","getInjectorDef","NG_INJ_DEF","NG_INJECTOR_DEF","_injectImplementation","ɵprov","ɵinj","ngInjectableDef","ngInjectorDef","InjectFlags","setInjectImplementation","impl","previous","injectRootLimpMode","notFoundValue","flags","injectableDef","Optional","noSideEffects","ChangeDetectionStrategy","ViewEncapsulation","__globalThis","globalThis","__window","window","__self","self","WorkerGlobalScope","__global","global","_global","EMPTY_OBJ","EMPTY_ARRAY","NG_COMP_DEF","ɵcmp","NG_DIR_DEF","ɵdir","NG_PIPE_DEF","ɵpipe","NG_MOD_DEF","ɵmod","NG_LOC_ID_DEF","ɵloc","NG_FACTORY_DEF","ɵfac","NG_ELEMENT_ID","__NG_ELEMENT_ID__","_renderCompCount","ɵɵdefineComponent","componentDefinition","declaredInputs","def","providersResolver","decls","vars","template","consts","ngContentSelectors","hostBindings","hostVars","hostAttrs","contentQueries","inputs","outputs","exportAs","onPush","changeDetection","OnPush","directiveDefs","pipeDefs","selectors","viewQuery","features","data","encapsulation","Emulated","id","styles","_","setInput","schemas","tView","directiveTypes","directives","feature","pipeTypes","pipes","invertObject","forEach","extractDirectiveDef","extractPipeDef","getComponentDef","autoRegisterModuleById","ɵɵdefineNgModule","bootstrap","declarations","exports","transitiveCompileScopes","ɵɵsetNgModuleScope","scope","ngModuleDef","getNgModuleDef","secondary","newLookup","minifiedKey","publicName","declaredName","ɵɵdefineDirective","ɵɵdefinePipe","pipeDef","pure","onDestroy","ngOnDestroy","throwNotFound","isLView","isLContainer","isContentQueryHost","tNode","isComponentHost","isDirectiveHost","isComponentDef","getFactoryDef","DOCUMENT","SimpleChange","previousValue","currentValue","firstChange","ɵɵNgOnChangesFeature","NgOnChangesFeatureImpl","definition","ngOnChanges","ngOnChangesSetInput","rememberChangeHistoryAndInvokeOnChangesHook","simpleChangesStore","getSimpleChangesStore","current","instance","privateName","store","previousChange","setDocument","document","isProceduralRenderer","renderer","ngInherit","domRendererFactory3","createRenderer","hostElement","rendererType","unwrapRNode","getNativeByIndex","lView","getNativeByTNode","getTNode","load","view","getComponentLViewByIndex","nodeIndex","hostView","slotValue","readPatchedLView","isCreationMode","viewAttachedToChangeDetector","getConstant","resetPreOrderHookFlags","updateTransplantedViewCount","lContainer","amount","viewOrContainer","instructionState","lFrame","createLFrame","bindingsEnabled","isInCheckNoChangesMode","getBindingsEnabled","getLView","getTView","ɵɵrestoreView","viewToRestore","contextLView","getCurrentTNode","currentTNode","getCurrentTNodePlaceholderOk","setCurrentTNode","isParent","isCurrentTNodeParent","setCurrentTNodeAsNotParent","setIsInCheckNoChangesMode","mode","nextBindingIndex","bindingIndex","setCurrentDirectiveIndex","currentDirectiveIndex","getCurrentQueryIndex","currentQueryIndex","setCurrentQueryIndex","getDeclarationTNode","declTNode","enterDI","SkipSelf","parentTNode","parentLView","Host","allocLFrame","enterView","newView","newLFrame","firstChild","bindingStartIndex","inI18n","currentLFrame","childLFrame","child","selectedIndex","elementDepthCount","currentNamespace","bindingRootIndex","leaveViewLight","oldLFrame","leaveDI","leaveView","getSelectedIndex","setSelectedIndex","getSelectedTNode","ɵɵnamespaceSVG","registerPostOrderHooks","directiveStart","end","directiveEnd","lifecycleHooks","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","contentHooks","contentCheckHooks","viewHooks","viewCheckHooks","destroyHooks","executeCheckHooks","hooks","callHooks","executeInitAndCheckHooks","initPhase","incrementInitPhaseFlags","currentView","arr","currentNodeIndex","nodeIndexLimit","max","lastNodeIndexFound","callHook","isInitHook","hook","directive","NodeInjectorFactory","isViewProvider","injectImplementation","resolving","canSeeViewProviders","injectImpl","setUpAttributes","native","attrs","isProc","namespaceURI","attrName","attrVal","setAttribute","setAttributeNS","isAnimationProp","setProperty","isNameOnlyAttributeMarker","marker","charCodeAt","mergeHostAttrs","dst","src","srcMarker","mergeHostAttribute","key1","key2","markerInsertPosition","dstValue","hasParentInjector","parentLocation","getParentInjectorIndex","getParentInjectorView","location","startView","viewOffset","parentView","includeViewProviders","setIncludeViewProviders","v","oldValue","nextNgElementId","getOrCreateNodeInjectorForNode","existingInjectorIndex","getInjectorIndex","firstCreatePass","injectorIndex","insertBloom","blueprint","parentLoc","getParentInjectorLocation","parentIndex","parentData","footer","declarationViewOffset","lViewCursor","tViewType","diPublicInInjector","bloomHash","BLOOM_SIZE","notFoundValueOrThrow","lookupTokenUsingModuleInjector","Self","moduleInjector","previousInjectImplementation","get","getOrCreateInjectable","Default","tokenId","createNodeInjector","previousTView","hostTElementNode","shouldSearchParent","bloomHasToken","searchTokensOnInjector","NOT_FOUND","NodeInjector","currentTView","injectableIdx","locateDirectiveOrProvider","getNodeInjectable","canAccessViewProviders","isHostSpecialCase","nodeProviderIndexes","providerIndexes","tInjectables","injectablesStart","directivesStart","cptViewProvidersCount","endIndex","providerTokenOrDef","dirDef","tData","path","previousIncludeViewProviders","directiveIndex","directiveDef","ngOnInit","ngDoCheck","wrappedOnChanges","preOrderHooks","preOrderCheckHooks","injectorView","isFirstHostTNode","_tNode","_lView","ɵɵgetFactoryOf","typeAny","injectorDef","ɵɵgetInheritedFactory","ownConstructor","constructor","ownFactory","objectPrototype","getPrototypeOf","t","ɵɵinjectAttribute","attrNameToInject","classes","attrsLength","makeParamDecorator","props","parentClass","metaCtor","values","propName","ParamDecoratorFactory","apply","annotationInstance","ParamDecorator","annotation","cls","unusedKey","parameters","defineProperty","ngMetadataName","annotationCls","InjectionToken","_desc","ANALYZE_FOR_ENTRY_COMPONENTS","Type","Function","flatten","list","deepForEach","addToArray","removeFromArray","newArray","size","keyValueArrayGet","keyValueArray","keyValueArrayIndexOf","start","middle","_currentInjector","THROW_IF_NOT_FOUND","NEW_LINE","USE_VALUE","provide","useValue","setCurrentInjector","injector","former","injectInjectorOnly","ɵɵinject","inject","injectArgs","types","arg","j","meta","flag","attachInjectFlag","decorator","policy","Inject","trustedHTMLFromString","html","trustedTypes","createPolicy","createHTML","s","createScript","createScriptURL","getPolicy","SafeValueImpl","changingThisBreaksApplicationSecurity","SafeHtmlImpl","SafeStyleImpl","SafeScriptImpl","SafeUrlImpl","SafeResourceUrlImpl","unwrapSafeValue","allowSanitizationBypassAndThrow","actualType","getSanitizationBypassType","getTypeName","bypassSanitizationTrustHtml","trustedHtml","bypassSanitizationTrustStyle","trustedStyle","bypassSanitizationTrustScript","trustedScript","bypassSanitizationTrustUrl","trustedUrl","bypassSanitizationTrustResourceUrl","trustedResourceUrl","DOMParserHelper","inertDocumentHelper","body","DOMParser","parseFromString","getInertBodyElement","removeChild","InertDocumentHelper","defaultDoc","inertDocument","implementation","createHTMLDocument","inertHtml","createElement","appendChild","inertBodyElement","nextSibling","templateEl","innerHTML","inertBody","documentMode","stripCustomNsAttrs","el","elAttrs","attributes","removeAttribute","childNode","nodeType","Node","ELEMENT_NODE","SAFE_URL_PATTERN","DATA_URL_PATTERN","_sanitizeUrl","url","match","tagSet","tags","split","sets","inertBodyHelper","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","SanitizingHtmlSerializer","sanitizedSomething","buf","nextNode","traverseContent","startElement","TEXT_NODE","chars","nodeValue","endElement","checkClobberedElement","parentNode","element","tagName","nodeName","toLowerCase","srcset","elAttr","lower","trim","encodeEntities","node","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","replace","_sanitizeHtml","unsafeHtmlInput","unsafeHtml","mXSSAttempts","parsedHtml","sanitizeChildren","getTemplateContent","content","SecurityContext","ɵɵsanitizeUrl","unsafeUrl","sanitizer","sanitize","URL","getDebugContext","getOriginalError","defaultErrorLogger","ErrorHandler","_console","e","originalError","_findOriginalError","_findContext","errorLogger","attachPatchData","defaultScheduler","requestAnimationFrame","ɵɵresolveBody","ownerDocument","maybeUnwrapFn","RendererStyleFlags2","icuContainerIterate","tIcuContainerNode","getLViewParent","getFirstLContainer","getNearestLContainer","getNextLContainer","container","applyToElementOrContainer","action","lNodeToHandle","beforeNode","isComponent","rNode","nativeAppendChild","nativeInsertBefore","isHostElement","nativeParent","nativeParentNode","destroyNode","parentRElement","anchor","applyView","createElementNode","namespace","createElementNS","detachMovedView","declarationContainer","movedViews","declarationViewIndex","insertionLContainer","detachView","removeIndex","indexInContainer","viewToDetach","declarationLContainer","removedLView","lQueries","destroyLView","rootView","lViewOrLContainer","cleanUpView","firstView","toCall","tCleanup","cleanup","lCleanup","lastLCleanupIndex","idxOrTargetGetter","listener","useCaptureOrSubIdx","removeEventListener","destroy","getParentRElement","None","isMove","insertBefore","nativeAppendOrInsertBefore","getInsertInFrontOfRNode","_getInsertInFrontOfRNodeWithI18n","childRNode","childTNode","parentRNode","anchorNode","getFirstNativeNode","tNodeType","getBeforeNodeForView","elIcuContainerChild","rNodeOrLContainer","projectionNodes","getProjectionNodes","projection","viewIndexInContainer","nextViewIndex","firstTNodeOfView","applyNodes","isProjection","rawSlotValue","nextRNode","applyProjectionRecursive","projectionNext","tProjectionNode","componentLView","nodeToProjectOrRNodes","writeDirectStyle","newValue","style","cssText","writeDirectClass","className","classIndexOf","classToSearch","startingIndex","foundIndex","isCssClassMatching","cssClassToMatch","isProjectionMode","isInlineTemplate","hasTagAndTypeMatch","currentSelector","isNodeMatchingSelector","nodeAttrs","nameOnlyMarkerIdx","skipToNextSelector","isPositive","selectorAttrValue","attrIndexInNode","findAttrIndexInNode","nodeAttrValue","compareAgainstClassName","bindingsMode","maybeAttrName","attr","isNodeMatchingSelectorList","isSelectorInSelectorList","selectorListLoop","currentSelectorInList","maybeWrapInNotSelector","isNegativeMode","chunk","stringifyCSSSelector","currentChunk","valueOrMarker","attrValue","NO_CHANGE","ɵɵadvance","delta","selectIndexInternal","checkNoChangesMode","toTStylingRange","getTStylingRangePrev","tStylingRange","setTStylingRangePrevDuplicate","getTStylingRangeNext","setTStylingRangeNext","setTStylingRangeNextDuplicate","refreshContentQueries","queryStartIdx","directiveDefIdx","createLView","host","tHostNode","rendererFactory","getOrCreateTNode","tParent","insertBeforeIndex","directiveStylingLast","propertyBindings","mergedAttrs","localNames","initialInputs","tViews","stylesWithoutHost","residualStyles","classesWithoutHost","residualClasses","classBindings","styleBindings","allocExpando","numSlotsToAlloc","initialValue","allocIdx","renderView","executeViewQueryFn","templateFn","executeTemplate","staticContentQueries","staticViewQueries","components","hostLView","renderComponent","incompleteFirstPass","refreshView","isInCheckNoChangesPass","hooksInitPhaseCompleted","movedLView","embeddedLView","embeddedTView","hostBindingOpCodes","opCode","directiveIdx","bindingRootIndx","hostBindingFn","refreshComponent","firstUpdatePass","renderComponentOrTemplate","normalExecutionPath","creationModeIsActive","begin","rf","prevSelectedIndex","createDirectivesInstances","addComponentLogic","setInputsFromAttrs","elementIndex","dirIndex","invokeHostBindingsInCreationMode","saveResolvedLocalsInData","viewData","localRefExtractor","localIndex","getOrCreateTComponentView","createTView","constsOrFactory","initialViewLength","queries","fill","expandoStartIndex","directiveRegistry","pipeRegistry","storeCleanupWithContext","cleanupFn","getOrCreateLViewCleanup","getOrCreateTViewCleanup","generatePropertyAliases","inputAliasMap","propStore","internalName","elementPropertyInternal","nativeOnly","dataValue","inputData","setInputsForProperty","viewIndex","childComponentLView","resolveDirectives","localRefs","hasDirectives","registry","matches","markAsComponentHost","unshift","exportsMap","initTNodeFlags","preOrderHooksFound","preOrderCheckHooksFound","configureViewWithDirective","saveNameToExportMap","lifeCycleHooks","tViewData","tNodeAttrs","inputsFromAttrs","inputsStore","outputsStore","directiveInputs","generateInitialInputs","registerHostBindingOpCodes","directiveVarsIdx","elementIndx","hostTNode","numberOfDirectives","directiveFactory","nodeInjectorFactory","componentView","addToViewTree","initialInputData","inputsToStore","createLContainer","hostNative","componentHostIdx","refreshContainsDirtyView","componentTView","markViewDirty","detectChangesInternal","handleError","detectChangesInRootView","rootContext","rootComponent","viewQueryFn","component","CLEAN_PROMISE","errorHandler","computeStaticStyling","writeToHost","NULL_INJECTOR","INJECTOR","NullInjector","INJECTOR_SCOPE","NOT_YET","CIRCULAR","getNullInjector","createInjectorWithoutInjectorInstances","defType","additionalProviders","R3Injector","records","Map","injectorDefTypes","Set","_destroyed","dedupStack","provider","processProvider","processInjectorType","set","makeRecord","record","assertNotDestroyed","service","clear","previousInjector","injectableDefInScope","injectableDefOrInjectorDefFactory","hydrate","injectorErrorName","tokenPath","text","charAt","substr","parts","JSON","tokens","defOrWrappedDef","parents","ngModule","isDuplicate","importTypesWithProviders","imported","defProviders","injectorType","ngModuleType","isTypeProvider","isValueProvider","providerToFactory","multi","multiRecord","has","paramLength","inheritedInjectableDef","typeName","unwrappedProvider","useFactory","deps","useExisting","classRef","useClass","INJECTOR_IMPL","_resolveInjectorDefTypes","Injector","NULL","LifecycleHooksFeature","ɵɵInheritDefinitionFeature","superType","shouldInheritFields","inheritanceChain","superDef","writeableDef","maybeUnwrapEmpty","superHostBindings","inheritHostBindings","superViewQuery","superContentQueries","inheritViewQuery","inheritContentQueries","animation","defData","prevViewQuery","ctx","prevContentQueries","prevHostBindings","_symbolIterator","keys","getOwnPropertyNames","WrappedValue","wrapped","isWrapped","isListLikeIterable","isJsObject","o","bindingUpdated","is","ɵɵattribute","strValue","interpolation1","prefix","v0","suffix","ɵɵtemplate","attrsIndex","localRefsIndex","adjustedIndex","tViewConsts","comment","createComment","ɵɵreference","ɵɵdirectiveInject","ɵɵproperty","setDirectiveInputsWhichShadowsStyling","isClassBased","property","ɵɵelementStart","elementStart","ɵɵelementEnd","elementEnd","ɵɵelement","ɵɵgetCurrentView","isSubscribable","isObservable","ɵɵlistener","eventName","listenerFn","eventTargetResolver","useCapture","isTNodeDirectiveHost","processOutputs","resolved","lCleanupIndex","existingListener","tNodeIdx","cleanupEventName","listenerIdxInLCleanup","__ngLastListenerFn__","__ngNextListenerFn__","wrapListener","listen","addEventListener","propsLength","idx","executeListenerWithErrorHandling","wrapWithPreventDefault","wrapListenerIn_markDirtyAndPreventDefault","nextListenerFn","preventDefault","returnValue","ɵɵnextContext","level","nestingLevel","matchingProjectionSlotIndex","projectionSlots","wildcardNgContentIndex","ngProjectAsAttrVal","ngProjectAsAttrIdx","ɵɵprojectionDef","componentNode","projectionHeads","tails","componentChild","slotIndex","ɵɵprojection","selectorIndex","ɵɵpropertyInterpolate","ɵɵpropertyInterpolate1","interpolatedValue","markDuplicates","tStylingKey","isPrevDir","isClassBinding","tStylingAtIndex","isMap","cursor","foundDuplicate","tStyleRangeAtCursor","isStylingMatch","tStylingKeyCursor","ɵɵstyleProp","prop","checkStylingProperty","ɵɵclassProp","isHostBindings","stylingKey","hostDirectiveDef","residual","collectStylingFromTAttrs","collectStylingFromDirectives","templateStylingKey","bindings","tStylingKeyWithStatic","isHostBinding","tBindings","tmplHead","tmplTail","isKeyDuplicateOfStatic","staticKeyValueArray","previousNode","tRange","isStylingValuePresent","findStylingValue","isProcedural","addClass","classList","removeClass","remove","DashCase","removeStyle","removeProperty","isImportant","endsWith","Important","setStyle","currentDirective","desiredMarker","currentMarker","value1","value2","isPrevDirection","rawKey","containsStatics","isStylingMap","valueAtLViewIndex","ɵɵtext","textNative","createText","createTextNode","ɵɵtextInterpolate","ɵɵtextInterpolate1","interpolated","setValue","textContent","ɵɵhostProperty","u","n","floor","abs","LOCALE_DATA","registerLocaleData","localeId","extraData","LocaleDataIndex","LocaleId","ExtraData","findLocaleData","locale","normalizedLocale","getLocaleData","parentLocale","localeEn","getLocaleCurrencyCode","CurrencyCode","getLocalePluralCase","PluralCase","ng","common","locales","setLocaleId","actual","msg","expected","comparison","resolveProvider","lInjectablesBlueprint","providerFactory","beginIndex","existingFactoryIndex","registerDestroyHooksIfSupported","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesProvidersFactoryExist","doesViewProvidersFactoryExist","factoryFn","f","componentProviders","multiFactoryAdd","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","contextIndex","indexInFactory","providerIsTypeProvider","existingCallbacksIndex","multiFactory","isComponentProvider","lData","multiResolve","factories","componentCount","multiProviders","ɵɵProvidersFeature","viewProviders","processProvidersFn","ComponentFactory","_NullComponentFactoryResolver","ComponentFactoryResolver","noop","createElementRef","ElementRef","SWITCH_ELEMENT_REF_FACTORY","nativeElement","unwrapElementRef","RendererFactory2","Renderer2","SWITCH_RENDERER2_FACTORY","nodeAtIndex","Sanitizer","Version","full","major","minor","patch","VERSION","DefaultIterableDifferFactory","trackByFn","DefaultIterableDiffer","trackByIdentity","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","_removalsTail","_identityChangesHead","_identityChangesTail","_trackByFn","nextIt","nextRemove","addRemoveOffset","moveOffsets","currentIndex","getPreviousIndex","adjPreviousIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","offset","_nextPrevious","_nextAdded","_nextMoved","_nextIdentityChange","collection","check","_reset","itemTrackBy","mayBeDirty","trackById","_verifyReinsertion","_addIdentityChange","_mismatch","_truncate","isDirty","previousRecord","_prev","_remove","_reinsertAfter","_moveAfter","_addAfter","IterableChangeRecord_","reinsertRecord","_addToMoves","nextRecord","_addToRemovals","_unlink","prevRecord","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","_prevDup","_nextDup","_DuplicateItemRecordList","_head","_tail","atOrAfterIndex","duplicates","recordList","moveOffset","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_records","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","k","_nextChanged","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","KeyValueChangeRecord_","_addToAdditions","_addToChanges","defaultIterableDiffersFactory","IterableDiffers","find","supports","copied","defaultKeyValueDiffersFactory","KeyValueDiffers","kv","collectNativeNodes","lNode","lViewInAContainer","lViewFirstChildTNode","nodesInSlot","ViewRef","_cdRefInjectingView","_appRef","_attachedToViewContainer","appRef","viewRefs","callback","RootViewRef","_view","SWITCH_CHANGE_DETECTOR_REF_FACTORY","injectChangeDetectorRef","ChangeDetectorRef","__ChangeDetectorRef__","isPipe","R3_ViewRef","keyValDiff","defaultIterableDiffers","defaultKeyValueDiffers","SWITCH_TEMPLATE_REF_FACTORY","createTemplateRef","TemplateRef","R3TemplateRef","_declarationLView","_declarationTContainer","elementRef","declarationViewLQueries","createEmbeddedView","NgModuleRef","NgModuleFactory","SWITCH_VIEW_CONTAINER_REF_FACTORY","createContainerRef","ViewContainerRef","R3ViewContainerRef","_lContainer","_hostTNode","_hostLView","getViewRefs","templateRef","viewRef","insert","componentFactory","projectableNodes","ngModuleRef","contextInjector","parentInjector","componentRef","prevIdx","detach","prevLContainer","prevVCRef","adjustedIdx","_adjustIndex","containerLength","insertView","parentNativeNode","attachToViewContainerRef","getOrCreateViewRefs","newIndex","viewRefsArr","detachedView","R3ViewRef","commentNode","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","componentDef","viewEngine_ComponentFactoryResolver","toRefArray","nonMinified","templateName","SCHEDULER","componentType","isBoundToModule","tElementNode","rootSelectorOrNode","rootViewInjector","hostRenderer","elementName","hostRNode","elementOrSelector","selectRootElement","ShadowDom","rElement","querySelector","rootFlags","clean","playerHandler","rootTView","rootLView","viewRenderer","nodesforSlot","hostFeatures","rootTNode","ComponentRef","viewEngine_ComponentFactory","_rootLView","changeDetectorRef","modules","_parent","_bootstrapComponents","destroyCbs","componentFactoryResolver","ngLocaleIdDef","_r3Injector","viewEngine_NgModuleRef","injectFlags","destroyed","moduleType","visited","recurse","incoming","viewEngine_NgModuleFactory","ɵɵpipe","pipeName","pipeFactory","pipeInstance","ɵɵpipeBind1","slotOffset","v1","unwrap","bindingRoot","pureFn","exp","thisArg","returnValueIndex","lastReturnValue","transform","EventEmitter","isAsync","__isAsync","schedulerFn","errorFn","completeFn","symbolIterator","_results","QueryList","_emitDistinctChangesOnly","dirty","_changesDetected","_changes","first","symbol","proto","filter","init","some","resultsTree","identityAccessor","newResultFlat","valueA","valueB","emit","changes","LQuery_","queryList","setDirty","LQueries_","tQueries","noOfInheritedQueries","viewLQueries","tQuery","getByIndex","indexInDeclarationView","clone","dirtyQueriesWithMatches","getTQuery","TQueryMetadata_","predicate","read","TQueries_","tquery","queriesForTemplateRef","childQueryIndex","tqueryClone","TQuery_","metadata","crossesNgTemplate","_appliesToNextNode","_declarationNodeIndex","matchIdx","isApplyingToNode","matchTNode","addMatch","declarationNodeIdx","matchTNodeWithReadOption","getIdxOfMatchingSelector","ViewEngine_TemplateRef","nodeMatchIdx","ViewEngine_ElementRef","directiveOrProviderIdx","createResultForNode","matchingIdx","materializeViewResults","queryIndex","lQuery","tQueryMatches","matchedNodeIdx","collectQueryResults","lViewResults","embeddedLViews","ɵɵqueryRefresh","reset","notifyOnChanges","ɵɵviewQuery","createTQuery","createLQuery","ɵɵcontentQuery","tViewContentQueries","ɵɵloadQuery","track","ɵɵinjectPipeChangeDetectorRef","APP_INITIALIZER","ApplicationInitStatus","appInits","initialized","donePromise","rej","asyncInitPromises","initResult","all","APP_ID","APP_ID_RANDOM_PROVIDER","_randomChar","fromCharCode","PLATFORM_INITIALIZER","PLATFORM_ID","APP_BOOTSTRAP_LISTENER","Console","LOCALE_ID","DEFAULT_CURRENCY_CODE","ModuleWithComponentFactories","ngModuleFactory","componentFactories","Compiler_compileModuleSync__POST_R3__","NgModuleFactoryR3","Compiler_compileModuleSync","Compiler_compileModuleAsync","Compiler_compileModuleAndAllComponentsSync__POST_R3__","declaration","ComponentFactoryR3","Compiler_compileModuleAndAllComponentsSync","Compiler_compileModuleAndAllComponentsAsync","Compiler","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","scheduleMicroTask","Zone","NgZone","zone","delayChangeDetectionForEventsDelegate","enableLongStackTrace","shouldCoalesceEventChangeDetection","shouldCoalesceRunChangeDetection","hasPendingMacrotasks","hasPendingMicrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","onError","assertZonePatched","_nesting","_outer","_inner","fork","lastRequestAnimationFrameId","nativeRequestAnimationFrame","nativeCancelAnimationFrame","unpatchedRequestAnimationFrame","__symbol__","unpatchedCancelAnimationFrame","fakeTopEventTask","root","scheduleEventTask","updateMicroTaskStatus","checkStable","invoke","properties","onInvokeTask","delegate","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","onHasTask","hasTaskState","hasTask","change","_hasPendingMicrotasks","microTask","macroTask","onHandleError","runOutsideAngular","run","EMPTY_PAYLOAD","runTask","cancelTask","runGuarded","isInAngularZone","NoopNgZone","Testability","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","taskTrackingZone","_watchAngularEvents","assertNotInAngularZone","_runCallbacksIfReady","cb","clearTimeout","timeoutId","doneCb","pending","getPendingTasks","updateCb","macroTasks","creationLocation","timeout","addCallback","using","exactMatch","TestabilityRegistry","_applications","_testabilityGetter","addToWindow","findInAncestors","testability","elem","findTestabilityInTree","setTestabilityGetter","getter","_platform","_NoopGetTestability","_devMode","_runModeLocked","isDevMode","enableProdMode","ALLOW_MULTIPLE_PLATFORMS","NgProbeToken","createPlatformFactory","parentPlatformFactory","desc","extraProviders","platform","getPlatform","injectedProviders","PlatformRef","inits","requiredToken","_injector","_modules","_destroyListeners","moduleFactory","ngZoneOption","extra","ngZone","ngZoneEventCoalescing","ngZoneRunCoalescing","ngZoneInjector","moduleRef","exceptionHandler","initStatus","runInitializers","_moduleDoBootstrap","compilerOptions","optionsReducer","R3NgModuleFactory","bootstrapModuleFactory","ApplicationRef","ngDoBootstrap","module","objs","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_bootstrapListeners","_views","_runningTick","_stable","componentTypes","_onMicrotaskEmptySubscription","tick","isCurrentlyStable","stableSub","unstableSub","assertInAngularZone","componentOrFactory","resolveComponentFactory","compRef","testabilityRegistry","registerApplication","unregisterApplication","_loadComponent","detectChanges","attachToAppRef","detachFromAppRef","attachView","NgModuleFactoryLoader","SystemJsNgModuleLoaderConfig","DEFAULT_CONFIG","factoryPathPrefix","factoryPathSuffix","SystemJsNgModuleLoader","_compiler","_config","exportName","loadAndCompile","checkNotEmpty","factoryClassSuffix","modulePath","getDebugNodeR2","_nativeNode","platformCore","APPLICATION_MODULE_PROVIDERS","queue","$localize","ApplicationModule","outerValue","outerIndex","innerIndex","innerSub","notifyNext","notifyError","notifyComplete","subscribeToResult","outerSubscriber","NONE","combineLatest","isScheduler","fromArray","CombineLatestOperator","toRespond","unused","_outerValue","_tryResultSelector","MapOperator","MapSubscriber","isFunction","finalize","FinallyOperator","FinallySubscriber","_DOM","getDOM","setRootDomAdapter","adapter","DomAdapter","PlatformLocation","useBrowserPlatformLocation","BrowserPlatformLocation","LOCATION_INITIALIZED","_doc","_init","state","getLocation","_history","getHistory","getBaseHref","getGlobalEventTarget","href","protocol","hostname","port","pathname","newPath","search","hash","title","supportsState","pushState","replaceState","forward","back","history","createBrowserPlatformLocation","joinWithSlash","slashes","startsWith","stripTrailingSlash","pathEndIdx","normalizeQueryParams","params","LocationStrategy","provideLocationStrategy","platformLocation","PathLocationStrategy","origin","APP_BASE_HREF","_platformLocation","getBaseHrefFromDOM","_baseHref","onPopState","onHashChange","internal","includeHash","queryParams","externalUrl","prepareExternalUrl","HashLocationStrategy","Location","platformStrategy","_urlChangeListeners","_platformStrategy","browserBaseHref","_stripIndexHtml","ev","onReturn","normalize","getState","query","baseHref","_notifyUrlChangeListeners","_urlChangeSubscription","onNext","onThrow","createLocation","Plural","NgLocalization","NgLocaleLocalization","Zero","One","Two","Few","Many","parseCookieValue","cookieStr","encodeURIComponent","cookie","eqIndex","cookieName","cookieValue","decodeURIComponent","NgClass","_iterableDiffers","_keyValueDiffers","_ngEl","_renderer","_iterableDiffer","_keyValueDiffer","_initialClasses","_rawClass","klass","_removeClasses","_applyClasses","iterableChanges","diff","_applyIterableChanges","keyValueChanges","_applyKeyValueChanges","forEachAddedItem","_toggleClass","forEachChangedItem","forEachRemovedItem","rawClassVal","enabled","NgForOfContext","$implicit","ngForOf","even","NgForOf","_viewContainer","_template","_differs","_ngForOf","_ngForOfDirty","_differ","ngForTrackBy","_applyChanges","insertTuples","forEachOperation","adjustedPreviousIndex","tuple","RecordViewTuple","move","_perViewChange","ilen","forEachIdentityChange","dir","NgIf","NgIfContext","_thenTemplateRef","_elseTemplateRef","_thenViewRef","_elseViewRef","condition","ngIf","_updateView","assertTemplate","SubscribableStrategy","async","updateLatestValue","_promiseStrategy","PromiseStrategy","_subscribableStrategy","AsyncPipe","_ref","_latestValue","_subscription","_obj","_strategy","markForCheck","_dispose","_selectStrategy","createSubscription","_updateLatestValue","dispose","CommonModule","PLATFORM_BROWSER_ID","isPlatformBrowser","platformId","ViewportScroller","BrowserViewportScroller","supportsScrolling","pageXOffset","pageYOffset","position","scrollTo","elSelected","getElementById","getElementsByName","scrollToElement","attemptFocus","scrollRestoration","supportScrollRestoration","rect","getBoundingClientRect","left","top","focusTarget","focus","activeElement","scrollRestorationDescriptor","getScrollRestorationProperty","getOwnPropertyDescriptor","FilterOperator","FilterSubscriber","UnsubscriptionError","UnsubscriptionErrorImpl","errors","_subscriptions","_ctorUnsubscribe","flattenUnsubscriptionErrors","teardown","tmp","subscriptions","subscriptionIndex","errs","EmptyError","EmptyErrorImpl","defer","observableFactory","scan","accumulator","seed","hasSeed","ScanOperator","_seed","takeLast","ring","throwIfEmpty","defaultErrorFactory","errorFactory","ThrowIfEmptyOperator","hasValue","defaultIfEmpty","defaultValue","DefaultIfEmptyOperator","isEmpty","hasDefaultValue","RouterEvent","NavigationStart","navigationTrigger","restoredState","NavigationEnd","urlAfterRedirects","NavigationCancel","reason","NavigationError","RoutesRecognized","GuardsCheckStart","GuardsCheckEnd","shouldActivate","ResolveStart","ResolveEnd","RouteConfigLoadStart","route","RouteConfigLoadEnd","ChildActivationStart","snapshot","routeConfig","ChildActivationEnd","ActivationStart","ActivationEnd","Scroll","routerEvent","ParamsAsMap","convertToParamMap","navigationCancelingError","defaultUrlMatcher","segments","segmentGroup","pathMatch","hasChildren","posParams","part","segment","consumed","shallowEqual","k1","k2","equalArraysOrString","aSorted","sort","bSorted","every","val","wrapIntoObservable","containsTree","containee","exact","equalSegmentGroups","containsSegmentGroup","equalPath","numberOfChildren","c","children","containsSegmentGroupHelper","containeePaths","UrlTree","fragment","_queryParamMap","DEFAULT_SERIALIZER","serialize","UrlSegmentGroup","serializePaths","UrlSegment","_parameterMap","serializePath","as","bs","UrlSerializer","DefaultUrlSerializer","p","UrlParser","parseRootSegment","parseQueryParams","parseFragment","tree","strParams","serializeSegment","encodeUriQuery","encodeURI","primary","childOutlet","encodeUriString","encodeUriSegment","decode","decodeQuery","SEGMENT_RE","matchSegments","str","QUERY_PARAM_RE","QUERY_PARAM_VALUE_RE","remaining","consumeOptional","peekStartsWith","parseChildren","parseQueryParam","parseSegment","capture","parseParens","parseMatrixParams","parseParam","valueMatch","decodedKey","decodedVal","currentVal","allowPrimary","outletName","Tree","_root","pathFromRoot","findNode","findPath","cc","TreeNode","nodeChildrenAsMap","outlet","RouterState","setRouterState","createEmptyState","urlTree","activated","ActivatedRouteSnapshot","RouterStateSnapshot","emptyUrl","emptyParams","emptyData","emptyQueryParams","futureSnapshot","_futureSnapshot","_routerState","_paramMap","inheritedParamsDataResolve","paramsInheritanceStrategy","inheritingStartingFrom","curr","_resolvedData","urlSegment","lastPathIndex","_urlSegment","_lastPathIndex","_resolve","serializeNode","advanceActivatedRoute","currentSnapshot","nextSnapshot","equalParamsAndUrlSegments","createNode","routeReuseStrategy","prevState","shouldReuseRoute","detachedRouteHandle","retrieve","setFutureSnapshotsOfActivatedRoutes","isMatrixParams","command","outlets","segmentPath","isCommandWithOutlets","oldSegmentGroup","newSegmentGroup","qp","replaceSegment","oldSegment","newSegment","Navigation","isAbsolute","numberOfDoubleDots","commands","cmdWithOutlet","Position","processChildren","updateSegmentGroup","startIndex","updateSegmentGroupChildren","m","currentCommandIndex","currentPathIndex","noMatch","pathIndex","commandIndex","compare","slicedCommands","g","createNewSegmentGroup","paths","createNewSegmentChildren","ActivateRoutes","futureState","currState","forwardEvent","parentContexts","futureRoot","currRoot","deactivateChildRoutes","activateChildRoutes","futureNode","currNode","contexts","futureChild","childOutletName","deactivateRoutes","childName","deactivateRouteAndItsChildren","parentContext","future","getContext","shouldDetach","detachAndStoreRouteSubtree","deactivateRouteAndOutlet","onOutletDeactivated","deactivate","activateRoutes","getOrCreateContext","shouldAttach","stored","onOutletReAttached","attachRef","attach","advanceActivatedRouteNodeAndItsChildren","_loadedConfig","cmpFactoryResolver","resolver","activateWith","LoadedRouterConfig","routes","isUrlTree","INITIAL_VALUE","prioritizedGuardValue","acc","isPending","innerAcc","ɵEmptyOutletComponent","validateConfig","parentPath","validateNode","getFullPath","fullPath","currentRoute","standardizeConfig","r","loadChildren","EmptyOutletComponent","getOutlet","sortByMatchingOutlets","sortedConfig","matched","consumedSegments","lastChild","positionalParamSegments","matcher","slicedSegments","relativeLinkResolution","emptyPathMatch","primarySegment","_sourceSegment","_segmentIndexShift","isImmediateMatch","rawSegment","noLeftoversInUrl","NoMatch","AbsoluteRedirect","absoluteRedirect","newTree","namedOutletsRedirect","redirectTo","configLoader","urlSerializer","allowRedirects","redirectToUrlSegment","splitGroup","rootSegmentGroup","expandSegmentGroup","createUrlTree","squashSegmentGroup","noMatchError","rootCandidate","expandChildren","expandSegment","childOutlets","sortedRoutes","expandedChild","expandSegmentAgainstRoute","matchSegmentAgainstRoute","expandSegmentAgainstRouteUsingRedirect","expandWildCardWithParamsAgainstRouteUsingRedirect","expandRegularSegmentAgainstRouteUsingRedirect","applyRedirectCommands","lineralizeSegments","newSegments","group","rawSegmentGroup","cfg","rawSlicedSegments","getChildConfig","routerConfig","childModule","childConfig","splitSegmentGroup","matchedOnOutlet","cs","runCanLoadGuards","shouldLoadResult","canLoad","canLoadObservables","injectionToken","guardVal","guard","tap","applyRedirectCreatreUrlTree","parse","newRoot","createSegmentGroup","createQueryParams","redirectToParams","actualParams","sourceName","updatedSegments","createSegments","redirectToSegments","actualSegments","findPosParam","findOrReturn","pos","newChildren","childCandidate","CanActivate","CanDeactivate","getAllRouteGuards","getChildRouteGuards","getToken","futurePath","checks","canDeactivateChecks","canActivateChecks","prevChildren","shouldRun","runGuardsAndResolvers","isActivated","newObservableError","Recognizer","rootComponentType","processSegmentGroup","freeze","rootNode","routeState","inheritParamsAndData","routeNode","processSegment","outletChildren","mergedChildren","nodes","hasEmptyPathConfig","duplicateEmptyPathNode","resultNode","localeCompare","processSegmentAgainstRoute","getData","getSourceSegmentGroup","getPathIndexShift","getResolve","switchTap","nextResult","DefaultRouteReuseStrategy","detachedTree","ROUTES","loader","compiler","onLoadStartListener","onLoadEndListener","_loader$","loadRunner","loadModuleFactory","OutletContext","ChildrenOutletContexts","DefaultUrlHandlingStrategy","newUrlPart","wholeUrl","defaultErrorHandler","defaultMalformedUriErrorHandler","defaultRouterHook","runExtras","RouterLinkWithHref","Router","rootContexts","lastSuccessfulNavigation","currentNavigation","disposed","lastLocationChangeInfo","navigationId","isNgZoneEnabled","events","malformedUriErrorHandler","navigated","lastSuccessfulId","beforePreactivation","afterPreactivation","urlHandlingStrategy","onSameUrlNavigation","urlUpdateStrategy","resetConfig","currentUrlTree","rawUrlTree","browserUrlTree","triggerEvent","routerState","transitions","currentRawUrl","extractedUrl","extract","rawUrl","extras","targetSnapshot","currentRouterState","targetRouterState","guards","guardsResult","navigations","setupNavigations","processNavigations","eventsSubject","completed","errored","initialUrl","trigger","previousNavigation","urlTransition","shouldProcessUrl","transition","serializeUrl","finalUrl","serializer","recognize","skipLocationChange","setBrowserUrl","replaceUrl","routesRecognized","navStart","appliedUrlTree","guardsStart","futureRSS","currRSS","currARS","canDeactivate","canDeactivateObservables","futureARS","canActivateChildGuardsMapped","reverse","canActivateChild","d","guardsMapped","canActivate","canActivateObservables","evt","guardsEnd","resetUrlToCurrentUrlTree","navCancel","resolveStart","dataResolved","canActivateChecksResolved","resolvedData","resolveEnd","activate","redirecting","resetStateAndUrl","mergedTree","scheduleNavigation","navError","ee","getTransition","setUpLocationChangeListener","navigateByUrl","locationSubscription","event","currentChange","extractLocationChangeInfoFromEvent","shouldScheduleNavigation","stateCopy","parseUrl","transitionId","sameDestination","navigationExtras","relativeTo","queryParamsHandling","preserveFragment","q","removeEmptyProps","nav","cmd","cmdIdx","urlPart","partIndex","toRoot","startingPosition","modifier","ci","dd","priorPromise","lastNavigation","browserNavPrecededByRouterNav","duplicateNav","setTransition","isCurrentPathEqualTo","go","storedState","storedUrl","router","locationStrategy","onChanges","updateTargetUrlAndHref","button","ctrlKey","shiftKey","altKey","metaKey","attrBoolValue","RouterOutlet","RouterScroller","RouterPreloader","changeDetector","_activatedRoute","activateEvents","deactivateEvents","onChildOutletCreated","onChildOutletDestroyed","cmp","ref","activatedRoute","childContexts","OutletInjector","createComponent","PreloadingStrategy","moduleLoader","preloadingStrategy","preload","processRoutes","preloadConfig","viewportScroller","lastId","lastSource","restoredId","scrollPositionRestoration","anchorScrolling","setHistoryScrollRestoration","routerEventsSubscription","createScrollEvents","scrollEventsSubscription","consumeScrollEvents","getScrollPosition","scheduleScrollEvent","scrollToPosition","scrollToAnchor","ROUTER_CONFIGURATION","ROUTER_FORROOT_GUARD","ROUTER_PROVIDERS","enableTracing","dom","logGroup","logGroupEnd","routerNgProbeToken","RouterModule","provideRoutes","provideForRootGuard","createRouterScroller","getAppInitializer","ROUTER_INITIALIZER","getBootstrapListener","scrollOffset","setOffset","platformLocationStrategy","useHash","RouterInitializer","initNavigation","resultOfPreactivationDone","initialNavigation","bootstrappedComponentRef","preloader","routerScroller","setUpPreloading","resetRootComponentType","appInitializer","bootstrapListener","DoOperator","_tapNext","_tapError","_tapComplete","shareSubjectFactory","share","subjectOrSubjectFactory","RefCountOperator","refCounter","RefCountSubscriber","sharedConnection","urlParsingNode","EventManager","DomSharedStylesHost","SharedStylesHost","groupEnd","dispatchEvent","doc","getDefaultDocument","DocumentFragment","baseElement","getAttribute","navigator","userAgent","performance","now","Date","getTime","TRANSITION_ID","SERVER_TRANSITION_PROVIDERS","querySelectorAll","getAllTestabilities","getAllRootElements","testabilities","didWork","decrement","didWork_","whenStable","getTestability","isShadowRoot","parentElement","EVENT_MANAGER_PLUGINS","plugins","_eventNameToPlugin","manager","_plugins","handler","_findPluginFor","addGlobalEventListener","plugin","_stylesSet","additions","onStylesAdded","_hostNodes","_styleNodes","head","styleNode","styleEl","hostNode","_addStylesToHost","NAMESPACE_URIS","COMPONENT_REGEX","flattenStyles","compId","decoratePreventDefault","eventHandler","DomRendererFactory2","DomEventsPlugin","DomSanitizerImpl","DomSanitizer","KeyEventsPlugin","BrowserModule","eventManager","sharedStylesHost","appId","rendererByCompId","defaultRenderer","EmulatedEncapsulationDomRenderer2","applyToHost","ShadowDomRenderer","addStyles","newChild","refChild","oldChild","selectorOrNode","preserveContent","namespaceUri","removeAttributeNS","contentAttr","hostAttr","hostEl","shadowRoot","attachShadow","addHost","removeHost","nodeOrShadowRoot","MODIFIER_KEYS","_keyMap","_chromeNumKeyPadMap","MODIFIER_KEY_GETTERS","keyName","parseEventName","parsedEvent","outsideHandler","eventCallback","getZone","onAndCancel","domEventName","_normalizeKey","fullKey","modifierName","keyIdentifier","parseInt","getEventFullKey","HTML","allowSanitizationBypassOrThrow","STYLE","SCRIPT","RESOURCE_URL","INTERNAL_BROWSER_PLATFORM_PROVIDERS","makeCurrent","platformBrowser","BROWSER_MODULE_PROVIDERS","parentModule","createTitle","Title","newTitle","AppRoutingModule","generator","aboutModule","AboutModule","P","fulfilled","step","rejected","forRoot","hasModifierKey","modifiers","work","delay","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","_execute","errorValue","actions","Scheduler","SchedulerAction","scheduled","execute","debounceTime","dueTime","DebounceTimeOperator","debouncedSubscription","lastValue","clearDebounce","dispatchNext","debouncedNext","hasV8BreakIterator","coerceBooleanProperty","coerceArray","coerceCssPixelValue","coerceElement","elementOrRef","Intl","v8BreakIterator","supportsPassiveEvents","scrollBehaviorSupported","shadowDomIsSupported","PlatformModule","Platform","_platformId","isBrowser","EDGE","test","TRIDENT","BLINK","chrome","CSS","WEBKIT","IOS","FIREFOX","ANDROID","SAFARI","normalizePassiveListenerOptions","ObserversModule","MutationObserverFactory","MutationObserver","getAriaReferenceIds","AriaDescriber","nextId","messageRegistry","messagesContainer","_document","role","_canBeDescribed","getKey","setMessageId","messageElement","referenceCount","_createMessageElement","_isElementDescribedByMessage","_addMessageReference","_isElementNode","_removeMessageReference","registeredMessage","_deleteMessageElement","childNodes","_deleteMessagesContainer","describedElements","_removeCdkDescribedByReferenceIds","_createMessagesContainer","preExistingContainer","visibility","originalReferenceIds","ids","existingId","filteredIds","referenceIds","messageId","trimmedMessage","ariaLabel","FocusKeyManager","_origin","activeItem","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","_typeaheadSubscription","_vertical","_allowedModifierKeys","_homeAndEnd","_skipPredicateFn","disabled","_pressedLetters","tabOut","newItems","toArray","shouldWrap","direction","_horizontal","debounceInterval","letter","inputString","items","_getItemsArray","getLabel","toUpperCase","setActiveItem","previousActiveItem","updateActiveItem","keyCode","isModifierAllowed","setNextItemActive","setPreviousItemActive","setFirstItemActive","setLastItemActive","toLocaleUpperCase","_setActiveItemByIndex","_setActiveItemByDelta","itemArray","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","isFakeMousedownFromScreenReader","buttons","Element","FocusMonitor","FOCUS_MONITOR_DEFAULT_OPTIONS","captureEventListenerOptions","passive","_windowFocused","_elementInfo","_monitoredElementCount","_rootNodeFocusListenerCount","_documentKeydownListener","_lastTouchTarget","_setOriginForCurrentEventQueue","_documentMousedownListener","_documentTouchstartListener","_touchTimeoutId","getTarget","_windowFocusListener","_windowFocusTimeoutId","_rootNodeFocusAndBlurListener","_onFocus","_onBlur","_detectionMode","detectionMode","results","checkChildren","observableOf","createShadowRoot","getRootNode","ShadowRoot","_getDocument","cachedInfo","info","_registerGlobalListeners","elementInfo","_setClasses","_removeGlobalListeners","_getClosestElementsInfo","currentElement","_originChanged","_info","stopMonitoring","defaultView","shouldSet","_lastFocusOrigin","_wasCausedByTouch","_originTimeoutId","contains","_getFocusOrigin","relatedTarget","_emitOrigin","rootNodeFocusListeners","_getWindow","composedPath","A11yModule","HighContrastModeDetector","BidiModule","Directionality","testElement","backgroundColor","documentWindow","computedStyle","getComputedStyle","computedColor","bodyClasses","getHighContrastMode","highContrastModeDetector","_applyBodyHighContrastModeCssClasses","DIR_DOCUMENT","htmlDir","documentElement","AnimationBuilder","definitions","animate","timings","sequence","steps","stateChangeExpr","expr","NoopAnimationPlayer","duration","_onDoneFns","_onStartFns","_onDestroyFns","_started","_finished","_position","parentPlayer","totalTime","hasStarted","_onStart","triggerMicrotask","_onFinish","finish","phaseName","methods","AnimationGroupPlayer","_players","players","doneCount","destroyCount","startCount","player","onDone","_onDestroy","onStart","time","play","pause","restart","timeAtPosition","min","setPosition","longestPlayer","longestSoFar","getPosition","beforeDestroy","isNode","process","optimizeGroupPlayer","normalizeKeyframes","driver","normalizer","keyframes","preStyles","postStyles","normalizedKeyframes","previousOffset","previousKeyframe","kf","isSameOffset","normalizedKeyframe","normalizedProp","normalizedValue","normalizePropertyName","normalizeStyleValue","LINE_START","listenOnPlayer","copyAnimationEvent","makeAnimationEvent","triggerName","fromState","toState","undefined","getOrSetAsInMap","parseTimelineCommand","separatorPos","_contains","elm1","elm2","_matches","_query","_isNode","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","elems","elm","_CACHED_BODY","_IS_WEBKIT","validateStyleProperty","matchesElement","containsElement","invokeQuery","hypenatePropsObject","object","newObj","newProp","NoopAnimationDriver","easing","AnimationDriver","NOOP","resolveTimingValue","_convertTimeValueToMS","parseFloat","unit","resolveTiming","allowNegativeValues","delayMatch","easingVal","containsErrors","copyObj","copyStyles","readPrototype","getStyleAttributeString","writeStyleAttribute","styleAttrValue","getPropertyValue","setStyles","formerStyles","camelProp","eraseStyles","normalizeAnimationEntry","PARAM_REGEX","RegExp","extractStyleParams","exec","lastIndex","interpolateParams","original","varName","localVal","iteratorToArray","allowPreviousPlayerStylesMerge","balancePreviousStylesIntoKeyframes","previousStyles","previousStyleProps","startingKeyframe","missingStyleProps","computeStyle","visitDslNode","visitor","visitTrigger","visitState","visitTransition","visitSequence","visitGroup","visitAnimate","visitKeyframes","visitStyle","visitReference","visitAnimateChild","visitAnimateRef","visitQuery","visitStagger","TRUE_BOOLEAN_VALUES","FALSE_BOOLEAN_VALUES","makeLambdaFromStates","lhs","rhs","LHS_MATCH_BOOLEAN","RHS_MATCH_BOOLEAN","lhsMatch","rhsMatch","SELF_TOKEN_REGEX","buildAnimationAst","build","_driver","AnimationAstBuilderContext","_resetContextStyleTimingState","currentQuerySelector","collectedStyles","currentTime","queryCount","depCount","states","stateDef","styleAst","astParams","containsDynamicStyles","missingSubs","stylesObj","missingSubsArr","transitionValue","expressions","matchers","eventStr","alias","separator","normalizeAnimationOptions","furthestTime","innerAst","timingAst","makeTimingAst","ast","dynamic","currentAnimateTimings","styleMetadata","newStyleData","_styleAst","isEmptyStep","_makeStyleAst","_validateStyleAst","styleTuple","collectedEasing","styleData","styleMap","endTime","startTime","collectedEntry","updateCollectedStyle","totalKeyframesWithOffsets","offsets","offsetsOutOfOrder","keyframesOutOfRange","offsetVal","generatedOffset","limit","animateDuration","durationUpToThisFrame","parentSelector","currentQuery","hasAmpersand","NG_TRIGGER_SELECTOR","includeSelf","optional","originalSelector","currentTransition","createTimelineInstruction","preStyleProps","postStyleProps","subTimeline","ElementInstructionMap","_map","instructions","existingInstructions","ENTER_TOKEN_REGEX","LEAVE_TOKEN_REGEX","buildAnimationTimelines","rootElement","enterClassName","leaveClassName","startingStyles","finalStyles","subInstructions","AnimationTimelineBuilderVisitor","buildKeyframes","AnimationTimelineContext","currentTimeline","timelines","timeline","containsAnimation","tl","allowOnlyTimelineStyles","elementInstructions","consume","innerContext","createSubContext","_visitSubInstructions","transformIntoNewTimeline","instruction","instructionTimings","appendInstructionToTimeline","updateOptions","subContextCount","snapshotCurrentStyles","DEFAULT_NOOP_PREVIOUS_NODE","delayNextStep","applyStylesToKeyframe","innerTimelines","mergeTimelineCollectedStyles","_visitTiming","incrementTime","getCurrentStyleProperties","forwardFrame","applyEmptyStep","innerTimeline","forwardTime","elms","currentQueryTotal","sameElementTimeline","maxTime","currentStaggerTime","startingTime","_enterClassName","_leaveClassName","initialTimeline","skipIfExists","newOptions","optionsToUpdate","newParams","paramsToUpdate","oldParams","newTime","_copyOptions","updatedTimings","builder","SubTimelineBuilder","stretchStartingKeyframe","elements","_elementTimelineStylesLookup","_previousKeyframe","_currentKeyframe","_keyframes","_styleSummary","_pendingStyles","_backFill","_currentEmptyStepKeyframe","_localTimelineStyles","_globalTimelineStyles","_loadKeyframe","hasPreStyleStep","allStyles","allProperties","_updateStyle","details0","details1","finalKeyframes","keyframe","finalKeyframe","preProps","postProps","kf0","kf1","_stretchStartingKeyframe","newKeyframes","startingGap","newFirstKeyframe","oldFirstKeyframe","roundOffset","decimalPoints","mult","pow","round","AnimationStyleNormalizer","WebAnimationsStyleNormalizer","propertyName","userProvidedProperty","normalizedProperty","strVal","DIMENSIONAL_PROP_MAP","valAndSuffixMatch","createTransitionInstruction","isRemovalTransition","fromStyles","toStyles","queriedElements","EMPTY_OBJECT","AnimationTransitionFactory","_triggerName","_stateStyles","currentState","nextState","matchFns","stateName","backupStateStyler","stateStyler","backupStyles","buildStyles","currentOptions","nextOptions","skipAstBuild","transitionAnimationParams","currentStateStyles","nextAnimationParams","nextStateStyles","preStyleMap","postStyleMap","isRemoval","animationOptions","queriedElementsList","AnimationStateStyles","defaultParams","combinedParams","styleObj","AnimationTrigger","transitionFactories","balanceProperties","fallbackTransition","EMPTY_INSTRUCTION_MAP","bodyNode","_normalizer","_animations","_playersById","autoStylesMap","inst","_buildPlayer","_getPlayer","baseEvent","register","EMPTY_PLAYER_ARRAY","NULL_REMOVAL_STATE","namespaceId","setForRemoval","setForMove","hasAnimation","removedBeforeQueried","NULL_REMOVED_QUERIED_STATE","StateValue","isObj","DEFAULT_STATE_VALUE","AnimationTransitionNamespace","_engine","_triggers","_queue","_elementListeners","_hostClassName","containsData","phase","listeners","triggersWithStates","statesByElement","NG_TRIGGER_CLASSNAME","afterFlush","defaultToFallback","_getTrigger","absorbOptions","playersOnElement","playersByElement","queued","matchTransition","isFallbackTransition","totalQueuedPlayers","matchStyles","reportError","stateMap","entry","elementPlayers","namespaces","fetchNamespacesByElement","ns","triggerLeaveAnimation","clearElementCache","afterFlushAnimationsDone","destroyAfterComplete","triggerStates","markElementAsRemoved","processLeaveNode","elementStates","visitedTriggers","engine","childElementCount","_signalRemovalForInnerTriggers","containsPotentialParentTransition","totalAnimations","currentPlayers","playersByQueriedElement","prepareLeaveAnimationListeners","removalFlag","destroyInnerAnimations","_onRemovalComplete","microtaskId","markedForDestroy","d0","d1","newHostElements","disabledNodes","_namespaceLookup","_namespaceList","_flushFns","_whenQuietFns","namespacesByHostElement","collectedEnterElements","collectedLeaveElements","onRemovalComplete","_balanceNamespaceList","collectEnterElement","found","createNamespace","_fetchNamespace","nsId","isElementNode","details","insertNode","removeNode","hostNS","subTimelines","skipBuildAst","containerElement","destroyActiveAnimationsForElement","finishActiveQueriedAnimationOnElement","markElementAsDisabled","cleanupFns","_flushAnimations","quietFns","skippedPlayers","skippedPlayersMap","queuedInstructions","allPreStyleElements","allPostStyleElements","disabledElementsSet","nodesThatAreDisabled","allTriggerElements","enterNodeMap","buildRootMap","enterNodeMapIds","allLeaveNodes","mergedLeaveNodes","leaveNodesWithoutAnimations","leaveNodeMapIds","leaveNodeMap","allPlayers","erroneousTransitions","drainQueuedTransitions","nodeIsOrphaned","_buildInstruction","append","stringMap","setVal","allPreviousPlayersMap","animationElementMap","_beforeAnimationBuild","_getPreviousPlayers","prevPlayer","replaceNodes","replacePostStylesAsPre","postStylesMap","cloakAndComputeStyles","preStylesMap","post","pre","rootPlayers","subPlayers","NO_PARENT_ANIMATION_ELEMENT_DETECTED","overrideTotalTime","parentWithAnimation","parentsToAdd","detectedParent","innerPlayer","_buildAnimation","setRealPlayer","parentPlayers","playersForElement","syncPlayerEvents","queriedPlayerResults","queriedInnerElements","queriedPlayers","activePlayers","removeNodesAfterAnimationDone","elementContainsData","isQueriedElement","toStateValue","queriedElementPlayers","isRemovalAnimation","targetNameSpaceId","targetTriggerName","realPlayer","getRealPlayer","allQueriedPlayers","allConsumedElements","allSubElements","allNewPlayers","timelineInstruction","finalPlayers","previousPlayers","_flattenGroupPlayersRecur","wrappedPlayer","currentValues","_player","_containsRealPlayer","_queuedCallbacks","triggerCallback","_queueEvent","cloakElement","display","valuesMap","elementPropsMap","defaultStyle","cloakVals","failedElements","roots","rootMap","nodeSet","localRootMap","getRoot","postEntry","preEntry","AnimationEngine","_triggerCache","_transitionEngine","_timelineEngine","whenRenderingDone","componentId","cacheKey","registerTrigger","disable","eventPhase","packageNonAnimatableStyles","startStyles","endStyles","filterNonAnimatableStyles","SpecialCasedStyles","_element","_startStyles","_endStyles","_state","initialStyles","initialStylesByElement","_initialStyles","WeakMap","isNonAnimatableStyle","ElementAnimationStyleHandler","_name","_duration","_delay","_easing","_fillMode","_onDoneFn","_startTime","_eventFn","_handleCallback","anim","getAnimationStyle","char","setAnimationStyle","addRemoveAnimationEvent","playPauseAnimation","findIndexForAnimation","timestamp","_ngTestManualTimestamp","elapsedTime","toFixed","animationName","findMatchingTokenIndex","status","searchToken","doRemove","CssKeyframesPlayer","_finalStyles","_specialStyles","_buildStyler","_styler","_flushStartFns","_flushDoneFns","resume","finished","_startingStyles","__initialized","_styles","CssKeyframesDriver","_count","keyframeStr","tab","kfElm","scrubberAccessRequested","previousCssKeyframePlayers","flatKeyframes","buildKeyframeElement","specialStyles","WebAnimationsPlayer","_initialized","_preparePlayerBeforeStart","domPlayer","_triggerWebAnimation","_finalKeyframe","_resetDomPlayerState","cancel","WebAnimationsDriver","_isNativeImpl","getElementAnimateFn","_cssKeyframesDriver","supported","playerOptions","previousWebAnimationPlayers","BrowserAnimationBuilder","rootRenderer","_nextAnimationId","issueAnimationCommand","_id","RendererAnimationPlayer","_command","_listen","AnimationRendererFactory","InjectableAnimationEngine","BrowserAnimationsModule","MatCommonModule","_currentId","_microtaskId","_animationCallbacksBuffer","_rendererCache","_cdRecurDepth","BaseAnimationRenderer","AnimationRenderer","_scheduleCountTask","onInsert","onRemove","disableAnimations","dotIndex","scheduleListenerCallback","ANIMATION_MODULE_TYPE","BROWSER_ANIMATIONS_PROVIDERS","MATERIAL_SANITY_CHECKS","SUPPORTS_INTL_API","sanityChecks","_hasDoneGlobalChecks","_sanityChecks","_checkDoctypeIsDefined","_checkThemeIsPresent","_checkCdkVersionMatch","win","_isTestEnv","__karma__","jasmine","_checksAreEnabled","doctype","theme","version","CDK_VERSION","mixinDisabled","base","_disabled","mixinColor","defaultColor","color","_color","colorPalette","_elementRef","mixinDisableRipple","_disableRipple","MatRippleModule","MatRipple","MatButtonModule","MatButton","RippleRef","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","passiveEventOptions","pointerDownEvents","pointerUpEvents","_target","elementOrElementRef","_isPointerDown","_activeRipples","_pointerUpEventsRegistered","_containerElement","y","containerRect","_containerRect","animationConfig","centered","width","height","radius","distX","right","distY","bottom","sqrt","offsetX","offsetY","ripple","transitionDuration","rippleRef","persistent","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","fadeOut","wasActive","rippleEl","opacity","_triggerElement","_removeTriggerEvents","_registerEvents","_onMousedown","_onTouchStart","_onPointerUp","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","rippleDisabled","fadeInRipple","clientX","clientY","rippleConfig","touches","changedTouches","terminateOnPointerUp","eventTypes","MAT_RIPPLE_GLOBAL_OPTIONS","globalOptions","_animationMode","_isInitialized","_globalOptions","_rippleRenderer","configOrX","_setupTriggerEventsIfEnabled","_trigger","fadeOutAll","setupTriggerEvents","BUTTON_HOST_ATTRIBUTES","_MatButtonMixinBase","_focusMonitor","isRoundButton","_hasHostAttributes","isIconButton","_getHostElement","attribute","monitor","focusVia","disableRipple","hasAttribute","throwError","dispatch","forkJoinInternal","sources","emitted","HttpHandler","HttpBackend","HttpHeaders","headers","normalizedNames","lazyUpdate","lazyInit","line","maybeSetNormalizedName","op","lcName","copyFrom","update","applyUpdate","other","toDelete","existing","HttpUrlEncodingCodec","standardEncoding","HttpParams","updates","cloneFrom","encoder","fromString","fromObject","rawParams","codec","param","eqIdx","decodeKey","decodeValue","eKey","encodeKey","encodeValue","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","method","third","fourth","reportProgress","withCredentials","responseType","urlWithParams","qIdx","setHeaders","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","addBody","observe","HttpClient","NoopInterceptor","HttpXhrBackend","BrowserXhr","HttpClientModule","HttpClientXsrfModule","HttpInterceptingHandler","HttpXsrfInterceptor","HttpXsrfCookieExtractor","req","events$","handle","res$","request","callbackParam","HttpInterceptorHandler","interceptor","intercept","HTTP_INTERCEPTORS","XSSI_PREFIX","XhrFactory","XMLHttpRequest","xhrFactory","abort","xhr","open","setRequestHeader","detectedType","detectContentTypeHeader","reqBody","serializeBody","headerResponse","partialFromXhr","getAllResponseHeaders","responseURL","getResponseHeader","onLoad","response","responseText","originalBody","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","partialText","onUpProgress","progress","UploadProgress","upload","send","Sent","readyState","DONE","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","lastCookieString","lastToken","parseCount","cookieString","tokenService","headerName","lcUrl","backend","chain","interceptors","reduceRight","getMatIconNameNotFoundError","iconName","getMatIconFailedToSanitizeUrlError","getMatIconFailedToSanitizeLiteralError","literal","MatIconRegistry","SvgIconConfig","svgText","_httpClient","_sanitizer","_errorHandler","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","addSvgIconInNamespace","addSvgIconLiteralInNamespace","_addSvgIconConfig","cleanLiteral","addSvgIconSetInNamespace","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","safeUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","svg","iconKey","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetConfig","_loadSvgIconSetFromConfig","foundIcon","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","iconElement","cloneNode","_setSvgAttributes","_toSvgElement","_svgElementFromString","div","viewBox","iconConfig","inProgressFetch","configNamespace","svgElement","MatIconModule","MatIcon","_MatIconMixinBase","MAT_ICON_LOCATION","_location","getPathname","funcIriAttributes","funcIriAttributeSelector","funcIriPattern","_iconRegistry","ariaHidden","_inline","_currentIconFetch","inline","_svgIcon","_updateSvgIcon","_clearSvgElement","_fontSet","_cleanupFontValue","_updateFontIconClasses","_fontIcon","cachedElements","_elementsWithExternalReferences","_previousPath","_prependPathToReferences","svgIcon","styleTags","_cacheChildrenWithExternalReferences","layoutElement","childCount","_usingFontIcon","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","elementsWithFuncIri","elementWithReference","rawName","_svgNamespace","_svgName","_splitIconName","getNamedSvgIcon","_setSvgElement","nextHandle","RESOLVED","activeHandles","findAndClearHandle","Immediate","asapScheduler","takeUntil","notifier","Notification","takeUntilSubscriber","notifierSubscription","innerSubscribe","seenValue","kind","undefinedValueNotification","completeNotification","delayFor","isNaN","DelayOperator","PortalModule","notification","DelayMessage","_schedule","scheduleNotification","createNext","createComplete","Portal","_attachedHost","ComponentPortal","viewContainerRef","TemplatePortal","DomPortalOutlet","outletElement","_defaultInjector","attachDomPortal","portal","replaceChild","setDisposeFn","_getComponentRootNode","viewContainer","rootNodes","_isDisposed","_attachedPortal","attachComponentPortal","attachTemplatePortal","setAttachedHost","_invokeDisposeFn","hasAttached","_disposeFn","fromEvent","setupSubscription","sourceObj","on","off","addListener","removeListener","AuditOperator","durationSelector","clearThrottle","throttled","isNumeric","period","auditTime","periodOrScheduler","due","ScrollingModule","CdkScrollableModule","ViewportRuler","ScrollDispatcher","ObserveOnMessage","scheduleMessage","createError","bufferSize","windowTime","_events","_infiniteTimeWindow","_bufferSize","_windowTime","nextInfiniteTimeWindow","nextTimeWindow","ReplayEvent","_getNow","_trimBufferThenGetEvents","eventsCount","spliceCount","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","scrollable","elementScrolled","scrollableReference","auditTimeInMs","_addGlobalListener","_removeGlobalListener","deregister","ancestors","getAncestorScrollContainers","scrolled","scrollingContainers","_scrollableContainsElement","scrollableElement","getElementRef","_change","_changeListener","_updateViewportSize","_viewportSize","output","scrollPosition","getViewportScrollPosition","getViewportSize","documentRect","scrollTop","scrollY","scrollLeft","scrollX","throttleTime","innerWidth","innerHeight","scrollToFunction","supportsScrollBehavior","_viewportRuler","_previousHTMLStyles","_isEnabled","_canBeEnabled","_previousScrollPosition","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","scroll","viewport","scrollHeight","scrollWidth","CloseScrollStrategy","_scrollDispatcher","_scrollSubscription","_detach","_overlayRef","overlayRef","stream","threshold","_initialScrollPosition","updatePosition","NoopScrollStrategy","isElementScrolledOutsideView","containerBounds","isElementClippedByScrolling","scrollContainerRect","ScrollStrategyOptions","OverlayOutsideClickDispatcher","OverlayKeyboardDispatcher","BaseOverlayDispatcher","OverlayContainer","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","close","block","reposition","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","ConnectionPositionPair","overlay","originX","originY","overlayX","overlayY","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","_attachedOverlays","_keydownListener","overlays","_keydownEvents","_isAttached","_cursorStyleIsSet","_clickListener","_outsidePointerEvents","_cursorOriginalValue","isTestEnvironment","_createContainer","oppositePlatformContainers","_portalOutlet","_host","_pane","_keyboardDispatcher","_outsideClickDispatcher","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","_backdropClickHandler","_scrollStrategy","_positionStrategy","positionStrategy","attachResult","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","strategy","sizeConfig","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","backdropToDetach","finishDetach","cssClasses","isAdd","cssClass","cssUnitPattern","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","_boundingBox","_isInitialRender","_lastPosition","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","fallback","originRect","viewportRect","flexibleFits","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","scrollables","positions","margin","flexibleDimensions","growAfterOpen","canPush","isLocked","_transformOriginSelector","startX","_isRtl","endX","overlayStartX","overlayStartY","point","rawOverlayRect","getRoundedBoundingClientRect","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","getConfig","horizontalFit","pushX","pushY","overflowRight","overflowBottom","overflowTop","overflowLeft","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","_hasExactPosition","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","_pushOverlayOnScreen","virtualKeyboardOffset","getContainerElement","clientHeight","clientWidth","originBounds","overlayBounds","scrollContainerBounds","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","currentOverflow","axis","units","clientRect","Overlay","OverlayPositionBuilder","OverlayModule","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","overlayContainer","withFlexibleDimensions","withPush","withViewportMargin","withFallbackPosition","onPositionChange","_direction","setDirection","withScrollableContainers","withPositions","withDefaultOffsetX","withDefaultOffsetY","withLockedPosition","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","nextUniqueId","scrollStrategies","_positionBuilder","_directionality","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","MatMenuItem","MatMenu","_MatMenuBase","MatMenuModule","_MatMenuDirectivesModule","MatMenuTrigger","MatToolbarModule","MatToolbar","MatToolbarRow","mediaQueryStyleNode","MediaMatcher","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_CONTENT","MAT_MENU_PANEL","_MatMenuItemMixinBase","MatMenuItemBase","_parentMenu","_hovered","_focused","_highlighted","_triggersSubmenu","addItem","removeItem","stopPropagation","icons","icon","MAT_MENU_DEFAULT_OPTIONS","overlapTrigger","xPosition","yPosition","menuPanelUid","_defaultOptions","_xPosition","_yPosition","_directDescendantItems","_tabSubscription","_classList","_panelAnimationState","_animationDone","overlayPanelClass","_overlapTrigger","_hasBackdrop","panelId","setPositionClasses","previousPanelClass","_previousPanelClass","_updateDirectDescendants","_keyManager","withWrap","withTypeAhead","withHomeAndEnd","focusedItem","_item","parentMenu","setFocusOrigin","onKeydown","lazyContent","_focusFirstItem","depth","newElevation","customElevation","_previousElevation","posX","posY","_isAnimating","activeItemIndex","_allItems","defaultOptions","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","passiveEventListenerOptions","_overlay","_viewContainerRef","_menuItemInstance","_dir","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_parentMaterialMenu","triggersSubmenu","_portal","menu","_menu","_destroyMenu","_checkMenu","_handleHover","closeMenu","openMenu","_createOverlay","_setPosition","_getPortal","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_setIsMenuOpen","_setMenuElevation","focusFirstItem","setElevation","isOpen","_getOverlayConfig","_subscribeToPositions","keydownEvents","flexibleConnectedTo","withGrowAfterOpen","withTransformOriginOn","originFallbackX","overlayFallbackY","originFallbackY","overlayFallbackX","backdrop","backdropClick","detachments","parentClose","hover","toggleMenu","_MatToolbarMixinBase","_checkToolbarMixedModes","_toolbarRows","SkipOperator","mediaQueriesForWebkitCompatibility","_matchMedia","matchMedia","noopMatchMedia","sheet","insertRule","media","BreakpointObserver","_mediaMatcher","_queries","_destroySubject","splitQueries","mediaQuery","_registerQuery","mql","stateObservable","breakpointStates","breakpoints","a1","a2","SharedModule","FormsModule","ɵInternalFormsSharedModule","RadioControlRegistry","MatTooltipModule","TooltipComponent","MatTooltip","CoreModule","ThemeService","matTooltipAnimations","tooltipState","passiveListenerOptions","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_DEFAULT_OPTIONS","showDelay","hideDelay","touchendHideDelay","_ariaDescriber","_viewInitialized","_pointerExitEventsInitialized","touchGestures","_message","_passiveListeners","_handleKeydown","_isTooltipVisible","hide","_updatePosition","_tooltipInstance","show","_setupPointerEnterEventsIfNeeded","removeDescription","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","_touchstartTimeout","_showTimeoutId","_hideTimeoutId","afterHidden","isVisible","scrollableAncestors","_getOrigin","_getOverlayPosition","main","originPosition","isLtr","_invertPosition","overlayPosition","_markForCheck","tooltipClass","_platformSupportsMouseEvents","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","_addListeners","exitListeners","_wheelListener","touchendListener","elementUnderPointer","elementFromPoint","gestures","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","_changeDetectorRef","_breakpointObserver","_visibility","_closeOnInteraction","_onHide","_isHandset","_accessors","control","accessor","_isSameGroup","fireUncheck","controlPair","_control","InternalFormsSharedModule","ThemeBundles","AVAILABLE_THEMES","bundleName","DeepPurpleAmber","labelName","buttonColor","headerColor","IndigoPink","PinkBlueGrey","PurpleGreen","_activeThemeBundleName$","loadClientTheme","asObservable","cssClassList","elementID","HTML_ELEMENT","ReferenceError","themeBundleName","HTML_LINK_ELEMENT","THEME_STYLES","LINK_ELEMENT","onload","assignCSSClassesToTag","moduleName","AppModule","AppComponent","ToolbarComponent","_themeService","_titleService","applicationTitle","getTitle","gitHubURL","availableThemes","_componentDestroyed$","getActiveThemeBundleName","activeTheme","bootstrapModule","genericError","webpackEmptyAsyncContext","SimpleInnerSubscriber","SimpleOuterSubscriber"],"mappings":"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","sourceRoot":"webpack:///","sourcesContent":["/** @deprecated do not use, this is no longer checked by RxJS internals */\nexport const rxSubscriber = (() =>\n  typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random())();\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { SubscriptionLike } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * A variant of Subject that requires an initial value and emits its current\n * value whenever it is subscribed to.\n *\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<SubscriptionLike>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","export interface ArgumentOutOfRangeError extends Error {\n}\n\nexport interface ArgumentOutOfRangeErrorCtor {\n  new(): ArgumentOutOfRangeError;\n}\n\nconst ArgumentOutOfRangeErrorImpl = (() => {\n  function ArgumentOutOfRangeErrorImpl(this: any) {\n    Error.call(this);\n    this.message = 'argument out of range';\n    this.name = 'ArgumentOutOfRangeError';\n    return this;\n  }\n\n  ArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);\n\n  return ArgumentOutOfRangeErrorImpl;\n})();\n\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport const ArgumentOutOfRangeError: ArgumentOutOfRangeErrorCtor = ArgumentOutOfRangeErrorImpl as any;","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, concurrent?: number): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined, concurrent?: number): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n * Map and flatten each letter to an Observable ticking every 1 second\n * ```ts\n * import { of, interval } from 'rxjs';\n * import { mergeMap, map } from 'rxjs/operators';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x+i))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional deprecated `resultSelector`) to each item\n * emitted by the source Observable and merging the results of the Observables\n * obtained from this transformation.\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Number.POSITIVE_INFINITY\n): OperatorFunction<T, ObservedValueOf<O>|R> {\n  if (typeof resultSelector === 'function') {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      mergeMap((a, i) => from(project(a, i)).pipe(\n        map((b: any, ii: number) => resultSelector(a, b, i, ii)),\n      ), concurrent)\n    );\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapOperator(project, concurrent));\n}\n\nexport class MergeMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error!(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result);\n  }\n\n  private _innerSub(ish: ObservableInput<R>): void {\n    const innerSubscriber = new SimpleInnerSubscriber(this);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    const innerSubscription = innerSubscribe(ish, innerSubscriber);\n    // The returned subscription will usually be the subscriber that was\n    // passed. However, interop subscribers will be wrapped and for\n    // unsubscriptions to chain correctly, the wrapper needs to be added, too.\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete!();\n    }\n    this.unsubscribe();\n  }\n\n  notifyNext(innerValue: R): void {\n    this.destination.next!(innerValue);\n  }\n\n  notifyComplete(): void {\n    const buffer = this.buffer;\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift()!);\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete!();\n    }\n  }\n}\n\n/**\n * @deprecated renamed. Use {@link mergeMap}\n */\nexport const flatMap = mergeMap;","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const {  _parentOrParents } = this;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","export interface ObjectUnsubscribedError extends Error {\n}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  new(): ObjectUnsubscribedError;\n}\n\nconst ObjectUnsubscribedErrorImpl = (() => {\n  function ObjectUnsubscribedErrorImpl(this: any) {\n    Error.call(this);\n    this.message = 'object unsubscribed';\n    this.name = 'ObjectUnsubscribedError';\n    return this;\n  }\n\n  ObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);\n\n  return ObjectUnsubscribedErrorImpl;\n})();\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = ObjectUnsubscribedErrorImpl as any;","import { Observable } from '../Observable';\nimport { subscribeTo } from '../util/subscribeTo';\nimport { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\nimport { scheduled } from '../scheduled/scheduled';\n\nexport function from<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\n/** @deprecated use {@link scheduled} instead. */\nexport function from<O extends ObservableInput<any>>(input: O, scheduler: SchedulerLike): Observable<ObservedValueOf<O>>;\n\n/**\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n *\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\n *\n * ![](from.png)\n *\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\n * converted through this operator.\n *\n * ## Examples\n *\n * ### Converts an array to an Observable\n *\n * ```ts\n * import { from } from 'rxjs';\n *\n * const array = [10, 20, 30];\n * const result = from(array);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 10\n * // 20\n * // 30\n * ```\n *\n * ---\n *\n * ### Convert an infinite iterable (from a generator) to an Observable\n *\n * ```ts\n * import { from } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * function* generateDoubles(seed) {\n *    let i = seed;\n *    while (true) {\n *      yield i;\n *      i = 2 * i; // double it\n *    }\n * }\n *\n * const iterator = generateDoubles(3);\n * const result = from(iterator).pipe(take(10));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 3\n * // 6\n * // 12\n * // 24\n * // 48\n * // 96\n * // 192\n * // 384\n * // 768\n * // 1536\n * ```\n *\n * ---\n *\n * ### With async scheduler\n *\n * ```ts\n * import { from, asyncScheduler } from 'rxjs';\n *\n * console.log('start');\n *\n * const array = [10, 20, 30];\n * const result = from(array, asyncScheduler);\n *\n * result.subscribe(x => console.log(x));\n *\n * console.log('end');\n *\n * // Logs:\n * // start\n * // end\n * // 10\n * // 20\n * // 30\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link fromEventPattern}\n *\n * @param {ObservableInput<T>} A subscription object, a Promise, an Observable-like,\n * an Array, an iterable, or an array-like object to be converted.\n * @param {SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values.\n * @return {Observable<T>}\n * @name from\n * @owner Observable\n */\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  if (!scheduler) {\n    if (input instanceof Observable) {\n      return input;\n    }\n    return new Observable<T>(subscribeTo(input));\n  } else {\n    return scheduled(input, scheduler);\n  }\n}\n","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { ObservableInput, SchedulerLike, Observable } from 'rxjs';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\n\n/**\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n * are scheduled on the provided scheduler.\n *\n * @see from\n * @see of\n *\n * @param input The observable, array, promise, iterable, etc you would like to schedule\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\n * the returned observable.\n */\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    } else if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    } else if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }  else if (isIterable(input) || typeof input === 'string') {\n      return scheduleIterable(input, scheduler);\n    }\n  }\n\n  throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n","import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return input && typeof input[Symbol_observable] === 'function';\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { InteropObservable, SchedulerLike, Subscribable } from '../types';\n\nexport function scheduleObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    sub.add(scheduler.schedule(() => {\n      const observable: Subscribable<T> = input[Symbol_observable]();\n      sub.add(observable.subscribe({\n        next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n        error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n        complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n      }));\n    }));\n    return sub;\n  });\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport function schedulePromise<T>(input: PromiseLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    sub.add(scheduler.schedule(() => input.then(\n      value => {\n        sub.add(scheduler.schedule(() => {\n          subscriber.next(value);\n          sub.add(scheduler.schedule(() => subscriber.complete()));\n        }));\n      },\n      err => {\n        sub.add(scheduler.schedule(() => subscriber.error(err)));\n      }\n    )));\n    return sub;\n  });\n}\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return input && typeof input[Symbol_iterator] === 'function';\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    let iterator: Iterator<T>;\n    sub.add(() => {\n      // Finalize generators\n      if (iterator && typeof iterator.return === 'function') {\n        iterator.return();\n      }\n    });\n    sub.add(scheduler.schedule(() => {\n      iterator = input[Symbol_iterator]();\n      sub.add(scheduler.schedule(function () {\n        if (subscriber.closed) {\n          return;\n        }\n        let value: T;\n        let done: boolean;\n        try {\n          const result = iterator.next();\n          value = result.value;\n          done = result.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      }));\n    }));\n    return sub;\n  });\n}\n","export const isArray = (() => Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number'))();\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  /** @internal */\n  _isComplete = false;\n\n  constructor(public source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = (() => {\n  const connectableProto = <any>ConnectableObservable.prototype;\n  return {\n    operator: { value: null as null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null as null, writable: true },\n    _connection: { value: null as null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n  };\n})();\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // ).subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * `scheduler`. It is preferrable to use this over `empty()`.\n */\nexport const EMPTY = new Observable<never>(subscriber => subscriber.complete());\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * ![](empty.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then complete\n * ```ts\n * import { empty } from 'rxjs';\n * import { startWith } from 'rxjs/operators';\n *\n * const result = empty().pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\n * ```ts\n * import { empty, interval, of } from 'rxjs';\n * import { mergeMap } from 'rxjs/operators';\n *\n * const interval$ = interval(1000);\n * const result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throwError}\n *\n * @param scheduler A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @return An \"empty\" Observable: emits only the complete\n * notification.\n * @deprecated Deprecated in favor of using {@link EMPTY} constant, or {@link scheduled} (e.g. `scheduled([], scheduler)`)\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nfunction emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>(subscriber => scheduler.schedule(() => subscriber.complete()));\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\n/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */\nexport function concat<O1 extends ObservableInput<any>>(v1: O1, scheduler: SchedulerLike): Observable<ObservedValueOf<O1>>;\n/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */\nexport function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(v1: O1, v2: O2, scheduler: SchedulerLike): Observable<ObservedValueOf<O1> | ObservedValueOf<O2>>;\n/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */\nexport function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, scheduler: SchedulerLike): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3>>;\n/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */\nexport function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, scheduler: SchedulerLike): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3> | ObservedValueOf<O4>>;\n/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */\nexport function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, scheduler: SchedulerLike): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3> | ObservedValueOf<O4> | ObservedValueOf<O5>>;\n/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */\nexport function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, scheduler: SchedulerLike): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3> | ObservedValueOf<O4> | ObservedValueOf<O5> | ObservedValueOf<O6>>;\n\nexport function concat<O1 extends ObservableInput<any>>(v1: O1): Observable<ObservedValueOf<O1>>;\nexport function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(v1: O1, v2: O2): Observable<ObservedValueOf<O1> | ObservedValueOf<O2>>;\nexport function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3>>;\nexport function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3> | ObservedValueOf<O4>>;\nexport function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3> | ObservedValueOf<O4> | ObservedValueOf<O5>>;\nexport function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3> | ObservedValueOf<O4> | ObservedValueOf<O5> | ObservedValueOf<O6>>;\nexport function concat<O extends ObservableInput<any>>(...observables: O[]): Observable<ObservedValueOf<O>>;\n/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */\nexport function concat<O extends ObservableInput<any>>(...observables: (O | SchedulerLike)[]): Observable<ObservedValueOf<O>>;\nexport function concat<R>(...observables: ObservableInput<any>[]): Observable<R>;\n/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */\nexport function concat<R>(...observables: (ObservableInput<any> | SchedulerLike)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * ![](concat.png)\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * ## Examples\n * ### Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10\n * ```ts\n * import { concat, interval, range } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer = interval(1000).pipe(take(4));\n * const sequence = range(1, 10);\n * const result = concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n * ```\n *\n * ### Concatenate 3 Observables\n * ```ts\n * import { concat, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n *\n * const result = concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n * ```\n *\n * ### Concatenate the same Observable to repeat it\n * ```ts\n * import { concat, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer = interval(1000).pipe(take(2));\n *\n * concat(timer, timer) // concatenating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n * ```\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link startWith}\n * @see {@link endWith}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {SchedulerLike} [scheduler=null] An optional {@link SchedulerLike} to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<O extends ObservableInput<any>, R>(...observables: Array<O | SchedulerLike>): Observable<ObservedValueOf<O> | R> {\n  return concatAll<R>()(of(...observables));\n}\n","\nimport { mergeAll } from './mergeAll';\nimport { OperatorFunction, ObservableInput } from '../types';\n\nexport function concatAll<T>(): OperatorFunction<ObservableInput<T>, T>;\nexport function concatAll<R>(): OperatorFunction<any, R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * ![](concatAll.png)\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { map, take, concatAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(ev => interval(1000).pipe(take(4))),\n * );\n * const firstOrder = higherOrder.pipe(concatAll());\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): OperatorFunction<ObservableInput<T>, T> {\n  return mergeAll<T>(1);\n}\n","import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   * @deprecated use new Observable() instead\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  /** @deprecated Use an observer instead of a complete callback */\n  subscribe(next: null | undefined, error: null | undefined, complete: () => void): Subscription;\n  /** @deprecated Use an observer instead of an error callback */\n  subscribe(next: null | undefined, error: (error: any) => void, complete?: () => void): Subscription;\n  /** @deprecated Use an observer instead of a complete callback */\n  subscribe(next: (value: T) => void, error: null | undefined, complete: () => void): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * );\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      sink.add(operator.call(sink, this.source));\n    } else {\n      sink.add(\n        this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n        this._subscribe(sink) :\n        this._trySubscribe(sink)\n      );\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      if (canReportError(sink)) {\n        sink.error(err);\n      } else {\n        console.warn(err);\n      }\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a ReferenceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>, ...operations: OperatorFunction<any, any>[]): Observable<{}>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```ts\n   * import { interval } from 'rxjs';\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n\n/**\n * Determines whether the ErrorObserver is closed or stopped or has a\n * destination that is closed or stopped - in which case errors will\n * need to be reported via a different mechanism.\n * @param observer the observer\n */\nexport function canReportError(observer: Subscriber<any> | Subject<any>): boolean {\n  while (observer) {\n    const { closed, destination, isStopped } = observer as any;\n    if (closed || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}\n","import { noop } from './noop';\nimport { identity } from './identity';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>, ...fns: UnaryFunction<any, any>[]): UnaryFunction<T, {}>;\n/* tslint:enable:max-line-length */\n\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (fns.length === 0) {\n    return identity as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number' && typeof x !== 'function');","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * ![](take.png)\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * ## Example\n * Take the first 5 seconds of an infinite 1-second interval Observable\n * ```ts\n * import { interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const intervalCount = interval(1000);\n * const takeFive = intervalCount.pipe(take(5));\n * takeFive.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * ```\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\n\n/* tslint:disable:max-line-length */\nexport function catchError<T, O extends ObservableInput<any>>(selector: (err: any, caught: Observable<T>) => O): OperatorFunction<T, T | ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * ![](catch.png)\n *\n * ## Examples\n * Continues with a different Observable when there's an error\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { map, catchError } from 'rxjs/operators';\n *\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *   \t   if (n === 4) {\n * \t       throw 'four!';\n *       }\n *\t     return n;\n *     }),\n *     catchError(err => of('I', 'II', 'III', 'IV', 'V')),\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n * ```\n *\n * Retries the caught source Observable again in case of error, similar to retry() operator\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { map, catchError, take } from 'rxjs/operators';\n *\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *   \t   if (n === 4) {\n *   \t     throw 'four!';\n *       }\n * \t     return n;\n *     }),\n *     catchError((err, caught) => caught),\n *     take(30),\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n * ```\n *\n * Throws a new error when the source Observable throws an error\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { map, catchError } from 'rxjs/operators';\n *\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => {\n *       throw 'error in source. Details: ' + err;\n *     }),\n *   )\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n * ```\n *\n *  @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | ObservedValueOf<O>> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends SimpleOuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      const innerSubscriber = new SimpleInnerSubscriber(this);\n      this.add(innerSubscriber);\n      const innerSubscription = innerSubscribe(result, innerSubscriber);\n      // The returned subscription will usually be the subscriber that was\n      // passed. However, interop subscribers will be wrapped and for\n      // unsubscriptions to chain correctly, the wrapper needs to be added, too.\n      if (innerSubscription !== innerSubscriber) {\n        this.add(innerSubscription);\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { concat } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nimport { MonoTypeOperatorFunction, OperatorFunction, SchedulerLike } from '../types';\n\n/* tslint:disable:max-line-length */\n/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\nexport function startWith<T>(scheduler: SchedulerLike): MonoTypeOperatorFunction<T>;\n/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\nexport function startWith<T, D>(v1: D, scheduler: SchedulerLike): OperatorFunction<T, T | D>;\n/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\nexport function startWith<T, D, E>(v1: D, v2: E, scheduler: SchedulerLike): OperatorFunction<T, T | D | E>;\n/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\nexport function startWith<T, D, E, F>(v1: D, v2: E, v3: F, scheduler: SchedulerLike): OperatorFunction<T, T | D | E | F>;\n/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\nexport function startWith<T, D, E, F, G>(v1: D, v2:  E, v3: F, v4: G, scheduler: SchedulerLike): OperatorFunction<T, T | D | E | F | G>;\n/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\nexport function startWith<T, D, E, F, G, H>(v1: D, v2: E, v3: F, v4: G, v5: H, scheduler: SchedulerLike): OperatorFunction<T, T | D | E | F | G | H>;\n/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\nexport function startWith<T, D, E, F, G, H, I>(v1: D, v2: E, v3: F, v4: G, v5: H, v6: I, scheduler: SchedulerLike): OperatorFunction<T, T | D | E | F | G | H | I>;\n\nexport function startWith<T, D>(v1: D): OperatorFunction<T, T | D>;\nexport function startWith<T, D, E>(v1: D, v2: E): OperatorFunction<T, T | D | E>;\nexport function startWith<T, D, E, F>(v1: D, v2: E, v3: F): OperatorFunction<T, T | D | E | F>;\nexport function startWith<T, D, E, F, G>(v1: D, v2:  E, v3: F, v4: G): OperatorFunction<T, T | D | E | F | G>;\nexport function startWith<T, D, E, F, G, H>(v1: D, v2: E, v3: F, v4: G, v5: H): OperatorFunction<T, T | D | E | F | G | H>;\nexport function startWith<T, D, E, F, G, H, I>(v1: D, v2: E, v3: F, v4: G, v5: H, v6: I): OperatorFunction<T, T | D | E | F | G | H | I>;\nexport function startWith<T, D = T>(...array: D[]): OperatorFunction<T, T | D>;\n/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */\nexport function startWith<T, D = T>(...array: Array<D | SchedulerLike>): OperatorFunction<T, T | D>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <span class=\"informal\">First emits its arguments in order, and then any\n * emissions from the source.</span>\n *\n * ![](startWith.png)\n *\n * ## Examples\n *\n * Start the chain of emissions with `\"first\"`, `\"second\"`\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { startWith } from 'rxjs/operators';\n *\n * of(\"from source\")\n *   .pipe(startWith(\"first\", \"second\"))\n *   .subscribe(x => console.log(x));\n *\n * // results:\n * //   \"first\"\n * //   \"second\"\n * //   \"from source\"\n * ```\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {SchedulerLike} [scheduler] - A {@link SchedulerLike} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T, D>(...array: Array<T | SchedulerLike>): OperatorFunction<T, T | D> {\n  const scheduler = array[array.length - 1] as SchedulerLike;\n  if (isScheduler(scheduler)) {\n    // deprecated path\n    array.pop();\n    return (source: Observable<T>) => concat(array as T[], source, scheduler);\n  } else {\n    return (source: Observable<T>) => concat(array as T[], source);\n  }\n}\n","import { SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { Observable } from '../Observable';\nimport { scheduleArray } from '../scheduled/scheduleArray';\n\n/* tslint:disable:max-line-length */\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T>(a: T, scheduler: SchedulerLike): Observable<T>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2>(a: T, b: T2, scheduler: SchedulerLike): Observable<T | T2>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3>(a: T, b: T2, c: T3, scheduler: SchedulerLike): Observable<T | T2 | T3>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, scheduler: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, scheduler: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9, scheduler: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\nexport function of<T>(...args: (T | SchedulerLike)[]): Observable<T>;\n\n// TODO(benlesh): Update the typings for this when we can switch to TS 3.x\nexport function of<T>(a: T): Observable<T>;\nexport function of<T, T2>(a: T, b: T2): Observable<T | T2>;\nexport function of<T, T2, T3>(a: T, b: T2, c: T3): Observable<T | T2 | T3>;\nexport function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4): Observable<T | T2 | T3 | T4>;\nexport function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5): Observable<T | T2 | T3 | T4 | T5>;\nexport function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\nexport function of<T>(...args: T[]): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts the arguments to an observable sequence.\n *\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\n *\n * ![](of.png)\n *\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\n * as a separate `next` notification.\n *\n * ## Examples\n *\n * Emit the values `10, 20, 30`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of(10, 20, 30)\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'next: 10'\n * // 'next: 20'\n * // 'next: 30'\n *\n * ```\n *\n * Emit the array `[1,2,3]`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of([1,2,3])\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'next: [1,2,3]'\n * ```\n *\n * @see {@link from}\n * @see {@link range}\n *\n * @param {...T} values A comma separated list of arguments you want to be emitted\n * @return {Observable} An Observable that emits the arguments\n * described above and then completes.\n * @method of\n * @owner Observable\n */\n\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  let scheduler = args[args.length - 1] as SchedulerLike;\n  if (isScheduler(scheduler)) {\n    args.pop();\n    return scheduleArray(args as T[], scheduler);\n  } else {\n    return fromArray(args as T[]);\n  }\n}\n","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n\n/**\n * @deprecated use {@link iterator} instead\n */\nexport const $$iterator = iterator;\n","/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\nexport function hostReportError(err: any) {\n  setTimeout(() => { throw err; }, 0);\n}","import { ObservableInput } from '../types';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport const subscribeTo = <T>(result: ObservableInput<T>): (subscriber: Subscriber<T>) => Subscription | void => {\n  if (!!result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result as any);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result as Promise<any>);\n  } else if (!!result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result as any);\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};\n","import { Subscriber } from '../Subscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport const subscribeToObservable = <T>(obj: any) => (subscriber: Subscriber<T>) => {\n  const obs = obj[Symbol_observable]();\n  if (typeof obs.subscribe !== 'function') {\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  } else {\n    return obs.subscribe(subscriber);\n  }\n};\n","import { Subscriber } from '../Subscriber';\nimport { hostReportError } from './hostReportError';\n\nexport const subscribeToPromise = <T>(promise: PromiseLike<T>) => (subscriber: Subscriber<T>) => {\n  promise.then(\n    (value) => {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    },\n    (err: any) => subscriber.error(err)\n  )\n  .then(null, hostReportError);\n  return subscriber;\n};\n","import { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport const subscribeToIterable = <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => {\n  const iterator = (iterable as any)[Symbol_iterator]();\n\n  do {\n    let item: IteratorResult<T>;\n    try {\n      item = iterator.next();\n    } catch (err) {\n      subscriber.error(err);\n      return subscriber;\n    }\n    if (item.done) {\n      subscriber.complete();\n      break;\n    }\n    subscriber.next(item.value);\n    if (subscriber.closed) {\n      break;\n    }\n  } while (true);\n\n  // Finalize the iterator if it happens to be a Generator\n  if (typeof iterator.return === 'function') {\n    subscriber.add(() => {\n      if (iterator.return) {\n        iterator.return();\n      }\n    });\n  }\n\n  return subscriber;\n};\n","export function identity<T>(x: T): T {\n  return x;\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike} from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\n\n/* tslint:disable:max-line-length */\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T>(v1: ObservableInput<T>, scheduler: SchedulerLike): Observable<T>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T>(v1: ObservableInput<T>, concurrent: number, scheduler: SchedulerLike): Observable<T>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler: SchedulerLike): Observable<T | T2>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler: SchedulerLike): Observable<T | T2 | T3>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2 | T3>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\n\nexport function merge<T>(v1: ObservableInput<T>): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | number)[]): Observable<T>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T>(...observables: (ObservableInput<T> | SchedulerLike | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | number)[]): Observable<R>;\n/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduled).pipe(mergeAll())*/\nexport function merge<T, R>(...observables: (ObservableInput<any> | SchedulerLike | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * ![](merge.png)\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * ### Merge together two Observables: 1s interval and clicks\n * ```ts\n * import { merge, fromEvent, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const clicksOrTimer = merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n * ```\n *\n * ### Merge together 3 Observables, but only 2 run concurrently\n * ```ts\n * import { merge, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n * const concurrent = 2; // the argument\n * const merged = merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits its max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits its max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n * ```\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: SchedulerLike = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <SchedulerLike>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll<R>(concurrent)(fromArray<any>(observables, scheduler));\n}\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n *\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse\n   * @deprecated use new Subject() instead\n  */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","export function isObject(x: any): x is Object {\n  return x !== null && typeof x === 'object';\n}\n","import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { OperatorFunction, ObservableInput } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](mergeAll.png)\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { map, mergeAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map((ev) => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { take, map, mergeAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map((ev) => interval(1000).pipe(take(10))),\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<ObservableInput<T>, T> {\n  return mergeMap(identity, concurrent);\n}\n","import { mergeMap } from './mergeMap';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) =>  O): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function concatMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function concatMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) =>  O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * ![](concatMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n * For each click event, tick every second from 0 to 3, with no concurrency\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { concatMap, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   concatMap(ev => interval(1000).pipe(take(4)))\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional deprecated `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O>|R> {\n  return mergeMap(project, resultSelector, 1);\n}\n","/**\n * Tests to see if the object is an ES2015 (ES6) Promise\n * @see {@link https://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects}\n * @param value the object to test\n */\nexport function isPromise(value: any): value is PromiseLike<any> {\n  return !!value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector is no longer supported, use inner map instead */\nexport function switchMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector is no longer supported, use inner map instead */\nexport function switchMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables.</span>\n *\n * ![](switchMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * ## Example\n * Generate new Observable according to source Observable values\n * ```typescript\n * import { of } from 'rxjs';\n * import { switchMap } from 'rxjs/operators';\n *\n * const switched = of(1, 2, 3).pipe(switchMap((x: number) => of(x, x ** 2, x ** 3)));\n * switched.subscribe(x => console.log(x));\n * // outputs\n * // 1\n * // 1\n * // 1\n * // 2\n * // 4\n * // 8\n * // ... and so on\n * ```\n *\n * Rerun an interval Observable on every click event\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { switchMap } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(switchMap((ev) => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchAll}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional deprecated `resultSelector`) to each item\n * emitted by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n): OperatorFunction<T, ObservedValueOf<O>|R> {\n  if (typeof resultSelector === 'function') {\n    return (source: Observable<T>) => source.pipe(\n      switchMap((a, i) => from(project(a, i)).pipe(\n        map((b, ii) => resultSelector(a, b, i, ii))\n      ))\n    );\n  }\n  return (source: Observable<T>) => source.lift(new SwitchMapOperator(project));\n}\n\nclass SwitchMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private index = 0;\n  private innerSubscription?: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error!(error);\n      return;\n    }\n    this._innerSub(result);\n  }\n\n  private _innerSub(result: ObservableInput<R>) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    const innerSubscriber = new SimpleInnerSubscriber(this);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    this.innerSubscription = innerSubscribe(result, innerSubscriber);\n    // The returned subscription will usually be the subscriber that was\n    // passed. However, interop subscribers will be wrapped and for\n    // unsubscriptions to chain correctly, the wrapper needs to be added, too.\n    if (this.innerSubscription !== innerSubscriber) {\n      destination.add(this.innerSubscription);\n    }\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n    this.unsubscribe();\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = undefined;\n  }\n\n  notifyComplete(): void {\n    this.innerSubscription = undefined;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(innerValue: R): void {\n      this.destination.next!(innerValue);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function getClosureSafeProperty<T>(objWithPropertyToExtract: T): string {\n  for (let key in objWithPropertyToExtract) {\n    if (objWithPropertyToExtract[key] === getClosureSafeProperty as any) {\n      return key;\n    }\n  }\n  throw Error('Could not find renamed property on target object.');\n}\n\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nexport function fillProperties(target: {[key: string]: string}, source: {[key: string]: string}) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function stringify(token: any): string {\n  if (typeof token === 'string') {\n    return token;\n  }\n\n  if (Array.isArray(token)) {\n    return '[' + token.map(stringify).join(', ') + ']';\n  }\n\n  if (token == null) {\n    return '' + token;\n  }\n\n  if (token.overriddenName) {\n    return `${token.overriddenName}`;\n  }\n\n  if (token.name) {\n    return `${token.name}`;\n  }\n\n  const res = token.toString();\n\n  if (res == null) {\n    return '' + res;\n  }\n\n  const newLineIndex = res.indexOf('\\n');\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n\n/**\n * Concatenates two strings with separator, allocating new strings only when necessary.\n *\n * @param before before string.\n * @param separator separator string.\n * @param after after string.\n * @returns concatenated string.\n */\nexport function concatStringsWithSpace(before: string|null, after: string|null): string {\n  return (before == null || before === '') ?\n      (after === null ? '' : after) :\n      ((after == null || after === '') ? before : before + ' ' + after);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {getClosureSafeProperty} from '../util/property';\nimport {stringify} from '../util/stringify';\n\n\n\n/**\n * An interface that a function passed into {@link forwardRef} has to implement.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * @publicApi\n */\nexport interface ForwardRefFn {\n  (): any;\n}\n\nconst __forward_ref__ = getClosureSafeProperty({__forward_ref__: getClosureSafeProperty});\n\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\nexport function forwardRef(forwardRefFn: ForwardRefFn): Type<any> {\n  (<any>forwardRefFn).__forward_ref__ = forwardRef;\n  (<any>forwardRefFn).toString = function() {\n    return stringify(this());\n  };\n  return (<Type<any>><any>forwardRefFn);\n}\n\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @publicApi\n */\nexport function resolveForwardRef<T>(type: T): T {\n  return isForwardRef(type) ? type() : type;\n}\n\n/** Checks whether a function is wrapped by a `forwardRef`. */\nexport function isForwardRef(fn: any): fn is() => any {\n  return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n      fn.__forward_ref__ === forwardRef;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Base URL for the error details page.\n// Keep this value in sync with a similar const in\n// `packages/compiler-cli/src/ngtsc/diagnostics/src/error_code.ts`.\nconst ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.io/errors';\n\nexport const enum RuntimeErrorCode {\n  // Internal Errors\n\n  // Change Detection Errors\n  EXPRESSION_CHANGED_AFTER_CHECKED = '100',\n\n  // Dependency Injection Errors\n  CYCLIC_DI_DEPENDENCY = '200',\n  PROVIDER_NOT_FOUND = '201',\n\n  // Template Errors\n  MULTIPLE_COMPONENTS_MATCH = '300',\n  EXPORT_NOT_FOUND = '301',\n  PIPE_NOT_FOUND = '302',\n  UNKNOWN_BINDING = '303',\n  UNKNOWN_ELEMENT = '304',\n\n  // Styling Errors\n\n  // Declarations Errors\n\n  // i18n Errors\n\n  // Compilation Errors\n}\n\nexport class RuntimeError extends Error {\n  constructor(public code: RuntimeErrorCode, message: string) {\n    super(formatRuntimeError(code, message));\n  }\n}\n\n// Contains a set of error messages that have details guides at angular.io.\n// Full list of available error guides can be found at https://angular.io/errors\n/* tslint:disable:no-toplevel-property-access */\nexport const RUNTIME_ERRORS_WITH_GUIDES = new Set([\n  RuntimeErrorCode.EXPRESSION_CHANGED_AFTER_CHECKED,\n  RuntimeErrorCode.CYCLIC_DI_DEPENDENCY,\n  RuntimeErrorCode.PROVIDER_NOT_FOUND,\n  RuntimeErrorCode.MULTIPLE_COMPONENTS_MATCH,\n  RuntimeErrorCode.EXPORT_NOT_FOUND,\n  RuntimeErrorCode.PIPE_NOT_FOUND,\n]);\n/* tslint:enable:no-toplevel-property-access */\n\n/** Called to format a runtime error */\nexport function formatRuntimeError(code: RuntimeErrorCode, message: string): string {\n  const fullCode = code ? `NG0${code}: ` : '';\n\n  let errorMessage = `${fullCode}${message}`;\n\n  // Some runtime errors are still thrown without `ngDevMode` (for example\n  // `throwProviderNotFoundError`), so we add `ngDevMode` check here to avoid pulling\n  // `RUNTIME_ERRORS_WITH_GUIDES` symbol into prod bundles.\n  // TODO: revisit all instances where `RuntimeError` is thrown and see if `ngDevMode` can be added\n  // there instead to tree-shake more devmode-only code (and eventually remove `ngDevMode` check\n  // from this code).\n  if (ngDevMode && RUNTIME_ERRORS_WITH_GUIDES.has(code)) {\n    errorMessage = `${errorMessage}. Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/NG0${code}`;\n  }\n  return errorMessage;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Used for stringify render output in Ivy.\n * Important! This function is very performance-sensitive and we should\n * be extra careful not to introduce megamorphic reads in it.\n * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.\n */\nexport function renderStringify(value: any): string {\n  if (typeof value === 'string') return value;\n  if (value == null) return '';\n  // Use `String` so that it invokes the `toString` method of the value. Note that this\n  // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).\n  return String(value);\n}\n\n\n/**\n * Used to stringify a value so that it can be displayed in an error message.\n * Important! This function contains a megamorphic read and should only be\n * used for error messages.\n */\nexport function stringifyForError(value: any): string {\n  if (typeof value === 'function') return value.name || value.toString();\n  if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n    return value.type.name || value.type.toString();\n  }\n\n  return renderStringify(value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectorType} from '../di/interface/defs';\nimport {stringify} from '../util/stringify';\nimport {RuntimeError, RuntimeErrorCode} from './error_code';\nimport {stringifyForError} from './util/stringify_utils';\n\n\n/** Called when directives inject each other (creating a circular dependency) */\nexport function throwCyclicDependencyError(token: string, path?: string[]): never {\n  const depPath = path ? `. Dependency path: ${path.join(' > ')} > ${token}` : '';\n  throw new RuntimeError(\n      RuntimeErrorCode.CYCLIC_DI_DEPENDENCY,\n      `Circular dependency in DI detected for ${token}${depPath}`);\n}\n\nexport function throwMixedMultiProviderError() {\n  throw new Error(`Cannot mix multi providers and regular providers`);\n}\n\nexport function throwInvalidProviderError(\n    ngModuleType?: InjectorType<any>, providers?: any[], provider?: any) {\n  let ngModuleDetail = '';\n  if (ngModuleType && providers) {\n    const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');\n    ngModuleDetail =\n        ` - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`;\n  }\n\n  throw new Error(\n      `Invalid provider for the NgModule '${stringify(ngModuleType)}'` + ngModuleDetail);\n}\n\n\n/** Throws an error when a token is not found in DI. */\nexport function throwProviderNotFoundError(token: any, injectorName?: string): never {\n  const injectorDetails = injectorName ? ` in ${injectorName}` : '';\n  throw new RuntimeError(\n      RuntimeErrorCode.PROVIDER_NOT_FOUND,\n      `No provider for ${stringifyForError(token)} found${injectorDetails}`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../../interface/type';\nimport {getClosureSafeProperty} from '../../util/property';\nimport {ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, StaticClassProvider, ValueProvider} from './provider';\n\n\n\n/**\n * Information about how a type or `InjectionToken` interfaces with the DI system.\n *\n * At a minimum, this includes a `factory` which defines how to create the given type `T`, possibly\n * requesting injection of other types if necessary.\n *\n * Optionally, a `providedIn` parameter specifies that the given type belongs to a particular\n * `InjectorDef`, `NgModule`, or a special scope (e.g. `'root'`). A value of `null` indicates\n * that the injectable does not belong to any scope.\n *\n * @codeGenApi\n * @publicApi The ViewEngine compiler emits code with this type for injectables. This code is\n *   deployed to npm, and should be treated as public api.\n\n */\nexport interface ɵɵInjectableDef<T> {\n  /**\n   * Specifies that the given type belongs to a particular injector:\n   * - `InjectorType` such as `NgModule`,\n   * - `'root'` the root injector\n   * - `'any'` all injectors.\n   * - `null`, does not belong to any injector. Must be explicitly listed in the injector\n   *   `providers`.\n   */\n  providedIn: InjectorType<any>|'root'|'platform'|'any'|null;\n\n  /**\n   * The token to which this definition belongs.\n   *\n   * Note that this may not be the same as the type that the `factory` will create.\n   */\n  token: unknown;\n\n  /**\n   * Factory method to execute to create an instance of the injectable.\n   */\n  factory: (t?: Type<any>) => T;\n\n  /**\n   * In a case of no explicit injector, a location where the instance of the injectable is stored.\n   */\n  value: T|undefined;\n}\n\n/**\n * Information about the providers to be included in an `Injector` as well as how the given type\n * which carries the information should be created by the DI system.\n *\n * An `InjectorDef` can import other types which have `InjectorDefs`, forming a deep nested\n * structure of providers with a defined priority (identically to how `NgModule`s also have\n * an import/dependency structure).\n *\n * NOTE: This is a private type and should not be exported\n *\n * @codeGenApi\n */\nexport interface ɵɵInjectorDef<T> {\n  factory: () => T;\n\n  // TODO(alxhub): Narrow down the type here once decorators properly change the return type of the\n  // class they are decorating (to add the ɵprov property for example).\n  providers: (Type<any>|ValueProvider|ExistingProvider|FactoryProvider|ConstructorProvider|\n              StaticClassProvider|ClassProvider|any[])[];\n\n  imports: (InjectorType<any>|InjectorTypeWithProviders<any>)[];\n}\n\n/**\n * A `Type` which has an `InjectableDef` static field.\n *\n * `InjectableDefType`s contain their own Dependency Injection metadata and are usable in an\n * `InjectorDef`-based `StaticInjector.\n *\n * @publicApi\n */\nexport interface InjectableType<T> extends Type<T> {\n  /**\n   * Opaque type whose structure is highly version dependent. Do not rely on any properties.\n   */\n  ɵprov: never;\n}\n\n/**\n * A type which has an `InjectorDef` static field.\n *\n * `InjectorDefTypes` can be used to configure a `StaticInjector`.\n *\n * @publicApi\n */\nexport interface InjectorType<T> extends Type<T> {\n  /**\n   * Opaque type whose structure is highly version dependent. Do not rely on any properties.\n   */\n  ɵinj: never;\n}\n\n/**\n * Describes the `InjectorDef` equivalent of a `ModuleWithProviders`, an `InjectorDefType` with an\n * associated array of providers.\n *\n * Objects of this type can be listed in the imports section of an `InjectorDef`.\n *\n * NOTE: This is a private type and should not be exported\n */\nexport interface InjectorTypeWithProviders<T> {\n  ngModule: InjectorType<T>;\n  providers?: (Type<any>|ValueProvider|ExistingProvider|FactoryProvider|ConstructorProvider|\n               StaticClassProvider|ClassProvider|any[])[];\n}\n\n\n/**\n * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n * in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ɵprov` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\nexport function ɵɵdefineInjectable<T>(opts: {\n  token: unknown,\n  providedIn?: Type<any>|'root'|'platform'|'any'|null, factory: () => T,\n}): never {\n  return ({\n           token: opts.token,\n           providedIn: opts.providedIn as any || null,\n           factory: opts.factory,\n           value: undefined,\n         } as ɵɵInjectableDef<T>) as never;\n}\n\n/**\n * @deprecated in v8, delete after v10. This API should be used only by generated code, and that\n * code should now use ɵɵdefineInjectable instead.\n * @publicApi\n */\nexport const defineInjectable = ɵɵdefineInjectable;\n\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n *   create the type must be provided. If that factory function needs to inject arguments, it can\n *   use the `inject` function.\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has a `ɵprov` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @codeGenApi\n */\nexport function ɵɵdefineInjector(options: {factory: () => any, providers?: any[], imports?: any[]}):\n    never {\n  return ({\n           factory: options.factory,\n           providers: options.providers || [],\n           imports: options.imports || [],\n         } as ɵɵInjectorDef<any>) as never;\n}\n\n/**\n * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading\n * inherited value.\n *\n * @param type A type which may have its own (non-inherited) `ɵprov`.\n */\nexport function getInjectableDef<T>(type: any): ɵɵInjectableDef<T>|null {\n  return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);\n}\n\n/**\n * Return definition only if it is defined directly on `type` and is not inherited from a base\n * class of `type`.\n */\nfunction getOwnDefinition<T>(type: any, field: string): ɵɵInjectableDef<T>|null {\n  return type.hasOwnProperty(field) ? type[field] : null;\n}\n\n/**\n * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.\n *\n * @param type A type which may have `ɵprov`, via inheritance.\n *\n * @deprecated Will be removed in a future version of Angular, where an error will occur in the\n *     scenario if we find the `ɵprov` on an ancestor only.\n */\nexport function getInheritedInjectableDef<T>(type: any): ɵɵInjectableDef<T>|null {\n  const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);\n\n  if (def) {\n    const typeName = getTypeName(type);\n    // TODO(FW-1307): Re-add ngDevMode when closure can handle it\n    // ngDevMode &&\n    console.warn(\n        `DEPRECATED: DI is instantiating a token \"${\n            typeName}\" that inherits its @Injectable decorator but does not provide one itself.\\n` +\n        `This will become an error in a future version of Angular. Please add @Injectable() to the \"${\n            typeName}\" class.`);\n    return def;\n  } else {\n    return null;\n  }\n}\n\n/** Gets the name of a type, accounting for some cross-browser differences. */\nfunction getTypeName(type: any): string {\n  // `Function.prototype.name` behaves differently between IE and other browsers. In most browsers\n  // it'll always return the name of the function itself, no matter how many other functions it\n  // inherits from. On IE the function doesn't have its own `name` property, but it takes it from\n  // the lowest level in the prototype chain. E.g. if we have `class Foo extends Parent` most\n  // browsers will evaluate `Foo.name` to `Foo` while IE will return `Parent`. We work around\n  // the issue by converting the function to a string and parsing its name out that way via a regex.\n  if (type.hasOwnProperty('name')) {\n    return type.name;\n  }\n\n  const match = ('' + type).match(/^function\\s*([^\\s(]+)/);\n  return match === null ? '' : match[1];\n}\n\n/**\n * Read the injector def type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have an injector def (`ɵinj`)\n */\nexport function getInjectorDef<T>(type: any): ɵɵInjectorDef<T>|null {\n  return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ?\n      (type as any)[NG_INJ_DEF] :\n      null;\n}\n\nexport const NG_PROV_DEF = getClosureSafeProperty({ɵprov: getClosureSafeProperty});\nexport const NG_INJ_DEF = getClosureSafeProperty({ɵinj: getClosureSafeProperty});\n\n// We need to keep these around so we can read off old defs if new defs are unavailable\nexport const NG_INJECTABLE_DEF = getClosureSafeProperty({ngInjectableDef: getClosureSafeProperty});\nexport const NG_INJECTOR_DEF = getClosureSafeProperty({ngInjectorDef: getClosureSafeProperty});\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractType, Type} from '../interface/type';\nimport {throwProviderNotFoundError} from '../render3/errors_di';\nimport {assertNotEqual} from '../util/assert';\nimport {stringify} from '../util/stringify';\nimport {InjectionToken} from './injection_token';\nimport {getInjectableDef, ɵɵInjectableDef} from './interface/defs';\nimport {InjectFlags} from './interface/injector';\n\n\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n */\nlet _injectImplementation:\n    (<T>(token: Type<T>|AbstractType<T>|InjectionToken<T>, flags?: InjectFlags) => T | null)|\n    undefined;\nexport function getInjectImplementation() {\n  return _injectImplementation;\n}\n\n\n/**\n * Sets the current inject implementation.\n */\nexport function setInjectImplementation(\n    impl: (<T>(token: Type<T>|AbstractType<T>|InjectionToken<T>, flags?: InjectFlags) => T | null)|\n    undefined):\n    (<T>(token: Type<T>|AbstractType<T>|InjectionToken<T>, flags?: InjectFlags) => T | null)|\n    undefined {\n  const previous = _injectImplementation;\n  _injectImplementation = impl;\n  return previous;\n}\n\n\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * `InjectableDef`.\n */\nexport function injectRootLimpMode<T>(\n    token: Type<T>|AbstractType<T>|InjectionToken<T>, notFoundValue: T|undefined,\n    flags: InjectFlags): T|null {\n  const injectableDef: ɵɵInjectableDef<T>|null = getInjectableDef(token);\n  if (injectableDef && injectableDef.providedIn == 'root') {\n    return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n                                               injectableDef.value;\n  }\n  if (flags & InjectFlags.Optional) return null;\n  if (notFoundValue !== undefined) return notFoundValue;\n  throwProviderNotFoundError(stringify(token), 'Injector');\n}\n\n\n/**\n * Assert that `_injectImplementation` is not `fn`.\n *\n * This is useful, to prevent infinite recursion.\n *\n * @param fn Function which it should not equal to\n */\nexport function assertInjectImplementationNotEqual(\n    fn: (<T>(token: Type<T>|AbstractType<T>|InjectionToken<T>, flags?: InjectFlags) => T | null)) {\n  ngDevMode &&\n      assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * Special flag indicating that a decorator is of type `Inject`. It's used to make `Inject`\n * decorator tree-shakable (so we don't have to rely on the `instanceof` checks).\n * Note: this flag is not included into the `InjectFlags` since it's an internal-only API.\n */\nexport const enum DecoratorFlags {\n  Inject = -1\n}\n\n/**\n * Injection flags for DI.\n *\n * @publicApi\n */\nexport enum InjectFlags {\n  // TODO(alxhub): make this 'const' (and remove `InternalInjectFlags` enum) when ngc no longer\n  // writes exports of it into ngfactory files.\n\n  /** Check self and check parent injector if needed */\n  Default = 0b0000,\n\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  Host = 0b0001,\n\n  /** Don't ascend to ancestors of the node requesting injection. */\n  Self = 0b0010,\n\n  /** Skip the node that is requesting injection. */\n  SkipSelf = 0b0100,\n\n  /** Inject `defaultValue` instead if token not found. */\n  Optional = 0b1000,\n}\n\n/**\n * This enum is an exact copy of the `InjectFlags` enum above, but the difference is that this is a\n * const enum, so actual enum values would be inlined in generated code. The `InjectFlags` enum can\n * be turned into a const enum when ViewEngine is removed (see TODO at the `InjectFlags` enum\n * above). The benefit of inlining is that we can use these flags at the top level without affecting\n * tree-shaking (see \"no-toplevel-property-access\" tslint rule for more info).\n * Keep this enum in sync with `InjectFlags` enum above.\n */\nexport const enum InternalInjectFlags {\n  /** Check self and check parent injector if needed */\n  Default = 0b0000,\n\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  Host = 0b0001,\n\n  /** Don't ascend to ancestors of the node requesting injection. */\n  Self = 0b0010,\n\n  /** Skip the node that is requesting injection. */\n  SkipSelf = 0b0100,\n\n  /** Inject `defaultValue` instead if token not found. */\n  Optional = 0b1000,\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nexport function noSideEffects<T>(fn: () => T): T {\n  return {toString: fn}.toString() as unknown as T;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n * @see {@link ChangeDetectorRef#usage-notes Change detection usage}\n *\n * @publicApi\n */\nexport enum ChangeDetectionStrategy {\n  /**\n   * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n   * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n   * Change detection can still be explicitly invoked.\n   * This strategy applies to all child directives and cannot be overridden.\n   */\n  OnPush = 0,\n\n  /**\n   * Use the default `CheckAlways` strategy, in which change detection is automatic until\n   * explicitly deactivated.\n   */\n  Default = 1,\n}\n\n/**\n * Defines the possible states of the default change detector.\n * @see `ChangeDetectorRef`\n */\nexport enum ChangeDetectorStatus {\n  /**\n   * A state in which, after calling `detectChanges()`, the change detector\n   * state becomes `Checked`, and must be explicitly invoked or reactivated.\n   */\n  CheckOnce,\n\n  /**\n   * A state in which change detection is skipped until the change detector mode\n   * becomes `CheckOnce`.\n   */\n  Checked,\n\n  /**\n   * A state in which change detection continues automatically until explicitly\n   * deactivated.\n   */\n  CheckAlways,\n\n  /**\n   * A state in which a change detector sub tree is not a part of the main tree and\n   * should be skipped.\n   */\n  Detached,\n\n  /**\n   * Indicates that the change detector encountered an error checking a binding\n   * or calling a directive lifecycle method and is now in an inconsistent state. Change\n   * detectors in this state do not detect changes.\n   */\n  Errored,\n\n  /**\n   * Indicates that the change detector has been destroyed.\n   */\n  Destroyed,\n}\n\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @param changeDetectionStrategy The strategy to check.\n * @returns True if the given strategy is the current default, false otherwise.\n * @see `ChangeDetectorStatus`\n * @see `ChangeDetectorRef`\n */\nexport function isDefaultChangeDetectionStrategy(changeDetectionStrategy: ChangeDetectionStrategy):\n    boolean {\n  return changeDetectionStrategy == null ||\n      changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Defines template and style encapsulation options available for Component's {@link Component}.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\nexport enum ViewEncapsulation {\n  /**\n   * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n   * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n   * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n   * selectors.\n   *\n   * This is the default option.\n   */\n  Emulated = 0,\n\n  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n\n  /**\n   * Don't provide any template or style encapsulation.\n   */\n  None = 2,\n\n  /**\n   * Use Shadow DOM to encapsulate styles.\n   *\n   * For the DOM this means using modern [Shadow\n   * DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM) and\n   * creating a ShadowRoot for Component's Host Element.\n   */\n  ShadowDom = 3\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jteplitz602): Load WorkerGlobalScope from lib.webworker.d.ts file #3492\ndeclare var WorkerGlobalScope: any /** TODO #9100 */;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\ndeclare var global: any /** TODO #9100 */;\n\nconst __globalThis = typeof globalThis !== 'undefined' && globalThis;\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\n\n// Always use __globalThis if available, which is the spec-defined global variable across all\n// environments, then fallback to __global first, because in Node tests both __global and\n// __window may be defined and _global should be __global in that case.\nconst _global = __globalThis || __global || __window || __self;\n\n/**\n * Attention: whenever providing a new value, be sure to add an\n * entry into the corresponding `....externs.js` file,\n * so that closure won't use that global for its purposes.\n */\nexport {_global as global};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {initNgDevMode} from '../util/ng_dev_mode';\n\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n */\n\nexport const EMPTY_OBJ: {} = {};\nexport const EMPTY_ARRAY: any[] = [];\n\n// freezing the values prevents any code from accidentally inserting new values in\nif ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {\n  // These property accesses can be ignored because ngDevMode will be set to false\n  // when optimizing code and the whole if statement will be dropped.\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_OBJ);\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_ARRAY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getClosureSafeProperty} from '../util/property';\n\nexport const NG_COMP_DEF = getClosureSafeProperty({ɵcmp: getClosureSafeProperty});\nexport const NG_DIR_DEF = getClosureSafeProperty({ɵdir: getClosureSafeProperty});\nexport const NG_PIPE_DEF = getClosureSafeProperty({ɵpipe: getClosureSafeProperty});\nexport const NG_MOD_DEF = getClosureSafeProperty({ɵmod: getClosureSafeProperty});\nexport const NG_LOC_ID_DEF = getClosureSafeProperty({ɵloc: getClosureSafeProperty});\nexport const NG_FACTORY_DEF = getClosureSafeProperty({ɵfac: getClosureSafeProperty});\n\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\nexport const NG_ELEMENT_ID = getClosureSafeProperty({__NG_ELEMENT_ID__: getClosureSafeProperty});\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy} from '../change_detection/constants';\nimport {Mutable, Type} from '../interface/type';\nimport {NgModuleDef, NgModuleType} from '../metadata/ng_module_def';\nimport {SchemaMetadata} from '../metadata/schema';\nimport {ViewEncapsulation} from '../metadata/view';\nimport {noSideEffects} from '../util/closure';\nimport {initNgDevMode} from '../util/ng_dev_mode';\nimport {stringify} from '../util/stringify';\nimport {EMPTY_ARRAY, EMPTY_OBJ} from './empty';\nimport {NG_COMP_DEF, NG_DIR_DEF, NG_LOC_ID_DEF, NG_MOD_DEF, NG_PIPE_DEF} from './fields';\nimport {ComponentDef, ComponentDefFeature, ComponentTemplate, ComponentType, ContentQueriesFunction, DirectiveDef, DirectiveDefFeature, DirectiveTypesOrFactory, HostBindingsFunction, PipeDef, PipeTypesOrFactory, ViewQueriesFunction} from './interfaces/definition';\nimport {AttributeMarker, TAttributes, TConstantsOrFactory} from './interfaces/node';\nimport {CssSelectorList, SelectorFlags} from './interfaces/projection';\n\n\nlet _renderCompCount = 0;\n\n// While these types are unused here, they are required so that types don't\n// get resolved lazily. see: https://github.com/Microsoft/web-build-tools/issues/1050\ntype _web_build_tools_issue_1050_SelectorFlags = SelectorFlags;\ntype _web_build_tools_issue_1050_AttributeMarker = AttributeMarker;\n\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵcmp = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @codeGenApi\n */\nexport function ɵɵdefineComponent<T>(componentDefinition: {\n  /**\n   * Directive type, needed to configure the injector.\n   */\n  type: Type<T>;\n\n  /** The selectors that will be used to match nodes to this component. */\n  selectors?: CssSelectorList;\n\n  /**\n   * The number of nodes, local refs, and pipes in this component template.\n   *\n   * Used to calculate the length of this component's LView array, so we\n   * can pre-fill the array and set the binding start index.\n   */\n  // TODO(kara): remove queries from this count\n  decls: number;\n\n  /**\n   * The number of bindings in this component template (including pure fn bindings).\n   *\n   * Used to calculate the length of this component's LView array, so we\n   * can pre-fill the array and set the host binding start index.\n   */\n  vars: number;\n\n  /**\n   * A map of input names.\n   *\n   * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n   *\n   * Given:\n   * ```\n   * class MyComponent {\n   *   @Input()\n   *   publicInput1: string;\n   *\n   *   @Input('publicInput2')\n   *   declaredInput2: string;\n   * }\n   * ```\n   *\n   * is described as:\n   * ```\n   * {\n   *   publicInput1: 'publicInput1',\n   *   declaredInput2: ['publicInput2', 'declaredInput2'],\n   * }\n   * ```\n   *\n   * Which the minifier may translate to:\n   * ```\n   * {\n   *   minifiedPublicInput1: 'publicInput1',\n   *   minifiedDeclaredInput2: ['publicInput2', 'declaredInput2'],\n   * }\n   * ```\n   *\n   * This allows the render to re-construct the minified, public, and declared names\n   * of properties.\n   *\n   * NOTE:\n   *  - Because declared and public name are usually same we only generate the array\n   *    `['public', 'declared']` format when they differ.\n   *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n   *    inconsistent behavior in that it uses declared names rather than minified or public. For\n   *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n   *    API will be simplified to be consistent with `output`.\n   */\n  inputs?: {[P in keyof T]?: string | [string, string]};\n\n  /**\n   * A map of output names.\n   *\n   * The format is in: `{[actualPropertyName: string]:string}`.\n   *\n   * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n   *\n   * This allows the render to re-construct the minified and non-minified names\n   * of properties.\n   */\n  outputs?: {[P in keyof T]?: string};\n\n  /**\n   * Function executed by the parent template to allow child directive to apply host bindings.\n   */\n  hostBindings?: HostBindingsFunction<T>;\n\n  /**\n   * The number of bindings in this directive `hostBindings` (including pure fn bindings).\n   *\n   * Used to calculate the length of the component's LView array, so we\n   * can pre-fill the array and set the host binding start index.\n   */\n  hostVars?: number;\n\n  /**\n   * Assign static attribute values to a host element.\n   *\n   * This property will assign static attribute values as well as class and style\n   * values to a host element. Since attribute values can consist of different types of values, the\n   * `hostAttrs` array must include the values in the following format:\n   *\n   * attrs = [\n   *   // static attributes (like `title`, `name`, `id`...)\n   *   attr1, value1, attr2, value,\n   *\n   *   // a single namespace value (like `x:id`)\n   *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n   *\n   *   // another single namespace value (like `x:name`)\n   *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n   *\n   *   // a series of CSS classes that will be applied to the element (no spaces)\n   *   CLASSES_MARKER, class1, class2, class3,\n   *\n   *   // a series of CSS styles (property + value) that will be applied to the element\n   *   STYLES_MARKER, prop1, value1, prop2, value2\n   * ]\n   *\n   * All non-class and non-style attributes must be defined at the start of the list\n   * first before all class and style values are set. When there is a change in value\n   * type (like when classes and styles are introduced) a marker must be used to separate\n   * the entries. The marker values themselves are set via entries found in the\n   * [AttributeMarker] enum.\n   */\n  hostAttrs?: TAttributes;\n\n  /**\n   * Function to create instances of content queries associated with a given directive.\n   */\n  contentQueries?: ContentQueriesFunction<T>;\n\n  /**\n   * Defines the name that can be used in the template to assign this directive to a variable.\n   *\n   * See: {@link Directive.exportAs}\n   */\n  exportAs?: string[];\n\n  /**\n   * Template function use for rendering DOM.\n   *\n   * This function has following structure.\n   *\n   * ```\n   * function Template<T>(ctx:T, creationMode: boolean) {\n   *   if (creationMode) {\n   *     // Contains creation mode instructions.\n   *   }\n   *   // Contains binding update instructions\n   * }\n   * ```\n   *\n   * Common instructions are:\n   * Creation mode instructions:\n   *  - `elementStart`, `elementEnd`\n   *  - `text`\n   *  - `container`\n   *  - `listener`\n   *\n   * Binding update instructions:\n   * - `bind`\n   * - `elementAttribute`\n   * - `elementProperty`\n   * - `elementClass`\n   * - `elementStyle`\n   *\n   */\n  template: ComponentTemplate<T>;\n\n  /**\n   * Constants for the nodes in the component's view.\n   * Includes attribute arrays, local definition arrays etc.\n   */\n  consts?: TConstantsOrFactory;\n\n  /**\n   * An array of `ngContent[selector]` values that were found in the template.\n   */\n  ngContentSelectors?: string[];\n\n  /**\n   * Additional set of instructions specific to view query processing. This could be seen as a\n   * set of instruction to be inserted into the template function.\n   *\n   * Query-related instructions need to be pulled out to a specific function as a timing of\n   * execution is different as compared to all other instructions (after change detection hooks but\n   * before view hooks).\n   */\n  viewQuery?: ViewQueriesFunction<T>| null;\n\n  /**\n   * A list of optional features to apply.\n   *\n   * See: {@link NgOnChangesFeature}, {@link ProvidersFeature}\n   */\n  features?: ComponentDefFeature[];\n\n  /**\n   * Defines template and style encapsulation options available for Component's {@link Component}.\n   */\n  encapsulation?: ViewEncapsulation;\n\n  /**\n   * Defines arbitrary developer-defined data to be stored on a renderer instance.\n   * This is useful for renderers that delegate to other renderers.\n   *\n   * see: animation\n   */\n  data?: {[kind: string]: any};\n\n  /**\n   * A set of styles that the component needs to be present for component to render correctly.\n   */\n  styles?: string[];\n\n  /**\n   * The strategy that the default change detector uses to detect changes.\n   * When set, takes effect the next time change detection is triggered.\n   */\n  changeDetection?: ChangeDetectionStrategy;\n\n  /**\n   * Registry of directives and components that may be found in this component's view.\n   *\n   * The property is either an array of `DirectiveDef`s or a function which returns the array of\n   * `DirectiveDef`s. The function is necessary to be able to support forward declarations.\n   */\n  directives?: DirectiveTypesOrFactory | null;\n\n  /**\n   * Registry of pipes that may be found in this component's view.\n   *\n   * The property is either an array of `PipeDefs`s or a function which returns the array of\n   * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n   */\n  pipes?: PipeTypesOrFactory | null;\n\n  /**\n   * The set of schemas that declare elements to be allowed in the component's template.\n   */\n  schemas?: SchemaMetadata[] | null;\n}): never {\n  return noSideEffects(() => {\n           // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.\n           // See the `initNgDevMode` docstring for more information.\n           (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n\n           const type = componentDefinition.type;\n           const typePrototype = type.prototype;\n           const declaredInputs: {[key: string]: string} = {} as any;\n           const def: Mutable<ComponentDef<any>, keyof ComponentDef<any>> = {\n             type: type,\n             providersResolver: null,\n             decls: componentDefinition.decls,\n             vars: componentDefinition.vars,\n             factory: null,\n             template: componentDefinition.template || null!,\n             consts: componentDefinition.consts || null,\n             ngContentSelectors: componentDefinition.ngContentSelectors,\n             hostBindings: componentDefinition.hostBindings || null,\n             hostVars: componentDefinition.hostVars || 0,\n             hostAttrs: componentDefinition.hostAttrs || null,\n             contentQueries: componentDefinition.contentQueries || null,\n             declaredInputs: declaredInputs,\n             inputs: null!,   // assigned in noSideEffects\n             outputs: null!,  // assigned in noSideEffects\n             exportAs: componentDefinition.exportAs || null,\n             onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n             directiveDefs: null!,  // assigned in noSideEffects\n             pipeDefs: null!,       // assigned in noSideEffects\n             selectors: componentDefinition.selectors || EMPTY_ARRAY,\n             viewQuery: componentDefinition.viewQuery || null,\n             features: componentDefinition.features as DirectiveDefFeature[] || null,\n             data: componentDefinition.data || {},\n             // TODO(misko): convert ViewEncapsulation into const enum so that it can be used\n             // directly in the next line. Also `None` should be 0 not 2.\n             encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n             id: 'c',\n             styles: componentDefinition.styles || EMPTY_ARRAY,\n             _: null as never,\n             setInput: null,\n             schemas: componentDefinition.schemas || null,\n             tView: null,\n           };\n           const directiveTypes = componentDefinition.directives!;\n           const feature = componentDefinition.features;\n           const pipeTypes = componentDefinition.pipes!;\n           def.id += _renderCompCount++;\n           def.inputs = invertObject(componentDefinition.inputs, declaredInputs),\n           def.outputs = invertObject(componentDefinition.outputs),\n           feature && feature.forEach((fn) => fn(def));\n           def.directiveDefs = directiveTypes ?\n               () => (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                         .map(extractDirectiveDef) :\n               null;\n           def.pipeDefs = pipeTypes ?\n               () =>\n                   (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef) :\n               null;\n\n           return def as never;\n         }) as never;\n}\n\n/**\n * Generated next to NgModules to monkey-patch directive and pipe references onto a component's\n * definition, when generating a direct reference in the component file would otherwise create an\n * import cycle.\n *\n * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.\n *\n * @codeGenApi\n */\nexport function ɵɵsetComponentScope(\n    type: ComponentType<any>, directives: Type<any>[], pipes: Type<any>[]): void {\n  const def = (type.ɵcmp as ComponentDef<any>);\n  def.directiveDefs = () => directives.map(extractDirectiveDef);\n  def.pipeDefs = () => pipes.map(extractPipeDef);\n}\n\nexport function extractDirectiveDef(type: Type<any>): DirectiveDef<any>|ComponentDef<any> {\n  const def = getComponentDef(type) || getDirectiveDef(type);\n  if (ngDevMode && !def) {\n    throw new Error(`'${type.name}' is neither 'ComponentType' or 'DirectiveType'.`);\n  }\n  return def!;\n}\n\nexport function extractPipeDef(type: Type<any>): PipeDef<any> {\n  const def = getPipeDef(type);\n  if (ngDevMode && !def) {\n    throw new Error(`'${type.name}' is not a 'PipeType'.`);\n  }\n  return def!;\n}\n\nexport const autoRegisterModuleById: {[id: string]: NgModuleType} = {};\n\n/**\n * @codeGenApi\n */\nexport function ɵɵdefineNgModule<T>(def: {\n  /** Token representing the module. Used by DI. */\n  type: T;\n\n  /** List of components to bootstrap. */\n  bootstrap?: Type<any>[] | (() => Type<any>[]);\n\n  /** List of components, directives, and pipes declared by this module. */\n  declarations?: Type<any>[] | (() => Type<any>[]);\n\n  /** List of modules or `ModuleWithProviders` imported by this module. */\n  imports?: Type<any>[] | (() => Type<any>[]);\n\n  /**\n   * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\n   * module.\n   */\n  exports?: Type<any>[] | (() => Type<any>[]);\n\n  /** The set of schemas that declare elements to be allowed in the NgModule. */\n  schemas?: SchemaMetadata[] | null;\n\n  /** Unique ID for the module that is used with `getModuleFactory`. */\n  id?: string | null;\n}): never {\n  const res: NgModuleDef<T> = {\n    type: def.type,\n    bootstrap: def.bootstrap || EMPTY_ARRAY,\n    declarations: def.declarations || EMPTY_ARRAY,\n    imports: def.imports || EMPTY_ARRAY,\n    exports: def.exports || EMPTY_ARRAY,\n    transitiveCompileScopes: null,\n    schemas: def.schemas || null,\n    id: def.id || null,\n  };\n  if (def.id != null) {\n    noSideEffects(() => {\n      autoRegisterModuleById[def.id!] = def.type as unknown as NgModuleType;\n    });\n  }\n  return res as never;\n}\n\n/**\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\n * existing module definition.\n *\n * Scope metadata of modules is not used in production builds, so calls to this function can be\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n * to become eligible for tree-shaking as well.\n *\n * @codeGenApi\n */\nexport function ɵɵsetNgModuleScope(type: any, scope: {\n  /** List of components, directives, and pipes declared by this module. */\n  declarations?: Type<any>[]|(() => Type<any>[]);\n\n  /** List of modules or `ModuleWithProviders` imported by this module. */\n  imports?: Type<any>[] | (() => Type<any>[]);\n\n  /**\n   * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\n   * module.\n   */\n  exports?: Type<any>[] | (() => Type<any>[]);\n}): void {\n  return noSideEffects(() => {\n           const ngModuleDef = getNgModuleDef(type, true);\n           ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY;\n           ngModuleDef.imports = scope.imports || EMPTY_ARRAY;\n           ngModuleDef.exports = scope.exports || EMPTY_ARRAY;\n         }) as never;\n}\n\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n *   @Input()\n *   propName1: string;\n *\n *   @Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n\n */\nfunction invertObject<T>(\n    obj?: {[P in keyof T]?: string|[string, string]},\n    secondary?: {[key: string]: string}): {[P in keyof T]: string} {\n  if (obj == null) return EMPTY_OBJ as any;\n  const newLookup: any = {};\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      let publicName: string|[string, string] = obj[minifiedKey]!;\n      let declaredName = publicName;\n      if (Array.isArray(publicName)) {\n        declaredName = publicName[1];\n        publicName = publicName[0];\n      }\n      newLookup[publicName] = minifiedKey;\n      if (secondary) {\n        (secondary[publicName] = declaredName as string);\n      }\n    }\n  }\n  return newLookup;\n}\n\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```ts\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵdir = ɵɵdefineDirective({\n *     ...\n *   });\n * }\n * ```\n *\n * @codeGenApi\n */\nexport const ɵɵdefineDirective =\n    ɵɵdefineComponent as any as<T>(directiveDefinition: {\n      /**\n       * Directive type, needed to configure the injector.\n       */\n      type: Type<T>;\n\n      /** The selectors that will be used to match nodes to this directive. */\n      selectors?: CssSelectorList;\n\n      /**\n       * A map of input names.\n       *\n       * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n       *\n       * Given:\n       * ```\n       * class MyComponent {\n       *   @Input()\n       *   publicInput1: string;\n       *\n       *   @Input('publicInput2')\n       *   declaredInput2: string;\n       * }\n       * ```\n       *\n       * is described as:\n       * ```\n       * {\n       *   publicInput1: 'publicInput1',\n       *   declaredInput2: ['declaredInput2', 'publicInput2'],\n       * }\n       * ```\n       *\n       * Which the minifier may translate to:\n       * ```\n       * {\n       *   minifiedPublicInput1: 'publicInput1',\n       *   minifiedDeclaredInput2: [ 'publicInput2', 'declaredInput2'],\n       * }\n       * ```\n       *\n       * This allows the render to re-construct the minified, public, and declared names\n       * of properties.\n       *\n       * NOTE:\n       *  - Because declared and public name are usually same we only generate the array\n       *    `['declared', 'public']` format when they differ.\n       *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n       *    inconsistent behavior in that it uses declared names rather than minified or public. For\n       *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n       *    API will be simplified to be consistent with `output`.\n       */\n      inputs?: {[P in keyof T]?: string | [string, string]};\n\n      /**\n       * A map of output names.\n       *\n       * The format is in: `{[actualPropertyName: string]:string}`.\n       *\n       * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n       *\n       * This allows the render to re-construct the minified and non-minified names\n       * of properties.\n       */\n      outputs?: {[P in keyof T]?: string};\n\n      /**\n       * A list of optional features to apply.\n       *\n       * See: {@link NgOnChangesFeature}, {@link ProvidersFeature}, {@link InheritDefinitionFeature}\n       */\n      features?: DirectiveDefFeature[];\n\n      /**\n       * Function executed by the parent template to allow child directive to apply host bindings.\n       */\n      hostBindings?: HostBindingsFunction<T>;\n\n      /**\n       * The number of bindings in this directive `hostBindings` (including pure fn bindings).\n       *\n       * Used to calculate the length of the component's LView array, so we\n       * can pre-fill the array and set the host binding start index.\n       */\n      hostVars?: number;\n\n      /**\n       * Assign static attribute values to a host element.\n       *\n       * This property will assign static attribute values as well as class and style\n       * values to a host element. Since attribute values can consist of different types of values,\n       * the `hostAttrs` array must include the values in the following format:\n       *\n       * attrs = [\n       *   // static attributes (like `title`, `name`, `id`...)\n       *   attr1, value1, attr2, value,\n       *\n       *   // a single namespace value (like `x:id`)\n       *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n       *\n       *   // another single namespace value (like `x:name`)\n       *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n       *\n       *   // a series of CSS classes that will be applied to the element (no spaces)\n       *   CLASSES_MARKER, class1, class2, class3,\n       *\n       *   // a series of CSS styles (property + value) that will be applied to the element\n       *   STYLES_MARKER, prop1, value1, prop2, value2\n       * ]\n       *\n       * All non-class and non-style attributes must be defined at the start of the list\n       * first before all class and style values are set. When there is a change in value\n       * type (like when classes and styles are introduced) a marker must be used to separate\n       * the entries. The marker values themselves are set via entries found in the\n       * [AttributeMarker] enum.\n       */\n      hostAttrs?: TAttributes;\n\n      /**\n       * Function to create instances of content queries associated with a given directive.\n       */\n      contentQueries?: ContentQueriesFunction<T>;\n\n      /**\n       * Additional set of instructions specific to view query processing. This could be seen as a\n       * set of instructions to be inserted into the template function.\n       */\n      viewQuery?: ViewQueriesFunction<T>| null;\n\n      /**\n       * Defines the name that can be used in the template to assign this directive to a variable.\n       *\n       * See: {@link Directive.exportAs}\n       */\n      exportAs?: string[];\n    }) => never;\n\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ɵpipe = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n *\n * @codeGenApi\n */\nexport function ɵɵdefinePipe<T>(pipeDef: {\n  /** Name of the pipe. Used for matching pipes in template to pipe defs. */\n  name: string,\n\n  /** Pipe class reference. Needed to extract pipe lifecycle hooks. */\n  type: Type<T>,\n\n  /** Whether the pipe is pure. */\n  pure?: boolean\n}): never {\n  return (<PipeDef<T>>{\n           type: pipeDef.type,\n           name: pipeDef.name,\n           factory: null,\n           pure: pipeDef.pure !== false,\n           onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n         }) as never;\n}\n\n/**\n * The following getter methods retrieve the definition from the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n */\n\nexport function getComponentDef<T>(type: any): ComponentDef<T>|null {\n  return type[NG_COMP_DEF] || null;\n}\n\nexport function getDirectiveDef<T>(type: any): DirectiveDef<T>|null {\n  return type[NG_DIR_DEF] || null;\n}\n\nexport function getPipeDef<T>(type: any): PipeDef<T>|null {\n  return type[NG_PIPE_DEF] || null;\n}\n\nexport function getNgModuleDef<T>(type: any, throwNotFound: true): NgModuleDef<T>;\nexport function getNgModuleDef<T>(type: any): NgModuleDef<T>|null;\nexport function getNgModuleDef<T>(type: any, throwNotFound?: boolean): NgModuleDef<T>|null {\n  const ngModuleDef = type[NG_MOD_DEF] || null;\n  if (!ngModuleDef && throwNotFound === true) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵmod' property.`);\n  }\n  return ngModuleDef;\n}\n\nexport function getNgLocaleIdDef(type: any): string|null {\n  return (type as any)[NG_LOC_ID_DEF] || null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LContainer, TYPE} from './container';\nimport {ComponentDef, DirectiveDef} from './definition';\nimport {TNode, TNodeFlags} from './node';\nimport {RNode} from './renderer_dom';\nimport {FLAGS, LView, LViewFlags} from './view';\n\n\n/**\n * True if `value` is `LView`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function isLView(value: RNode|LView|LContainer|{}|null): value is LView {\n  return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n\n/**\n * True if `value` is `LContainer`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function isLContainer(value: RNode|LView|LContainer|{}|null): value is LContainer {\n  return Array.isArray(value) && value[TYPE] === true;\n}\n\nexport function isContentQueryHost(tNode: TNode): boolean {\n  return (tNode.flags & TNodeFlags.hasContentQuery) !== 0;\n}\n\nexport function isComponentHost(tNode: TNode): boolean {\n  return (tNode.flags & TNodeFlags.isComponentHost) === TNodeFlags.isComponentHost;\n}\n\nexport function isDirectiveHost(tNode: TNode): boolean {\n  return (tNode.flags & TNodeFlags.isDirectiveHost) === TNodeFlags.isDirectiveHost;\n}\n\nexport function isComponentDef<T>(def: DirectiveDef<T>): def is ComponentDef<T> {\n  return (def as ComponentDef<T>).template !== null;\n}\n\nexport function isRootView(target: LView): boolean {\n  return (target[FLAGS] & LViewFlags.IsRoot) !== 0;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TNode} from './node';\nimport {RComment, RElement} from './renderer_dom';\nimport {HOST, LView, NEXT, PARENT, T_HOST, TRANSPLANTED_VIEWS_TO_REFRESH} from './view';\n\n\n\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n */\nexport const TYPE = 1;\n\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\n\n/**\n * Flag to signify that this `LContainer` may have transplanted views which need to be change\n * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.\n *\n * This flag, once set, is never unset for the `LContainer`. This means that when unset we can skip\n * a lot of work in `refreshEmbeddedViews`. But when set we still need to verify\n * that the `MOVED_VIEWS` are transplanted and on-push.\n */\nexport const HAS_TRANSPLANTED_VIEWS = 2;\n\n// PARENT, NEXT, TRANSPLANTED_VIEWS_TO_REFRESH are indices 3, 4, and 5\n// As we already have these constants in LView, we don't need to re-create them.\n\n// T_HOST is index 6\n// We already have this constants in LView, we don't need to re-create it.\n\nexport const NATIVE = 7;\nexport const VIEW_REFS = 8;\nexport const MOVED_VIEWS = 9;\n\n\n/**\n * Size of LContainer's header. Represents the index after which all views in the\n * container will be inserted. We need to keep a record of current views so we know\n * which views are already in the DOM (and don't need to be re-added) and so we can\n * remove views from the DOM when they are no longer required.\n */\nexport const CONTAINER_HEADER_OFFSET = 10;\n\n/**\n * The state associated with a container.\n *\n * This is an array so that its structure is closer to LView. This helps\n * when traversing the view tree (which is a mix of containers and component\n * views), so we can jump to viewOrContainer[NEXT] in the same way regardless\n * of type.\n */\nexport interface LContainer extends Array<any> {\n  /**\n   * The host element of this LContainer.\n   *\n   * The host could be an LView if this container is on a component node.\n   * In that case, the component LView is its HOST.\n   */\n  readonly[HOST]: RElement|RComment|LView;\n\n  /**\n   * This is a type field which allows us to differentiate `LContainer` from `StylingContext` in an\n   * efficient way. The value is always set to `true`\n   */\n  [TYPE]: true;\n\n  /**\n   * Flag to signify that this `LContainer` may have transplanted views which need to be change\n   * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.\n   *\n   * This flag, once set, is never unset for the `LContainer`.\n   */\n  [HAS_TRANSPLANTED_VIEWS]: boolean;\n\n  /**\n   * Access to the parent view is necessary so we can propagate back\n   * up from inside a container to parent[NEXT].\n   */\n  [PARENT]: LView;\n\n  /**\n   * This allows us to jump from a container to a sibling container or component\n   * view with the same parent, so we can remove listeners efficiently.\n   */\n  [NEXT]: LView|LContainer|null;\n\n  /**\n   * The number of direct transplanted views which need a refresh or have descendants themselves\n   * that need a refresh but have not marked their ancestors as Dirty. This tells us that during\n   * change detection we should still descend to find those children to refresh, even if the parents\n   * are not `Dirty`/`CheckAlways`.\n   */\n  [TRANSPLANTED_VIEWS_TO_REFRESH]: number;\n\n  /**\n   * A collection of views created based on the underlying `<ng-template>` element but inserted into\n   * a different `LContainer`. We need to track views created from a given declaration point since\n   * queries collect matches from the embedded view declaration point and _not_ the insertion point.\n   */\n  [MOVED_VIEWS]: LView[]|null;\n\n  /**\n   * Pointer to the `TNode` which represents the host of the container.\n   */\n  [T_HOST]: TNode;\n\n  /** The comment element that serves as an anchor for this LContainer. */\n  readonly[NATIVE]:\n      RComment;  // TODO(misko): remove as this value can be gotten by unwrapping `[HOST]`\n\n  /**\n   * Array of `ViewRef`s used by any `ViewContainerRef`s that point to this container.\n   *\n   * This is lazily initialized by `ViewContainerRef` when the first view is inserted.\n   *\n   * NOTE: This is stored as `any[]` because render3 should really not be aware of `ViewRef` and\n   * doing so creates circular dependency.\n   */\n  [VIEW_REFS]: unknown[]|null;\n}\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {stringify} from '../util/stringify';\nimport {NG_FACTORY_DEF} from './fields';\n\n\n/**\n * Definition of what a factory function should look like.\n */\nexport type FactoryFn<T> = {\n  /**\n   * Subclasses without an explicit constructor call through to the factory of their base\n   * definition, providing it with their own constructor to instantiate.\n   */\n  <U extends T>(t: Type<U>): U;\n\n  /**\n   * If no constructor to instantiate is provided, an instance of type T itself is created.\n   */\n  (t?: undefined): T;\n};\n\n\nexport function getFactoryDef<T>(type: any, throwNotFound: true): FactoryFn<T>;\nexport function getFactoryDef<T>(type: any): FactoryFn<T>|null;\nexport function getFactoryDef<T>(type: any, throwNotFound?: boolean): FactoryFn<T>|null {\n  const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);\n  if (!hasFactoryDef && throwNotFound === true && ngDevMode) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵfac' property.`);\n  }\n  return hasFactoryDef ? type[NG_FACTORY_DEF] : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\n *\n * @see `OnChanges`\n *\n * @publicApi\n */\nexport class SimpleChange {\n  constructor(public previousValue: any, public currentValue: any, public firstChange: boolean) {}\n  /**\n   * Check whether the new value is the first value assigned.\n   */\n  isFirstChange(): boolean {\n    return this.firstChange;\n  }\n}\n\n/**\n * A hashtable of changes represented by {@link SimpleChange} objects stored\n * at the declared property name they belong to on a Directive or Component. This is\n * the type passed to the `ngOnChanges` hook.\n *\n * @see `OnChanges`\n *\n * @publicApi\n */\nexport interface SimpleChanges {\n  [propName: string]: SimpleChange;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Most of the use of `document` in Angular is from within the DI system so it is possible to simply\n * inject the `DOCUMENT` token and are done.\n *\n * Ivy is special because it does not rely upon the DI and must get hold of the document some other\n * way.\n *\n * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.\n * Wherever ivy needs the global document, it calls `getDocument()` instead.\n *\n * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to\n * tell ivy what the global `document` is.\n *\n * Angular does this for us in each of the standard platforms (`Browser`, `Server`, and `WebWorker`)\n * by calling `setDocument()` when providing the `DOCUMENT` token.\n */\nlet DOCUMENT: Document|undefined = undefined;\n\n/**\n * Tell ivy what the `document` is for this platform.\n *\n * It is only necessary to call this if the current platform is not a browser.\n *\n * @param document The object representing the global `document` in this environment.\n */\nexport function setDocument(document: Document|undefined): void {\n  DOCUMENT = document;\n}\n\n/**\n * Access the object that represents the `document` for this platform.\n *\n * Ivy calls this whenever it needs to access the `document` object.\n * For example to create the renderer or to do sanitization.\n */\nexport function getDocument(): Document {\n  if (DOCUMENT !== undefined) {\n    return DOCUMENT;\n  } else if (typeof document !== 'undefined') {\n    return document;\n  }\n  // No \"document\" can be found. This should only happen if we are running ivy outside Angular and\n  // the current platform is not a browser. Since this is not a supported scenario at the moment\n  // this should not happen in Angular apps.\n  // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a\n  // public API. Meanwhile we just return `undefined` and let the application fail.\n  return undefined!;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OnChanges} from '../../interface/lifecycle_hooks';\nimport {SimpleChange, SimpleChanges} from '../../interface/simple_change';\nimport {EMPTY_OBJ} from '../empty';\nimport {DirectiveDef, DirectiveDefFeature} from '../interfaces/definition';\n\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ɵcmp = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n *\n * @codeGenApi\n */\nexport function ɵɵNgOnChangesFeature<T>(): DirectiveDefFeature {\n  return NgOnChangesFeatureImpl;\n}\n\nexport function NgOnChangesFeatureImpl<T>(definition: DirectiveDef<T>) {\n  if (definition.type.prototype.ngOnChanges) {\n    definition.setInput = ngOnChangesSetInput;\n  }\n  return rememberChangeHistoryAndInvokeOnChangesHook;\n}\n\n// This option ensures that the ngOnChanges lifecycle hook will be inherited\n// from superclasses (in InheritDefinitionFeature).\n/** @nocollapse */\n// tslint:disable-next-line:no-toplevel-property-access\n(ɵɵNgOnChangesFeature as DirectiveDefFeature).ngInherit = true;\n\n/**\n * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate\n * `ngOnChanges`.\n *\n * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are\n * found it invokes `ngOnChanges` on the component instance.\n *\n * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,\n *     it is guaranteed to be called with component instance.\n */\nfunction rememberChangeHistoryAndInvokeOnChangesHook(this: OnChanges) {\n  const simpleChangesStore = getSimpleChangesStore(this);\n  const current = simpleChangesStore?.current;\n\n  if (current) {\n    const previous = simpleChangesStore!.previous;\n    if (previous === EMPTY_OBJ) {\n      simpleChangesStore!.previous = current;\n    } else {\n      // New changes are copied to the previous store, so that we don't lose history for inputs\n      // which were not changed this time\n      for (let key in current) {\n        previous[key] = current[key];\n      }\n    }\n    simpleChangesStore!.current = null;\n    this.ngOnChanges(current);\n  }\n}\n\n\nfunction ngOnChangesSetInput<T>(\n    this: DirectiveDef<T>, instance: T, value: any, publicName: string, privateName: string): void {\n  const simpleChangesStore = getSimpleChangesStore(instance) ||\n      setSimpleChangesStore(instance, {previous: EMPTY_OBJ, current: null});\n  const current = simpleChangesStore.current || (simpleChangesStore.current = {});\n  const previous = simpleChangesStore.previous;\n\n  const declaredName = (this.declaredInputs as {[key: string]: string})[publicName];\n  const previousChange = previous[declaredName];\n  current[declaredName] = new SimpleChange(\n      previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n\n  (instance as any)[privateName] = value;\n}\n\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\n\nfunction getSimpleChangesStore(instance: any): null|NgSimpleChangesStore {\n  return instance[SIMPLE_CHANGES_STORE] || null;\n}\n\nfunction setSimpleChangesStore(instance: any, store: NgSimpleChangesStore): NgSimpleChangesStore {\n  return instance[SIMPLE_CHANGES_STORE] = store;\n}\n\n/**\n * Data structure which is monkey-patched on the component instance and used by `ngOnChanges`\n * life-cycle hook to track previous input values.\n */\ninterface NgSimpleChangesStore {\n  previous: SimpleChanges;\n  current: SimpleChanges|null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The goal here is to make sure that the browser DOM API is the Renderer.\n * We do this by defining a subset of DOM API to be the renderer and then\n * use that at runtime for rendering.\n *\n * At runtime we can then use the DOM api directly, in server or web-worker\n * it will be easy to implement such API.\n */\n\nimport {RendererStyleFlags2, RendererType2} from '../../render/api_flags';\nimport {TrustedHTML, TrustedScript, TrustedScriptURL} from '../../util/security/trusted_type_defs';\nimport {getDocument} from './document';\nimport {RComment, RElement, RNode, RText} from './renderer_dom';\n\n// TODO: cleanup once the code is merged in angular/angular\nexport enum RendererStyleFlags3 {\n  Important = 1 << 0,\n  DashCase = 1 << 1\n}\n\nexport type Renderer3 = ObjectOrientedRenderer3|ProceduralRenderer3;\n\nexport type GlobalTargetName = 'document'|'window'|'body';\n\nexport type GlobalTargetResolver = (element: any) => {\n  name: GlobalTargetName, target: EventTarget\n};\n\n/**\n * Object Oriented style of API needed to create elements and text nodes.\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade\n * (reducing payload size).\n * */\nexport interface ObjectOrientedRenderer3 {\n  createComment(data: string): RComment;\n  createElement(tagName: string): RElement;\n  createElementNS(namespace: string, tagName: string): RElement;\n  createTextNode(data: string): RText;\n\n  querySelector(selectors: string): RElement|null;\n}\n\n/** Returns whether the `renderer` is a `ProceduralRenderer3` */\nexport function isProceduralRenderer(renderer: ProceduralRenderer3|\n                                     ObjectOrientedRenderer3): renderer is ProceduralRenderer3 {\n  return !!((renderer as any).listen);\n}\n\n/**\n * Procedural style of API needed to create elements and text nodes.\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the\n * facade that enables element manipulation. This also facilitates backwards compatibility\n * with Renderer2.\n */\nexport interface ProceduralRenderer3 {\n  destroy(): void;\n  createComment(value: string): RComment;\n  createElement(name: string, namespace?: string|null): RElement;\n  createText(value: string): RText;\n  /**\n   * This property is allowed to be null / undefined,\n   * in which case the view engine won't call it.\n   * This is used as a performance optimization for production mode.\n   */\n  destroyNode?: ((node: RNode) => void)|null;\n  appendChild(parent: RElement, newChild: RNode): void;\n  insertBefore(parent: RNode, newChild: RNode, refChild: RNode|null, isMove?: boolean): void;\n  removeChild(parent: RElement, oldChild: RNode, isHostElement?: boolean): void;\n  selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): RElement;\n\n  parentNode(node: RNode): RElement|null;\n  nextSibling(node: RNode): RNode|null;\n\n  setAttribute(\n      el: RElement, name: string, value: string|TrustedHTML|TrustedScript|TrustedScriptURL,\n      namespace?: string|null): void;\n  removeAttribute(el: RElement, name: string, namespace?: string|null): void;\n  addClass(el: RElement, name: string): void;\n  removeClass(el: RElement, name: string): void;\n  setStyle(\n      el: RElement, style: string, value: any,\n      flags?: RendererStyleFlags2|RendererStyleFlags3): void;\n  removeStyle(el: RElement, style: string, flags?: RendererStyleFlags2|RendererStyleFlags3): void;\n  setProperty(el: RElement, name: string, value: any): void;\n  setValue(node: RText|RComment, value: string): void;\n\n  // TODO(misko): Deprecate in favor of addEventListener/removeEventListener\n  listen(\n      target: GlobalTargetName|RNode, eventName: string,\n      callback: (event: any) => boolean | void): () => void;\n}\n\nexport interface RendererFactory3 {\n  createRenderer(hostElement: RElement|null, rendererType: RendererType2|null): Renderer3;\n  begin?(): void;\n  end?(): void;\n}\n\nexport const domRendererFactory3: RendererFactory3 = {\n  createRenderer: (hostElement: RElement|null, rendererType: RendererType2|null): Renderer3 => {\n    return getDocument();\n  }\n};\n\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDefined, assertDomNode, assertGreaterThan, assertGreaterThanOrEqual, assertIndexInRange, assertLessThan} from '../../util/assert';\nimport {assertTNode, assertTNodeForLView} from '../assert';\nimport {LContainer, TYPE} from '../interfaces/container';\nimport {LContext, MONKEY_PATCH_KEY_NAME} from '../interfaces/context';\nimport {TConstants, TNode} from '../interfaces/node';\nimport {isProceduralRenderer} from '../interfaces/renderer';\nimport {RNode} from '../interfaces/renderer_dom';\nimport {isLContainer, isLView} from '../interfaces/type_checks';\nimport {FLAGS, HEADER_OFFSET, HOST, LView, LViewFlags, PARENT, PREORDER_HOOK_FLAGS, RENDERER, TData, TRANSPLANTED_VIEWS_TO_REFRESH, TView} from '../interfaces/view';\n\n\n\n/**\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)\n * in same location in `LView`. This is because we don't want to pre-allocate space for it\n * because the storage is sparse. This file contains utilities for dealing with such data types.\n *\n * How do we know what is stored at a given location in `LView`.\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n *   - `typeof value[TYPE] === 'object'` => `LView`\n *      - This happens when we have a component at a given location\n *   - `typeof value[TYPE] === true` => `LContainer`\n *      - This happens when we have `LContainer` binding at a given location.\n *\n *\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n */\n\n/**\n * Returns `RNode`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function unwrapRNode(value: RNode|LView|LContainer): RNode {\n  while (Array.isArray(value)) {\n    value = value[HOST] as any;\n  }\n  return value as RNode;\n}\n\n/**\n * Returns `LView` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function unwrapLView(value: RNode|LView|LContainer): LView|null {\n  while (Array.isArray(value)) {\n    // This check is same as `isLView()` but we don't call at as we don't want to call\n    // `Array.isArray()` twice and give JITer more work for inlining.\n    if (typeof value[TYPE] === 'object') return value as LView;\n    value = value[HOST] as any;\n  }\n  return null;\n}\n\n/**\n * Returns `LContainer` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function unwrapLContainer(value: RNode|LView|LContainer): LContainer|null {\n  while (Array.isArray(value)) {\n    // This check is same as `isLContainer()` but we don't call at as we don't want to call\n    // `Array.isArray()` twice and give JITer more work for inlining.\n    if (value[TYPE] === true) return value as LContainer;\n    value = value[HOST] as any;\n  }\n  return null;\n}\n\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\nexport function getNativeByIndex(index: number, lView: LView): RNode {\n  ngDevMode && assertIndexInRange(lView, index);\n  ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');\n  return unwrapRNode(lView[index]);\n}\n\n/**\n * Retrieve an `RNode` for a given `TNode` and `LView`.\n *\n * This function guarantees in dev mode to retrieve a non-null `RNode`.\n *\n * @param tNode\n * @param lView\n */\nexport function getNativeByTNode(tNode: TNode, lView: LView): RNode {\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  ngDevMode && assertIndexInRange(lView, tNode.index);\n  const node: RNode = unwrapRNode(lView[tNode.index]);\n  ngDevMode && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);\n  return node;\n}\n\n/**\n * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.\n *\n * Some `TNode`s don't have associated `RNode`s. For example `Projection`\n *\n * @param tNode\n * @param lView\n */\nexport function getNativeByTNodeOrNull(tNode: TNode|null, lView: LView): RNode|null {\n  const index = tNode === null ? -1 : tNode.index;\n  if (index !== -1) {\n    ngDevMode && assertTNodeForLView(tNode!, lView);\n    const node: RNode|null = unwrapRNode(lView[index]);\n    ngDevMode && node !== null && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);\n    return node;\n  }\n  return null;\n}\n\n\n// fixme(misko): The return Type should be `TNode|null`\nexport function getTNode(tView: TView, index: number): TNode {\n  ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n  ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');\n  const tNode = tView.data[index] as TNode;\n  ngDevMode && tNode !== null && assertTNode(tNode);\n  return tNode;\n}\n\n/** Retrieves a value from any `LView` or `TData`. */\nexport function load<T>(view: LView|TData, index: number): T {\n  ngDevMode && assertIndexInRange(view, index);\n  return view[index];\n}\n\nexport function getComponentLViewByIndex(nodeIndex: number, hostView: LView): LView {\n  // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n  ngDevMode && assertIndexInRange(hostView, nodeIndex);\n  const slotValue = hostView[nodeIndex];\n  const lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n  return lView;\n}\n\n\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nexport function readPatchedData(target: any): LView|LContext|null {\n  ngDevMode && assertDefined(target, 'Target expected');\n  return target[MONKEY_PATCH_KEY_NAME] || null;\n}\n\nexport function readPatchedLView(target: any): LView|null {\n  const value = readPatchedData(target);\n  if (value) {\n    return Array.isArray(value) ? value : (value as LContext).lView;\n  }\n  return null;\n}\n\n/** Checks whether a given view is in creation mode */\nexport function isCreationMode(view: LView): boolean {\n  return (view[FLAGS] & LViewFlags.CreationMode) === LViewFlags.CreationMode;\n}\n\n/**\n * Returns a boolean for whether the view is attached to the change detection tree.\n *\n * Note: This determines whether a view should be checked, not whether it's inserted\n * into a container. For that, you'll want `viewAttachedToContainer` below.\n */\nexport function viewAttachedToChangeDetector(view: LView): boolean {\n  return (view[FLAGS] & LViewFlags.Attached) === LViewFlags.Attached;\n}\n\n/** Returns a boolean for whether the view is attached to a container. */\nexport function viewAttachedToContainer(view: LView): boolean {\n  return isLContainer(view[PARENT]);\n}\n\n/** Returns a constant from `TConstants` instance. */\nexport function getConstant<T>(consts: TConstants|null, index: null|undefined): null;\nexport function getConstant<T>(consts: TConstants, index: number): T|null;\nexport function getConstant<T>(consts: TConstants|null, index: number|null|undefined): T|null;\nexport function getConstant<T>(consts: TConstants|null, index: number|null|undefined): T|null {\n  if (index === null || index === undefined) return null;\n  ngDevMode && assertIndexInRange(consts!, index);\n  return consts![index] as unknown as T;\n}\n\n/**\n * Resets the pre-order hook flags of the view.\n * @param lView the LView on which the flags are reset\n */\nexport function resetPreOrderHookFlags(lView: LView) {\n  lView[PREORDER_HOOK_FLAGS] = 0;\n}\n\n/**\n * Updates the `TRANSPLANTED_VIEWS_TO_REFRESH` counter on the `LContainer` as well as the parents\n * whose\n *  1. counter goes from 0 to 1, indicating that there is a new child that has a view to refresh\n *  or\n *  2. counter goes from 1 to 0, indicating there are no more descendant views to refresh\n */\nexport function updateTransplantedViewCount(lContainer: LContainer, amount: 1|- 1) {\n  lContainer[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;\n  let viewOrContainer: LView|LContainer = lContainer;\n  let parent: LView|LContainer|null = lContainer[PARENT];\n  while (parent !== null &&\n         ((amount === 1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 1) ||\n          (amount === -1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 0))) {\n    parent[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;\n    viewOrContainer = parent;\n    parent = parent[PARENT];\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '../../di/injection_token';\nimport {Injector} from '../../di/injector';\nimport {Type} from '../../interface/type';\nimport {SchemaMetadata} from '../../metadata/schema';\nimport {Sanitizer} from '../../sanitization/sanitizer';\nimport {LContainer} from './container';\nimport {ComponentDef, ComponentTemplate, DirectiveDef, DirectiveDefList, HostBindingsFunction, PipeDef, PipeDefList, ViewQueriesFunction} from './definition';\nimport {I18nUpdateOpCodes, TI18n, TIcu} from './i18n';\nimport {TConstants, TNode} from './node';\nimport {PlayerHandler} from './player';\nimport {LQueries, TQueries} from './query';\nimport {Renderer3, RendererFactory3} from './renderer';\nimport {RComment, RElement} from './renderer_dom';\nimport {TStylingKey, TStylingRange} from './styling';\n\n\n\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\nexport const HOST = 0;\nexport const TVIEW = 1;\nexport const FLAGS = 2;\nexport const PARENT = 3;\nexport const NEXT = 4;\nexport const TRANSPLANTED_VIEWS_TO_REFRESH = 5;\nexport const T_HOST = 6;\nexport const CLEANUP = 7;\nexport const CONTEXT = 8;\nexport const INJECTOR = 9;\nexport const RENDERER_FACTORY = 10;\nexport const RENDERER = 11;\nexport const SANITIZER = 12;\nexport const CHILD_HEAD = 13;\nexport const CHILD_TAIL = 14;\n// FIXME(misko): Investigate if the three declarations aren't all same thing.\nexport const DECLARATION_VIEW = 15;\nexport const DECLARATION_COMPONENT_VIEW = 16;\nexport const DECLARATION_LCONTAINER = 17;\nexport const PREORDER_HOOK_FLAGS = 18;\nexport const QUERIES = 19;\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n *\n * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate\n * instruction index into `LView` index. All other indexes should be in the `LView` index space and\n * there should be no need to refer to `HEADER_OFFSET` anywhere else.\n */\nexport const HEADER_OFFSET = 20;\n\n\n// This interface replaces the real LView interface if it is an arg or a\n// return value of a public instruction. This ensures we don't need to expose\n// the actual interface, which should be kept private.\nexport interface OpaqueViewState {\n  '__brand__': 'Brand for OpaqueViewState that nothing will match';\n}\n\n\n/**\n * `LView` stores all of the information needed to process the instructions as\n * they are invoked from the template. Each embedded view and component view has its\n * own `LView`. When processing a particular view, we set the `viewData` to that\n * `LView`. When that view is done processing, the `viewData` is set back to\n * whatever the original `viewData` was before (the parent `LView`).\n *\n * Keeping separate state for each view facilities view insertion / deletion, so we\n * don't have to edit the data array based on which views are present.\n */\nexport interface LView extends Array<any> {\n  /**\n   * Human readable representation of the `LView`.\n   *\n   * NOTE: This property only exists if `ngDevMode` is set to `true` and it is not present in\n   * production. Its presence is purely to help debug issue in development, and should not be relied\n   * on in production application.\n   */\n  debug?: LViewDebug;\n\n  /**\n   * The node into which this `LView` is inserted.\n   */\n  [HOST]: RElement|null;\n\n  /**\n   * The static data for this view. We need a reference to this so we can easily walk up the\n   * node tree in DI and get the TView.data array associated with a node (where the\n   * directive defs are stored).\n   */\n  readonly[TVIEW]: TView;\n\n  /** Flags for this view. See LViewFlags for more info. */\n  [FLAGS]: LViewFlags;\n\n  /**\n   * This may store an {@link LView} or {@link LContainer}.\n   *\n   * `LView` - The parent view. This is needed when we exit the view and must restore the previous\n   * LView. Without this, the render method would have to keep a stack of\n   * views as it is recursively rendering templates.\n   *\n   * `LContainer` - The current view is part of a container, and is an embedded view.\n   */\n  [PARENT]: LView|LContainer|null;\n\n  /**\n   *\n   * The next sibling LView or LContainer.\n   *\n   * Allows us to propagate between sibling view states that aren't in the same\n   * container. Embedded views already have a node.next, but it is only set for\n   * views in the same container. We need a way to link component views and views\n   * across containers as well.\n   */\n  [NEXT]: LView|LContainer|null;\n\n  /** Queries active for this view - nodes from a view are reported to those queries. */\n  [QUERIES]: LQueries|null;\n\n  /**\n   * Store the `TNode` of the location where the current `LView` is inserted into.\n   *\n   * Given:\n   * ```\n   * <div>\n   *   <ng-template><span></span></ng-template>\n   * </div>\n   * ```\n   *\n   * We end up with two `TView`s.\n   * - `parent` `TView` which contains `<div><!-- anchor --></div>`\n   * - `child` `TView` which contains `<span></span>`\n   *\n   * Typically the `child` is inserted into the declaration location of the `parent`, but it can be\n   * inserted anywhere. Because it can be inserted anywhere it is not possible to store the\n   * insertion information in the `TView` and instead we must store it in the `LView[T_HOST]`.\n   *\n   * So to determine where is our insertion parent we would execute:\n   * ```\n   * const parentLView = lView[PARENT];\n   * const parentTNode = lView[T_HOST];\n   * const insertionParent = parentLView[parentTNode.index];\n   * ```\n   *\n   *\n   * If `null`, this is the root view of an application (root component is in this view) and it has\n   * no parents.\n   */\n  [T_HOST]: TNode|null;\n\n  /**\n   * When a view is destroyed, listeners need to be released and outputs need to be\n   * unsubscribed. This context array stores both listener functions wrapped with\n   * their context and output subscription instances for a particular view.\n   *\n   * These change per LView instance, so they cannot be stored on TView. Instead,\n   * TView.cleanup saves an index to the necessary context in this array.\n   *\n   * After `LView` is created it is possible to attach additional instance specific functions at the\n   * end of the `lView[CLENUP]` because we know that no more `T` level cleanup functions will be\n   * addeded here.\n   */\n  [CLEANUP]: any[]|null;\n\n  /**\n   * - For dynamic views, this is the context with which to render the template (e.g.\n   *   `NgForContext`), or `{}` if not defined explicitly.\n   * - For root view of the root component the context contains change detection data.\n   * - For non-root components, the context is the component instance,\n   * - For inline views, the context is null.\n   */\n  [CONTEXT]: {}|RootContext|null;\n\n  /** An optional Module Injector to be used as fall back after Element Injectors are consulted. */\n  readonly[INJECTOR]: Injector|null;\n\n  /** Factory to be used for creating Renderer. */\n  [RENDERER_FACTORY]: RendererFactory3;\n\n  /** Renderer to be used for this view. */\n  [RENDERER]: Renderer3;\n\n  /** An optional custom sanitizer. */\n  [SANITIZER]: Sanitizer|null;\n\n  /**\n   * Reference to the first LView or LContainer beneath this LView in\n   * the hierarchy.\n   *\n   * Necessary to store this so views can traverse through their nested views\n   * to remove listeners and call onDestroy callbacks.\n   */\n  [CHILD_HEAD]: LView|LContainer|null;\n\n  /**\n   * The last LView or LContainer beneath this LView in the hierarchy.\n   *\n   * The tail allows us to quickly add a new state to the end of the view list\n   * without having to propagate starting from the first child.\n   */\n  [CHILD_TAIL]: LView|LContainer|null;\n\n  /**\n   * View where this view's template was declared.\n   *\n   * The template for a dynamically created view may be declared in a different view than\n   * it is inserted. We already track the \"insertion view\" (view where the template was\n   * inserted) in LView[PARENT], but we also need access to the \"declaration view\"\n   * (view where the template was declared). Otherwise, we wouldn't be able to call the\n   * view's template function with the proper contexts. Context should be inherited from\n   * the declaration view tree, not the insertion view tree.\n   *\n   * Example (AppComponent template):\n   *\n   * <ng-template #foo></ng-template>       <-- declared here -->\n   * <some-comp [tpl]=\"foo\"></some-comp>    <-- inserted inside this component -->\n   *\n   * The <ng-template> above is declared in the AppComponent template, but it will be passed into\n   * SomeComp and inserted there. In this case, the declaration view would be the AppComponent,\n   * but the insertion view would be SomeComp. When we are removing views, we would want to\n   * traverse through the insertion view to clean up listeners. When we are calling the\n   * template function during change detection, we need the declaration view to get inherited\n   * context.\n   */\n  [DECLARATION_VIEW]: LView|null;\n\n\n  /**\n   * Points to the declaration component view, used to track transplanted `LView`s.\n   *\n   * See: `DECLARATION_VIEW` which points to the actual `LView` where it was declared, whereas\n   * `DECLARATION_COMPONENT_VIEW` points to the component which may not be same as\n   * `DECLARATION_VIEW`.\n   *\n   * Example:\n   * ```\n   * <#VIEW #myComp>\n   *  <div *ngIf=\"true\">\n   *   <ng-template #myTmpl>...</ng-template>\n   *  </div>\n   * </#VIEW>\n   * ```\n   * In the above case `DECLARATION_VIEW` for `myTmpl` points to the `LView` of `ngIf` whereas\n   * `DECLARATION_COMPONENT_VIEW` points to `LView` of the `myComp` which owns the template.\n   *\n   * The reason for this is that all embedded views are always check-always whereas the component\n   * view can be check-always or on-push. When we have a transplanted view it is important to\n   * determine if we have transplanted a view from check-always declaration to on-push insertion\n   * point. In such a case the transplanted view needs to be added to the `LContainer` in the\n   * declared `LView` and CD during the declared view CD (in addition to the CD at the insertion\n   * point.) (Any transplanted views which are intra Component are of no interest because the CD\n   * strategy of declaration and insertion will always be the same, because it is the same\n   * component.)\n   *\n   * Queries already track moved views in `LView[DECLARATION_LCONTAINER]` and\n   * `LContainer[MOVED_VIEWS]`. However the queries also track `LView`s which moved within the same\n   * component `LView`. Transplanted views are a subset of moved views, and we use\n   * `DECLARATION_COMPONENT_VIEW` to differentiate them. As in this example.\n   *\n   * Example showing intra component `LView` movement.\n   * ```\n   * <#VIEW #myComp>\n   *   <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n   *   <ng-template #thenBlock>Content to render when condition is true.</ng-template>\n   *   <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n   * </#VIEW>\n   * ```\n   * The `thenBlock` and `elseBlock` is moved but not transplanted.\n   *\n   * Example showing inter component `LView` movement (transplanted view).\n   * ```\n   * <#VIEW #myComp>\n   *   <ng-template #myTmpl>...</ng-template>\n   *   <insertion-component [template]=\"myTmpl\"></insertion-component>\n   * </#VIEW>\n   * ```\n   * In the above example `myTmpl` is passed into a different component. If `insertion-component`\n   * instantiates `myTmpl` and `insertion-component` is on-push then the `LContainer` needs to be\n   * marked as containing transplanted views and those views need to be CD as part of the\n   * declaration CD.\n   *\n   *\n   * When change detection runs, it iterates over `[MOVED_VIEWS]` and CDs any child `LView`s where\n   * the `DECLARATION_COMPONENT_VIEW` of the current component and the child `LView` does not match\n   * (it has been transplanted across components.)\n   *\n   * Note: `[DECLARATION_COMPONENT_VIEW]` points to itself if the LView is a component view (the\n   *       simplest / most common case).\n   *\n   * see also:\n   *   - https://hackmd.io/@mhevery/rJUJsvv9H write up of the problem\n   *   - `LContainer[HAS_TRANSPLANTED_VIEWS]` which marks which `LContainer` has transplanted views.\n   *   - `LContainer[TRANSPLANT_HEAD]` and `LContainer[TRANSPLANT_TAIL]` storage for transplanted\n   *   - `LView[DECLARATION_LCONTAINER]` similar problem for queries\n   *   - `LContainer[MOVED_VIEWS]` similar problem for queries\n   */\n  [DECLARATION_COMPONENT_VIEW]: LView;\n\n  /**\n   * A declaration point of embedded views (ones instantiated based on the content of a\n   * <ng-template>), null for other types of views.\n   *\n   * We need to track all embedded views created from a given declaration point so we can prepare\n   * query matches in a proper order (query matches are ordered based on their declaration point and\n   * _not_ the insertion point).\n   */\n  [DECLARATION_LCONTAINER]: LContainer|null;\n\n  /**\n   * More flags for this view. See PreOrderHookFlags for more info.\n   */\n  [PREORDER_HOOK_FLAGS]: PreOrderHookFlags;\n\n  /**\n   * The number of direct transplanted views which need a refresh or have descendants themselves\n   * that need a refresh but have not marked their ancestors as Dirty. This tells us that during\n   * change detection we should still descend to find those children to refresh, even if the parents\n   * are not `Dirty`/`CheckAlways`.\n   */\n  [TRANSPLANTED_VIEWS_TO_REFRESH]: number;\n}\n\n/** Flags associated with an LView (saved in LView[FLAGS]) */\nexport const enum LViewFlags {\n  /** The state of the init phase on the first 2 bits */\n  InitPhaseStateIncrementer = 0b00000000001,\n  InitPhaseStateMask = 0b00000000011,\n\n  /**\n   * Whether or not the view is in creationMode.\n   *\n   * This must be stored in the view rather than using `data` as a marker so that\n   * we can properly support embedded views. Otherwise, when exiting a child view\n   * back into the parent view, `data` will be defined and `creationMode` will be\n   * improperly reported as false.\n   */\n  CreationMode = 0b00000000100,\n\n  /**\n   * Whether or not this LView instance is on its first processing pass.\n   *\n   * An LView instance is considered to be on its \"first pass\" until it\n   * has completed one creation mode run and one update mode run. At this\n   * time, the flag is turned off.\n   */\n  FirstLViewPass = 0b00000001000,\n\n  /** Whether this view has default change detection strategy (checks always) or onPush */\n  CheckAlways = 0b00000010000,\n\n  /**\n   * Whether or not manual change detection is turned on for onPush components.\n   *\n   * This is a special mode that only marks components dirty in two cases:\n   * 1) There has been a change to an @Input property\n   * 2) `markDirty()` has been called manually by the user\n   *\n   * Note that in this mode, the firing of events does NOT mark components\n   * dirty automatically.\n   *\n   * Manual mode is turned off by default for backwards compatibility, as events\n   * automatically mark OnPush components dirty in View Engine.\n   *\n   * TODO: Add a public API to ChangeDetectionStrategy to turn this mode on\n   */\n  ManualOnPush = 0b00000100000,\n\n  /** Whether or not this view is currently dirty (needing check) */\n  Dirty = 0b000001000000,\n\n  /** Whether or not this view is currently attached to change detection tree. */\n  Attached = 0b000010000000,\n\n  /** Whether or not this view is destroyed. */\n  Destroyed = 0b000100000000,\n\n  /** Whether or not this view is the root view */\n  IsRoot = 0b001000000000,\n\n  /**\n   * Whether this moved LView was needs to be refreshed at the insertion location because the\n   * declaration was dirty.\n   */\n  RefreshTransplantedView = 0b0010000000000,\n\n  /**\n   * Index of the current init phase on last 21 bits\n   */\n  IndexWithinInitPhaseIncrementer = 0b0100000000000,\n  IndexWithinInitPhaseShift = 11,\n  IndexWithinInitPhaseReset = 0b0011111111111,\n}\n\n/**\n * Possible states of the init phase:\n * - 00: OnInit hooks to be run.\n * - 01: AfterContentInit hooks to be run\n * - 10: AfterViewInit hooks to be run\n * - 11: All init hooks have been run\n */\nexport const enum InitPhaseState {\n  OnInitHooksToBeRun = 0b00,\n  AfterContentInitHooksToBeRun = 0b01,\n  AfterViewInitHooksToBeRun = 0b10,\n  InitPhaseCompleted = 0b11,\n}\n\n/** More flags associated with an LView (saved in LView[PREORDER_HOOK_FLAGS]) */\nexport const enum PreOrderHookFlags {\n  /**\n     The index of the next pre-order hook to be called in the hooks array, on the first 16\n     bits\n   */\n  IndexOfTheNextPreOrderHookMaskMask = 0b01111111111111111,\n\n  /**\n   * The number of init hooks that have already been called, on the last 16 bits\n   */\n  NumberOfInitHooksCalledIncrementer = 0b010000000000000000,\n  NumberOfInitHooksCalledShift = 16,\n  NumberOfInitHooksCalledMask = 0b11111111111111110000000000000000,\n}\n\n/**\n * Stores a set of OpCodes to process `HostBindingsFunction` associated with a current view.\n *\n * In order to invoke `HostBindingsFunction` we need:\n * 1. 'elementIdx`: Index to the element associated with the `HostBindingsFunction`.\n * 2. 'directiveIdx`: Index to the directive associated with the `HostBindingsFunction`. (This will\n *    become the context for the `HostBindingsFunction` invocation.)\n * 3. `bindingRootIdx`: Location where the bindings for the `HostBindingsFunction` start. Internally\n *    `HostBindingsFunction` binding indexes start from `0` so we need to add `bindingRootIdx` to\n *    it.\n * 4. `HostBindingsFunction`: A host binding function to execute.\n *\n * The above information needs to be encoded into the `HostBindingOpCodes` in an efficient manner.\n *\n * 1. `elementIdx` is encoded into the `HostBindingOpCodes` as `~elementIdx` (so a negative number);\n * 2. `directiveIdx`\n * 3. `bindingRootIdx`\n * 4. `HostBindingsFunction` is passed in as is.\n *\n * The `HostBindingOpCodes` array contains:\n * - negative number to select the element index.\n * - followed by 1 or more of:\n *    - a number to select the directive index\n *    - a number to select the bindingRoot index\n *    - and a function to invoke.\n *\n * ## Example\n *\n * ```\n * const hostBindingOpCodes = [\n *   ~30,                               // Select element 30\n *   40, 45, MyDir.ɵdir.hostBindings    // Invoke host bindings on MyDir on element 30;\n *                                      // directiveIdx = 40; bindingRootIdx = 45;\n *   50, 55, OtherDir.ɵdir.hostBindings // Invoke host bindings on OtherDire on element 30\n *                                      // directiveIdx = 50; bindingRootIdx = 55;\n * ]\n * ```\n *\n * ## Pseudocode\n * ```\n * const hostBindingOpCodes = tView.hostBindingOpCodes;\n * if (hostBindingOpCodes === null) return;\n * for (let i = 0; i < hostBindingOpCodes.length; i++) {\n *   const opCode = hostBindingOpCodes[i] as number;\n *   if (opCode < 0) {\n *     // Negative numbers are element indexes.\n *     setSelectedIndex(~opCode);\n *   } else {\n *     // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n *     const directiveIdx = opCode;\n *     const bindingRootIndx = hostBindingOpCodes[++i] as number;\n *     const hostBindingFn = hostBindingOpCodes[++i] as HostBindingsFunction<any>;\n *     setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n *     const context = lView[directiveIdx];\n *     hostBindingFn(RenderFlags.Update, context);\n *   }\n * }\n * ```\n *\n */\nexport interface HostBindingOpCodes extends Array<number|HostBindingsFunction<any>> {\n  __brand__: 'HostBindingOpCodes';\n  debug?: string[];\n}\n\n/**\n * Explicitly marks `TView` as a specific type in `ngDevMode`\n *\n * It is useful to know conceptually what time of `TView` we are dealing with when\n * debugging an application (even if the runtime does not need it.) For this reason\n * we store this information in the `ngDevMode` `TView` and than use it for\n * better debugging experience.\n */\nexport const enum TViewType {\n  /**\n   * Root `TView` is the used to bootstrap components into. It is used in conjunction with\n   * `LView` which takes an existing DOM node not owned by Angular and wraps it in `TView`/`LView`\n   * so that other components can be loaded into it.\n   */\n  Root = 0,\n\n  /**\n   * `TView` associated with a Component. This would be the `TView` directly associated with the\n   * component view (as opposed an `Embedded` `TView` which would be a child of `Component` `TView`)\n   */\n  Component = 1,\n\n  /**\n   * `TView` associated with a template. Such as `*ngIf`, `<ng-template>` etc... A `Component`\n   * can have zero or more `Embedede` `TView`s.\n   */\n  Embedded = 2,\n}\n\n/**\n * Converts `TViewType` into human readable text.\n * Make sure this matches with `TViewType`\n */\nexport const TViewTypeAsString = [\n  'Root',       // 0\n  'Component',  // 1\n  'Embedded',   // 2\n] as const;\n\n\n/**\n * The static data for an LView (shared between all templates of a\n * given type).\n *\n * Stored on the `ComponentDef.tView`.\n */\nexport interface TView {\n  /**\n   * Type of `TView` (`Root`|`Component`|`Embedded`).\n   */\n  type: TViewType;\n\n  /**\n   * This is a blueprint used to generate LView instances for this TView. Copying this\n   * blueprint is faster than creating a new LView from scratch.\n   */\n  blueprint: LView;\n\n  /**\n   * The template function used to refresh the view of dynamically created views\n   * and components. Will be null for inline views.\n   */\n  template: ComponentTemplate<{}>|null;\n\n  /**\n   * A function containing query-related instructions.\n   */\n  viewQuery: ViewQueriesFunction<{}>|null;\n\n  /**\n   * A `TNode` representing the declaration location of this `TView` (not part of this TView).\n   */\n  declTNode: TNode|null;\n\n  // FIXME(misko): Why does `TView` not have `declarationTView` property?\n\n  /** Whether or not this template has been processed in creation mode. */\n  firstCreatePass: boolean;\n\n  /**\n   *  Whether or not this template has been processed in update mode (e.g. change detected)\n   *\n   * `firstUpdatePass` is used by styling to set up `TData` to contain metadata about the styling\n   * instructions. (Mainly to build up a linked list of styling priority order.)\n   *\n   * Typically this function gets cleared after first execution. If exception is thrown then this\n   * flag can remain turned un until there is first successful (no exception) pass. This means that\n   * individual styling instructions keep track of if they have already been added to the linked\n   * list to prevent double adding.\n   */\n  firstUpdatePass: boolean;\n\n  /** Static data equivalent of LView.data[]. Contains TNodes, PipeDefInternal or TI18n. */\n  data: TData;\n\n  /**\n   * The binding start index is the index at which the data array\n   * starts to store bindings only. Saving this value ensures that we\n   * will begin reading bindings at the correct point in the array when\n   * we are in update mode.\n   *\n   * -1 means that it has not been initialized.\n   */\n  bindingStartIndex: number;\n\n  /**\n   * The index where the \"expando\" section of `LView` begins. The expando\n   * section contains injectors, directive instances, and host binding values.\n   * Unlike the \"decls\" and \"vars\" sections of `LView`, the length of this\n   * section cannot be calculated at compile-time because directives are matched\n   * at runtime to preserve locality.\n   *\n   * We store this start index so we know where to start checking host bindings\n   * in `setHostBindings`.\n   */\n  expandoStartIndex: number;\n\n  /**\n   * Whether or not there are any static view queries tracked on this view.\n   *\n   * We store this so we know whether or not we should do a view query\n   * refresh after creation mode to collect static query results.\n   */\n  staticViewQueries: boolean;\n\n  /**\n   * Whether or not there are any static content queries tracked on this view.\n   *\n   * We store this so we know whether or not we should do a content query\n   * refresh after creation mode to collect static query results.\n   */\n  staticContentQueries: boolean;\n\n  /**\n   * A reference to the first child node located in the view.\n   */\n  firstChild: TNode|null;\n\n  /**\n   * Stores the OpCodes to be replayed during change-detection to process the `HostBindings`\n   *\n   * See `HostBindingOpCodes` for encoding details.\n   */\n  hostBindingOpCodes: HostBindingOpCodes|null;\n\n  /**\n   * Full registry of directives and components that may be found in this view.\n   *\n   * It's necessary to keep a copy of the full def list on the TView so it's possible\n   * to render template functions without a host component.\n   */\n  directiveRegistry: DirectiveDefList|null;\n\n  /**\n   * Full registry of pipes that may be found in this view.\n   *\n   * The property is either an array of `PipeDefs`s or a function which returns the array of\n   * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n   *\n   * It's necessary to keep a copy of the full def list on the TView so it's possible\n   * to render template functions without a host component.\n   */\n  pipeRegistry: PipeDefList|null;\n\n  /**\n   * Array of ngOnInit, ngOnChanges and ngDoCheck hooks that should be executed for this view in\n   * creation mode.\n   *\n   * This array has a flat structure and contains TNode indices, directive indices (where an\n   * instance can be found in `LView`) and hook functions. TNode index is followed by the directive\n   * index and a hook function. If there are multiple hooks for a given TNode, the TNode index is\n   * not repeated and the next lifecycle hook information is stored right after the previous hook\n   * function. This is done so that at runtime the system can efficiently iterate over all of the\n   * functions to invoke without having to make any decisions/lookups.\n   */\n  preOrderHooks: HookData|null;\n\n  /**\n   * Array of ngOnChanges and ngDoCheck hooks that should be executed for this view in update mode.\n   *\n   * This array has the same structure as the `preOrderHooks` one.\n   */\n  preOrderCheckHooks: HookData|null;\n\n  /**\n   * Array of ngAfterContentInit and ngAfterContentChecked hooks that should be executed\n   * for this view in creation mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  contentHooks: HookData|null;\n\n  /**\n   * Array of ngAfterContentChecked hooks that should be executed for this view in update\n   * mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  contentCheckHooks: HookData|null;\n\n  /**\n   * Array of ngAfterViewInit and ngAfterViewChecked hooks that should be executed for\n   * this view in creation mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  viewHooks: HookData|null;\n\n  /**\n   * Array of ngAfterViewChecked hooks that should be executed for this view in\n   * update mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  viewCheckHooks: HookData|null;\n\n  /**\n   * Array of ngOnDestroy hooks that should be executed when this view is destroyed.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  destroyHooks: DestroyHookData|null;\n\n  /**\n   * When a view is destroyed, listeners need to be released and outputs need to be\n   * unsubscribed. This cleanup array stores both listener data (in chunks of 4)\n   * and output data (in chunks of 2) for a particular view. Combining the arrays\n   * saves on memory (70 bytes per array) and on a few bytes of code size (for two\n   * separate for loops).\n   *\n   * If it's a native DOM listener or output subscription being stored:\n   * 1st index is: event name  `name = tView.cleanup[i+0]`\n   * 2nd index is: index of native element or a function that retrieves global target (window,\n   *               document or body) reference based on the native element:\n   *    `typeof idxOrTargetGetter === 'function'`: global target getter function\n   *    `typeof idxOrTargetGetter === 'number'`: index of native element\n   *\n   * 3rd index is: index of listener function `listener = lView[CLEANUP][tView.cleanup[i+2]]`\n   * 4th index is: `useCaptureOrIndx = tView.cleanup[i+3]`\n   *    `typeof useCaptureOrIndx == 'boolean' : useCapture boolean\n   *    `typeof useCaptureOrIndx == 'number':\n   *         `useCaptureOrIndx >= 0` `removeListener = LView[CLEANUP][useCaptureOrIndx]`\n   *         `useCaptureOrIndx <  0` `subscription = LView[CLEANUP][-useCaptureOrIndx]`\n   *\n   * If it's an output subscription or query list destroy hook:\n   * 1st index is: output unsubscribe function / query list destroy function\n   * 2nd index is: index of function context in LView.cleanupInstances[]\n   *               `tView.cleanup[i+0].call(lView[CLEANUP][tView.cleanup[i+1]])`\n   */\n  cleanup: any[]|null;\n\n  /**\n   * A list of element indices for child components that will need to be\n   * refreshed when the current view has finished its check. These indices have\n   * already been adjusted for the HEADER_OFFSET.\n   *\n   */\n  components: number[]|null;\n\n  /**\n   * A collection of queries tracked in a given view.\n   */\n  queries: TQueries|null;\n\n  /**\n   * An array of indices pointing to directives with content queries alongside with the\n   * corresponding query index. Each entry in this array is a tuple of:\n   * - index of the first content query index declared by a given directive;\n   * - index of a directive.\n   *\n   * We are storing those indexes so we can refresh content queries as part of a view refresh\n   * process.\n   */\n  contentQueries: number[]|null;\n\n  /**\n   * Set of schemas that declare elements to be allowed inside the view.\n   */\n  schemas: SchemaMetadata[]|null;\n\n  /**\n   * Array of constants for the view. Includes attribute arrays, local definition arrays etc.\n   * Used for directive matching, attribute bindings, local definitions and more.\n   */\n  consts: TConstants|null;\n\n  /**\n   * Indicates that there was an error before we managed to complete the first create pass of the\n   * view. This means that the view is likely corrupted and we should try to recover it.\n   */\n  incompleteFirstPass: boolean;\n}\n\nexport const enum RootContextFlags {\n  Empty = 0b00,\n  DetectChanges = 0b01,\n  FlushPlayers = 0b10\n}\n\n\n/**\n * RootContext contains information which is shared for all components which\n * were bootstrapped with {@link renderComponent}.\n */\nexport interface RootContext {\n  /**\n   * A function used for scheduling change detection in the future. Usually\n   * this is `requestAnimationFrame`.\n   */\n  scheduler: (workFn: () => void) => void;\n\n  /**\n   * A promise which is resolved when all components are considered clean (not dirty).\n   *\n   * This promise is overwritten every time a first call to {@link markDirty} is invoked.\n   */\n  clean: Promise<null>;\n\n  /**\n   * RootComponents - The components that were instantiated by the call to\n   * {@link renderComponent}.\n   */\n  components: {}[];\n\n  /**\n   * The player flushing handler to kick off all animations\n   */\n  playerHandler: PlayerHandler|null;\n\n  /**\n   * What render-related operations to run once a scheduler has been set\n   */\n  flags: RootContextFlags;\n}\n\n/** Single hook callback function. */\nexport type HookFn = () => void;\n\n/**\n * Information necessary to call a hook. E.g. the callback that\n * needs to invoked and the index at which to find its context.\n */\nexport type HookEntry = number|HookFn;\n\n/**\n * Array of hooks that should be executed for a view and their directive indices.\n *\n * For each node of the view, the following data is stored:\n * 1) Node index (optional)\n * 2) A series of number/function pairs where:\n *  - even indices are directive indices\n *  - odd indices are hook functions\n *\n * Special cases:\n *  - a negative directive index flags an init hook (ngOnInit, ngAfterContentInit, ngAfterViewInit)\n */\nexport type HookData = HookEntry[];\n\n/**\n * Array of destroy hooks that should be executed for a view and their directive indices.\n *\n * The array is set up as a series of number/function or number/(number|function)[]:\n * - Even indices represent the context with which hooks should be called.\n * - Odd indices are the hook functions themselves. If a value at an odd index is an array,\n *   it represents the destroy hooks of a `multi` provider where:\n *     - Even indices represent the index of the provider for which we've registered a destroy hook,\n *       inside of the `multi` provider array.\n *     - Odd indices are the destroy hook functions.\n * For example:\n * LView: `[0, 1, 2, AService, 4, [BService, CService, DService]]`\n * destroyHooks: `[3, AService.ngOnDestroy, 5, [0, BService.ngOnDestroy, 2, DService.ngOnDestroy]]`\n *\n * In the example above `AService` is a type provider with an `ngOnDestroy`, whereas `BService`,\n * `CService` and `DService` are part of a `multi` provider where only `BService` and `DService`\n * have an `ngOnDestroy` hook.\n */\nexport type DestroyHookData = (HookEntry|HookData)[];\n\n/**\n * Static data that corresponds to the instance-specific data array on an LView.\n *\n * Each node's static data is stored in tData at the same index that it's stored\n * in the data array.  Any nodes that do not have static data store a null value in\n * tData to avoid a sparse array.\n *\n * Each pipe's definition is stored here at the same index as its pipe instance in\n * the data array.\n *\n * Each host property's name is stored here at the same index as its value in the\n * data array.\n *\n * Each property binding name is stored here at the same index as its value in\n * the data array. If the binding is an interpolation, the static string values\n * are stored parallel to the dynamic values. Example:\n *\n * id=\"prefix {{ v0 }} a {{ v1 }} b {{ v2 }} suffix\"\n *\n * LView       |   TView.data\n *------------------------\n *  v0 value   |   'a'\n *  v1 value   |   'b'\n *  v2 value   |   id � prefix � suffix\n *\n * Injector bloom filters are also stored here.\n */\nexport type TData =\n    (TNode|PipeDef<any>|DirectiveDef<any>|ComponentDef<any>|number|TStylingRange|TStylingKey|\n     Type<any>|InjectionToken<any>|TI18n|I18nUpdateOpCodes|TIcu|null|string)[];\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n\n/**\n * Human readable version of the `LView`.\n *\n * `LView` is a data structure used internally to keep track of views. The `LView` is designed for\n * efficiency and so at times it is difficult to read or write tests which assert on its values. For\n * this reason when `ngDevMode` is true we patch a `LView.debug` property which points to\n * `LViewDebug` for easier debugging and test writing. It is the intent of `LViewDebug` to be used\n * in tests.\n */\nexport interface LViewDebug {\n  /**\n   * Flags associated with the `LView` unpacked into a more readable state.\n   *\n   * See `LViewFlags` for the flag meanings.\n   */\n  readonly flags: {\n    initPhaseState: number,\n    creationMode: boolean,\n    firstViewPass: boolean,\n    checkAlways: boolean,\n    dirty: boolean,\n    attached: boolean,\n    destroyed: boolean,\n    isRoot: boolean,\n    indexWithinInitPhase: number,\n  };\n\n  /**\n   * Associated TView\n   */\n  readonly tView: TView;\n\n  /**\n   * Parent view (or container)\n   */\n  readonly parent: LViewDebug|LContainerDebug|null;\n\n  /**\n   * Next sibling to the `LView`.\n   */\n  readonly next: LViewDebug|LContainerDebug|null;\n\n  /**\n   * The context used for evaluation of the `LView`\n   *\n   * (Usually the component)\n   */\n  readonly context: {}|null;\n\n  /**\n   * Hierarchical tree of nodes.\n   */\n  readonly nodes: DebugNode[];\n\n  /**\n   * Template structure (no instance data).\n   * (Shows how TNodes are connected)\n   */\n  readonly template: string;\n\n  /**\n   * HTML representation of the `LView`.\n   *\n   * This is only approximate to actual HTML as child `LView`s are removed.\n   */\n  readonly html: string;\n\n  /**\n   * The host element to which this `LView` is attached.\n   */\n  readonly hostHTML: string|null;\n\n  /**\n   * Child `LView`s\n   */\n  readonly childViews: Array<LViewDebug|LContainerDebug>;\n\n  /**\n   * Sub range of `LView` containing decls (DOM elements).\n   */\n  readonly decls: LViewDebugRange;\n\n  /**\n   * Sub range of `LView` containing vars (bindings).\n   */\n  readonly vars: LViewDebugRange;\n\n  /**\n   * Sub range of `LView` containing expando (used by DI).\n   */\n  readonly expando: LViewDebugRange;\n}\n\n/**\n * Human readable version of the `LContainer`\n *\n * `LContainer` is a data structure used internally to keep track of child views. The `LContainer`\n * is designed for efficiency and so at times it is difficult to read or write tests which assert on\n * its values. For this reason when `ngDevMode` is true we patch a `LContainer.debug` property which\n * points to `LContainerDebug` for easier debugging and test writing. It is the intent of\n * `LContainerDebug` to be used in tests.\n */\nexport interface LContainerDebug {\n  readonly native: RComment;\n  /**\n   * Child `LView`s.\n   */\n  readonly views: LViewDebug[];\n  readonly parent: LViewDebug|null;\n  readonly movedViews: LView[]|null;\n  readonly host: RElement|RComment|LView;\n  readonly next: LViewDebug|LContainerDebug|null;\n  readonly hasTransplantedViews: boolean;\n}\n\n\n\n/**\n * `LView` is subdivided to ranges where the actual data is stored. Some of these ranges such as\n * `decls` and `vars` are known at compile time. Other such as `i18n` and `expando` are runtime only\n * concepts.\n */\nexport interface LViewDebugRange {\n  /**\n   * The starting index in `LView` where the range begins. (Inclusive)\n   */\n  start: number;\n\n  /**\n   * The ending index in `LView` where the range ends. (Exclusive)\n   */\n  end: number;\n\n  /**\n   * The length of the range\n   */\n  length: number;\n\n  /**\n   * The merged content of the range. `t` contains data from `TView.data` and `l` contains `LView`\n   * data at an index.\n   */\n  content: LViewDebugRangeContent[];\n}\n\n/**\n * For convenience the static and instance portions of `TView` and `LView` are merged into a single\n * object in `LViewRange`.\n */\nexport interface LViewDebugRangeContent {\n  /**\n   * Index into original `LView` or `TView.data`.\n   */\n  index: number;\n\n  /**\n   * Value from the `TView.data[index]` location.\n   */\n  t: any;\n\n  /**\n   * Value from the `LView[index]` location.\n   */\n  l: any;\n}\n\n\n/**\n * A logical node which comprise into `LView`s.\n *\n */\nexport interface DebugNode {\n  /**\n   * HTML representation of the node.\n   */\n  html: string|null;\n\n  /**\n   * Associated `TNode`\n   */\n  tNode: TNode;\n\n  /**\n   * Human readable node type.\n   */\n  type: string;\n\n  /**\n   * DOM native node.\n   */\n  native: Node;\n\n  /**\n   * Child nodes\n   */\n  children: DebugNode[];\n\n  /**\n   * A list of Component/Directive types which need to be instantiated an this location.\n   */\n  factories: Type<unknown>[];\n\n  /**\n   * A list of Component/Directive instances which were instantiated an this location.\n   */\n  instances: unknown[];\n\n  /**\n   * NodeInjector information.\n   */\n  injector: NodeInjectorDebug;\n\n  /**\n   * Injector resolution path.\n   */\n  injectorResolutionPath: any;\n}\n\nexport interface NodeInjectorDebug {\n  /**\n   * Instance bloom. Does the current injector have a provider with a given bloom mask.\n   */\n  bloom: string;\n\n\n  /**\n   * Cumulative bloom. Do any of the above injectors have a provider with a given bloom mask.\n   */\n  cumulativeBloom: string;\n\n  /**\n   * A list of providers associated with this injector.\n   */\n  providers: (Type<unknown>|DirectiveDef<unknown>|ComponentDef<unknown>)[];\n\n  /**\n   * A list of providers associated with this injector visible to the view of the component only.\n   */\n  viewProviders: Type<unknown>[];\n\n\n  /**\n   * Location of the parent `TNode`.\n   */\n  parentInjectorIndex: number;\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectFlags} from '../di/interface/injector';\nimport {assertDefined, assertEqual, assertGreaterThanOrEqual, assertLessThan, assertNotEqual} from '../util/assert';\nimport {assertLViewOrUndefined, assertTNodeForLView, assertTNodeForTView} from './assert';\nimport {DirectiveDef} from './interfaces/definition';\nimport {TNode, TNodeType} from './interfaces/node';\nimport {CONTEXT, DECLARATION_VIEW, HEADER_OFFSET, LView, OpaqueViewState, T_HOST, TData, TVIEW, TView, TViewType} from './interfaces/view';\nimport {MATH_ML_NAMESPACE, SVG_NAMESPACE} from './namespaces';\nimport {getTNode} from './util/view_utils';\n\n\n/**\n *\n */\ninterface LFrame {\n  /**\n   * Parent LFrame.\n   *\n   * This is needed when `leaveView` is called to restore the previous state.\n   */\n  parent: LFrame;\n\n  /**\n   * Child LFrame.\n   *\n   * This is used to cache existing LFrames to relieve the memory pressure.\n   */\n  child: LFrame|null;\n\n  /**\n   * State of the current view being processed.\n   *\n   * An array of nodes (text, element, container, etc), pipes, their bindings, and\n   * any local variables that need to be stored between invocations.\n   */\n  lView: LView;\n\n  /**\n   * Current `TView` associated with the `LFrame.lView`.\n   *\n   * One can get `TView` from `lFrame[TVIEW]` however because it is so common it makes sense to\n   * store it in `LFrame` for perf reasons.\n   */\n  tView: TView;\n\n  /**\n   * Used to set the parent property when nodes are created and track query results.\n   *\n   * This is used in conjunction with `isParent`.\n   */\n  currentTNode: TNode|null;\n\n  /**\n   * If `isParent` is:\n   *  - `true`: then `currentTNode` points to a parent node.\n   *  - `false`: then `currentTNode` points to previous node (sibling).\n   */\n  isParent: boolean;\n\n  /**\n   * Index of currently selected element in LView.\n   *\n   * Used by binding instructions. Updated as part of advance instruction.\n   */\n  selectedIndex: number;\n\n  /**\n   * Current pointer to the binding index.\n   */\n  bindingIndex: number;\n\n  /**\n   * The last viewData retrieved by nextContext().\n   * Allows building nextContext() and reference() calls.\n   *\n   * e.g. const inner = x().$implicit; const outer = x().$implicit;\n   */\n  contextLView: LView;\n\n  /**\n   * Store the element depth count. This is used to identify the root elements of the template\n   * so that we can then attach patch data `LView` to only those elements. We know that those\n   * are the only places where the patch data could change, this way we will save on number\n   * of places where tha patching occurs.\n   */\n  elementDepthCount: number;\n\n  /**\n   * Current namespace to be used when creating elements\n   */\n  currentNamespace: string|null;\n\n\n  /**\n   * The root index from which pure function instructions should calculate their binding\n   * indices. In component views, this is TView.bindingStartIndex. In a host binding\n   * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n   */\n  bindingRootIndex: number;\n\n  /**\n   * Current index of a View or Content Query which needs to be processed next.\n   * We iterate over the list of Queries and increment current query index at every step.\n   */\n  currentQueryIndex: number;\n\n  /**\n   * When host binding is executing this points to the directive index.\n   * `TView.data[currentDirectiveIndex]` is `DirectiveDef`\n   * `LView[currentDirectiveIndex]` is directive instance.\n   */\n  currentDirectiveIndex: number;\n\n  /**\n   * Are we currently in i18n block as denoted by `ɵɵelementStart` and `ɵɵelementEnd`.\n   *\n   * This information is needed because while we are in i18n block all elements must be pre-declared\n   * in the translation. (i.e. `Hello �#2�World�/#2�!` pre-declares element at `�#2�` location.)\n   * This allocates `TNodeType.Placeholder` element at location `2`. If translator removes `�#2�`\n   * from translation than the runtime must also ensure tha element at `2` does not get inserted\n   * into the DOM. The translation does not carry information about deleted elements. Therefor the\n   * only way to know that an element is deleted is that it was not pre-declared in the translation.\n   *\n   * This flag works by ensuring that elements which are created without pre-declaration\n   * (`TNodeType.Placeholder`) are not inserted into the DOM render tree. (It does mean that the\n   * element still gets instantiated along with all of its behavior [directives])\n   */\n  inI18n: boolean;\n}\n\n/**\n * All implicit instruction state is stored here.\n *\n * It is useful to have a single object where all of the state is stored as a mental model\n * (rather it being spread across many different variables.)\n *\n * PERF NOTE: Turns out that writing to a true global variable is slower than\n * having an intermediate object with properties.\n */\ninterface InstructionState {\n  /**\n   * Current `LFrame`\n   *\n   * `null` if we have not called `enterView`\n   */\n  lFrame: LFrame;\n\n  /**\n   * Stores whether directives should be matched to elements.\n   *\n   * When template contains `ngNonBindable` then we need to prevent the runtime from matching\n   * directives on children of that element.\n   *\n   * Example:\n   * ```\n   * <my-comp my-directive>\n   *   Should match component / directive.\n   * </my-comp>\n   * <div ngNonBindable>\n   *   <my-comp my-directive>\n   *     Should not match component / directive because we are in ngNonBindable.\n   *   </my-comp>\n   * </div>\n   * ```\n   */\n  bindingsEnabled: boolean;\n\n  /**\n   * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n   *\n   * Necessary to support ChangeDetectorRef.checkNoChanges().\n   *\n   * checkNoChanges Runs only in devmode=true and verifies that no unintended changes exist in\n   * the change detector or its children.\n   */\n  isInCheckNoChangesMode: boolean;\n}\n\nconst instructionState: InstructionState = {\n  lFrame: createLFrame(null),\n  bindingsEnabled: true,\n  isInCheckNoChangesMode: false,\n};\n\n/**\n * Returns true if the instruction state stack is empty.\n *\n * Intended to be called from tests only (tree shaken otherwise).\n */\nexport function specOnlyIsInstructionStateEmpty(): boolean {\n  return instructionState.lFrame.parent === null;\n}\n\n\nexport function getElementDepthCount() {\n  return instructionState.lFrame.elementDepthCount;\n}\n\nexport function increaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount++;\n}\n\nexport function decreaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount--;\n}\n\nexport function getBindingsEnabled(): boolean {\n  return instructionState.bindingsEnabled;\n}\n\n\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nexport function ɵɵenableBindings(): void {\n  instructionState.bindingsEnabled = true;\n}\n\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nexport function ɵɵdisableBindings(): void {\n  instructionState.bindingsEnabled = false;\n}\n\n/**\n * Return the current `LView`.\n */\nexport function getLView(): LView {\n  return instructionState.lFrame.lView;\n}\n\n/**\n * Return the current `TView`.\n */\nexport function getTView(): TView {\n  return instructionState.lFrame.tView;\n}\n\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n *\n * @codeGenApi\n */\nexport function ɵɵrestoreView(viewToRestore: OpaqueViewState) {\n  instructionState.lFrame.contextLView = viewToRestore as any as LView;\n}\n\n\nexport function getCurrentTNode(): TNode|null {\n  let currentTNode = getCurrentTNodePlaceholderOk();\n  while (currentTNode !== null && currentTNode.type === TNodeType.Placeholder) {\n    currentTNode = currentTNode.parent;\n  }\n  return currentTNode;\n}\n\nexport function getCurrentTNodePlaceholderOk(): TNode|null {\n  return instructionState.lFrame.currentTNode;\n}\n\nexport function getCurrentParentTNode(): TNode|null {\n  const lFrame = instructionState.lFrame;\n  const currentTNode = lFrame.currentTNode;\n  return lFrame.isParent ? currentTNode : currentTNode!.parent;\n}\n\nexport function setCurrentTNode(tNode: TNode|null, isParent: boolean) {\n  ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);\n  const lFrame = instructionState.lFrame;\n  lFrame.currentTNode = tNode;\n  lFrame.isParent = isParent;\n}\n\nexport function isCurrentTNodeParent(): boolean {\n  return instructionState.lFrame.isParent;\n}\n\nexport function setCurrentTNodeAsNotParent(): void {\n  instructionState.lFrame.isParent = false;\n}\nexport function setCurrentTNodeAsParent(): void {\n  instructionState.lFrame.isParent = true;\n}\n\nexport function getContextLView(): LView {\n  return instructionState.lFrame.contextLView;\n}\n\nexport function isInCheckNoChangesMode(): boolean {\n  // TODO(misko): remove this from the LView since it is ngDevMode=true mode only.\n  return instructionState.isInCheckNoChangesMode;\n}\n\nexport function setIsInCheckNoChangesMode(mode: boolean): void {\n  instructionState.isInCheckNoChangesMode = mode;\n}\n\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\nexport function getBindingRoot() {\n  const lFrame = instructionState.lFrame;\n  let index = lFrame.bindingRootIndex;\n  if (index === -1) {\n    index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;\n  }\n  return index;\n}\n\nexport function getBindingIndex(): number {\n  return instructionState.lFrame.bindingIndex;\n}\n\nexport function setBindingIndex(value: number): number {\n  return instructionState.lFrame.bindingIndex = value;\n}\n\nexport function nextBindingIndex(): number {\n  return instructionState.lFrame.bindingIndex++;\n}\n\nexport function incrementBindingIndex(count: number): number {\n  const lFrame = instructionState.lFrame;\n  const index = lFrame.bindingIndex;\n  lFrame.bindingIndex = lFrame.bindingIndex + count;\n  return index;\n}\n\nexport function isInI18nBlock() {\n  return instructionState.lFrame.inI18n;\n}\n\nexport function setInI18nBlock(isInI18nBlock: boolean): void {\n  instructionState.lFrame.inI18n = isInI18nBlock;\n}\n\n/**\n * Set a new binding root index so that host template functions can execute.\n *\n * Bindings inside the host template are 0 index. But because we don't know ahead of time\n * how many host bindings we have we can't pre-compute them. For this reason they are all\n * 0 index and we just shift the root so that they match next available location in the LView.\n *\n * @param bindingRootIndex Root index for `hostBindings`\n * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive\n *        whose `hostBindings` are being processed.\n */\nexport function setBindingRootForHostBindings(\n    bindingRootIndex: number, currentDirectiveIndex: number) {\n  const lFrame = instructionState.lFrame;\n  lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;\n  setCurrentDirectiveIndex(currentDirectiveIndex);\n}\n\n/**\n * When host binding is executing this points to the directive index.\n * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`\n * `LView[getCurrentDirectiveIndex()]` is directive instance.\n */\nexport function getCurrentDirectiveIndex(): number {\n  return instructionState.lFrame.currentDirectiveIndex;\n}\n\n/**\n * Sets an index of a directive whose `hostBindings` are being processed.\n *\n * @param currentDirectiveIndex `TData` index where current directive instance can be found.\n */\nexport function setCurrentDirectiveIndex(currentDirectiveIndex: number): void {\n  instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;\n}\n\n/**\n * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being\n * executed.\n *\n * @param tData Current `TData` where the `DirectiveDef` will be looked up at.\n */\nexport function getCurrentDirectiveDef(tData: TData): DirectiveDef<any>|null {\n  const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;\n  return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex] as DirectiveDef<any>;\n}\n\nexport function getCurrentQueryIndex(): number {\n  return instructionState.lFrame.currentQueryIndex;\n}\n\nexport function setCurrentQueryIndex(value: number): void {\n  instructionState.lFrame.currentQueryIndex = value;\n}\n\n/**\n * Returns a `TNode` of the location where the current `LView` is declared at.\n *\n * @param lView an `LView` that we want to find parent `TNode` for.\n */\nfunction getDeclarationTNode(lView: LView): TNode|null {\n  const tView = lView[TVIEW];\n\n  // Return the declaration parent for embedded views\n  if (tView.type === TViewType.Embedded) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode;\n  }\n\n  // Components don't have `TView.declTNode` because each instance of component could be\n  // inserted in different location, hence `TView.declTNode` is meaningless.\n  // Falling back to `T_HOST` in case we cross component boundary.\n  if (tView.type === TViewType.Component) {\n    return lView[T_HOST];\n  }\n\n  // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.\n  return null;\n}\n\n/**\n * This is a light weight version of the `enterView` which is needed by the DI system.\n *\n * @param lView `LView` location of the DI context.\n * @param tNode `TNode` for DI context\n * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration\n *     tree from `tNode`  until we find parent declared `TElementNode`.\n * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared\n *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated\n *     `NodeInjector` can be found and we should instead use `ModuleInjector`.\n *     - If `true` than this call must be fallowed by `leaveDI`\n *     - If `false` than this call failed and we should NOT call `leaveDI`\n */\nexport function enterDI(lView: LView, tNode: TNode, flags: InjectFlags) {\n  ngDevMode && assertLViewOrUndefined(lView);\n\n  if (flags & InjectFlags.SkipSelf) {\n    ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);\n\n    let parentTNode = tNode as TNode | null;\n    let parentLView = lView;\n\n    while (true) {\n      ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');\n      parentTNode = parentTNode!.parent as TNode | null;\n      if (parentTNode === null && !(flags & InjectFlags.Host)) {\n        parentTNode = getDeclarationTNode(parentLView);\n        if (parentTNode === null) break;\n\n        // In this case, a parent exists and is definitely an element. So it will definitely\n        // have an existing lView as the declaration view, which is why we can assume it's defined.\n        ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');\n        parentLView = parentLView[DECLARATION_VIEW]!;\n\n        // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives\n        // We want to skip those and look only at Elements and ElementContainers to ensure\n        // we're looking at true parent nodes, and not content or other types.\n        if (parentTNode.type & (TNodeType.Element | TNodeType.ElementContainer)) {\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    if (parentTNode === null) {\n      // If we failed to find a parent TNode this means that we should use module injector.\n      return false;\n    } else {\n      tNode = parentTNode;\n      lView = parentLView;\n    }\n  }\n\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  const lFrame = instructionState.lFrame = allocLFrame();\n  lFrame.currentTNode = tNode;\n  lFrame.lView = lView;\n\n  return true;\n}\n\n/**\n * Swap the current lView with a new lView.\n *\n * For performance reasons we store the lView in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the lView for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New lView to become active\n * @returns the previously active lView;\n */\nexport function enterView(newView: LView): void {\n  ngDevMode && assertNotEqual(newView[0], newView[1] as any, '????');\n  ngDevMode && assertLViewOrUndefined(newView);\n  const newLFrame = allocLFrame();\n  if (ngDevMode) {\n    assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');\n    assertEqual(newLFrame.lView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.tView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');\n  }\n  const tView = newView[TVIEW];\n  instructionState.lFrame = newLFrame;\n  ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);\n  newLFrame.currentTNode = tView.firstChild!;\n  newLFrame.lView = newView;\n  newLFrame.tView = tView;\n  newLFrame.contextLView = newView!;\n  newLFrame.bindingIndex = tView.bindingStartIndex;\n  newLFrame.inI18n = false;\n}\n\n/**\n * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.\n */\nfunction allocLFrame() {\n  const currentLFrame = instructionState.lFrame;\n  const childLFrame = currentLFrame === null ? null : currentLFrame.child;\n  const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;\n  return newLFrame;\n}\n\nfunction createLFrame(parent: LFrame|null): LFrame {\n  const lFrame: LFrame = {\n    currentTNode: null,\n    isParent: true,\n    lView: null!,\n    tView: null!,\n    selectedIndex: -1,\n    contextLView: null!,\n    elementDepthCount: 0,\n    currentNamespace: null,\n    currentDirectiveIndex: -1,\n    bindingRootIndex: -1,\n    bindingIndex: -1,\n    currentQueryIndex: 0,\n    parent: parent!,\n    child: null,\n    inI18n: false,\n  };\n  parent !== null && (parent.child = lFrame);  // link the new LFrame for reuse.\n  return lFrame;\n}\n\n/**\n * A lightweight version of leave which is used with DI.\n *\n * This function only resets `currentTNode` and `LView` as those are the only properties\n * used with DI (`enterDI()`).\n *\n * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where\n * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.\n */\nfunction leaveViewLight(): LFrame {\n  const oldLFrame = instructionState.lFrame;\n  instructionState.lFrame = oldLFrame.parent;\n  oldLFrame.currentTNode = null!;\n  oldLFrame.lView = null!;\n  return oldLFrame;\n}\n\n/**\n * This is a lightweight version of the `leaveView` which is needed by the DI system.\n *\n * NOTE: this function is an alias so that we can change the type of the function to have `void`\n * return type.\n */\nexport const leaveDI: () => void = leaveViewLight;\n\n/**\n * Leave the current `LView`\n *\n * This pops the `LFrame` with the associated `LView` from the stack.\n *\n * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is\n * because for performance reasons we don't release `LFrame` but rather keep it for next use.\n */\nexport function leaveView() {\n  const oldLFrame = leaveViewLight();\n  oldLFrame.isParent = true;\n  oldLFrame.tView = null!;\n  oldLFrame.selectedIndex = -1;\n  oldLFrame.contextLView = null!;\n  oldLFrame.elementDepthCount = 0;\n  oldLFrame.currentDirectiveIndex = -1;\n  oldLFrame.currentNamespace = null;\n  oldLFrame.bindingRootIndex = -1;\n  oldLFrame.bindingIndex = -1;\n  oldLFrame.currentQueryIndex = 0;\n}\n\nexport function nextContextImpl<T = any>(level: number): T {\n  const contextLView = instructionState.lFrame.contextLView =\n      walkUpViews(level, instructionState.lFrame.contextLView!);\n  return contextLView[CONTEXT] as T;\n}\n\nfunction walkUpViews(nestingLevel: number, currentView: LView): LView {\n  while (nestingLevel > 0) {\n    ngDevMode &&\n        assertDefined(\n            currentView[DECLARATION_VIEW],\n            'Declaration view should be defined if nesting level is greater than 0.');\n    currentView = currentView[DECLARATION_VIEW]!;\n    nestingLevel--;\n  }\n  return currentView;\n}\n\n/**\n * Gets the currently selected element index.\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n */\nexport function getSelectedIndex() {\n  return instructionState.lFrame.selectedIndex;\n}\n\n/**\n * Sets the most recent index passed to {@link select}\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n *\n * (Note that if an \"exit function\" was set earlier (via `setElementExitFn()`) then that will be\n * run if and when the provided `index` value is different from the current selected index value.)\n */\nexport function setSelectedIndex(index: number) {\n  ngDevMode && index !== -1 &&\n      assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');\n  ngDevMode &&\n      assertLessThan(\n          index, instructionState.lFrame.lView.length, 'Can\\'t set index passed end of LView');\n  instructionState.lFrame.selectedIndex = index;\n}\n\n/**\n * Gets the `tNode` that represents currently selected element.\n */\nexport function getSelectedTNode() {\n  const lFrame = instructionState.lFrame;\n  return getTNode(lFrame.tView, lFrame.selectedIndex);\n}\n\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n *\n * @codeGenApi\n */\nexport function ɵɵnamespaceSVG() {\n  instructionState.lFrame.currentNamespace = SVG_NAMESPACE;\n}\n\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n *\n * @codeGenApi\n */\nexport function ɵɵnamespaceMathML() {\n  instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;\n}\n\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n *\n * @codeGenApi\n */\nexport function ɵɵnamespaceHTML() {\n  namespaceHTMLInternal();\n}\n\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n */\nexport function namespaceHTMLInternal() {\n  instructionState.lFrame.currentNamespace = null;\n}\n\nexport function getNamespace(): string|null {\n  return instructionState.lFrame.currentNamespace;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\nexport const MATH_ML_NAMESPACE = 'http://www.w3.org/1998/MathML/';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AfterContentChecked, AfterContentInit, AfterViewChecked, AfterViewInit, DoCheck, OnChanges, OnDestroy, OnInit} from '../interface/lifecycle_hooks';\nimport {assertDefined, assertEqual, assertNotEqual} from '../util/assert';\nimport {assertFirstCreatePass} from './assert';\nimport {NgOnChangesFeatureImpl} from './features/ng_onchanges_feature';\nimport {DirectiveDef} from './interfaces/definition';\nimport {TNode} from './interfaces/node';\nimport {FLAGS, HookData, InitPhaseState, LView, LViewFlags, PREORDER_HOOK_FLAGS, PreOrderHookFlags, TView} from './interfaces/view';\nimport {isInCheckNoChangesMode} from './state';\n\n\n\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * Sets up the pre-order hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * @param directiveIndex The index of the directive in LView\n * @param directiveDef The definition containing the hooks to setup in tView\n * @param tView The current TView\n */\nexport function registerPreOrderHooks(\n    directiveIndex: number, directiveDef: DirectiveDef<any>, tView: TView): void {\n  ngDevMode && assertFirstCreatePass(tView);\n  const {ngOnChanges, ngOnInit, ngDoCheck} =\n      directiveDef.type.prototype as OnChanges & OnInit & DoCheck;\n\n  if (ngOnChanges as Function | undefined) {\n    const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);\n    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, wrappedOnChanges);\n    (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = []))\n        .push(directiveIndex, wrappedOnChanges);\n  }\n\n  if (ngOnInit) {\n    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(0 - directiveIndex, ngOnInit);\n  }\n\n  if (ngDoCheck) {\n    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, ngDoCheck);\n    (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, ngDoCheck);\n  }\n}\n\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param tView The current TView\n * @param tNode The TNode whose directives are to be searched for hooks to queue\n */\nexport function registerPostOrderHooks(tView: TView, tNode: TNode): void {\n  ngDevMode && assertFirstCreatePass(tView);\n  // It's necessary to loop through the directives at elementEnd() (rather than processing in\n  // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n  // hooks for projected components and directives must be called *before* their hosts.\n  for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n    const directiveDef = tView.data[i] as DirectiveDef<any>;\n    ngDevMode && assertDefined(directiveDef, 'Expecting DirectiveDef');\n    const lifecycleHooks: AfterContentInit&AfterContentChecked&AfterViewInit&AfterViewChecked&\n        OnDestroy = directiveDef.type.prototype;\n    const {\n      ngAfterContentInit,\n      ngAfterContentChecked,\n      ngAfterViewInit,\n      ngAfterViewChecked,\n      ngOnDestroy\n    } = lifecycleHooks;\n\n    if (ngAfterContentInit) {\n      (tView.contentHooks || (tView.contentHooks = [])).push(-i, ngAfterContentInit);\n    }\n\n    if (ngAfterContentChecked) {\n      (tView.contentHooks || (tView.contentHooks = [])).push(i, ngAfterContentChecked);\n      (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, ngAfterContentChecked);\n    }\n\n    if (ngAfterViewInit) {\n      (tView.viewHooks || (tView.viewHooks = [])).push(-i, ngAfterViewInit);\n    }\n\n    if (ngAfterViewChecked) {\n      (tView.viewHooks || (tView.viewHooks = [])).push(i, ngAfterViewChecked);\n      (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, ngAfterViewChecked);\n    }\n\n    if (ngOnDestroy != null) {\n      (tView.destroyHooks || (tView.destroyHooks = [])).push(i, ngOnDestroy);\n    }\n  }\n}\n\n/**\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\n *\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\n * some recursively trigger a change detection cycle.\n * To solve that, it is required to track the state of the execution of these init hooks.\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n * and the index within that phase. They can be seen as a cursor in the following structure:\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n * They are are stored as flags in LView[FLAGS].\n *\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n * To be able to pause and resume their execution, we also need some state about the hook's array\n * that is being processed:\n * - the index of the next hook to be executed\n * - the number of init hooks already found in the processed part of the  array\n * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].\n */\n\n\n/**\n * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were\n * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read\n * / write of the init-hooks related flags.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nexport function executeCheckHooks(lView: LView, hooks: HookData, nodeIndex?: number|null) {\n  callHooks(lView, hooks, InitPhaseState.InitPhaseCompleted, nodeIndex);\n}\n\n/**\n * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,\n * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param initPhase A phase for which hooks should be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nexport function executeInitAndCheckHooks(\n    lView: LView, hooks: HookData, initPhase: InitPhaseState, nodeIndex?: number|null) {\n  ngDevMode &&\n      assertNotEqual(\n          initPhase, InitPhaseState.InitPhaseCompleted,\n          'Init pre-order hooks should not be called more than once');\n  if ((lView[FLAGS] & LViewFlags.InitPhaseStateMask) === initPhase) {\n    callHooks(lView, hooks, initPhase, nodeIndex);\n  }\n}\n\nexport function incrementInitPhaseFlags(lView: LView, initPhase: InitPhaseState): void {\n  ngDevMode &&\n      assertNotEqual(\n          initPhase, InitPhaseState.InitPhaseCompleted,\n          'Init hooks phase should not be incremented after all init hooks have been run.');\n  let flags = lView[FLAGS];\n  if ((flags & LViewFlags.InitPhaseStateMask) === initPhase) {\n    flags &= LViewFlags.IndexWithinInitPhaseReset;\n    flags += LViewFlags.InitPhaseStateIncrementer;\n    lView[FLAGS] = flags;\n  }\n}\n\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass\n *\n * @param currentView The current view\n * @param arr The array in which the hooks are found\n * @param initPhaseState the current state of the init phase\n * @param currentNodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction callHooks(\n    currentView: LView, arr: HookData, initPhase: InitPhaseState,\n    currentNodeIndex: number|null|undefined): void {\n  ngDevMode &&\n      assertEqual(\n          isInCheckNoChangesMode(), false,\n          'Hooks should never be run when in check no changes mode.');\n  const startIndex = currentNodeIndex !== undefined ?\n      (currentView[PREORDER_HOOK_FLAGS] & PreOrderHookFlags.IndexOfTheNextPreOrderHookMaskMask) :\n      0;\n  const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n  const max = arr.length - 1;  // Stop the loop at length - 1, because we look for the hook at i + 1\n  let lastNodeIndexFound = 0;\n  for (let i = startIndex; i < max; i++) {\n    const hook = arr[i + 1] as number | (() => void);\n    if (typeof hook === 'number') {\n      lastNodeIndexFound = arr[i] as number;\n      if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n        break;\n      }\n    } else {\n      const isInitHook = arr[i] < 0;\n      if (isInitHook)\n        currentView[PREORDER_HOOK_FLAGS] += PreOrderHookFlags.NumberOfInitHooksCalledIncrementer;\n      if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n        callHook(currentView, initPhase, arr, i);\n        currentView[PREORDER_HOOK_FLAGS] =\n            (currentView[PREORDER_HOOK_FLAGS] & PreOrderHookFlags.NumberOfInitHooksCalledMask) + i +\n            2;\n      }\n      i++;\n    }\n  }\n}\n\n/**\n * Execute one hook against the current `LView`.\n *\n * @param currentView The current view\n * @param initPhaseState the current state of the init phase\n * @param arr The array in which the hooks are found\n * @param i The current index within the hook data array\n */\nfunction callHook(currentView: LView, initPhase: InitPhaseState, arr: HookData, i: number) {\n  const isInitHook = arr[i] < 0;\n  const hook = arr[i + 1] as () => void;\n  const directiveIndex = isInitHook ? -arr[i] : arr[i] as number;\n  const directive = currentView[directiveIndex];\n  if (isInitHook) {\n    const indexWithintInitPhase = currentView[FLAGS] >> LViewFlags.IndexWithinInitPhaseShift;\n    // The init phase state must be always checked here as it may have been recursively updated.\n    if (indexWithintInitPhase <\n            (currentView[PREORDER_HOOK_FLAGS] >> PreOrderHookFlags.NumberOfInitHooksCalledShift) &&\n        (currentView[FLAGS] & LViewFlags.InitPhaseStateMask) === initPhase) {\n      currentView[FLAGS] += LViewFlags.IndexWithinInitPhaseIncrementer;\n      hook.call(directive);\n    }\n  } else {\n    hook.call(directive);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '../../di/injection_token';\nimport {InjectFlags} from '../../di/interface/injector';\nimport {AbstractType, Type} from '../../interface/type';\nimport {assertDefined, assertEqual} from '../../util/assert';\n\nimport {TDirectiveHostNode} from './node';\nimport {LView, TData} from './view';\n\n/**\n * Offsets of the `NodeInjector` data structure in the expando.\n *\n * `NodeInjector` is stored in both `LView` as well as `TView.data`. All storage requires 9 words.\n * First 8 are reserved for bloom filter and the 9th is reserved for the associated `TNode` as well\n * as parent `NodeInjector` pointer. All indexes are starting with `index` and have an offset as\n * shown.\n *\n * `LView` layout:\n * ```\n * index + 0: cumulative bloom filter\n * index + 1: cumulative bloom filter\n * index + 2: cumulative bloom filter\n * index + 3: cumulative bloom filter\n * index + 4: cumulative bloom filter\n * index + 5: cumulative bloom filter\n * index + 6: cumulative bloom filter\n * index + 7: cumulative bloom filter\n * index + 8: cumulative bloom filter\n * index + PARENT: Index to the parent injector. See `RelativeInjectorLocation`\n *                 `const parent = lView[index + NodeInjectorOffset.PARENT]`\n * ```\n *\n * `TViewData` layout:\n * ```\n * index + 0: cumulative bloom filter\n * index + 1: cumulative bloom filter\n * index + 2: cumulative bloom filter\n * index + 3: cumulative bloom filter\n * index + 4: cumulative bloom filter\n * index + 5: cumulative bloom filter\n * index + 6: cumulative bloom filter\n * index + 7: cumulative bloom filter\n * index + 8: cumulative bloom filter\n * index + TNODE: TNode associated with this `NodeInjector`\n *                `canst tNode = tView.data[index + NodeInjectorOffset.TNODE]`\n * ```\n */\nexport const enum NodeInjectorOffset {\n  TNODE = 8,\n  PARENT = 8,\n  BLOOM_SIZE = 8,\n  SIZE = 9,\n}\n\n/**\n * Represents a relative location of parent injector.\n *\n * The interfaces encodes number of parents `LView`s to traverse and index in the `LView`\n * pointing to the parent injector.\n */\nexport interface RelativeInjectorLocation {\n  __brand__: 'RelativeInjectorLocationFlags';\n}\n\nexport const enum RelativeInjectorLocationFlags {\n  InjectorIndexMask = 0b111111111111111,\n  ViewOffsetShift = 16,\n  NO_PARENT = -1,\n}\n\nexport const NO_PARENT_INJECTOR: RelativeInjectorLocation = -1 as any;\n\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nexport class NodeInjectorFactory {\n  /**\n   * The inject implementation to be activated when using the factory.\n   */\n  injectImpl: null|\n      (<T>(token: Type<T>|AbstractType<T>|InjectionToken<T>, flags?: InjectFlags) => T);\n\n  /**\n   * Marker set to true during factory invocation to see if we get into recursive loop.\n   * Recursive loop causes an error to be displayed.\n   */\n  resolving = false;\n\n  /**\n   * Marks that the token can see other Tokens declared in `viewProviders` on the same node.\n   */\n  canSeeViewProviders: boolean;\n\n  /**\n   * An array of factories to use in case of `multi` provider.\n   */\n  multi?: Array<() => any>;\n\n  /**\n   * Number of `multi`-providers which belong to the component.\n   *\n   * This is needed because when multiple components and directives declare the `multi` provider\n   * they have to be concatenated in the correct order.\n   *\n   * Example:\n   *\n   * If we have a component and directive active an a single element as declared here\n   * ```\n   * component:\n   *   provides: [ {provide: String, useValue: 'component', multi: true} ],\n   *   viewProvides: [ {provide: String, useValue: 'componentView', multi: true} ],\n   *\n   * directive:\n   *   provides: [ {provide: String, useValue: 'directive', multi: true} ],\n   * ```\n   *\n   * Then the expected results are:\n   *\n   * ```\n   * providers: ['component', 'directive']\n   * viewProviders: ['component', 'componentView', 'directive']\n   * ```\n   *\n   * The way to think about it is that the `viewProviders` have been inserted after the component\n   * but before the directives, which is why we need to know how many `multi`s have been declared by\n   * the component.\n   */\n  componentProviders?: number;\n\n  /**\n   * Current index of the Factory in the `data`. Needed for `viewProviders` and `providers` merging.\n   * See `providerFactory`.\n   */\n  index?: number;\n\n  /**\n   * Because the same `multi` provider can be declared in `provides` and `viewProvides` it is\n   * possible for `viewProvides` to shadow the `provides`. For this reason we store the\n   * `provideFactory` of the `providers` so that `providers` can be extended with `viewProviders`.\n   *\n   * Example:\n   *\n   * Given:\n   * ```\n   * provides: [ {provide: String, useValue: 'all', multi: true} ],\n   * viewProvides: [ {provide: String, useValue: 'viewOnly', multi: true} ],\n   * ```\n   *\n   * We have to return `['all']` in case of content injection, but `['all', 'viewOnly']` in case\n   * of view injection. We further have to make sure that the shared instances (in our case\n   * `all`) are the exact same instance in both the content as well as the view injection. (We\n   * have to make sure that we don't double instantiate.) For this reason the `viewProvides`\n   * `Factory` has a pointer to the shadowed `provides` factory so that it can instantiate the\n   * `providers` (`['all']`) and then extend it with `viewProviders` (`['all'] + ['viewOnly'] =\n   * ['all', 'viewOnly']`).\n   */\n  providerFactory?: NodeInjectorFactory|null;\n\n\n  constructor(\n      /**\n       * Factory to invoke in order to create a new instance.\n       */\n      public factory:\n          (this: NodeInjectorFactory, _: undefined,\n           /**\n            * array where injectables tokens are stored. This is used in\n            * case of an error reporting to produce friendlier errors.\n            */\n           tData: TData,\n           /**\n            * array where existing instances of injectables are stored. This is used in case\n            * of multi shadow is needed. See `multi` field documentation.\n            */\n           lView: LView,\n           /**\n            * The TNode of the same element injector.\n            */\n           tNode: TDirectiveHostNode) => any,\n      /**\n       * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n       */\n      isViewProvider: boolean,\n      injectImplementation: null|\n      (<T>(token: Type<T>|AbstractType<T>|InjectionToken<T>, flags?: InjectFlags) => T)) {\n    ngDevMode && assertDefined(factory, 'Factory not specified');\n    ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');\n    this.canSeeViewProviders = isViewProvider;\n    this.injectImpl = injectImplementation;\n  }\n}\n\nexport function isFactory(obj: any): obj is NodeInjectorFactory {\n  return obj instanceof NodeInjectorFactory;\n}\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CharCode} from '../../util/char_code';\nimport {AttributeMarker, TAttributes} from '../interfaces/node';\nimport {CssSelector} from '../interfaces/projection';\nimport {isProceduralRenderer, ProceduralRenderer3, Renderer3} from '../interfaces/renderer';\nimport {RElement} from '../interfaces/renderer_dom';\n\n\n\n/**\n * Assigns all attribute values to the provided element via the inferred renderer.\n *\n * This function accepts two forms of attribute entries:\n *\n * default: (key, value):\n *  attrs = [key1, value1, key2, value2]\n *\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n *\n * The `attrs` array can contain a mix of both the default and namespaced entries.\n * The \"default\" values are set without a marker, but if the function comes across\n * a marker value then it will attempt to set a namespaced value. If the marker is\n * not of a namespaced value then the function will quit and return the index value\n * where it stopped during the iteration of the attrs array.\n *\n * See [AttributeMarker] to understand what the namespace marker value is.\n *\n * Note that this instruction does not support assigning style and class values to\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n * are applied to an element.\n * @param renderer The renderer to be used\n * @param native The element that the attributes will be assigned to\n * @param attrs The attribute array of values that will be assigned to the element\n * @returns the index value that was last accessed in the attributes array\n */\nexport function setUpAttributes(renderer: Renderer3, native: RElement, attrs: TAttributes): number {\n  const isProc = isProceduralRenderer(renderer);\n\n  let i = 0;\n  while (i < attrs.length) {\n    const value = attrs[i];\n    if (typeof value === 'number') {\n      // only namespaces are supported. Other value types (such as style/class\n      // entries) are not supported in this function.\n      if (value !== AttributeMarker.NamespaceURI) {\n        break;\n      }\n\n      // we just landed on the marker value ... therefore\n      // we should skip to the next entry\n      i++;\n\n      const namespaceURI = attrs[i++] as string;\n      const attrName = attrs[i++] as string;\n      const attrVal = attrs[i++] as string;\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      isProc ?\n          (renderer as ProceduralRenderer3).setAttribute(native, attrName, attrVal, namespaceURI) :\n          native.setAttributeNS(namespaceURI, attrName, attrVal);\n    } else {\n      // attrName is string;\n      const attrName = value as string;\n      const attrVal = attrs[++i];\n      // Standard attributes\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      if (isAnimationProp(attrName)) {\n        if (isProc) {\n          (renderer as ProceduralRenderer3).setProperty(native, attrName, attrVal);\n        }\n      } else {\n        isProc ?\n            (renderer as ProceduralRenderer3).setAttribute(native, attrName, attrVal as string) :\n            native.setAttribute(attrName, attrVal as string);\n      }\n      i++;\n    }\n  }\n\n  // another piece of code may iterate over the same attributes array. Therefore\n  // it may be helpful to return the exact spot where the attributes array exited\n  // whether by running into an unsupported marker or if all the static values were\n  // iterated over.\n  return i;\n}\n\n/**\n * Test whether the given value is a marker that indicates that the following\n * attribute values in a `TAttributes` array are only the names of attributes,\n * and not name-value pairs.\n * @param marker The attribute marker to test.\n * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\n */\nexport function isNameOnlyAttributeMarker(marker: string|AttributeMarker|CssSelector) {\n  return marker === AttributeMarker.Bindings || marker === AttributeMarker.Template ||\n      marker === AttributeMarker.I18n;\n}\n\nexport function isAnimationProp(name: string): boolean {\n  // Perf note: accessing charCodeAt to check for the first character of a string is faster as\n  // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that\n  // charCodeAt doesn't allocate memory to return a substring.\n  return name.charCodeAt(0) === CharCode.AT_SIGN;\n}\n\n/**\n * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.\n *\n * This merge function keeps the order of attrs same.\n *\n * @param dst Location of where the merged `TAttributes` should end up.\n * @param src `TAttributes` which should be appended to `dst`\n */\nexport function mergeHostAttrs(dst: TAttributes|null, src: TAttributes|null): TAttributes|null {\n  if (src === null || src.length === 0) {\n    // do nothing\n  } else if (dst === null || dst.length === 0) {\n    // We have source, but dst is empty, just make a copy.\n    dst = src.slice();\n  } else {\n    let srcMarker: AttributeMarker = AttributeMarker.ImplicitAttributes;\n    for (let i = 0; i < src.length; i++) {\n      const item = src[i];\n      if (typeof item === 'number') {\n        srcMarker = item;\n      } else {\n        if (srcMarker === AttributeMarker.NamespaceURI) {\n          // Case where we need to consume `key1`, `key2`, `value` items.\n        } else if (\n            srcMarker === AttributeMarker.ImplicitAttributes ||\n            srcMarker === AttributeMarker.Styles) {\n          // Case where we have to consume `key1` and `value` only.\n          mergeHostAttribute(dst, srcMarker, item as string, null, src[++i] as string);\n        } else {\n          // Case where we have to consume `key1` only.\n          mergeHostAttribute(dst, srcMarker, item as string, null, null);\n        }\n      }\n    }\n  }\n  return dst;\n}\n\n/**\n * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.\n *\n * @param dst `TAttributes` to append to.\n * @param marker Region where the `key`/`value` should be added.\n * @param key1 Key to add to `TAttributes`\n * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)\n * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.\n */\nexport function mergeHostAttribute(\n    dst: TAttributes, marker: AttributeMarker, key1: string, key2: string|null,\n    value: string|null): void {\n  let i = 0;\n  // Assume that new markers will be inserted at the end.\n  let markerInsertPosition = dst.length;\n  // scan until correct type.\n  if (marker === AttributeMarker.ImplicitAttributes) {\n    markerInsertPosition = -1;\n  } else {\n    while (i < dst.length) {\n      const dstValue = dst[i++];\n      if (typeof dstValue === 'number') {\n        if (dstValue === marker) {\n          markerInsertPosition = -1;\n          break;\n        } else if (dstValue > marker) {\n          // We need to save this as we want the markers to be inserted in specific order.\n          markerInsertPosition = i - 1;\n          break;\n        }\n      }\n    }\n  }\n\n  // search until you find place of insertion\n  while (i < dst.length) {\n    const item = dst[i];\n    if (typeof item === 'number') {\n      // since `i` started as the index after the marker, we did not find it if we are at the next\n      // marker\n      break;\n    } else if (item === key1) {\n      // We already have same token\n      if (key2 === null) {\n        if (value !== null) {\n          dst[i + 1] = value;\n        }\n        return;\n      } else if (key2 === dst[i + 1]) {\n        dst[i + 2] = value!;\n        return;\n      }\n    }\n    // Increment counter.\n    i++;\n    if (key2 !== null) i++;\n    if (value !== null) i++;\n  }\n\n  // insert at location.\n  if (markerInsertPosition !== -1) {\n    dst.splice(markerInsertPosition, 0, marker);\n    i = markerInsertPosition + 1;\n  }\n  dst.splice(i++, 0, key1);\n  if (key2 !== null) {\n    dst.splice(i++, 0, key2);\n  }\n  if (value !== null) {\n    dst.splice(i++, 0, value);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertGreaterThan, assertNotEqual, assertNumber} from '../../util/assert';\nimport {NO_PARENT_INJECTOR, RelativeInjectorLocation, RelativeInjectorLocationFlags} from '../interfaces/injector';\nimport {DECLARATION_VIEW, HEADER_OFFSET, LView} from '../interfaces/view';\n\n\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\nexport function hasParentInjector(parentLocation: RelativeInjectorLocation): boolean {\n  return parentLocation !== NO_PARENT_INJECTOR;\n}\n\nexport function getParentInjectorIndex(parentLocation: RelativeInjectorLocation): number {\n  ngDevMode && assertNumber(parentLocation, 'Number expected');\n  ngDevMode && assertNotEqual(parentLocation as any, -1, 'Not a valid state.');\n  const parentInjectorIndex =\n      (parentLocation as any as number) & RelativeInjectorLocationFlags.InjectorIndexMask;\n  ngDevMode &&\n      assertGreaterThan(\n          parentInjectorIndex, HEADER_OFFSET,\n          'Parent injector must be pointing past HEADER_OFFSET.');\n  return (parentLocation as any as number) & RelativeInjectorLocationFlags.InjectorIndexMask;\n}\n\nexport function getParentInjectorViewOffset(parentLocation: RelativeInjectorLocation): number {\n  return (parentLocation as any as number) >> RelativeInjectorLocationFlags.ViewOffsetShift;\n}\n\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @returns The LView instance that contains the parent injector\n */\nexport function getParentInjectorView(location: RelativeInjectorLocation, startView: LView): LView {\n  let viewOffset = getParentInjectorViewOffset(location);\n  let parentView = startView;\n  // For most cases, the parent injector can be found on the host node (e.g. for component\n  // or container), but we must keep the loop here to support the rarer case of deeply nested\n  // <ng-template> tags or inline views, where the parent injector might live many views\n  // above the child injector.\n  while (viewOffset > 0) {\n    parentView = parentView[DECLARATION_VIEW]!;\n    viewOffset--;\n  }\n  return parentView;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isForwardRef, resolveForwardRef} from '../di/forward_ref';\nimport {injectRootLimpMode, setInjectImplementation} from '../di/inject_switch';\nimport {InjectionToken} from '../di/injection_token';\nimport {Injector} from '../di/injector';\nimport {InjectorMarkers} from '../di/injector_marker';\nimport {getInjectorDef} from '../di/interface/defs';\nimport {InjectFlags} from '../di/interface/injector';\nimport {AbstractType, Type} from '../interface/type';\nimport {assertDefined, assertEqual, assertIndexInRange} from '../util/assert';\nimport {noSideEffects} from '../util/closure';\n\nimport {assertDirectiveDef, assertNodeInjector, assertTNodeForLView} from './assert';\nimport {FactoryFn, getFactoryDef} from './definition_factory';\nimport {throwCyclicDependencyError, throwProviderNotFoundError} from './errors_di';\nimport {NG_ELEMENT_ID, NG_FACTORY_DEF} from './fields';\nimport {registerPreOrderHooks} from './hooks';\nimport {DirectiveDef} from './interfaces/definition';\nimport {isFactory, NO_PARENT_INJECTOR, NodeInjectorFactory, NodeInjectorOffset, RelativeInjectorLocation, RelativeInjectorLocationFlags} from './interfaces/injector';\nimport {AttributeMarker, TContainerNode, TDirectiveHostNode, TElementContainerNode, TElementNode, TNode, TNodeProviderIndexes, TNodeType} from './interfaces/node';\nimport {isComponentDef, isComponentHost} from './interfaces/type_checks';\nimport {DECLARATION_COMPONENT_VIEW, DECLARATION_VIEW, INJECTOR, LView, T_HOST, TData, TVIEW, TView, TViewType} from './interfaces/view';\nimport {assertTNodeType} from './node_assert';\nimport {enterDI, getCurrentTNode, getLView, leaveDI} from './state';\nimport {isNameOnlyAttributeMarker} from './util/attrs_utils';\nimport {getParentInjectorIndex, getParentInjectorView, hasParentInjector} from './util/injector_utils';\nimport {stringifyForError} from './util/stringify_utils';\n\n\n\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * @Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * @Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n */\nlet includeViewProviders = true;\n\nexport function setIncludeViewProviders(v: boolean): boolean {\n  const oldValue = includeViewProviders;\n  includeViewProviders = v;\n  return oldValue;\n}\n\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n */\nconst BLOOM_SIZE = 256;\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n\n/**\n * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,\n * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash\n * number.\n */\nconst BLOOM_BUCKET_BITS = 5;\n\n/** Counter used to generate unique IDs for directives. */\nlet nextNgElementId = 0;\n\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param injectorIndex The index of the node injector where this token should be registered\n * @param tView The TView for the injector's bloom filters\n * @param type The directive token to register\n */\nexport function bloomAdd(\n    injectorIndex: number, tView: TView, type: Type<any>|InjectionToken<any>|string): void {\n  ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');\n  let id: number|undefined;\n  if (typeof type === 'string') {\n    id = type.charCodeAt(0) || 0;\n  } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {\n    id = (type as any)[NG_ELEMENT_ID];\n  }\n\n  // Set a unique ID on the directive type, so if something tries to inject the directive,\n  // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n  if (id == null) {\n    id = (type as any)[NG_ELEMENT_ID] = nextNgElementId++;\n  }\n\n  // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n  // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n  const bloomHash = id & BLOOM_MASK;\n\n  // Create a mask that targets the specific bit associated with the directive.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n\n  // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.\n  // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask\n  // should be written to.\n  (tView.data as number[])[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;\n}\n\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param tNode for which an injector should be retrieved / created.\n * @param lView View where the node is stored\n * @returns Node injector\n */\nexport function getOrCreateNodeInjectorForNode(\n    tNode: TElementNode|TContainerNode|TElementContainerNode, lView: LView): number {\n  const existingInjectorIndex = getInjectorIndex(tNode, lView);\n  if (existingInjectorIndex !== -1) {\n    return existingInjectorIndex;\n  }\n\n  const tView = lView[TVIEW];\n  if (tView.firstCreatePass) {\n    tNode.injectorIndex = lView.length;\n    insertBloom(tView.data, tNode);  // foundation for node bloom\n    insertBloom(lView, null);        // foundation for cumulative bloom\n    insertBloom(tView.blueprint, null);\n  }\n\n  const parentLoc = getParentInjectorLocation(tNode, lView);\n  const injectorIndex = tNode.injectorIndex;\n\n  // If a parent injector can't be found, its location is set to -1.\n  // In that case, we don't need to set up a cumulative bloom\n  if (hasParentInjector(parentLoc)) {\n    const parentIndex = getParentInjectorIndex(parentLoc);\n    const parentLView = getParentInjectorView(parentLoc, lView);\n    const parentData = parentLView[TVIEW].data as any;\n    // Creates a cumulative bloom filter that merges the parent's bloom filter\n    // and its own cumulative bloom (which contains tokens for all ancestors)\n    for (let i = 0; i < NodeInjectorOffset.BLOOM_SIZE; i++) {\n      lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n    }\n  }\n\n  lView[injectorIndex + NodeInjectorOffset.PARENT] = parentLoc;\n  return injectorIndex;\n}\n\nfunction insertBloom(arr: any[], footer: TNode|null): void {\n  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\n\n\nexport function getInjectorIndex(tNode: TNode, lView: LView): number {\n  if (tNode.injectorIndex === -1 ||\n      // If the injector index is the same as its parent's injector index, then the index has been\n      // copied down from the parent node. No injector has been created yet on this node.\n      (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n      // After the first template pass, the injector index might exist but the parent values\n      // might not have been calculated yet for this instance\n      lView[tNode.injectorIndex + NodeInjectorOffset.PARENT] === null) {\n    return -1;\n  } else {\n    ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);\n    return tNode.injectorIndex;\n  }\n}\n\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * @returns Returns a number that is the combination of the number of LViews that we have to go up\n * to find the LView containing the parent inject AND the index of the injector within that LView.\n */\nexport function getParentInjectorLocation(tNode: TNode, lView: LView): RelativeInjectorLocation {\n  if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n    // If we have a parent `TNode` and there is an injector associated with it we are done, because\n    // the parent injector is within the current `LView`.\n    return tNode.parent.injectorIndex as any;  // ViewOffset is 0\n  }\n\n  // When parent injector location is computed it may be outside of the current view. (ie it could\n  // be pointing to a declared parent location). This variable stores number of declaration parents\n  // we need to walk up in order to find the parent injector location.\n  let declarationViewOffset = 0;\n  let parentTNode: TNode|null = null;\n  let lViewCursor: LView|null = lView;\n\n  // The parent injector is not in the current `LView`. We will have to walk the declared parent\n  // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent\n  // `NodeInjector`.\n  while (lViewCursor !== null) {\n    // First determine the `parentTNode` location. The parent pointer differs based on `TView.type`.\n    const tView = lViewCursor[TVIEW];\n    const tViewType = tView.type;\n    if (tViewType === TViewType.Embedded) {\n      ngDevMode &&\n          assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n      parentTNode = tView.declTNode;\n    } else if (tViewType === TViewType.Component) {\n      // Components don't have `TView.declTNode` because each instance of component could be\n      // inserted in different location, hence `TView.declTNode` is meaningless.\n      parentTNode = lViewCursor[T_HOST];\n    } else {\n      ngDevMode && assertEqual(tView.type, TViewType.Root, 'Root type expected');\n      parentTNode = null;\n    }\n    if (parentTNode === null) {\n      // If we have no parent, than we are done.\n      return NO_PARENT_INJECTOR;\n    }\n\n    ngDevMode && parentTNode && assertTNodeForLView(parentTNode!, lViewCursor[DECLARATION_VIEW]!);\n    // Every iteration of the loop requires that we go to the declared parent.\n    declarationViewOffset++;\n    lViewCursor = lViewCursor[DECLARATION_VIEW];\n\n    if (parentTNode.injectorIndex !== -1) {\n      // We found a NodeInjector which points to something.\n      return (parentTNode.injectorIndex |\n              (declarationViewOffset << RelativeInjectorLocationFlags.ViewOffsetShift)) as any;\n    }\n  }\n  return NO_PARENT_INJECTOR;\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param di The node injector in which a directive will be added\n * @param token The type or the injection token to be made public\n */\nexport function diPublicInInjector(\n    injectorIndex: number, tView: TView, token: InjectionToken<any>|Type<any>): void {\n  bloomAdd(injectorIndex, tView, token);\n}\n\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * @Component(...)\n * class MyComponent {\n *   constructor(@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ɵcmp = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * @publicApi\n */\nexport function injectAttributeImpl(tNode: TNode, attrNameToInject: string): string|null {\n  ngDevMode && assertTNodeType(tNode, TNodeType.AnyContainer | TNodeType.AnyRNode);\n  ngDevMode && assertDefined(tNode, 'expecting tNode');\n  if (attrNameToInject === 'class') {\n    return tNode.classes;\n  }\n  if (attrNameToInject === 'style') {\n    return tNode.styles;\n  }\n\n  const attrs = tNode.attrs;\n  if (attrs) {\n    const attrsLength = attrs.length;\n    let i = 0;\n    while (i < attrsLength) {\n      const value = attrs[i];\n\n      // If we hit a `Bindings` or `Template` marker then we are done.\n      if (isNameOnlyAttributeMarker(value)) break;\n\n      // Skip namespaced attributes\n      if (value === AttributeMarker.NamespaceURI) {\n        // we skip the next two values\n        // as namespaced attributes looks like\n        // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n        // 'existValue', ...]\n        i = i + 2;\n      } else if (typeof value === 'number') {\n        // Skip to the first value of the marked attribute.\n        i++;\n        while (i < attrsLength && typeof attrs[i] === 'string') {\n          i++;\n        }\n      } else if (value === attrNameToInject) {\n        return attrs[i + 1] as string;\n      } else {\n        i = i + 2;\n      }\n    }\n  }\n  return null;\n}\n\n\nfunction notFoundValueOrThrow<T>(\n    notFoundValue: T|null, token: Type<T>|AbstractType<T>|InjectionToken<T>, flags: InjectFlags): T|\n    null {\n  if (flags & InjectFlags.Optional) {\n    return notFoundValue;\n  } else {\n    throwProviderNotFoundError(token, 'NodeInjector');\n  }\n}\n\n/**\n * Returns the value associated to the given token from the ModuleInjector or throws exception\n *\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector or throws an exception\n */\nfunction lookupTokenUsingModuleInjector<T>(\n    lView: LView, token: Type<T>|AbstractType<T>|InjectionToken<T>, flags: InjectFlags,\n    notFoundValue?: any): T|null {\n  if (flags & InjectFlags.Optional && notFoundValue === undefined) {\n    // This must be set or the NullInjector will throw for optional deps\n    notFoundValue = null;\n  }\n\n  if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n    const moduleInjector = lView[INJECTOR];\n    // switch to `injectInjectorOnly` implementation for module injector, since module injector\n    // should not have access to Component/Directive DI scope (that may happen through\n    // `directiveInject` implementation)\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      if (moduleInjector) {\n        return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n      } else {\n        return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n      }\n    } finally {\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n  return notFoundValueOrThrow<T>(notFoundValue, token, flags);\n}\n\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nexport function getOrCreateInjectable<T>(\n    tNode: TDirectiveHostNode|null, lView: LView, token: Type<T>|AbstractType<T>|InjectionToken<T>,\n    flags: InjectFlags = InjectFlags.Default, notFoundValue?: any): T|null {\n  if (tNode !== null) {\n    const bloomHash = bloomHashBitOrFactory(token);\n    // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n    // so just call the factory function to create it.\n    if (typeof bloomHash === 'function') {\n      if (!enterDI(lView, tNode, flags)) {\n        // Failed to enter DI, try module injector instead. If a token is injected with the @Host\n        // flag, the module injector is not searched for that token in Ivy.\n        return (flags & InjectFlags.Host) ?\n            notFoundValueOrThrow<T>(notFoundValue, token, flags) :\n            lookupTokenUsingModuleInjector<T>(lView, token, flags, notFoundValue);\n      }\n      try {\n        const value = bloomHash();\n        if (value == null && !(flags & InjectFlags.Optional)) {\n          throwProviderNotFoundError(token);\n        } else {\n          return value;\n        }\n      } finally {\n        leaveDI();\n      }\n    } else if (typeof bloomHash === 'number') {\n      // A reference to the previous injector TView that was found while climbing the element\n      // injector tree. This is used to know if viewProviders can be accessed on the current\n      // injector.\n      let previousTView: TView|null = null;\n      let injectorIndex = getInjectorIndex(tNode, lView);\n      let parentLocation: RelativeInjectorLocation = NO_PARENT_INJECTOR;\n      let hostTElementNode: TNode|null =\n          flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;\n\n      // If we should skip this injector, or if there is no injector on this node, start by\n      // searching the parent injector.\n      if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n        parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                                                lView[injectorIndex + NodeInjectorOffset.PARENT];\n\n        if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {\n          injectorIndex = -1;\n        } else {\n          previousTView = lView[TVIEW];\n          injectorIndex = getParentInjectorIndex(parentLocation);\n          lView = getParentInjectorView(parentLocation, lView);\n        }\n      }\n\n      // Traverse up the injector tree until we find a potential match or until we know there\n      // *isn't* a match.\n      while (injectorIndex !== -1) {\n        ngDevMode && assertNodeInjector(lView, injectorIndex);\n\n        // Check the current injector. If it matches, see if it contains token.\n        const tView = lView[TVIEW];\n        ngDevMode &&\n            assertTNodeForLView(\n                tView.data[injectorIndex + NodeInjectorOffset.TNODE] as TNode, lView);\n        if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n          // At this point, we have an injector which *may* contain the token, so we step through\n          // the providers and directives associated with the injector's corresponding node to get\n          // the instance.\n          const instance: T|null = searchTokensOnInjector<T>(\n              injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n          if (instance !== NOT_FOUND) {\n            return instance;\n          }\n        }\n        parentLocation = lView[injectorIndex + NodeInjectorOffset.PARENT];\n        if (parentLocation !== NO_PARENT_INJECTOR &&\n            shouldSearchParent(\n                flags,\n                lView[TVIEW].data[injectorIndex + NodeInjectorOffset.TNODE] === hostTElementNode) &&\n            bloomHasToken(bloomHash, injectorIndex, lView)) {\n          // The def wasn't found anywhere on this node, so it was a false positive.\n          // Traverse up the tree and continue searching.\n          previousTView = tView;\n          injectorIndex = getParentInjectorIndex(parentLocation);\n          lView = getParentInjectorView(parentLocation, lView);\n        } else {\n          // If we should not search parent OR If the ancestor bloom filter value does not have the\n          // bit corresponding to the directive we can give up on traversing up to find the specific\n          // injector.\n          injectorIndex = -1;\n        }\n      }\n    }\n  }\n\n  return lookupTokenUsingModuleInjector<T>(lView, token, flags, notFoundValue);\n}\n\nconst NOT_FOUND = {};\n\nexport function createNodeInjector(): Injector {\n  return new NodeInjector(getCurrentTNode()! as TDirectiveHostNode, getLView()) as any;\n}\n\nfunction searchTokensOnInjector<T>(\n    injectorIndex: number, lView: LView, token: Type<T>|AbstractType<T>|InjectionToken<T>,\n    previousTView: TView|null, flags: InjectFlags, hostTElementNode: TNode|null) {\n  const currentTView = lView[TVIEW];\n  const tNode = currentTView.data[injectorIndex + NodeInjectorOffset.TNODE] as TNode;\n  // First, we need to determine if view providers can be accessed by the starting element.\n  // There are two possibilities\n  const canAccessViewProviders = previousTView == null ?\n      // 1) This is the first invocation `previousTView == null` which means that we are at the\n      // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n      // to look into the ViewProviders is if:\n      // - we are on a component\n      // - AND the injector set `includeViewProviders` to true (implying that the token can see\n      // ViewProviders because it is the Component or a Service which itself was declared in\n      // ViewProviders)\n      (isComponentHost(tNode) && includeViewProviders) :\n      // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n      // In such a case we are only allowed to look into the ViewProviders if:\n      // - We just crossed from child View to Parent View `previousTView != currentTView`\n      // - AND the parent TNode is an Element.\n      // This means that we just came from the Component's View and therefore are allowed to see\n      // into the ViewProviders.\n      (previousTView != currentTView && ((tNode.type & TNodeType.AnyRNode) !== 0));\n\n  // This special case happens when there is a @host on the inject and when we are searching\n  // on the host element node.\n  const isHostSpecialCase = (flags & InjectFlags.Host) && hostTElementNode === tNode;\n\n  const injectableIdx = locateDirectiveOrProvider(\n      tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);\n  if (injectableIdx !== null) {\n    return getNodeInjectable(lView, currentTView, injectableIdx, tNode as TElementNode);\n  } else {\n    return NOT_FOUND;\n  }\n}\n\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @param tNode TNode on which directives are present.\n * @param tView The tView we are currently processing\n * @param token Provider token or type of a directive to look for.\n * @param canAccessViewProviders Whether view providers should be considered.\n * @param isHostSpecialCase Whether the host special case applies.\n * @returns Index of a found directive or provider, or null when none found.\n */\nexport function locateDirectiveOrProvider<T>(\n    tNode: TNode, tView: TView, token: Type<T>|AbstractType<T>|InjectionToken<T>|string,\n    canAccessViewProviders: boolean, isHostSpecialCase: boolean|number): number|null {\n  const nodeProviderIndexes = tNode.providerIndexes;\n  const tInjectables = tView.data;\n\n  const injectablesStart = nodeProviderIndexes & TNodeProviderIndexes.ProvidersStartIndexMask;\n  const directivesStart = tNode.directiveStart;\n  const directiveEnd = tNode.directiveEnd;\n  const cptViewProvidersCount =\n      nodeProviderIndexes >> TNodeProviderIndexes.CptViewProvidersCountShift;\n  const startingIndex =\n      canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n  // When the host special case applies, only the viewProviders and the component are visible\n  const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n  for (let i = startingIndex; i < endIndex; i++) {\n    const providerTokenOrDef =\n        tInjectables[i] as InjectionToken<any>| Type<any>| DirectiveDef<any>| string;\n    if (i < directivesStart && token === providerTokenOrDef ||\n        i >= directivesStart && (providerTokenOrDef as DirectiveDef<any>).type === token) {\n      return i;\n    }\n  }\n  if (isHostSpecialCase) {\n    const dirDef = tInjectables[directivesStart] as DirectiveDef<any>;\n    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n      return directivesStart;\n    }\n  }\n  return null;\n}\n\n/**\n * Retrieve or instantiate the injectable from the `LView` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n */\nexport function getNodeInjectable(\n    lView: LView, tView: TView, index: number, tNode: TDirectiveHostNode): any {\n  let value = lView[index];\n  const tData = tView.data;\n  if (isFactory(value)) {\n    const factory: NodeInjectorFactory = value;\n    if (factory.resolving) {\n      throwCyclicDependencyError(stringifyForError(tData[index]));\n    }\n    const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n    factory.resolving = true;\n    const previousInjectImplementation =\n        factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;\n    const success = enterDI(lView, tNode, InjectFlags.Default);\n    ngDevMode &&\n        assertEqual(\n            success, true,\n            'Because flags do not contain \\`SkipSelf\\' we expect this to always succeed.');\n    try {\n      value = lView[index] = factory.factory(undefined, tData, lView, tNode);\n      // This code path is hit for both directives and providers.\n      // For perf reasons, we want to avoid searching for hooks on providers.\n      // It does no harm to try (the hooks just won't exist), but the extra\n      // checks are unnecessary and this is a hot path. So we check to see\n      // if the index of the dependency is in the directive range for this\n      // tNode. If it's not, we know it's a provider and skip hook registration.\n      if (tView.firstCreatePass && index >= tNode.directiveStart) {\n        ngDevMode && assertDirectiveDef(tData[index]);\n        registerPreOrderHooks(index, tData[index] as DirectiveDef<any>, tView);\n      }\n    } finally {\n      previousInjectImplementation !== null &&\n          setInjectImplementation(previousInjectImplementation);\n      setIncludeViewProviders(previousIncludeViewProviders);\n      factory.resolving = false;\n      leaveDI();\n    }\n  }\n  return value;\n}\n\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param token the injection token\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\nexport function bloomHashBitOrFactory(token: Type<any>|AbstractType<any>|InjectionToken<any>|\n                                      string): number|Function|undefined {\n  ngDevMode && assertDefined(token, 'token must be defined');\n  if (typeof token === 'string') {\n    return token.charCodeAt(0) || 0;\n  }\n  const tokenId: number|undefined =\n      // First check with `hasOwnProperty` so we don't get an inherited ID.\n      token.hasOwnProperty(NG_ELEMENT_ID) ? (token as any)[NG_ELEMENT_ID] : undefined;\n  // Negative token IDs are used for special objects such as `Injector`\n  if (typeof tokenId === 'number') {\n    if (tokenId >= 0) {\n      return tokenId & BLOOM_MASK;\n    } else {\n      ngDevMode &&\n          assertEqual(tokenId, InjectorMarkers.Injector, 'Expecting to get Special Injector Id');\n      return createNodeInjector;\n    }\n  } else {\n    return tokenId;\n  }\n}\n\nexport function bloomHasToken(bloomHash: number, injectorIndex: number, injectorView: LView|TData) {\n  // Create a mask that targets the specific bit associated with the directive we're looking for.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n\n  // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of\n  // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset\n  // that should be used.\n  const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];\n\n  // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n  // this injector is a potential match.\n  return !!(value & mask);\n}\n\n/** Returns true if flags prevent parent injector from being searched for tokens */\nfunction shouldSearchParent(flags: InjectFlags, isFirstHostTNode: boolean): boolean|number {\n  return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\n\nexport class NodeInjector implements Injector {\n  constructor(\n      private _tNode: TElementNode|TContainerNode|TElementContainerNode|null,\n      private _lView: LView) {}\n\n  get(token: any, notFoundValue?: any): any {\n    return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);\n  }\n}\n\n/**\n * @codeGenApi\n */\nexport function ɵɵgetFactoryOf<T>(type: Type<any>): FactoryFn<T>|null {\n  const typeAny = type as any;\n\n  if (isForwardRef(type)) {\n    return (() => {\n             const factory = ɵɵgetFactoryOf<T>(resolveForwardRef(typeAny));\n             return factory ? factory() : null;\n           }) as any;\n  }\n\n  let factory = getFactoryDef<T>(typeAny);\n  if (factory === null) {\n    const injectorDef = getInjectorDef<T>(typeAny);\n    factory = injectorDef && injectorDef.factory;\n  }\n  return factory || null;\n}\n\n/**\n * @codeGenApi\n */\nexport function ɵɵgetInheritedFactory<T>(type: Type<any>): (type: Type<T>) => T {\n  return noSideEffects(() => {\n    const ownConstructor = type.prototype.constructor;\n    const ownFactory = ownConstructor[NG_FACTORY_DEF] || ɵɵgetFactoryOf(ownConstructor);\n    const objectPrototype = Object.prototype;\n    let parent = Object.getPrototypeOf(type.prototype).constructor;\n\n    // Go up the prototype until we hit `Object`.\n    while (parent && parent !== objectPrototype) {\n      const factory = parent[NG_FACTORY_DEF] || ɵɵgetFactoryOf(parent);\n\n      // If we hit something that has a factory and the factory isn't the same as the type,\n      // we've found the inherited factory. Note the check that the factory isn't the type's\n      // own factory is redundant in most cases, but if the user has custom decorators on the\n      // class, this lookup will start one level down in the prototype chain, causing us to\n      // find the own factory first and potentially triggering an infinite loop downstream.\n      if (factory && factory !== ownFactory) {\n        return factory;\n      }\n\n      parent = Object.getPrototypeOf(parent);\n    }\n\n    // There is no factory defined. Either this was improper usage of inheritance\n    // (no Angular decorator on the superclass) or there is no constructor at all\n    // in the inheritance chain. Since the two cases cannot be distinguished, the\n    // latter has to be assumed.\n    return t => new t();\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {injectAttributeImpl} from '../di';\nimport {getCurrentTNode} from '../state';\n\n/**\n * Facade for the attribute injection from DI.\n *\n * @codeGenApi\n */\nexport function ɵɵinjectAttribute(attrNameToInject: string): string|null {\n  return injectAttributeImpl(getCurrentTNode()!, attrNameToInject);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\n\nimport {noSideEffects} from './closure';\n\n\n\n/**\n * An interface implemented by all Angular type decorators, which allows them to be used as\n * decorators as well as Angular syntax.\n *\n * ```\n * @ng.Component({...})\n * class MyClass {...}\n * ```\n *\n * @publicApi\n */\nexport interface TypeDecorator {\n  /**\n   * Invoke as decorator.\n   */\n  <T extends Type<any>>(type: T): T;\n\n  // Make TypeDecorator assignable to built-in ParameterDecorator type.\n  // ParameterDecorator is declared in lib.d.ts as a `declare type`\n  // so we cannot declare this interface as a subtype.\n  // see https://github.com/angular/angular/issues/3379#issuecomment-126169417\n  (target: Object, propertyKey?: string|symbol, parameterIndex?: number): void;\n}\n\nexport const ANNOTATIONS = '__annotations__';\nexport const PARAMETERS = '__parameters__';\nexport const PROP_METADATA = '__prop__metadata__';\n\n/**\n * @suppress {globalThis}\n */\nexport function makeDecorator<T>(\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\n    additionalProcessing?: (type: Type<T>) => void,\n    typeFn?: (type: Type<T>, ...args: any[]) => void):\n    {new (...args: any[]): any; (...args: any[]): any; (...args: any[]): (cls: any) => any;} {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n\n    function DecoratorFactory(\n        this: unknown|typeof DecoratorFactory, ...args: any[]): (cls: Type<T>) => any {\n      if (this instanceof DecoratorFactory) {\n        metaCtor.call(this, ...args);\n        return this as typeof DecoratorFactory;\n      }\n\n      const annotationInstance = new (DecoratorFactory as any)(...args);\n      return function TypeDecorator(cls: Type<T>) {\n        if (typeFn) typeFn(cls, ...args);\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n            (cls as any)[ANNOTATIONS] :\n            Object.defineProperty(cls, ANNOTATIONS, {value: []})[ANNOTATIONS];\n        annotations.push(annotationInstance);\n\n\n        if (additionalProcessing) additionalProcessing(cls);\n\n        return cls;\n      };\n    }\n\n    if (parentClass) {\n      DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n\n    DecoratorFactory.prototype.ngMetadataName = name;\n    (DecoratorFactory as any).annotationCls = DecoratorFactory;\n    return DecoratorFactory as any;\n  });\n}\n\nfunction makeMetadataCtor(props?: (...args: any[]) => any): any {\n  return function ctor(this: any, ...args: any[]) {\n    if (props) {\n      const values = props(...args);\n      for (const propName in values) {\n        this[propName] = values[propName];\n      }\n    }\n  };\n}\n\nexport function makeParamDecorator(\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function ParamDecoratorFactory(\n        this: unknown|typeof ParamDecoratorFactory, ...args: any[]): any {\n      if (this instanceof ParamDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n      const annotationInstance = new (<any>ParamDecoratorFactory)(...args);\n\n      (<any>ParamDecorator).annotation = annotationInstance;\n      return ParamDecorator;\n\n      function ParamDecorator(cls: any, unusedKey: any, index: number): any {\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const parameters = cls.hasOwnProperty(PARAMETERS) ?\n            (cls as any)[PARAMETERS] :\n            Object.defineProperty(cls, PARAMETERS, {value: []})[PARAMETERS];\n\n        // there might be gaps if some in between parameters do not have annotations.\n        // we pad with nulls.\n        while (parameters.length <= index) {\n          parameters.push(null);\n        }\n\n        (parameters[index] = parameters[index] || []).push(annotationInstance);\n        return cls;\n      }\n    }\n    if (parentClass) {\n      ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    (<any>ParamDecoratorFactory).annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n  });\n}\n\nexport function makePropDecorator(\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\n    additionalProcessing?: (target: any, name: string, ...args: any[]) => void): any {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n\n    function PropDecoratorFactory(this: unknown|typeof PropDecoratorFactory, ...args: any[]): any {\n      if (this instanceof PropDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n\n      const decoratorInstance = new (<any>PropDecoratorFactory)(...args);\n\n      function PropDecorator(target: any, name: string) {\n        const constructor = target.constructor;\n        // Use of Object.defineProperty is important because it creates a non-enumerable property\n        // which prevents the property from being copied during subclassing.\n        const meta = constructor.hasOwnProperty(PROP_METADATA) ?\n            (constructor as any)[PROP_METADATA] :\n            Object.defineProperty(constructor, PROP_METADATA, {value: {}})[PROP_METADATA];\n        meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n        meta[name].unshift(decoratorInstance);\n\n        if (additionalProcessing) additionalProcessing(target, name, ...args);\n      }\n\n      return PropDecorator;\n    }\n\n    if (parentClass) {\n      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    (<any>PropDecoratorFactory).annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {assertLessThan} from '../util/assert';\n\nimport {ɵɵdefineInjectable} from './interface/defs';\n\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * @usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * @publicApi\n */\nexport class InjectionToken<T> {\n  /** @internal */\n  readonly ngMetadataName = 'InjectionToken';\n\n  readonly ɵprov: never|undefined;\n\n  constructor(protected _desc: string, options?: {\n    providedIn?: Type<any>|'root'|'platform'|'any'|null, factory: () => T\n  }) {\n    this.ɵprov = undefined;\n    if (typeof options == 'number') {\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          assertLessThan(options, 0, 'Only negative numbers are supported here');\n      // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n      // See `InjectorMarkers`\n      (this as any).__NG_ELEMENT_ID__ = options;\n    } else if (options !== undefined) {\n      this.ɵprov = ɵɵdefineInjectable({\n        token: this,\n        providedIn: options.providedIn || 'root',\n        factory: options.factory,\n      });\n    }\n  }\n\n  toString(): string {\n    return `InjectionToken ${this._desc}`;\n  }\n}\n\nexport interface InjectableDefToken<T> extends InjectionToken<T> {\n  ɵprov: never;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '../di/injection_token';\nimport {Type} from '../interface/type';\nimport {makePropDecorator} from '../util/decorators';\n\n/**\n * A DI token that you can use to create a virtual [provider](guide/glossary#provider)\n * that will populate the `entryComponents` field of components and NgModules\n * based on its `useValue` property value.\n * All components that are referenced in the `useValue` value (either directly\n * or in a nested array or map) are added to the `entryComponents` property.\n *\n * @usageNotes\n *\n * The following example shows how the router can populate the `entryComponents`\n * field of an NgModule based on a router configuration that refers\n * to components.\n *\n * ```typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n *\n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n *\n * @NgModule({\n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * ```\n *\n * @publicApi\n * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.\n */\nexport const ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken<any>('AnalyzeForEntryComponents');\n\n/**\n * Type of the `Attribute` decorator / constructor function.\n *\n * @publicApi\n */\nexport interface AttributeDecorator {\n  /**\n   * Specifies that a constant attribute value should be injected.\n   *\n   * The directive can inject constant string literals of host element attributes.\n   *\n   * @usageNotes\n   *\n   * Suppose we have an `<input>` element and want to know its `type`.\n   *\n   * ```html\n   * <input type=\"text\">\n   * ```\n   *\n   * A decorator can inject string literal `text` as in the following example.\n   *\n   * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n   *\n   * @publicApi\n   */\n  (name: string): any;\n  new(name: string): Attribute;\n}\n\n\n/**\n * Type of the Attribute metadata.\n *\n * @publicApi\n */\nexport interface Attribute {\n  /**\n   * The name of the attribute to be injected into the constructor.\n   */\n  attributeName?: string;\n}\n\n/**\n * Type of the Query metadata.\n *\n * @publicApi\n */\nexport interface Query {\n  descendants: boolean;\n  emitDistinctChangesOnly: boolean;\n  first: boolean;\n  read: any;\n  isViewQuery: boolean;\n  selector: any;\n  static?: boolean;\n}\n\n// Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not\n// explicitly set. This value will be changed to `true` in v12.\n// TODO(misko): switch the default in v12 to `true`. See: packages/compiler/src/core.ts\nexport const emitDistinctChangesOnlyDefaultValue = false;\n\n\n/**\n * Base class for query metadata.\n *\n * @see `ContentChildren`.\n * @see `ContentChild`.\n * @see `ViewChildren`.\n * @see `ViewChild`.\n *\n * @publicApi\n */\nexport abstract class Query {}\n\n/**\n * Type of the ContentChildren decorator / constructor function.\n *\n * @see `ContentChildren`.\n * @publicApi\n */\nexport interface ContentChildrenDecorator {\n  /**\n   * Parameter decorator that configures a content query.\n   *\n   * Use to get the `QueryList` of elements or directives from the content DOM.\n   * Any time a child element is added, removed, or moved, the query list will be\n   * updated, and the changes observable of the query list will emit a new value.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   *\n   * Does not retrieve elements or directives that are in other components' templates,\n   * since a component's template is always a black box to its ancestors.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - The directive type or the name used for querying.\n   * * **descendants** - True to include all descendants, otherwise include only direct children.\n   * * **emitDistinctChangesOnly** - The ` QueryList#changes` observable will emit new values only\n   *   if the QueryList result has changed. The default value will change from `false` to `true` in\n   *   v12. When `false` the `changes` observable might emit even if the QueryList has not changed.\n   * * **read** - Used to read a different token from the queried elements.\n   *\n   * @usageNotes\n   *\n   * Here is a simple demonstration of how the `ContentChildren` decorator can be used.\n   *\n   * {@example core/di/ts/contentChildren/content_children_howto.ts region='HowTo'}\n   *\n   * ### Tab-pane example\n   *\n   * Here is a slightly more realistic example that shows how `ContentChildren` decorators\n   * can be used to implement a tab pane component.\n   *\n   * {@example core/di/ts/contentChildren/content_children_example.ts region='Component'}\n   *\n   * @Annotation\n   */\n  (selector: Type<any>|InjectionToken<unknown>|Function|string, opts?: {\n    descendants?: boolean,\n    emitDistinctChangesOnly?: boolean,\n    read?: any,\n  }): any;\n  new(selector: Type<any>|InjectionToken<unknown>|Function|string,\n      opts?: {descendants?: boolean, emitDistinctChangesOnly?: boolean, read?: any}): Query;\n}\n\n/**\n * Type of the ContentChildren metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nexport type ContentChildren = Query;\n\n/**\n * ContentChildren decorator and metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nexport const ContentChildren: ContentChildrenDecorator = makePropDecorator(\n    'ContentChildren', (selector?: any, data: any = {}) => ({\n                         selector,\n                         first: false,\n                         isViewQuery: false,\n                         descendants: false,\n                         emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,\n                         ...data\n                       }),\n    Query);\n\n/**\n * Type of the ContentChild decorator / constructor function.\n *\n * @publicApi\n */\nexport interface ContentChildDecorator {\n  /**\n   * Parameter decorator that configures a content query.\n   *\n   * Use to get the first element or the directive matching the selector from the content DOM.\n   * If the content DOM changes, and a new child matches the selector,\n   * the property will be updated.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   *\n   * Does not retrieve elements or directives that are in other components' templates,\n   * since a component's template is always a black box to its ancestors.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - The directive type or the name used for querying.\n   * * **read** - Used to read a different token from the queried element.\n   * * **static** - True to resolve query results before change detection runs,\n   * false to resolve after change detection. Defaults to false.\n   *\n   * @usageNotes\n   *\n   * {@example core/di/ts/contentChild/content_child_howto.ts region='HowTo'}\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/contentChild/content_child_example.ts region='Component'}\n   *\n   * @Annotation\n   */\n  (selector: Type<any>|InjectionToken<unknown>|Function|string,\n   opts?: {read?: any, static?: boolean}): any;\n  new(selector: Type<any>|InjectionToken<unknown>|Function|string,\n      opts?: {read?: any, static?: boolean}): ContentChild;\n}\n\n/**\n * Type of the ContentChild metadata.\n *\n * @publicApi\n */\nexport type ContentChild = Query;\n\n/**\n * ContentChild decorator and metadata.\n *\n *\n * @Annotation\n *\n * @publicApi\n */\nexport const ContentChild: ContentChildDecorator = makePropDecorator(\n    'ContentChild',\n    (selector?: any, data: any = {}) =>\n        ({selector, first: true, isViewQuery: false, descendants: true, ...data}),\n    Query);\n\n/**\n * Type of the ViewChildren decorator / constructor function.\n *\n * @see `ViewChildren`.\n *\n * @publicApi\n */\nexport interface ViewChildrenDecorator {\n  /**\n   * Parameter decorator that configures a view query.\n   *\n   * Use to get the `QueryList` of elements or directives from the view DOM.\n   * Any time a child element is added, removed, or moved, the query list will be updated,\n   * and the changes observable of the query list will emit a new value.\n   *\n   * View queries are set before the `ngAfterViewInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - The directive type or the name used for querying.\n   * * **read** - Used to read a different token from the queried elements.\n   * * **emitDistinctChangesOnly** - The ` QueryList#changes` observable will emit new values only\n   *   if the QueryList result has changed. The default value will change from `false` to `true` in\n   *   v12. When `false` the `changes` observable might emit even if the QueryList has not changed.\n   *\n   * @usageNotes\n   *\n   * {@example core/di/ts/viewChildren/view_children_howto.ts region='HowTo'}\n   *\n   * ### Another example\n   *\n   * {@example core/di/ts/viewChildren/view_children_example.ts region='Component'}\n   *\n   * @Annotation\n   */\n  (selector: Type<any>|InjectionToken<unknown>|Function|string,\n   opts?: {read?: any, emitDistinctChangesOnly?: boolean}): any;\n  new(selector: Type<any>|InjectionToken<unknown>|Function|string,\n      opts?: {read?: any, emitDistinctChangesOnly?: boolean}): ViewChildren;\n}\n\n/**\n * Type of the ViewChildren metadata.\n *\n * @publicApi\n */\nexport type ViewChildren = Query;\n\n/**\n * ViewChildren decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const ViewChildren: ViewChildrenDecorator = makePropDecorator(\n    'ViewChildren', (selector?: any, data: any = {}) => ({\n                      selector,\n                      first: false,\n                      isViewQuery: true,\n                      descendants: true,\n                      emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,\n                      ...data\n                    }),\n    Query);\n\n/**\n * Type of the ViewChild decorator / constructor function.\n *\n * @see `ViewChild`.\n * @publicApi\n */\nexport interface ViewChildDecorator {\n  /**\n   * @description\n   * Property decorator that configures a view query.\n   * The change detector looks for the first element or the directive matching the selector\n   * in the view DOM. If the view DOM changes, and a new child matches the selector,\n   * the property is updated.\n   *\n   * View queries are set before the `ngAfterViewInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - The directive type or the name used for querying.\n   * * **read** - Used to read a different token from the queried elements.\n   * * **static** - True to resolve query results before change detection runs,\n   * false to resolve after change detection. Defaults to false.\n   *\n   *\n   * The following selectors are supported.\n   *   * Any class with the `@Component` or `@Directive` decorator\n   *   * A template reference variable as a string (e.g. query `<my-component #cmp></my-component>`\n   * with `@ViewChild('cmp')`)\n   *   * Any provider defined in the child component tree of the current component (e.g.\n   * `@ViewChild(SomeService) someService: SomeService`)\n   *   * Any provider defined through a string token (e.g. `@ViewChild('someToken') someTokenVal:\n   * any`)\n   *   * A `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChild(TemplateRef)\n   * template;`)\n   *\n   * @usageNotes\n   *\n   * {@example core/di/ts/viewChild/view_child_example.ts region='Component'}\n   *\n   * ### Example 2\n   *\n   * {@example core/di/ts/viewChild/view_child_howto.ts region='HowTo'}\n   *\n   * @Annotation\n   */\n  (selector: Type<any>|InjectionToken<unknown>|Function|string,\n   opts?: {read?: any, static?: boolean}): any;\n  new(selector: Type<any>|InjectionToken<unknown>|Function|string,\n      opts?: {read?: any, static?: boolean}): ViewChild;\n}\n\n/**\n * Type of the ViewChild metadata.\n *\n * @publicApi\n */\nexport type ViewChild = Query;\n\n/**\n * ViewChild decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const ViewChild: ViewChildDecorator = makePropDecorator(\n    'ViewChild',\n    (selector: any, data: any) =>\n        ({selector, first: true, isViewQuery: true, descendants: true, ...data}),\n    Query);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nexport const Type = Function;\n\nexport function isType(v: any): v is Type<any> {\n  return typeof v === 'function';\n}\n\n/**\n * @description\n *\n * Represents an abstract class `T`, if applied to a concrete class it would stop being\n * instantiable.\n *\n * @publicApi\n */\nexport interface AbstractType<T> extends Function {\n  prototype: T;\n}\n\nexport interface Type<T> extends Function {\n  new(...args: any[]): T;\n}\n\nexport type Mutable<T extends {[x: string]: any}, K extends string> = {\n  [P in K]: T[P];\n};\n\n/**\n * Returns a writable type version of type.\n *\n * USAGE:\n * Given:\n * ```\n * interface Person {readonly name: string}\n * ```\n *\n * We would like to get a read/write version of `Person`.\n * ```\n * const WritablePerson = Writable<Person>;\n * ```\n *\n * The result is that you can do:\n *\n * ```\n * const readonlyPerson: Person = {name: 'Marry'};\n * readonlyPerson.name = 'John'; // TypeError\n * (readonlyPerson as WritablePerson).name = 'John'; // OK\n *\n * // Error: Correctly detects that `Person` did not have `age` property.\n * (readonlyPerson as WritablePerson).age = 30;\n * ```\n */\nexport type Writable<T> = {\n  -readonly[K in keyof T]: T[K];\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertEqual, assertLessThanOrEqual} from './assert';\n\n/**\n * Equivalent to ES6 spread, add each item to an array.\n *\n * @param items The items to add\n * @param arr The array to which you want to add the items\n */\nexport function addAllToArray(items: any[], arr: any[]) {\n  for (let i = 0; i < items.length; i++) {\n    arr.push(items[i]);\n  }\n}\n\n/**\n * Determines if the contents of two arrays is identical\n *\n * @param a first array\n * @param b second array\n * @param identityAccessor Optional function for extracting stable object identity from a value in\n *     the array.\n */\nexport function arrayEquals<T>(a: T[], b: T[], identityAccessor?: (value: T) => unknown): boolean {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    let valueA = a[i];\n    let valueB = b[i];\n    if (identityAccessor) {\n      valueA = identityAccessor(valueA) as any;\n      valueB = identityAccessor(valueB) as any;\n    }\n    if (valueB !== valueA) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\n/**\n * Flattens an array.\n */\nexport function flatten(list: any[], dst?: any[]): any[] {\n  if (dst === undefined) dst = list;\n  for (let i = 0; i < list.length; i++) {\n    let item = list[i];\n    if (Array.isArray(item)) {\n      // we need to inline it.\n      if (dst === list) {\n        // Our assumption that the list was already flat was wrong and\n        // we need to clone flat since we need to write to it.\n        dst = list.slice(0, i);\n      }\n      flatten(item, dst);\n    } else if (dst !== list) {\n      dst.push(item);\n    }\n  }\n  return dst;\n}\n\nexport function deepForEach<T>(input: (T|any[])[], fn: (value: T) => void): void {\n  input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\n\nexport function addToArray(arr: any[], index: number, value: any): void {\n  // perf: array.push is faster than array.splice!\n  if (index >= arr.length) {\n    arr.push(value);\n  } else {\n    arr.splice(index, 0, value);\n  }\n}\n\nexport function removeFromArray(arr: any[], index: number): any {\n  // perf: array.pop is faster than array.splice!\n  if (index >= arr.length - 1) {\n    return arr.pop();\n  } else {\n    return arr.splice(index, 1)[0];\n  }\n}\n\nexport function newArray<T = any>(size: number): T[];\nexport function newArray<T>(size: number, value: T): T[];\nexport function newArray<T>(size: number, value?: T): T[] {\n  const list: T[] = [];\n  for (let i = 0; i < size; i++) {\n    list.push(value!);\n  }\n  return list;\n}\n\n/**\n * Remove item from array (Same as `Array.splice()` but faster.)\n *\n * `Array.splice()` is not as fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * https://jsperf.com/fast-array-splice (About 20x faster)\n *\n * @param array Array to splice\n * @param index Index of element in array to remove.\n * @param count Number of items to remove.\n */\nexport function arraySplice(array: any[], index: number, count: number): void {\n  const length = array.length - count;\n  while (index < length) {\n    array[index] = array[index + count];\n    index++;\n  }\n  while (count--) {\n    array.pop();  // shrink the array\n  }\n}\n\n/**\n * Same as `Array.splice(index, 0, value)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value Value to add to array.\n */\nexport function arrayInsert(array: any[], index: number, value: any): void {\n  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n  let end = array.length;\n  while (end > index) {\n    const previousEnd = end - 1;\n    array[end] = array[previousEnd];\n    end = previousEnd;\n  }\n  array[index] = value;\n}\n\n/**\n * Same as `Array.splice2(index, 0, value1, value2)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value1 Value to add to array.\n * @param value2 Value to add to array.\n */\nexport function arrayInsert2(array: any[], index: number, value1: any, value2: any): void {\n  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n  let end = array.length;\n  if (end == index) {\n    // inserting at the end.\n    array.push(value1, value2);\n  } else if (end === 1) {\n    // corner case when we have less items in array than we have items to insert.\n    array.push(value2, array[0]);\n    array[0] = value1;\n  } else {\n    end--;\n    array.push(array[end - 1], array[end]);\n    while (end > index) {\n      const previousEnd = end - 2;\n      array[end] = array[previousEnd];\n      end--;\n    }\n    array[index] = value1;\n    array[index + 1] = value2;\n  }\n}\n\n/**\n * Insert a `value` into an `array` so that the array remains sorted.\n *\n * NOTE:\n * - Duplicates are not allowed, and are ignored.\n * - This uses binary search algorithm for fast inserts.\n *\n * @param array A sorted array to insert into.\n * @param value The value to insert.\n * @returns index of the inserted value.\n */\nexport function arrayInsertSorted(array: string[], value: string): number {\n  let index = arrayIndexOfSorted(array, value);\n  if (index < 0) {\n    // if we did not find it insert it.\n    index = ~index;\n    arrayInsert(array, index, value);\n  }\n  return index;\n}\n\n/**\n * Remove `value` from a sorted `array`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to remove from.\n * @param value The value to remove.\n * @returns index of the removed value.\n *   - positive index if value found and removed.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n *     inserted)\n */\nexport function arrayRemoveSorted(array: string[], value: string): number {\n  const index = arrayIndexOfSorted(array, value);\n  if (index >= 0) {\n    arraySplice(array, index, 1);\n  }\n  return index;\n}\n\n\n/**\n * Get an index of an `value` in a sorted `array`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n *     located)\n */\nexport function arrayIndexOfSorted(array: string[], value: string): number {\n  return _arrayIndexOfSorted(array, value, 0);\n}\n\n\n/**\n * `KeyValueArray` is an array where even positions contain keys and odd positions contain values.\n *\n * `KeyValueArray` provides a very efficient way of iterating over its contents. For small\n * sets (~10) the cost of binary searching an `KeyValueArray` has about the same performance\n * characteristics that of a `Map` with significantly better memory footprint.\n *\n * If used as a `Map` the keys are stored in alphabetical order so that they can be binary searched\n * for retrieval.\n *\n * See: `keyValueArraySet`, `keyValueArrayGet`, `keyValueArrayIndexOf`, `keyValueArrayDelete`.\n */\nexport interface KeyValueArray<VALUE> extends Array<VALUE|string> {\n  __brand__: 'array-map';\n}\n\n/**\n * Set a `value` for a `key`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or create.\n * @param value The value to set for a `key`.\n * @returns index (always even) of where the value vas set.\n */\nexport function keyValueArraySet<V>(\n    keyValueArray: KeyValueArray<V>, key: string, value: V): number {\n  let index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it set it.\n    keyValueArray[index | 1] = value;\n  } else {\n    index = ~index;\n    arrayInsert2(keyValueArray, index, key, value);\n  }\n  return index;\n}\n\n/**\n * Retrieve a `value` for a `key` (on `undefined` if not found.)\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @return The `value` stored at the `key` location or `undefined if not found.\n */\nexport function keyValueArrayGet<V>(keyValueArray: KeyValueArray<V>, key: string): V|undefined {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it retrieve it.\n    return keyValueArray[index | 1] as V;\n  }\n  return undefined;\n}\n\n/**\n * Retrieve a `key` index value in the array or `-1` if not found.\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @returns index of where the key is (or should have been.)\n *   - positive (even) index if key found.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been inserted.)\n */\nexport function keyValueArrayIndexOf<V>(keyValueArray: KeyValueArray<V>, key: string): number {\n  return _arrayIndexOfSorted(keyValueArray as string[], key, 1);\n}\n\n/**\n * Delete a `key` (and `value`) from the `KeyValueArray`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or delete (if exist).\n * @returns index of where the key was (or should have been.)\n *   - positive (even) index if key found and deleted.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been.)\n */\nexport function keyValueArrayDelete<V>(keyValueArray: KeyValueArray<V>, key: string): number {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it remove it.\n    arraySplice(keyValueArray, index, 2);\n  }\n  return index;\n}\n\n\n/**\n * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @param shift grouping shift.\n *   - `0` means look at every location\n *   - `1` means only look at every other (even) location (the odd locations are to be ignored as\n *         they are values.)\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n * inserted)\n */\nfunction _arrayIndexOfSorted(array: string[], value: string, shift: number): number {\n  ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');\n  let start = 0;\n  let end = array.length >> shift;\n  while (end !== start) {\n    const middle = start + ((end - start) >> 1);  // find the middle.\n    const current = array[middle << shift];\n    if (value === current) {\n      return (middle << shift);\n    } else if (current > value) {\n      end = middle;\n    } else {\n      start = middle + 1;  // We already searched middle so make it non-inclusive by adding 1\n    }\n  }\n  return ~(end << shift);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport '../util/ng_dev_mode';\n\nimport {AbstractType, Type} from '../interface/type';\nimport {getClosureSafeProperty} from '../util/property';\nimport {stringify} from '../util/stringify';\n\nimport {resolveForwardRef} from './forward_ref';\nimport {getInjectImplementation, injectRootLimpMode} from './inject_switch';\nimport {InjectionToken} from './injection_token';\nimport {Injector} from './injector';\nimport {DecoratorFlags, InjectFlags, InternalInjectFlags} from './interface/injector';\nimport {ValueProvider} from './interface/provider';\n\n\nconst _THROW_IF_NOT_FOUND = {};\nexport const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\n/*\n * Name of a property (that we patch onto DI decorator), which is used as an annotation of which\n * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators\n * in the code, thus making them tree-shakable.\n */\nconst DI_DECORATOR_FLAG = '__NG_DI_FLAG__';\n\nexport const NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\nconst NG_TOKEN_PATH = 'ngTokenPath';\nconst NEW_LINE = /\\n/gm;\nconst NO_NEW_LINE = 'ɵ';\nexport const SOURCE = '__source';\n\nexport const USE_VALUE =\n    getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\n\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n */\nlet _currentInjector: Injector|undefined|null = undefined;\n\nexport function setCurrentInjector(injector: Injector|null|undefined): Injector|undefined|null {\n  const former = _currentInjector;\n  _currentInjector = injector;\n  return former;\n}\n\nexport function injectInjectorOnly<T>(token: Type<T>|AbstractType<T>|InjectionToken<T>): T;\nexport function injectInjectorOnly<T>(\n    token: Type<T>|AbstractType<T>|InjectionToken<T>, flags?: InjectFlags): T|null;\nexport function injectInjectorOnly<T>(\n    token: Type<T>|AbstractType<T>|InjectionToken<T>, flags = InjectFlags.Default): T|null {\n  if (_currentInjector === undefined) {\n    throw new Error(`inject() must be called from an injection context`);\n  } else if (_currentInjector === null) {\n    return injectRootLimpMode(token, undefined, flags);\n  } else {\n    return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n  }\n}\n\n/**\n * Generated instruction: Injects a token from the currently active injector.\n *\n * Must be used in the context of a factory function such as one defined for an\n * `InjectionToken`. Throws an error if not called from such a context.\n *\n * (Additional documentation moved to `inject`, as it is the public API, and an alias for this\n * instruction)\n *\n * @see inject\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\nexport function ɵɵinject<T>(token: Type<T>|AbstractType<T>|InjectionToken<T>): T;\nexport function ɵɵinject<T>(\n    token: Type<T>|AbstractType<T>|InjectionToken<T>, flags?: InjectFlags): T|null;\nexport function ɵɵinject<T>(\n    token: Type<T>|AbstractType<T>|InjectionToken<T>, flags = InjectFlags.Default): T|null {\n  return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);\n}\n\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n * off, saving bytes of generated code while still providing a good experience in dev mode.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nexport function ɵɵinvalidFactoryDep(index: number): never {\n  const msg = ngDevMode ?\n      `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${\n          index} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${\n          index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.` :\n      'invalid';\n  throw new Error(msg);\n}\n\n/**\n * Injects a token from the currently active injector.\n *\n * Must be used in the context of a factory function such as one defined for an\n * `InjectionToken`. Throws an error if not called from such a context.\n *\n * Within such a factory function, using this function to request injection of a dependency\n * is faster and more type-safe than providing an additional array of dependencies\n * (as has been common with `useFactory` providers).\n *\n * @param token The injection token for the dependency to be injected.\n * @param flags Optional flags that control how injection is executed.\n * The flags correspond to injection strategies that can be specified with\n * parameter decorators `@Host`, `@Self`, `@SkipSef`, and `@Optional`.\n * @returns the injected value if injection is successful, `null` otherwise.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n * @publicApi\n */\nexport const inject = ɵɵinject;\n\nexport function injectArgs(types: (Type<any>|InjectionToken<any>|any[])[]): any[] {\n  const args: any[] = [];\n  for (let i = 0; i < types.length; i++) {\n    const arg = resolveForwardRef(types[i]);\n    if (Array.isArray(arg)) {\n      if (arg.length === 0) {\n        throw new Error('Arguments array must have arguments.');\n      }\n      let type: Type<any>|undefined = undefined;\n      let flags: InjectFlags = InjectFlags.Default;\n\n      for (let j = 0; j < arg.length; j++) {\n        const meta = arg[j];\n        const flag = getInjectFlag(meta);\n        if (typeof flag === 'number') {\n          // Special case when we handle @Inject decorator.\n          if (flag === DecoratorFlags.Inject) {\n            type = meta.token;\n          } else {\n            flags |= flag;\n          }\n        } else {\n          type = meta;\n        }\n      }\n\n      args.push(ɵɵinject(type!, flags));\n    } else {\n      args.push(ɵɵinject(arg));\n    }\n  }\n  return args;\n}\n\n/**\n * Attaches a given InjectFlag to a given decorator using monkey-patching.\n * Since DI decorators can be used in providers `deps` array (when provider is configured using\n * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we\n * attach the flag to make it available both as a static property and as a field on decorator\n * instance.\n *\n * @param decorator Provided DI decorator.\n * @param flag InjectFlag that should be applied.\n */\nexport function attachInjectFlag(decorator: any, flag: InternalInjectFlags|DecoratorFlags): any {\n  decorator[DI_DECORATOR_FLAG] = flag;\n  decorator.prototype[DI_DECORATOR_FLAG] = flag;\n  return decorator;\n}\n\n/**\n * Reads monkey-patched property that contains InjectFlag attached to a decorator.\n *\n * @param token Token that may contain monkey-patched DI flags property.\n */\nexport function getInjectFlag(token: any): number|undefined {\n  return token[DI_DECORATOR_FLAG];\n}\n\nexport function catchInjectorError(\n    e: any, token: any, injectorErrorName: string, source: string|null): never {\n  const tokenPath: any[] = e[NG_TEMP_TOKEN_PATH];\n  if (token[SOURCE]) {\n    tokenPath.unshift(token[SOURCE]);\n  }\n  e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n  e[NG_TOKEN_PATH] = tokenPath;\n  e[NG_TEMP_TOKEN_PATH] = null;\n  throw e;\n}\n\nexport function formatError(\n    text: string, obj: any, injectorErrorName: string, source: string|null = null): string {\n  text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n  let context = stringify(obj);\n  if (Array.isArray(obj)) {\n    context = obj.map(stringify).join(' -> ');\n  } else if (typeof obj === 'object') {\n    let parts = <string[]>[];\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        let value = obj[key];\n        parts.push(\n            key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n      }\n    }\n    context = `{${parts.join(', ')}}`;\n  }\n  return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${\n      text.replace(NEW_LINE, '\\n  ')}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {makeParamDecorator} from '../util/decorators';\n\nimport {attachInjectFlag} from './injector_compatibility';\nimport {DecoratorFlags, InternalInjectFlags} from './interface/injector';\n\n\n/**\n * Type of the Inject decorator / constructor function.\n *\n * @publicApi\n */\nexport interface InjectDecorator {\n  /**\n   * Parameter decorator on a dependency parameter of a class constructor\n   * that specifies a custom provider of the dependency.\n   *\n   * @usageNotes\n   * The following example shows a class constructor that specifies a\n   * custom provider of a dependency using the parameter decorator.\n   *\n   * When `@Inject()` is not present, the injector uses the type annotation of the\n   * parameter as the provider.\n   *\n   * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"InjectWithoutDecorator\">\n   * </code-example>\n   *\n   * @see [\"Dependency Injection Guide\"](guide/dependency-injection)\n   *\n   */\n  (token: any): any;\n  new(token: any): Inject;\n}\n\n/**\n * Type of the Inject metadata.\n *\n * @publicApi\n */\nexport interface Inject {\n  /**\n   * A [DI token](guide/glossary#di-token) that maps to the dependency to be injected.\n   */\n  token: any;\n}\n\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Inject: InjectDecorator = attachInjectFlag(\n    // Disable tslint because `DecoratorFlags` is a const enum which gets inlined.\n    // tslint:disable-next-line: no-toplevel-property-access\n    makeParamDecorator('Inject', (token: any) => ({token})), DecoratorFlags.Inject);\n\n/**\n * Type of the Optional decorator / constructor function.\n *\n * @publicApi\n */\nexport interface OptionalDecorator {\n  /**\n   * Parameter decorator to be used on constructor parameters,\n   * which marks the parameter as being an optional dependency.\n   * The DI framework provides `null` if the dependency is not found.\n   *\n   * Can be used together with other parameter decorators\n   * that modify how dependency injection operates.\n   *\n   * @usageNotes\n   *\n   * The following code allows the possibility of a `null` result:\n   *\n   * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"Optional\">\n   * </code-example>\n   *\n   * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n   */\n  (): any;\n  new(): Optional;\n}\n\n/**\n * Type of the Optional metadata.\n *\n * @publicApi\n */\nexport interface Optional {}\n\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Optional: OptionalDecorator =\n    // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n    // tslint:disable-next-line: no-toplevel-property-access\n    attachInjectFlag(makeParamDecorator('Optional'), InternalInjectFlags.Optional);\n\n/**\n * Type of the Self decorator / constructor function.\n *\n * @publicApi\n */\nexport interface SelfDecorator {\n  /**\n   * Parameter decorator to be used on constructor parameters,\n   * which tells the DI framework to start dependency resolution from the local injector.\n   *\n   * Resolution works upward through the injector hierarchy, so the children\n   * of this class must configure their own providers or be prepared for a `null` result.\n   *\n   * @usageNotes\n   *\n   * In the following example, the dependency can be resolved\n   * by the local injector when instantiating the class itself, but not\n   * when instantiating a child.\n   *\n   * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"Self\">\n   * </code-example>\n   *\n   * @see `SkipSelf`\n   * @see `Optional`\n   *\n   */\n  (): any;\n  new(): Self;\n}\n\n/**\n * Type of the Self metadata.\n *\n * @publicApi\n */\nexport interface Self {}\n\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Self: SelfDecorator =\n    // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n    // tslint:disable-next-line: no-toplevel-property-access\n    attachInjectFlag(makeParamDecorator('Self'), InternalInjectFlags.Self);\n\n\n/**\n * Type of the `SkipSelf` decorator / constructor function.\n *\n * @publicApi\n */\nexport interface SkipSelfDecorator {\n  /**\n   * Parameter decorator to be used on constructor parameters,\n   * which tells the DI framework to start dependency resolution from the parent injector.\n   * Resolution works upward through the injector hierarchy, so the local injector\n   * is not checked for a provider.\n   *\n   * @usageNotes\n   *\n   * In the following example, the dependency can be resolved when\n   * instantiating a child, but not when instantiating the class itself.\n   *\n   * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"SkipSelf\">\n   * </code-example>\n   *\n   * @see [Dependency Injection guide](guide/dependency-injection-in-action#skip).\n   * @see `Self`\n   * @see `Optional`\n   *\n   */\n  (): any;\n  new(): SkipSelf;\n}\n\n/**\n * Type of the `SkipSelf` metadata.\n *\n * @publicApi\n */\nexport interface SkipSelf {}\n\n/**\n * `SkipSelf` decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const SkipSelf: SkipSelfDecorator =\n    // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n    // tslint:disable-next-line: no-toplevel-property-access\n    attachInjectFlag(makeParamDecorator('SkipSelf'), InternalInjectFlags.SkipSelf);\n\n/**\n * Type of the `Host` decorator / constructor function.\n *\n * @publicApi\n */\nexport interface HostDecorator {\n  /**\n   * Parameter decorator on a view-provider parameter of a class constructor\n   * that tells the DI framework to resolve the view by checking injectors of child\n   * elements, and stop when reaching the host element of the current component.\n   *\n   * @usageNotes\n   *\n   * The following shows use with the `@Optional` decorator, and allows for a `null` result.\n   *\n   * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"Host\">\n   * </code-example>\n   *\n   * For an extended example, see [\"Dependency Injection\n   * Guide\"](guide/dependency-injection-in-action#optional).\n   */\n  (): any;\n  new(): Host;\n}\n\n/**\n * Type of the Host metadata.\n *\n * @publicApi\n */\nexport interface Host {}\n\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Host: HostDecorator =\n    // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n    // tslint:disable-next-line: no-toplevel-property-access\n    attachInjectFlag(makeParamDecorator('Host'), InternalInjectFlags.Host);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular. It lazily constructs the Trusted Types policy, providing helper\n * utilities for promoting strings to Trusted Types. When Trusted Types are not\n * available, strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n\nimport {global} from '../global';\nimport {TrustedHTML, TrustedScript, TrustedScriptURL, TrustedTypePolicy, TrustedTypePolicyFactory} from './trusted_type_defs';\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy: TrustedTypePolicy|null|undefined;\n\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy(): TrustedTypePolicy|null {\n  if (policy === undefined) {\n    policy = null;\n    if (global.trustedTypes) {\n      try {\n        policy = (global.trustedTypes as TrustedTypePolicyFactory).createPolicy('angular', {\n          createHTML: (s: string) => s,\n          createScript: (s: string) => s,\n          createScriptURL: (s: string) => s,\n        });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy;\n}\n\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nexport function trustedHTMLFromString(html: string): TrustedHTML|string {\n  return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security In particular, it must be assured that the provided string will\n * never cause an XSS vulnerability if used in a context that will be\n * interpreted and executed as a script by a browser, e.g. when calling eval.\n */\nexport function trustedScriptFromString(script: string): TrustedScript|string {\n  return getPolicy()?.createScript(script) || script;\n}\n\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will cause a browser to load and execute a resource, e.g. when\n * assigning to script.src.\n */\nexport function trustedScriptURLFromString(url: string): TrustedScriptURL|string {\n  return getPolicy()?.createScriptURL(url) || url;\n}\n\n/**\n * Unsafely call the Function constructor with the given string arguments. It\n * is only available in development mode, and should be stripped out of\n * production code.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only called from development code, as use in production code can lead to\n * XSS vulnerabilities.\n */\nexport function newTrustedFunctionForDev(...args: string[]): Function {\n  if (typeof ngDevMode === 'undefined') {\n    throw new Error('newTrustedFunctionForDev should never be called in production');\n  }\n  if (!global.trustedTypes) {\n    // In environments that don't support Trusted Types, fall back to the most\n    // straightforward implementation:\n    return new Function(...args);\n  }\n\n  // Chrome currently does not support passing TrustedScript to the Function\n  // constructor. The following implements the workaround proposed on the page\n  // below, where the Chromium bug is also referenced:\n  // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n  const fnArgs = args.slice(0, -1).join(',');\n  const fnBody = args[args.length - 1];\n  const body = `(function anonymous(${fnArgs}\n) { ${fnBody}\n})`;\n\n  // Using eval directly confuses the compiler and prevents this module from\n  // being stripped out of JS binaries even if not used. The global['eval']\n  // indirection fixes that.\n  const fn = global['eval'](trustedScriptFromString(body) as string) as Function;\n  if (fn.bind === undefined) {\n    // Workaround for a browser bug that only exists in Chrome 83, where passing\n    // a TrustedScript to eval just returns the TrustedScript back without\n    // evaluating it. In that case, fall back to the most straightforward\n    // implementation:\n    return new Function(...args);\n  }\n\n  // To completely mimic the behavior of calling \"new Function\", two more\n  // things need to happen:\n  // 1. Stringifying the resulting function should return its source code\n  fn.toString = () => body;\n  // 2. When calling the resulting function, `this` should refer to `global`\n  return fn.bind(global);\n\n  // When Trusted Types support in Function constructors is widely available,\n  // the implementation of this function can be simplified to:\n  // return new Function(...args.map(a => trustedScriptFromString(a)));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nexport const enum BypassType {\n  Url = 'URL',\n  Html = 'HTML',\n  ResourceUrl = 'ResourceURL',\n  Script = 'Script',\n  Style = 'Style',\n}\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n\nabstract class SafeValueImpl implements SafeValue {\n  constructor(public changingThisBreaksApplicationSecurity: string) {}\n\n  abstract getTypeName(): string;\n\n  toString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n        ` (see https://g.co/ng/security#xss)`;\n  }\n}\n\nclass SafeHtmlImpl extends SafeValueImpl implements SafeHtml {\n  getTypeName() {\n    return BypassType.Html;\n  }\n}\nclass SafeStyleImpl extends SafeValueImpl implements SafeStyle {\n  getTypeName() {\n    return BypassType.Style;\n  }\n}\nclass SafeScriptImpl extends SafeValueImpl implements SafeScript {\n  getTypeName() {\n    return BypassType.Script;\n  }\n}\nclass SafeUrlImpl extends SafeValueImpl implements SafeUrl {\n  getTypeName() {\n    return BypassType.Url;\n  }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl implements SafeResourceUrl {\n  getTypeName() {\n    return BypassType.ResourceUrl;\n  }\n}\n\nexport function unwrapSafeValue(value: SafeValue): string;\nexport function unwrapSafeValue<T>(value: T): T;\nexport function unwrapSafeValue<T>(value: T|SafeValue): T {\n  return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity as any as T :\n                                          value as any as T;\n}\n\n\nexport function allowSanitizationBypassAndThrow(\n    value: any, type: BypassType.Html): value is SafeHtml;\nexport function allowSanitizationBypassAndThrow(\n    value: any, type: BypassType.ResourceUrl): value is SafeResourceUrl;\nexport function allowSanitizationBypassAndThrow(\n    value: any, type: BypassType.Script): value is SafeScript;\nexport function allowSanitizationBypassAndThrow(\n    value: any, type: BypassType.Style): value is SafeStyle;\nexport function allowSanitizationBypassAndThrow(value: any, type: BypassType.Url): value is SafeUrl;\nexport function allowSanitizationBypassAndThrow(value: any, type: BypassType): boolean;\nexport function allowSanitizationBypassAndThrow(value: any, type: BypassType): boolean {\n  const actualType = getSanitizationBypassType(value);\n  if (actualType != null && actualType !== type) {\n    // Allow ResourceURLs in URL contexts, they are strictly more trusted.\n    if (actualType === BypassType.ResourceUrl && type === BypassType.Url) return true;\n    throw new Error(\n        `Required a safe ${type}, got a ${actualType} (see https://g.co/ng/security#xss)`);\n  }\n  return actualType === type;\n}\n\nexport function getSanitizationBypassType(value: any): BypassType|null {\n  return value instanceof SafeValueImpl && value.getTypeName() as BypassType || null;\n}\n\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml `html` string which needs to be implicitly trusted.\n * @returns a `html` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustHtml(trustedHtml: string): SafeHtml {\n  return new SafeHtmlImpl(trustedHtml);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle `style` string which needs to be implicitly trusted.\n * @returns a `style` hich has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustStyle(trustedStyle: string): SafeStyle {\n  return new SafeStyleImpl(trustedStyle);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript `script` string which needs to be implicitly trusted.\n * @returns a `script` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustScript(trustedScript: string): SafeScript {\n  return new SafeScriptImpl(trustedScript);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl `url` string which needs to be implicitly trusted.\n * @returns a `url`  which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustUrl(trustedUrl: string): SafeUrl {\n  return new SafeUrlImpl(trustedUrl);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustResourceUrl(trustedResourceUrl: string): SafeResourceUrl {\n  return new SafeResourceUrlImpl(trustedResourceUrl);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {trustedHTMLFromString} from '../util/security/trusted_types';\n\n/**\n * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we use one of two strategies for doing this.\n * Default: DOMParser strategy\n * Fallback: InertDocument strategy\n */\nexport function getInertBodyHelper(defaultDoc: Document): InertBodyHelper {\n  const inertDocumentHelper = new InertDocumentHelper(defaultDoc);\n  return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;\n}\n\nexport interface InertBodyHelper {\n  /**\n   * Get an inert DOM element containing DOM created from the dirty HTML string provided.\n   */\n  getInertBodyElement: (html: string) => HTMLElement | null;\n}\n\n/**\n * Uses DOMParser to create and fill an inert body element.\n * This is the default strategy used in browsers that support it.\n */\nclass DOMParserHelper implements InertBodyHelper {\n  constructor(private inertDocumentHelper: InertBodyHelper) {}\n\n  getInertBodyElement(html: string): HTMLElement|null {\n    // We add these extra elements to ensure that the rest of the content is parsed as expected\n    // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n    // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags\n    // in `html` from consuming the otherwise explicit `</body>` tag.\n    html = '<body><remove></remove>' + html;\n    try {\n      const body = new window.DOMParser()\n                       .parseFromString(trustedHTMLFromString(html) as string, 'text/html')\n                       .body as HTMLBodyElement;\n      if (body === null) {\n        // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only\n        // becomes available in the following tick of the JS engine. In that case we fall back to\n        // the `inertDocumentHelper` instead.\n        return this.inertDocumentHelper.getInertBodyElement(html);\n      }\n      body.removeChild(body.firstChild!);\n      return body;\n    } catch {\n      return null;\n    }\n  }\n}\n\n/**\n * Use an HTML5 `template` element, if supported, or an inert body element created via\n * `createHtmlDocument` to create and fill an inert DOM element.\n * This is the fallback strategy if the browser does not support DOMParser.\n */\nclass InertDocumentHelper implements InertBodyHelper {\n  private inertDocument: Document;\n\n  constructor(private defaultDoc: Document) {\n    this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n\n    if (this.inertDocument.body == null) {\n      // usually there should be only one body element in the document, but IE doesn't have any, so\n      // we need to create one.\n      const inertHtml = this.inertDocument.createElement('html');\n      this.inertDocument.appendChild(inertHtml);\n      const inertBodyElement = this.inertDocument.createElement('body');\n      inertHtml.appendChild(inertBodyElement);\n    }\n  }\n\n  getInertBodyElement(html: string): HTMLElement|null {\n    // Prefer using <template> element if supported.\n    const templateEl = this.inertDocument.createElement('template');\n    if ('content' in templateEl) {\n      templateEl.innerHTML = trustedHTMLFromString(html) as string;\n      return templateEl;\n    }\n\n    // Note that previously we used to do something like `this.inertDocument.body.innerHTML = html`\n    // and we returned the inert `body` node. This was changed, because IE seems to treat setting\n    // `innerHTML` on an inserted element differently, compared to one that hasn't been inserted\n    // yet. In particular, IE appears to split some of the text into multiple text nodes rather\n    // than keeping them in a single one which ends up messing with Ivy's i18n parsing further\n    // down the line. This has been worked around by creating a new inert `body` and using it as\n    // the root node in which we insert the HTML.\n    const inertBody = this.inertDocument.createElement('body');\n    inertBody.innerHTML = trustedHTMLFromString(html) as string;\n\n    // Support: IE 11 only\n    // strip custom-namespaced attributes on IE<=11\n    if ((this.defaultDoc as any).documentMode) {\n      this.stripCustomNsAttrs(inertBody);\n    }\n\n    return inertBody;\n  }\n\n  /**\n   * When IE11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n   * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n   * 'ns1:xlink:foo').\n   *\n   * This is undesirable since we don't want to allow any of these custom attributes. This method\n   * strips them all.\n   */\n  private stripCustomNsAttrs(el: Element) {\n    const elAttrs = el.attributes;\n    // loop backwards so that we can support removals.\n    for (let i = elAttrs.length - 1; 0 < i; i--) {\n      const attrib = elAttrs.item(i);\n      const attrName = attrib!.name;\n      if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n        el.removeAttribute(attrName);\n      }\n    }\n    let childNode = el.firstChild as Node | null;\n    while (childNode) {\n      if (childNode.nodeType === Node.ELEMENT_NODE) this.stripCustomNsAttrs(childNode as Element);\n      childNode = childNode.nextSibling;\n    }\n  }\n}\n\n/**\n * We need to determine whether the DOMParser exists in the global context and\n * supports parsing HTML; HTML parsing support is not as wide as other formats, see\n * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.\n *\n * @suppress {uselessCode}\n */\nexport function isDOMParserAvailable() {\n  try {\n    return !!new window.DOMParser().parseFromString(\n        trustedHTMLFromString('') as string, 'text/html');\n  } catch {\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either an allowed protocol (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi;\n\n/* A pattern that matches safe srcset values */\nconst SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n\n/** A pattern that matches safe data URLs. Only matches image, video and audio types. */\nconst DATA_URL_PATTERN =\n    /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n\nexport function _sanitizeUrl(url: string): string {\n  url = String(url);\n  if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;\n\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see https://g.co/ng/security#xss)`);\n  }\n\n  return 'unsafe:' + url;\n}\n\nexport function sanitizeSrcset(srcset: string): string {\n  srcset = String(srcset);\n  return srcset.split(',').map((srcset) => _sanitizeUrl(srcset.trim())).join(', ');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TrustedHTML} from '../util/security/trusted_type_defs';\nimport {trustedHTMLFromString} from '../util/security/trusted_types';\nimport {getInertBodyHelper, InertBodyHelper} from './inert_body';\nimport {_sanitizeUrl, sanitizeSrcset} from './url_sanitizer';\n\nfunction tagSet(tags: string): {[k: string]: boolean} {\n  const res: {[k: string]: boolean} = {};\n  for (const t of tags.split(',')) res[t] = true;\n  return res;\n}\n\nfunction merge(...sets: {[k: string]: boolean}[]): {[k: string]: boolean} {\n  const res: {[k: string]: boolean} = {};\n  for (const s of sets) {\n    for (const v in s) {\n      if (s.hasOwnProperty(v)) res[v] = true;\n    }\n  }\n  return res;\n}\n\n// Good source of info about elements and attributes\n// https://html.spec.whatwg.org/#semantics\n// https://simon.html5.org/html-elements\n\n// Safe Void Elements - HTML5\n// https://html.spec.whatwg.org/#void-elements\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n\n// Elements that you can, intentionally, leave open (and which close themselves)\n// https://html.spec.whatwg.org/#optional-tags\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst OPTIONAL_END_TAG_ELEMENTS =\n    merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n\n// Safe Block Elements - HTML5\nconst BLOCK_ELEMENTS = merge(\n    OPTIONAL_END_TAG_BLOCK_ELEMENTS,\n    tagSet(\n        'address,article,' +\n        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n\n// Inline Elements - HTML5\nconst INLINE_ELEMENTS = merge(\n    OPTIONAL_END_TAG_INLINE_ELEMENTS,\n    tagSet(\n        'a,abbr,acronym,audio,b,' +\n        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n\nexport const VALID_ELEMENTS =\n    merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n\n// Attributes that have href and hence need to be sanitized\nexport const URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n\n// Attributes that have special href set hence need to be sanitized\nexport const SRCSET_ATTRS = tagSet('srcset');\n\nconst HTML_ATTRS = tagSet(\n    'abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n\n// Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\nconst ARIA_ATTRS = tagSet(\n    'aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' +\n    'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' +\n    'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' +\n    'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' +\n    'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' +\n    'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' +\n    'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');\n\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\n\nexport const VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS, ARIA_ATTRS);\n\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n  // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n  // because characters were re-encoded.\n  public sanitizedSomething = false;\n  private buf: string[] = [];\n\n  sanitizeChildren(el: Element): string {\n    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n    // However this code never accesses properties off of `document` before deleting its contents\n    // again, so it shouldn't be vulnerable to DOM clobbering.\n    let current: Node = el.firstChild!;\n    let traverseContent = true;\n    while (current) {\n      if (current.nodeType === Node.ELEMENT_NODE) {\n        traverseContent = this.startElement(current as Element);\n      } else if (current.nodeType === Node.TEXT_NODE) {\n        this.chars(current.nodeValue!);\n      } else {\n        // Strip non-element, non-text nodes.\n        this.sanitizedSomething = true;\n      }\n      if (traverseContent && current.firstChild) {\n        current = current.firstChild!;\n        continue;\n      }\n      while (current) {\n        // Leaving the element. Walk up and to the right, closing tags as we go.\n        if (current.nodeType === Node.ELEMENT_NODE) {\n          this.endElement(current as Element);\n        }\n\n        let next = this.checkClobberedElement(current, current.nextSibling!);\n\n        if (next) {\n          current = next;\n          break;\n        }\n\n        current = this.checkClobberedElement(current, current.parentNode!);\n      }\n    }\n    return this.buf.join('');\n  }\n\n  /**\n   * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n   * be traversed. Element content must always be traversed (even if the element itself is not\n   * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n   *\n   * @param element The element to sanitize.\n   * @return True if the element's contents should be traversed.\n   */\n  private startElement(element: Element): boolean {\n    const tagName = element.nodeName.toLowerCase();\n    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.sanitizedSomething = true;\n      return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n    }\n    this.buf.push('<');\n    this.buf.push(tagName);\n    const elAttrs = element.attributes;\n    for (let i = 0; i < elAttrs.length; i++) {\n      const elAttr = elAttrs.item(i);\n      const attrName = elAttr!.name;\n      const lower = attrName.toLowerCase();\n      if (!VALID_ATTRS.hasOwnProperty(lower)) {\n        this.sanitizedSomething = true;\n        continue;\n      }\n      let value = elAttr!.value;\n      // TODO(martinprobst): Special case image URIs for data:image/...\n      if (URI_ATTRS[lower]) value = _sanitizeUrl(value);\n      if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);\n      this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n    }\n    this.buf.push('>');\n    return true;\n  }\n\n  private endElement(current: Element) {\n    const tagName = current.nodeName.toLowerCase();\n    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.buf.push('</');\n      this.buf.push(tagName);\n      this.buf.push('>');\n    }\n  }\n\n  private chars(chars: string) {\n    this.buf.push(encodeEntities(chars));\n  }\n\n  checkClobberedElement(node: Node, nextNode: Node): Node {\n    if (nextNode &&\n        (node.compareDocumentPosition(nextNode) &\n         Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n      throw new Error(`Failed to sanitize html because the element is clobbered: ${\n          (node as Element).outerHTML}`);\n    }\n    return nextNode;\n  }\n}\n\n// Regular Expressions for parsing tags and attributes\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n */\nfunction encodeEntities(value: string) {\n  return value.replace(/&/g, '&amp;')\n      .replace(\n          SURROGATE_PAIR_REGEXP,\n          function(match: string) {\n            const hi = match.charCodeAt(0);\n            const low = match.charCodeAt(1);\n            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n          })\n      .replace(\n          NON_ALPHANUMERIC_REGEXP,\n          function(match: string) {\n            return '&#' + match.charCodeAt(0) + ';';\n          })\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n}\n\nlet inertBodyHelper: InertBodyHelper;\n\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nexport function _sanitizeHtml(defaultDoc: any, unsafeHtmlInput: string): TrustedHTML|string {\n  let inertBodyElement: HTMLElement|null = null;\n  try {\n    inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);\n    // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n\n    // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n    let mXSSAttempts = 5;\n    let parsedHtml = unsafeHtml;\n\n    do {\n      if (mXSSAttempts === 0) {\n        throw new Error('Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n\n      unsafeHtml = parsedHtml;\n      parsedHtml = inertBodyElement!.innerHTML;\n      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    } while (unsafeHtml !== parsedHtml);\n\n    const sanitizer = new SanitizingHtmlSerializer();\n    const safeHtml = sanitizer.sanitizeChildren(\n        getTemplateContent(inertBodyElement!) as Element || inertBodyElement);\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {\n      console.warn(\n          'WARNING: sanitizing HTML stripped some content, see https://g.co/ng/security#xss');\n    }\n\n    return trustedHTMLFromString(safeHtml);\n  } finally {\n    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n    if (inertBodyElement) {\n      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n      while (parent.firstChild) {\n        parent.removeChild(parent.firstChild);\n      }\n    }\n  }\n}\n\nexport function getTemplateContent(el: Node): Node|null {\n  return 'content' in (el as any /** Microsoft/TypeScript#21517 */) && isTemplateElement(el) ?\n      el.content :\n      null;\n}\nfunction isTemplateElement(el: Node): el is HTMLTemplateElement {\n  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nexport enum SecurityContext {\n  NONE = 0,\n  HTML = 1,\n  STYLE = 2,\n  SCRIPT = 3,\n  URL = 4,\n  RESOURCE_URL = 5,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getDocument} from '../render3/interfaces/document';\nimport {SANITIZER} from '../render3/interfaces/view';\nimport {getLView} from '../render3/state';\nimport {renderStringify} from '../render3/util/stringify_utils';\nimport {TrustedHTML, TrustedScript, TrustedScriptURL} from '../util/security/trusted_type_defs';\nimport {trustedHTMLFromString, trustedScriptURLFromString} from '../util/security/trusted_types';\nimport {trustedHTMLFromStringBypass, trustedScriptFromStringBypass, trustedScriptURLFromStringBypass} from '../util/security/trusted_types_bypass';\n\nimport {allowSanitizationBypassAndThrow, BypassType, unwrapSafeValue} from './bypass';\nimport {_sanitizeHtml as _sanitizeHtml} from './html_sanitizer';\nimport {Sanitizer} from './sanitizer';\nimport {SecurityContext} from './security';\nimport {_sanitizeUrl as _sanitizeUrl} from './url_sanitizer';\n\n\n\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeHtml(unsafeHtml: any): TrustedHTML|string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeHtml, BypassType.Html)) {\n    return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));\n  }\n  return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));\n}\n\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeStyle(unsafeStyle: any): string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeStyle, BypassType.Style)) {\n    return unwrapSafeValue(unsafeStyle);\n  }\n  return renderStringify(unsafeStyle);\n}\n\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeUrl(unsafeUrl: any): string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeUrl, BypassType.Url)) {\n    return unwrapSafeValue(unsafeUrl);\n  }\n  return _sanitizeUrl(renderStringify(unsafeUrl));\n}\n\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeResourceUrl(unsafeResourceUrl: any): TrustedScriptURL|string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptURLFromStringBypass(\n        sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeResourceUrl, BypassType.ResourceUrl)) {\n    return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));\n  }\n  throw new Error('unsafe value used in a resource URL context (see https://g.co/ng/security#xss)');\n}\n\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link\n * bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeScript(unsafeScript: any): TrustedScript|string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptFromStringBypass(\n        sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeScript, BypassType.Script)) {\n    return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));\n  }\n  throw new Error('unsafe value used in a script context');\n}\n\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedHTML. Interpolation is explicitly not allowed.\n *\n * @param html constant template literal containing trusted HTML.\n * @returns TrustedHTML wrapping `html`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedHTML.\n *\n * @codeGenApi\n */\nexport function ɵɵtrustConstantHtml(html: TemplateStringsArray): TrustedHTML|string {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation\n  // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray\n  // is an array with a `raw` property that is also an array. The associated\n  // template literal has no interpolation if and only if the length of the\n  // TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join('?')}`);\n  }\n  return trustedHTMLFromString(html[0]);\n}\n\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedScriptURL. Interpolation is explicitly not allowed.\n *\n * @param url constant template literal containing a trusted script URL.\n * @returns TrustedScriptURL wrapping `url`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedScriptURL.\n *\n * @codeGenApi\n */\nexport function ɵɵtrustConstantResourceUrl(url: TemplateStringsArray): TrustedScriptURL|string {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any\n  // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A\n  // TemplateStringsArray is an array with a `raw` property that is also an\n  // array. The associated template literal has no interpolation if and only if\n  // the length of the TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join('?')}`);\n  }\n  return trustedScriptURLFromString(url[0]);\n}\n\n/**\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\n *\n * The rules are based on the RESOURCE_URL context config from\n * `packages/compiler/src/schema/dom_security_schema.ts`.\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n */\nexport function getUrlSanitizer(tag: string, prop: string) {\n  if ((prop === 'src' &&\n       (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' ||\n        tag === 'script')) ||\n      (prop === 'href' && (tag === 'base' || tag === 'link'))) {\n    return ɵɵsanitizeResourceUrl;\n  }\n  return ɵɵsanitizeUrl;\n}\n\n/**\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\n *\n * This function is used in case we can't define security context at compile time, when only prop\n * name is available. This happens when we generate host bindings for Directives/Components. The\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n * runtime.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @param tag target element tag name.\n * @param prop name of the property that contains the value.\n * @returns `url` string which is safe to bind.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeUrlOrResourceUrl(unsafeUrl: any, tag: string, prop: string): any {\n  return getUrlSanitizer(tag, prop)(unsafeUrl);\n}\n\nexport function validateAgainstEventProperties(name: string) {\n  if (name.toLowerCase().startsWith('on')) {\n    const msg = `Binding to event property '${name}' is disallowed for security reasons, ` +\n        `please use (${name.slice(2)})=...` +\n        `\\nIf '${name}' is a directive input, make sure the directive is imported by the` +\n        ` current module.`;\n    throw new Error(msg);\n  }\n}\n\nexport function validateAgainstEventAttributes(name: string) {\n  if (name.toLowerCase().startsWith('on')) {\n    const msg = `Binding to event attribute '${name}' is disallowed for security reasons, ` +\n        `please use (${name.slice(2)})=...`;\n    throw new Error(msg);\n  }\n}\n\nfunction getSanitizer(): Sanitizer|null {\n  const lView = getLView();\n  return lView && lView[SANITIZER];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ERROR_DEBUG_CONTEXT, ERROR_LOGGER, ERROR_ORIGINAL_ERROR, ERROR_TYPE} from './util/errors';\nimport {DebugContext} from './view/types';\n\nexport function getType(error: Error): Function {\n  return (error as any)[ERROR_TYPE];\n}\n\nexport function getDebugContext(error: Error): DebugContext {\n  return (error as any)[ERROR_DEBUG_CONTEXT];\n}\n\nexport function getOriginalError(error: Error): Error {\n  return (error as any)[ERROR_ORIGINAL_ERROR];\n}\n\nexport function getErrorLogger(error: Error): (console: Console, ...values: any[]) => void {\n  return (error as any)[ERROR_LOGGER] || defaultErrorLogger;\n}\n\n\nfunction defaultErrorLogger(console: Console, ...values: any[]) {\n  (<any>console.error)(...values);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getDebugContext, getErrorLogger, getOriginalError} from './errors';\n\n\n\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nexport class ErrorHandler {\n  /**\n   * @internal\n   */\n  _console: Console = console;\n\n  handleError(error: any): void {\n    const originalError = this._findOriginalError(error);\n    const context = this._findContext(error);\n    // Note: Browser consoles show the place from where console.error was called.\n    // We can use this to give users additional information about the error.\n    const errorLogger = getErrorLogger(error);\n\n    errorLogger(this._console, `ERROR`, error);\n    if (originalError) {\n      errorLogger(this._console, `ORIGINAL ERROR`, originalError);\n    }\n    if (context) {\n      errorLogger(this._console, 'ERROR CONTEXT', context);\n    }\n  }\n\n  /** @internal */\n  _findContext(error: any): any {\n    if (error) {\n      return getDebugContext(error) ? getDebugContext(error) :\n                                      this._findContext(getOriginalError(error));\n    }\n\n    return null;\n  }\n\n  /** @internal */\n  _findOriginalError(error: Error): any {\n    let e = getOriginalError(error);\n    while (e && getOriginalError(e)) {\n      e = getOriginalError(e);\n    }\n\n    return e;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport '../util/ng_dev_mode';\n\nimport {assertDomNode} from '../util/assert';\n\nimport {EMPTY_ARRAY} from './empty';\nimport {LContext, MONKEY_PATCH_KEY_NAME} from './interfaces/context';\nimport {TNode, TNodeFlags} from './interfaces/node';\nimport {RElement, RNode} from './interfaces/renderer_dom';\nimport {CONTEXT, HEADER_OFFSET, HOST, LView, TVIEW} from './interfaces/view';\nimport {getComponentLViewByIndex, readPatchedData, unwrapRNode} from './util/view_utils';\n\n\n\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param target Component, Directive or DOM Node.\n */\nexport function getLContext(target: any): LContext|null {\n  let mpValue = readPatchedData(target);\n  if (mpValue) {\n    // only when it's an array is it considered an LView instance\n    // ... otherwise it's an already constructed LContext instance\n    if (Array.isArray(mpValue)) {\n      const lView: LView = mpValue!;\n      let nodeIndex: number;\n      let component: any = undefined;\n      let directives: any[]|null|undefined = undefined;\n\n      if (isComponentInstance(target)) {\n        nodeIndex = findViaComponent(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided component was not found in the application');\n        }\n        component = target;\n      } else if (isDirectiveInstance(target)) {\n        nodeIndex = findViaDirective(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided directive was not found in the application');\n        }\n        directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n      } else {\n        nodeIndex = findViaNativeElement(lView, target as RElement);\n        if (nodeIndex == -1) {\n          return null;\n        }\n      }\n\n      // the goal is not to fill the entire context full of data because the lookups\n      // are expensive. Instead, only the target data (the element, component, container, ICU\n      // expression or directive details) are filled into the context. If called multiple times\n      // with different target values then the missing target data will be filled in.\n      const native = unwrapRNode(lView[nodeIndex]);\n      const existingCtx = readPatchedData(native);\n      const context: LContext = (existingCtx && !Array.isArray(existingCtx)) ?\n          existingCtx :\n          createLContext(lView, nodeIndex, native);\n\n      // only when the component has been discovered then update the monkey-patch\n      if (component && context.component === undefined) {\n        context.component = component;\n        attachPatchData(context.component, context);\n      }\n\n      // only when the directives have been discovered then update the monkey-patch\n      if (directives && context.directives === undefined) {\n        context.directives = directives;\n        for (let i = 0; i < directives.length; i++) {\n          attachPatchData(directives[i], context);\n        }\n      }\n\n      attachPatchData(context.native, context);\n      mpValue = context;\n    }\n  } else {\n    const rElement = target as RElement;\n    ngDevMode && assertDomNode(rElement);\n\n    // if the context is not found then we need to traverse upwards up the DOM\n    // to find the nearest element that has already been monkey patched with data\n    let parent = rElement as any;\n    while (parent = parent.parentNode) {\n      const parentContext = readPatchedData(parent);\n      if (parentContext) {\n        let lView: LView|null;\n        if (Array.isArray(parentContext)) {\n          lView = parentContext as LView;\n        } else {\n          lView = parentContext.lView;\n        }\n\n        // the edge of the app was also reached here through another means\n        // (maybe because the DOM was changed manually).\n        if (!lView) {\n          return null;\n        }\n\n        const index = findViaNativeElement(lView, rElement);\n        if (index >= 0) {\n          const native = unwrapRNode(lView[index]);\n          const context = createLContext(lView, index, native);\n          attachPatchData(native, context);\n          mpValue = context;\n          break;\n        }\n      }\n    }\n  }\n  return (mpValue as LContext) || null;\n}\n\n/**\n * Creates an empty instance of a `LContext` context\n */\nfunction createLContext(lView: LView, nodeIndex: number, native: RNode): LContext {\n  return {\n    lView,\n    nodeIndex,\n    native,\n    component: undefined,\n    directives: undefined,\n    localRefs: undefined,\n  };\n}\n\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param componentInstance\n * @returns The component's view\n */\nexport function getComponentViewByInstance(componentInstance: {}): LView {\n  let lView = readPatchedData(componentInstance);\n  let view: LView;\n\n  if (Array.isArray(lView)) {\n    const nodeIndex = findViaComponent(lView, componentInstance);\n    view = getComponentLViewByIndex(nodeIndex, lView);\n    const context = createLContext(lView, nodeIndex, view[HOST] as RElement);\n    context.component = componentInstance;\n    attachPatchData(componentInstance, context);\n    attachPatchData(context.native, context);\n  } else {\n    const context = lView as any as LContext;\n    view = getComponentLViewByIndex(context.nodeIndex, context.lView);\n  }\n  return view;\n}\n\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n */\nexport function attachPatchData(target: any, data: LView|LContext) {\n  target[MONKEY_PATCH_KEY_NAME] = data;\n}\n\nexport function isComponentInstance(instance: any): boolean {\n  return instance && instance.constructor && instance.constructor.ɵcmp;\n}\n\nexport function isDirectiveInstance(instance: any): boolean {\n  return instance && instance.constructor && instance.constructor.ɵdir;\n}\n\n/**\n * Locates the element within the given LView and returns the matching index\n */\nfunction findViaNativeElement(lView: LView, target: RElement): number {\n  const tView = lView[TVIEW];\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    if (unwrapRNode(lView[i]) === target) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n/**\n * Locates the next tNode (child, sibling or parent).\n */\nfunction traverseNextElement(tNode: TNode): TNode|null {\n  if (tNode.child) {\n    return tNode.child;\n  } else if (tNode.next) {\n    return tNode.next;\n  } else {\n    // Let's take the following template: <div><span>text</span></div><component/>\n    // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n    // in this case the parent `div`, so that we can find the component.\n    while (tNode.parent && !tNode.parent.next) {\n      tNode = tNode.parent;\n    }\n    return tNode.parent && tNode.parent.next;\n  }\n}\n\n/**\n * Locates the component within the given LView and returns the matching index\n */\nfunction findViaComponent(lView: LView, componentInstance: {}): number {\n  const componentIndices = lView[TVIEW].components;\n  if (componentIndices) {\n    for (let i = 0; i < componentIndices.length; i++) {\n      const elementComponentIndex = componentIndices[i];\n      const componentView = getComponentLViewByIndex(elementComponentIndex, lView);\n      if (componentView[CONTEXT] === componentInstance) {\n        return elementComponentIndex;\n      }\n    }\n  } else {\n    const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);\n    const rootComponent = rootComponentView[CONTEXT];\n    if (rootComponent === componentInstance) {\n      // we are dealing with the root element here therefore we know that the\n      // element is the very first element after the HEADER data in the lView\n      return HEADER_OFFSET;\n    }\n  }\n  return -1;\n}\n\n/**\n * Locates the directive within the given LView and returns the matching index\n */\nfunction findViaDirective(lView: LView, directiveInstance: {}): number {\n  // if a directive is monkey patched then it will (by default)\n  // have a reference to the LView of the current view. The\n  // element bound to the directive being search lives somewhere\n  // in the view data. We loop through the nodes and check their\n  // list of directives for the instance.\n  let tNode = lView[TVIEW].firstChild;\n  while (tNode) {\n    const directiveIndexStart = tNode.directiveStart;\n    const directiveIndexEnd = tNode.directiveEnd;\n    for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n      if (lView[i] === directiveInstance) {\n        return tNode.index;\n      }\n    }\n    tNode = traverseNextElement(tNode);\n  }\n  return -1;\n}\n\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param nodeIndex The node index\n * @param lView The target view data\n * @param includeComponents Whether or not to include components in returned directives\n */\nexport function getDirectivesAtNodeIndex(\n    nodeIndex: number, lView: LView, includeComponents: boolean): any[]|null {\n  const tNode = lView[TVIEW].data[nodeIndex] as TNode;\n  let directiveStartIndex = tNode.directiveStart;\n  if (directiveStartIndex == 0) return EMPTY_ARRAY;\n  const directiveEndIndex = tNode.directiveEnd;\n  if (!includeComponents && tNode.flags & TNodeFlags.isComponentHost) directiveStartIndex++;\n  return lView.slice(directiveStartIndex, directiveEndIndex);\n}\n\nexport function getComponentAtNodeIndex(nodeIndex: number, lView: LView): {}|null {\n  const tNode = lView[TVIEW].data[nodeIndex] as TNode;\n  let directiveStartIndex = tNode.directiveStart;\n  return tNode.flags & TNodeFlags.isComponentHost ? lView[directiveStartIndex] : null;\n}\n\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n */\nexport function discoverLocalRefs(lView: LView, nodeIndex: number): {[key: string]: any}|null {\n  const tNode = lView[TVIEW].data[nodeIndex] as TNode;\n  if (tNode && tNode.localNames) {\n    const result: {[key: string]: any} = {};\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < tNode.localNames.length; i += 2) {\n      result[tNode.localNames[i]] = lView[localIndex];\n      localIndex++;\n    }\n    return result;\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {global} from '../../util/global';\nimport {RElement} from '../interfaces/renderer_dom';\n\n\nexport const defaultScheduler =\n    (() => (\n               typeof requestAnimationFrame !== 'undefined' &&\n                   requestAnimationFrame ||  // browser only\n               setTimeout                    // everything else\n               )\n               .bind(global))();\n\n/**\n *\n * @codeGenApi\n */\nexport function ɵɵresolveWindow(element: RElement&{ownerDocument: Document}) {\n  return {name: 'window', target: element.ownerDocument.defaultView};\n}\n\n/**\n *\n * @codeGenApi\n */\nexport function ɵɵresolveDocument(element: RElement&{ownerDocument: Document}) {\n  return {name: 'document', target: element.ownerDocument};\n}\n\n/**\n *\n * @codeGenApi\n */\nexport function ɵɵresolveBody(element: RElement&{ownerDocument: Document}) {\n  return {name: 'body', target: element.ownerDocument.body};\n}\n\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n */\nexport const INTERPOLATION_DELIMITER = `�`;\n\n/**\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\n */\nexport function maybeUnwrapFn<T>(value: T|(() => T)): T {\n  if (value instanceof Function) {\n    return value();\n  } else {\n    return value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewEncapsulation} from '../metadata/view';\n\n\n/**\n * Used by `RendererFactory2` to associate custom rendering data and styles\n * with a rendering implementation.\n *  @publicApi\n */\nexport interface RendererType2 {\n  /**\n   * A unique identifying string for the new renderer, used when creating\n   * unique styles for encapsulation.\n   */\n  id: string;\n  /**\n   * The view encapsulation type, which determines how styles are applied to\n   * DOM elements. One of\n   * - `Emulated` (default): Emulate native scoping of styles.\n   * - `Native`: Use the native encapsulation mechanism of the renderer.\n   * - `ShadowDom`: Use modern [Shadow\n   * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n   * create a ShadowRoot for component's host element.\n   * - `None`: Do not provide any template or style encapsulation.\n   */\n  encapsulation: ViewEncapsulation;\n  /**\n   * Defines CSS styles to be stored on a renderer instance.\n   */\n  styles: (string|any[])[];\n  /**\n   * Defines arbitrary developer-defined data to be stored on a renderer instance.\n   * This is useful for renderers that delegate to other renderers.\n   */\n  data: {[kind: string]: any};\n}\n\n\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\nexport enum RendererStyleFlags2 {\n  // TODO(misko): This needs to be refactored into a separate file so that it can be imported from\n  // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails\n  // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.\n  /**\n   * Marks a style as important.\n   */\n  Important = 1 << 0,\n  /**\n   * Marks a style as using dash case naming (this-is-dash-case).\n   */\n  DashCase = 1 << 1\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview\n *\n * This file provides mechanism by which code relevant to the `TIcuContainerNode` is only loaded if\n * ICU is present in the template.\n */\n\nimport {TIcuContainerNode} from '../interfaces/node';\nimport {RNode} from '../interfaces/renderer_dom';\nimport {LView} from '../interfaces/view';\n\n\nlet _icuContainerIterate: (tIcuContainerNode: TIcuContainerNode, lView: LView) =>\n    (() => RNode | null);\n\n/**\n * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.\n */\nexport function icuContainerIterate(tIcuContainerNode: TIcuContainerNode, lView: LView): () =>\n    RNode | null {\n  return _icuContainerIterate(tIcuContainerNode, lView);\n}\n\n/**\n * Ensures that `IcuContainerVisitor`'s implementation is present.\n *\n * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the\n * bundler to tree shake ICU logic and only load it if ICU instruction is executed.\n */\nexport function ensureIcuContainerVisitorLoaded(\n    loader: () => ((tIcuContainerNode: TIcuContainerNode, lView: LView) => (() => RNode | null))) {\n  if (_icuContainerIterate === undefined) {\n    // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it\n    // can be inlined into call-site.\n    _icuContainerIterate = loader();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDefined} from '../../util/assert';\nimport {assertLView} from '../assert';\nimport {LContainer} from '../interfaces/container';\nimport {isLContainer, isLView} from '../interfaces/type_checks';\nimport {CHILD_HEAD, CONTEXT, FLAGS, LView, LViewFlags, NEXT, PARENT, RootContext} from '../interfaces/view';\n\nimport {readPatchedLView} from './view_utils';\n\n\n/**\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n * that LContainer, which is an LView\n * @param lView the lView whose parent to get\n */\nexport function getLViewParent(lView: LView): LView|null {\n  ngDevMode && assertLView(lView);\n  const parent = lView[PARENT];\n  return isLContainer(parent) ? parent[PARENT]! : parent;\n}\n\n/**\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param componentOrLView any component or `LView`\n */\nexport function getRootView(componentOrLView: LView|{}): LView {\n  ngDevMode && assertDefined(componentOrLView, 'component');\n  let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView)!;\n  while (lView && !(lView[FLAGS] & LViewFlags.IsRoot)) {\n    lView = getLViewParent(lView)!;\n  }\n  ngDevMode && assertLView(lView);\n  return lView;\n}\n\n/**\n * Returns the `RootContext` instance that is associated with\n * the application where the target is situated. It does this by walking the parent views until it\n * gets to the root view, then getting the context off of that.\n *\n * @param viewOrComponent the `LView` or component to get the root context for.\n */\nexport function getRootContext(viewOrComponent: LView|{}): RootContext {\n  const rootView = getRootView(viewOrComponent);\n  ngDevMode &&\n      assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');\n  return rootView[CONTEXT] as RootContext;\n}\n\n\n/**\n * Gets the first `LContainer` in the LView or `null` if none exists.\n */\nexport function getFirstLContainer(lView: LView): LContainer|null {\n  return getNearestLContainer(lView[CHILD_HEAD]);\n}\n\n/**\n * Gets the next `LContainer` that is a sibling of the given container.\n */\nexport function getNextLContainer(container: LContainer): LContainer|null {\n  return getNearestLContainer(container[NEXT]);\n}\n\nfunction getNearestLContainer(viewOrContainer: LContainer|LView|null) {\n  while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {\n    viewOrContainer = viewOrContainer[NEXT];\n  }\n  return viewOrContainer;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewEncapsulation} from '../metadata/view';\nimport {Renderer2} from '../render/api';\nimport {RendererStyleFlags2} from '../render/api_flags';\nimport {addToArray, removeFromArray} from '../util/array_utils';\nimport {assertDefined, assertDomNode, assertEqual, assertFunction, assertString} from '../util/assert';\nimport {escapeCommentText} from '../util/dom';\n\nimport {assertLContainer, assertLView, assertParentView, assertProjectionSlots, assertTNodeForLView} from './assert';\nimport {attachPatchData} from './context_discovery';\nimport {icuContainerIterate} from './i18n/i18n_tree_shaking';\nimport {CONTAINER_HEADER_OFFSET, HAS_TRANSPLANTED_VIEWS, LContainer, MOVED_VIEWS, NATIVE, unusedValueExportToPlacateAjd as unused1} from './interfaces/container';\nimport {ComponentDef} from './interfaces/definition';\nimport {NodeInjectorFactory} from './interfaces/injector';\nimport {TElementNode, TIcuContainerNode, TNode, TNodeFlags, TNodeType, TProjectionNode, unusedValueExportToPlacateAjd as unused2} from './interfaces/node';\nimport {unusedValueExportToPlacateAjd as unused3} from './interfaces/projection';\nimport {isProceduralRenderer, ProceduralRenderer3, Renderer3, unusedValueExportToPlacateAjd as unused4} from './interfaces/renderer';\nimport {RComment, RElement, RNode, RText} from './interfaces/renderer_dom';\nimport {isLContainer, isLView} from './interfaces/type_checks';\nimport {CHILD_HEAD, CLEANUP, DECLARATION_COMPONENT_VIEW, DECLARATION_LCONTAINER, DestroyHookData, FLAGS, HookData, HookFn, HOST, LView, LViewFlags, NEXT, PARENT, QUERIES, RENDERER, T_HOST, TVIEW, TView, TViewType, unusedValueExportToPlacateAjd as unused5} from './interfaces/view';\nimport {assertTNodeType} from './node_assert';\nimport {getLViewParent} from './util/view_traversal_utils';\nimport {getNativeByTNode, unwrapRNode, updateTransplantedViewCount} from './util/view_utils';\n\n\n\nconst unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4 + unused5;\n\nconst enum WalkTNodeTreeAction {\n  /** node create in the native environment. Run on initial creation. */\n  Create = 0,\n\n  /**\n   * node insert in the native environment.\n   * Run when existing node has been detached and needs to be re-attached.\n   */\n  Insert = 1,\n\n  /** node detach from the native environment */\n  Detach = 2,\n\n  /** node destruction using the renderer's API */\n  Destroy = 3,\n}\n\n\n\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n */\nfunction applyToElementOrContainer(\n    action: WalkTNodeTreeAction, renderer: Renderer3, parent: RElement|null,\n    lNodeToHandle: RNode|LContainer|LView, beforeNode?: RNode|null) {\n  // If this slot was allocated for a text node dynamically created by i18n, the text node itself\n  // won't be created until i18nApply() in the update block, so this node should be skipped.\n  // For more info, see \"ICU expressions should work inside an ngTemplateOutlet inside an ngFor\"\n  // in `i18n_spec.ts`.\n  if (lNodeToHandle != null) {\n    let lContainer: LContainer|undefined;\n    let isComponent = false;\n    // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is\n    // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if\n    // it has LContainer so that we can process all of those cases appropriately.\n    if (isLContainer(lNodeToHandle)) {\n      lContainer = lNodeToHandle;\n    } else if (isLView(lNodeToHandle)) {\n      isComponent = true;\n      ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');\n      lNodeToHandle = lNodeToHandle[HOST]!;\n    }\n    const rNode: RNode = unwrapRNode(lNodeToHandle);\n    ngDevMode && !isProceduralRenderer(renderer) && assertDomNode(rNode);\n\n    if (action === WalkTNodeTreeAction.Create && parent !== null) {\n      if (beforeNode == null) {\n        nativeAppendChild(renderer, parent, rNode);\n      } else {\n        nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n      }\n    } else if (action === WalkTNodeTreeAction.Insert && parent !== null) {\n      nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n    } else if (action === WalkTNodeTreeAction.Detach) {\n      nativeRemoveNode(renderer, rNode, isComponent);\n    } else if (action === WalkTNodeTreeAction.Destroy) {\n      ngDevMode && ngDevMode.rendererDestroyNode++;\n      (renderer as ProceduralRenderer3).destroyNode!(rNode);\n    }\n    if (lContainer != null) {\n      applyContainer(renderer, action, lContainer, parent, beforeNode);\n    }\n  }\n}\n\nexport function createTextNode(renderer: Renderer3, value: string): RText {\n  ngDevMode && ngDevMode.rendererCreateTextNode++;\n  ngDevMode && ngDevMode.rendererSetText++;\n  return isProceduralRenderer(renderer) ? renderer.createText(value) :\n                                          renderer.createTextNode(value);\n}\n\nexport function updateTextNode(renderer: Renderer3, rNode: RText, value: string): void {\n  ngDevMode && ngDevMode.rendererSetText++;\n  isProceduralRenderer(renderer) ? renderer.setValue(rNode, value) : rNode.textContent = value;\n}\n\nexport function createCommentNode(renderer: Renderer3, value: string): RComment {\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  // isProceduralRenderer check is not needed because both `Renderer2` and `Renderer3` have the same\n  // method name.\n  return renderer.createComment(escapeCommentText(value));\n}\n\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param renderer A renderer to use\n * @param name the tag name\n * @param namespace Optional namespace for element.\n * @returns the element created\n */\nexport function createElementNode(\n    renderer: Renderer3, name: string, namespace: string|null): RElement {\n  ngDevMode && ngDevMode.rendererCreateElement++;\n  if (isProceduralRenderer(renderer)) {\n    return renderer.createElement(name, namespace);\n  } else {\n    return namespace === null ? renderer.createElement(name) :\n                                renderer.createElementNS(namespace, name);\n  }\n}\n\n\n/**\n * Removes all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to remove all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param lView The view from which elements should be added or removed\n */\nexport function removeViewFromContainer(tView: TView, lView: LView): void {\n  const renderer = lView[RENDERER];\n  applyView(tView, lView, renderer, WalkTNodeTreeAction.Detach, null, null);\n  lView[HOST] = null;\n  lView[T_HOST] = null;\n}\n\n/**\n * Adds all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to add all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param parentTNode The `TNode` where the `LView` should be attached to.\n * @param renderer Current renderer to use for DOM manipulations.\n * @param lView The view from which elements should be added or removed\n * @param parentNativeNode The parent `RElement` where it should be inserted into.\n * @param beforeNode The node before which elements should be added, if insert mode\n */\nexport function addViewToContainer(\n    tView: TView, parentTNode: TNode, renderer: Renderer3, lView: LView, parentNativeNode: RElement,\n    beforeNode: RNode|null): void {\n  lView[HOST] = parentNativeNode;\n  lView[T_HOST] = parentTNode;\n  applyView(tView, lView, renderer, WalkTNodeTreeAction.Insert, parentNativeNode, beforeNode);\n}\n\n\n/**\n * Detach a `LView` from the DOM by detaching its nodes.\n *\n * @param tView The `TView' of the `LView` to be detached\n * @param lView the `LView` to be detached.\n */\nexport function renderDetachView(tView: TView, lView: LView) {\n  applyView(tView, lView, lView[RENDERER], WalkTNodeTreeAction.Detach, null, null);\n}\n\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  @param rootView The view to destroy\n */\nexport function destroyViewTree(rootView: LView): void {\n  // If the view has no children, we can clean it up and return early.\n  let lViewOrLContainer = rootView[CHILD_HEAD];\n  if (!lViewOrLContainer) {\n    return cleanUpView(rootView[TVIEW], rootView);\n  }\n\n  while (lViewOrLContainer) {\n    let next: LView|LContainer|null = null;\n\n    if (isLView(lViewOrLContainer)) {\n      // If LView, traverse down to child.\n      next = lViewOrLContainer[CHILD_HEAD];\n    } else {\n      ngDevMode && assertLContainer(lViewOrLContainer);\n      // If container, traverse down to its first LView.\n      const firstView: LView|undefined = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\n      if (firstView) next = firstView;\n    }\n\n    if (!next) {\n      // Only clean up view when moving to the side or up, as destroy hooks\n      // should be called in order from the bottom up.\n      while (lViewOrLContainer && !lViewOrLContainer![NEXT] && lViewOrLContainer !== rootView) {\n        if (isLView(lViewOrLContainer)) {\n          cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n        }\n        lViewOrLContainer = lViewOrLContainer[PARENT];\n      }\n      if (lViewOrLContainer === null) lViewOrLContainer = rootView;\n      if (isLView(lViewOrLContainer)) {\n        cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n      }\n      next = lViewOrLContainer && lViewOrLContainer![NEXT];\n    }\n    lViewOrLContainer = next;\n  }\n}\n\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param tView The `TView' of the `LView` to insert\n * @param lView The view to insert\n * @param lContainer The container into which the view should be inserted\n * @param index Which index in the container to insert the child view into\n */\nexport function insertView(tView: TView, lView: LView, lContainer: LContainer, index: number) {\n  ngDevMode && assertLView(lView);\n  ngDevMode && assertLContainer(lContainer);\n  const indexInContainer = CONTAINER_HEADER_OFFSET + index;\n  const containerLength = lContainer.length;\n\n  if (index > 0) {\n    // This is a new view, we need to add it to the children.\n    lContainer[indexInContainer - 1][NEXT] = lView;\n  }\n  if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n    lView[NEXT] = lContainer[indexInContainer];\n    addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);\n  } else {\n    lContainer.push(lView);\n    lView[NEXT] = null;\n  }\n\n  lView[PARENT] = lContainer;\n\n  // track views where declaration and insertion points are different\n  const declarationLContainer = lView[DECLARATION_LCONTAINER];\n  if (declarationLContainer !== null && lContainer !== declarationLContainer) {\n    trackMovedView(declarationLContainer, lView);\n  }\n\n  // notify query that a new view has been added\n  const lQueries = lView[QUERIES];\n  if (lQueries !== null) {\n    lQueries.insertView(tView);\n  }\n\n  // Sets the attached flag\n  lView[FLAGS] |= LViewFlags.Attached;\n}\n\n/**\n * Track views created from the declaration container (TemplateRef) and inserted into a\n * different LContainer.\n */\nfunction trackMovedView(declarationContainer: LContainer, lView: LView) {\n  ngDevMode && assertDefined(lView, 'LView required');\n  ngDevMode && assertLContainer(declarationContainer);\n  const movedViews = declarationContainer[MOVED_VIEWS];\n  const insertedLContainer = lView[PARENT] as LContainer;\n  ngDevMode && assertLContainer(insertedLContainer);\n  const insertedComponentLView = insertedLContainer[PARENT]![DECLARATION_COMPONENT_VIEW];\n  ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');\n  const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];\n  ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');\n  if (declaredComponentLView !== insertedComponentLView) {\n    // At this point the declaration-component is not same as insertion-component; this means that\n    // this is a transplanted view. Mark the declared lView as having transplanted views so that\n    // those views can participate in CD.\n    declarationContainer[HAS_TRANSPLANTED_VIEWS] = true;\n  }\n  if (movedViews === null) {\n    declarationContainer[MOVED_VIEWS] = [lView];\n  } else {\n    movedViews.push(lView);\n  }\n}\n\nfunction detachMovedView(declarationContainer: LContainer, lView: LView) {\n  ngDevMode && assertLContainer(declarationContainer);\n  ngDevMode &&\n      assertDefined(\n          declarationContainer[MOVED_VIEWS],\n          'A projected view should belong to a non-empty projected views collection');\n  const movedViews = declarationContainer[MOVED_VIEWS]!;\n  const declarationViewIndex = movedViews.indexOf(lView);\n  const insertionLContainer = lView[PARENT] as LContainer;\n  ngDevMode && assertLContainer(insertionLContainer);\n\n  // If the view was marked for refresh but then detached before it was checked (where the flag\n  // would be cleared and the counter decremented), we need to decrement the view counter here\n  // instead.\n  if (lView[FLAGS] & LViewFlags.RefreshTransplantedView) {\n    lView[FLAGS] &= ~LViewFlags.RefreshTransplantedView;\n    updateTransplantedViewCount(insertionLContainer, -1);\n  }\n\n  movedViews.splice(declarationViewIndex, 1);\n}\n\n/**\n * Detaches a view from a container.\n *\n * This method removes the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param lContainer The container from which to detach a view\n * @param removeIndex The index of the view to detach\n * @returns Detached LView instance.\n */\nexport function detachView(lContainer: LContainer, removeIndex: number): LView|undefined {\n  if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;\n\n  const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n  const viewToDetach = lContainer[indexInContainer];\n\n  if (viewToDetach) {\n    const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];\n    if (declarationLContainer !== null && declarationLContainer !== lContainer) {\n      detachMovedView(declarationLContainer, viewToDetach);\n    }\n\n\n    if (removeIndex > 0) {\n      lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT] as LView;\n    }\n    const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);\n    removeViewFromContainer(viewToDetach[TVIEW], viewToDetach);\n\n    // notify query that a view has been removed\n    const lQueries = removedLView[QUERIES];\n    if (lQueries !== null) {\n      lQueries.detachView(removedLView[TVIEW]);\n    }\n\n    viewToDetach[PARENT] = null;\n    viewToDetach[NEXT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~LViewFlags.Attached;\n  }\n  return viewToDetach;\n}\n\n/**\n * A standalone function which destroys an LView,\n * conducting clean up (e.g. removing listeners, calling onDestroys).\n *\n * @param tView The `TView' of the `LView` to be destroyed\n * @param lView The view to be destroyed.\n */\nexport function destroyLView(tView: TView, lView: LView) {\n  if (!(lView[FLAGS] & LViewFlags.Destroyed)) {\n    const renderer = lView[RENDERER];\n    if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n      applyView(tView, lView, renderer, WalkTNodeTreeAction.Destroy, null, null);\n    }\n\n    destroyViewTree(lView);\n  }\n}\n\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to @Output listeners.\n *\n * @param tView `TView` for the `LView` to clean up.\n * @param lView The LView to clean up\n */\nfunction cleanUpView(tView: TView, lView: LView): void {\n  if (!(lView[FLAGS] & LViewFlags.Destroyed)) {\n    // Usually the Attached flag is removed when the view is detached from its parent, however\n    // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n    lView[FLAGS] &= ~LViewFlags.Attached;\n\n    // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n    // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n    // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n    // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n    // really more of an \"afterDestroy\" hook if you think about it.\n    lView[FLAGS] |= LViewFlags.Destroyed;\n\n    executeOnDestroys(tView, lView);\n    processCleanups(tView, lView);\n    // For component views only, the local renderer is destroyed at clean up time.\n    if (lView[TVIEW].type === TViewType.Component && isProceduralRenderer(lView[RENDERER])) {\n      ngDevMode && ngDevMode.rendererDestroy++;\n      (lView[RENDERER] as ProceduralRenderer3).destroy();\n    }\n\n    const declarationContainer = lView[DECLARATION_LCONTAINER];\n    // we are dealing with an embedded view that is still inserted into a container\n    if (declarationContainer !== null && isLContainer(lView[PARENT])) {\n      // and this is a projected view\n      if (declarationContainer !== lView[PARENT]) {\n        detachMovedView(declarationContainer, lView);\n      }\n\n      // For embedded views still attached to a container: remove query result from this view.\n      const lQueries = lView[QUERIES];\n      if (lQueries !== null) {\n        lQueries.detachView(tView);\n      }\n    }\n  }\n}\n\n/** Removes listeners and unsubscribes from output subscriptions */\nfunction processCleanups(tView: TView, lView: LView): void {\n  const tCleanup = tView.cleanup;\n  const lCleanup = lView[CLEANUP]!;\n  // `LCleanup` contains both share information with `TCleanup` as well as instance specific\n  // information appended at the end. We need to know where the end of the `TCleanup` information\n  // is, and we track this with `lastLCleanupIndex`.\n  let lastLCleanupIndex = -1;\n  if (tCleanup !== null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      if (typeof tCleanup[i] === 'string') {\n        // This is a native DOM listener\n        const idxOrTargetGetter = tCleanup[i + 1];\n        const target = typeof idxOrTargetGetter === 'function' ?\n            idxOrTargetGetter(lView) :\n            unwrapRNode(lView[idxOrTargetGetter]);\n        const listener = lCleanup[lastLCleanupIndex = tCleanup[i + 2]];\n        const useCaptureOrSubIdx = tCleanup[i + 3];\n        if (typeof useCaptureOrSubIdx === 'boolean') {\n          // native DOM listener registered with Renderer3\n          target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);\n        } else {\n          if (useCaptureOrSubIdx >= 0) {\n            // unregister\n            lCleanup[lastLCleanupIndex = useCaptureOrSubIdx]();\n          } else {\n            // Subscription\n            lCleanup[lastLCleanupIndex = -useCaptureOrSubIdx].unsubscribe();\n          }\n        }\n        i += 2;\n      } else {\n        // This is a cleanup function that is grouped with the index of its context\n        const context = lCleanup[lastLCleanupIndex = tCleanup[i + 1]];\n        tCleanup[i].call(context);\n      }\n    }\n  }\n  if (lCleanup !== null) {\n    for (let i = lastLCleanupIndex + 1; i < lCleanup.length; i++) {\n      const instanceCleanupFn = lCleanup[i];\n      ngDevMode && assertFunction(instanceCleanupFn, 'Expecting instance cleanup function.');\n      instanceCleanupFn();\n    }\n    lView[CLEANUP] = null;\n  }\n}\n\n/** Calls onDestroy hooks for this view */\nfunction executeOnDestroys(tView: TView, lView: LView): void {\n  let destroyHooks: DestroyHookData|null;\n\n  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n    for (let i = 0; i < destroyHooks.length; i += 2) {\n      const context = lView[destroyHooks[i] as number];\n\n      // Only call the destroy hook if the context has been requested.\n      if (!(context instanceof NodeInjectorFactory)) {\n        const toCall = destroyHooks[i + 1] as HookFn | HookData;\n\n        if (Array.isArray(toCall)) {\n          for (let j = 0; j < toCall.length; j += 2) {\n            (toCall[j + 1] as HookFn).call(context[toCall[j] as number]);\n          }\n        } else {\n          toCall.call(context);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is made for projection but has not been inserted\n *   into destination.\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve render parent.\n * @param lView: Current `LView`.\n */\nexport function getParentRElement(tView: TView, tNode: TNode, lView: LView): RElement|null {\n  return getClosestRElement(tView, tNode.parent, lView);\n}\n\n/**\n * Get closest `RElement` or `null` if it can't be found.\n *\n * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.\n * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).\n * If `TNode` is `null` then return host `RElement`:\n *   - return `null` if projection\n *   - return `null` if parent container is disconnected (we have no parent.)\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is\n *     needed).\n * @param lView: Current `LView`.\n * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)\n */\nexport function getClosestRElement(tView: TView, tNode: TNode|null, lView: LView): RElement|null {\n  let parentTNode: TNode|null = tNode;\n  // Skip over element and ICU containers as those are represented by a comment node and\n  // can't be used as a render parent.\n  while (parentTNode !== null &&\n         (parentTNode.type & (TNodeType.ElementContainer | TNodeType.Icu))) {\n    tNode = parentTNode;\n    parentTNode = tNode.parent;\n  }\n\n  // If the parent tNode is null, then we are inserting across views: either into an embedded view\n  // or a component view.\n  if (parentTNode === null) {\n    // We are inserting a root element of the component view into the component host element and\n    // it should always be eager.\n    return lView[HOST];\n  } else {\n    ngDevMode && assertTNodeType(parentTNode, TNodeType.AnyRNode | TNodeType.Container);\n    if (parentTNode.flags & TNodeFlags.isComponentHost) {\n      ngDevMode && assertTNodeForLView(parentTNode, lView);\n      const encapsulation =\n          (tView.data[parentTNode.directiveStart] as ComponentDef<unknown>).encapsulation;\n      // We've got a parent which is an element in the current view. We just need to verify if the\n      // parent element is not a component. Component's content nodes are not inserted immediately\n      // because they will be projected, and so doing insert at this point would be wasteful.\n      // Since the projection would then move it to its final destination. Note that we can't\n      // make this assumption when using the Shadow DOM, because the native projection placeholders\n      // (<content> or <slot>) have to be in place as elements are being inserted.\n      if (encapsulation === ViewEncapsulation.None ||\n          encapsulation === ViewEncapsulation.Emulated) {\n        return null;\n      }\n    }\n\n    return getNativeByTNode(parentTNode, lView) as RElement;\n  }\n}\n\n/**\n * Inserts a native node before another native node for a given parent using {@link Renderer3}.\n * This is a utility function that can be used when native nodes were determined - it abstracts an\n * actual renderer being used.\n */\nexport function nativeInsertBefore(\n    renderer: Renderer3, parent: RElement, child: RNode, beforeNode: RNode|null,\n    isMove: boolean): void {\n  ngDevMode && ngDevMode.rendererInsertBefore++;\n  if (isProceduralRenderer(renderer)) {\n    renderer.insertBefore(parent, child, beforeNode, isMove);\n  } else {\n    parent.insertBefore(child, beforeNode, isMove);\n  }\n}\n\nfunction nativeAppendChild(renderer: Renderer3, parent: RElement, child: RNode): void {\n  ngDevMode && ngDevMode.rendererAppendChild++;\n  ngDevMode && assertDefined(parent, 'parent node must be defined');\n  if (isProceduralRenderer(renderer)) {\n    renderer.appendChild(parent, child);\n  } else {\n    parent.appendChild(child);\n  }\n}\n\nfunction nativeAppendOrInsertBefore(\n    renderer: Renderer3, parent: RElement, child: RNode, beforeNode: RNode|null, isMove: boolean) {\n  if (beforeNode !== null) {\n    nativeInsertBefore(renderer, parent, child, beforeNode, isMove);\n  } else {\n    nativeAppendChild(renderer, parent, child);\n  }\n}\n\n/** Removes a node from the DOM given its native parent. */\nfunction nativeRemoveChild(\n    renderer: Renderer3, parent: RElement, child: RNode, isHostElement?: boolean): void {\n  if (isProceduralRenderer(renderer)) {\n    renderer.removeChild(parent, child, isHostElement);\n  } else {\n    parent.removeChild(child);\n  }\n}\n\n/**\n * Returns a native parent of a given native node.\n */\nexport function nativeParentNode(renderer: Renderer3, node: RNode): RElement|null {\n  return (isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode) as RElement;\n}\n\n/**\n * Returns a native sibling of a given native node.\n */\nexport function nativeNextSibling(renderer: Renderer3, node: RNode): RNode|null {\n  return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;\n}\n\n/**\n * Find a node in front of which `currentTNode` should be inserted.\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNode(parentTNode: TNode, currentTNode: TNode, lView: LView): RNode|\n    null {\n  return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);\n}\n\n\n/**\n * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into\n * account)\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * does not take `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nexport function getInsertInFrontOfRNodeWithNoI18n(\n    parentTNode: TNode, currentTNode: TNode, lView: LView): RNode|null {\n  if (parentTNode.type & (TNodeType.ElementContainer | TNodeType.Icu)) {\n    return getNativeByTNode(parentTNode, lView);\n  }\n  return null;\n}\n\n/**\n * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _getInsertInFrontOfRNodeWithI18n: (parentTNode: TNode, currentTNode: TNode, lView: LView) =>\n    RNode | null = getInsertInFrontOfRNodeWithNoI18n;\n\n/**\n * Tree shakable boundary for `processI18nInsertBefore` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _processI18nInsertBefore: (\n    renderer: Renderer3, childTNode: TNode, lView: LView, childRNode: RNode|RNode[],\n    parentRElement: RElement|null) => void;\n\nexport function setI18nHandling(\n    getInsertInFrontOfRNodeWithI18n: (parentTNode: TNode, currentTNode: TNode, lView: LView) =>\n        RNode | null,\n    processI18nInsertBefore: (\n        renderer: Renderer3, childTNode: TNode, lView: LView, childRNode: RNode|RNode[],\n        parentRElement: RElement|null) => void) {\n  _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;\n  _processI18nInsertBefore = processI18nInsertBefore;\n}\n\n/**\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\n *\n * @param tView The `TView' to be appended\n * @param lView The current LView\n * @param childRNode The native child (or children) that should be appended\n * @param childTNode The TNode of the child element\n */\nexport function appendChild(\n    tView: TView, lView: LView, childRNode: RNode|RNode[], childTNode: TNode): void {\n  const parentRNode = getParentRElement(tView, childTNode, lView);\n  const renderer = lView[RENDERER];\n  const parentTNode: TNode = childTNode.parent || lView[T_HOST]!;\n  const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);\n  if (parentRNode != null) {\n    if (Array.isArray(childRNode)) {\n      for (let i = 0; i < childRNode.length; i++) {\n        nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);\n      }\n    } else {\n      nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);\n    }\n  }\n\n  _processI18nInsertBefore !== undefined &&\n      _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);\n}\n\n/**\n * Returns the first native node for a given LView, starting from the provided TNode.\n *\n * Native nodes are returned in the order in which those appear in the native tree (DOM).\n */\nfunction getFirstNativeNode(lView: LView, tNode: TNode|null): RNode|null {\n  if (tNode !== null) {\n    ngDevMode &&\n        assertTNodeType(\n            tNode,\n            TNodeType.AnyRNode | TNodeType.AnyContainer | TNodeType.Icu | TNodeType.Projection);\n\n    const tNodeType = tNode.type;\n    if (tNodeType & TNodeType.AnyRNode) {\n      return getNativeByTNode(tNode, lView);\n    } else if (tNodeType & TNodeType.Container) {\n      return getBeforeNodeForView(-1, lView[tNode.index]);\n    } else if (tNodeType & TNodeType.ElementContainer) {\n      const elIcuContainerChild = tNode.child;\n      if (elIcuContainerChild !== null) {\n        return getFirstNativeNode(lView, elIcuContainerChild);\n      } else {\n        const rNodeOrLContainer = lView[tNode.index];\n        if (isLContainer(rNodeOrLContainer)) {\n          return getBeforeNodeForView(-1, rNodeOrLContainer);\n        } else {\n          return unwrapRNode(rNodeOrLContainer);\n        }\n      }\n    } else if (tNodeType & TNodeType.Icu) {\n      let nextRNode = icuContainerIterate(tNode as TIcuContainerNode, lView);\n      let rNode: RNode|null = nextRNode();\n      // If the ICU container has no nodes, than we use the ICU anchor as the node.\n      return rNode || unwrapRNode(lView[tNode.index]);\n    } else {\n      const projectionNodes = getProjectionNodes(lView, tNode);\n      if (projectionNodes !== null) {\n        if (Array.isArray(projectionNodes)) {\n          return projectionNodes[0];\n        }\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n        ngDevMode && assertParentView(parentView);\n        return getFirstNativeNode(parentView!, projectionNodes);\n      } else {\n        return getFirstNativeNode(lView, tNode.next);\n      }\n    }\n  }\n\n  return null;\n}\n\nexport function getProjectionNodes(lView: LView, tNode: TNode|null): TNode|RNode[]|null {\n  if (tNode !== null) {\n    const componentView = lView[DECLARATION_COMPONENT_VIEW];\n    const componentHost = componentView[T_HOST] as TElementNode;\n    const slotIdx = tNode.projection as number;\n    ngDevMode && assertProjectionSlots(lView);\n    return componentHost.projection![slotIdx];\n  }\n  return null;\n}\n\nexport function getBeforeNodeForView(viewIndexInContainer: number, lContainer: LContainer): RNode|\n    null {\n  const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\n  if (nextViewIndex < lContainer.length) {\n    const lView = lContainer[nextViewIndex] as LView;\n    const firstTNodeOfView = lView[TVIEW].firstChild;\n    if (firstTNodeOfView !== null) {\n      return getFirstNativeNode(lView, firstTNodeOfView);\n    }\n  }\n\n  return lContainer[NATIVE];\n}\n\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param renderer A renderer to be used\n * @param rNode The native node that should be removed\n * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n */\nexport function nativeRemoveNode(renderer: Renderer3, rNode: RNode, isHostElement?: boolean): void {\n  ngDevMode && ngDevMode.rendererRemoveNode++;\n  const nativeParent = nativeParentNode(renderer, rNode);\n  if (nativeParent) {\n    nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n  }\n}\n\n\n/**\n * Performs the operation of `action` on the node. Typically this involves inserting or removing\n * nodes on the LView or projection boundary.\n */\nfunction applyNodes(\n    renderer: Renderer3, action: WalkTNodeTreeAction, tNode: TNode|null, lView: LView,\n    parentRElement: RElement|null, beforeNode: RNode|null, isProjection: boolean) {\n  while (tNode != null) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    ngDevMode &&\n        assertTNodeType(\n            tNode,\n            TNodeType.AnyRNode | TNodeType.AnyContainer | TNodeType.Projection | TNodeType.Icu);\n    const rawSlotValue = lView[tNode.index];\n    const tNodeType = tNode.type;\n    if (isProjection) {\n      if (action === WalkTNodeTreeAction.Create) {\n        rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);\n        tNode.flags |= TNodeFlags.isProjected;\n      }\n    }\n    if ((tNode.flags & TNodeFlags.isDetached) !== TNodeFlags.isDetached) {\n      if (tNodeType & TNodeType.ElementContainer) {\n        applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & TNodeType.Icu) {\n        const nextRNode = icuContainerIterate(tNode as TIcuContainerNode, lView);\n        let rNode: RNode|null;\n        while (rNode = nextRNode()) {\n          applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n        }\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & TNodeType.Projection) {\n        applyProjectionRecursive(\n            renderer, action, lView, tNode as TProjectionNode, parentRElement, beforeNode);\n      } else {\n        ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode | TNodeType.Container);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n}\n\n\n/**\n * `applyView` performs operation on the view as specified in `action` (insert, detach, destroy)\n *\n * Inserting a view without projection or containers at top level is simple. Just iterate over the\n * root nodes of the View, and for each node perform the `action`.\n *\n * Things get more complicated with containers and projections. That is because coming across:\n * - Container: implies that we have to insert/remove/destroy the views of that container as well\n *              which in turn can have their own Containers at the View roots.\n * - Projection: implies that we have to insert/remove/destroy the nodes of the projection. The\n *               complication is that the nodes we are projecting can themselves have Containers\n *               or other Projections.\n *\n * As you can see this is a very recursive problem. Yes recursion is not most efficient but the\n * code is complicated enough that trying to implemented with recursion becomes unmaintainable.\n *\n * @param tView The `TView' which needs to be inserted, detached, destroyed\n * @param lView The LView which needs to be inserted, detached, destroyed.\n * @param renderer Renderer to use\n * @param action action to perform (insert, detach, destroy)\n * @param parentRElement parent DOM element for insertion (Removal does not need it).\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyView(\n    tView: TView, lView: LView, renderer: Renderer3, action: WalkTNodeTreeAction.Destroy,\n    parentRElement: null, beforeNode: null): void;\nfunction applyView(\n    tView: TView, lView: LView, renderer: Renderer3, action: WalkTNodeTreeAction,\n    parentRElement: RElement|null, beforeNode: RNode|null): void;\nfunction applyView(\n    tView: TView, lView: LView, renderer: Renderer3, action: WalkTNodeTreeAction,\n    parentRElement: RElement|null, beforeNode: RNode|null): void {\n  applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);\n}\n\n/**\n * `applyProjection` performs operation on the projection.\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed\n * @param lView The `LView` which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n */\nexport function applyProjection(tView: TView, lView: LView, tProjectionNode: TProjectionNode) {\n  const renderer = lView[RENDERER];\n  const parentRNode = getParentRElement(tView, tProjectionNode, lView);\n  const parentTNode = tProjectionNode.parent || lView[T_HOST]!;\n  let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);\n  applyProjectionRecursive(\n      renderer, WalkTNodeTreeAction.Create, lView, tProjectionNode, parentRNode, beforeNode);\n}\n\n/**\n * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,\n * detach, destroy)\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param renderer Render to use\n * @param action action to perform (insert, detach, destroy)\n * @param lView The LView which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyProjectionRecursive(\n    renderer: Renderer3, action: WalkTNodeTreeAction, lView: LView,\n    tProjectionNode: TProjectionNode, parentRElement: RElement|null, beforeNode: RNode|null) {\n  const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n  const componentNode = componentLView[T_HOST] as TElementNode;\n  ngDevMode &&\n      assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');\n  const nodeToProjectOrRNodes = componentNode.projection![tProjectionNode.projection]!;\n  if (Array.isArray(nodeToProjectOrRNodes)) {\n    // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we\n    // need to support passing projectable nodes, so we cheat and put them in the TNode\n    // of the Host TView. (Yes we put instance info at the T Level). We can get away with it\n    // because we know that that TView is not shared and therefore it will not be a problem.\n    // This should be refactored and cleaned up.\n    for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {\n      const rNode = nodeToProjectOrRNodes[i];\n      applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n    }\n  } else {\n    let nodeToProject: TNode|null = nodeToProjectOrRNodes;\n    const projectedComponentLView = componentLView[PARENT] as LView;\n    applyNodes(\n        renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);\n  }\n}\n\n\n/**\n * `applyContainer` performs an operation on the container and its views as specified by\n * `action` (insert, detach, destroy)\n *\n * Inserting a Container is complicated by the fact that the container may have Views which\n * themselves have containers or projections.\n *\n * @param renderer Renderer to use\n * @param action action to perform (insert, detach, destroy)\n * @param lContainer The LContainer which needs to be inserted, detached, destroyed.\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyContainer(\n    renderer: Renderer3, action: WalkTNodeTreeAction, lContainer: LContainer,\n    parentRElement: RElement|null, beforeNode: RNode|null|undefined) {\n  ngDevMode && assertLContainer(lContainer);\n  const anchor = lContainer[NATIVE];  // LContainer has its own before node.\n  const native = unwrapRNode(lContainer);\n  // An LContainer can be created dynamically on any node by injecting ViewContainerRef.\n  // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor\n  // node (comment in the DOM) that will be different from the LContainer's host node. In this\n  // particular case we need to execute action on 2 nodes:\n  // - container's host node (this is done in the executeActionOnElementOrContainer)\n  // - container's host node (this is done here)\n  if (anchor !== native) {\n    // This is very strange to me (Misko). I would expect that the native is same as anchor. I\n    // don't see a reason why they should be different, but they are.\n    //\n    // If they are we need to process the second anchor as well.\n    applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);\n  }\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const lView = lContainer[i] as LView;\n    applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);\n  }\n}\n\n/**\n * Writes class/style to element.\n *\n * @param renderer Renderer to use.\n * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)\n * @param rNode The Node to write to.\n * @param prop Property to write to. This would be the class/style name.\n * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add\n *        otherwise).\n */\nexport function applyStyling(\n    renderer: Renderer3, isClassBased: boolean, rNode: RElement, prop: string, value: any) {\n  const isProcedural = isProceduralRenderer(renderer);\n  if (isClassBased) {\n    // We actually want JS true/false here because any truthy value should add the class\n    if (!value) {\n      ngDevMode && ngDevMode.rendererRemoveClass++;\n      if (isProcedural) {\n        (renderer as Renderer2).removeClass(rNode, prop);\n      } else {\n        (rNode as HTMLElement).classList.remove(prop);\n      }\n    } else {\n      ngDevMode && ngDevMode.rendererAddClass++;\n      if (isProcedural) {\n        (renderer as Renderer2).addClass(rNode, prop);\n      } else {\n        ngDevMode && assertDefined((rNode as HTMLElement).classList, 'HTMLElement expected');\n        (rNode as HTMLElement).classList.add(prop);\n      }\n    }\n  } else {\n    let flags = prop.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase as number;\n    if (value == null /** || value === undefined */) {\n      ngDevMode && ngDevMode.rendererRemoveStyle++;\n      if (isProcedural) {\n        (renderer as Renderer2).removeStyle(rNode, prop, flags);\n      } else {\n        (rNode as HTMLElement).style.removeProperty(prop);\n      }\n    } else {\n      // A value is important if it ends with `!important`. The style\n      // parser strips any semicolons at the end of the value.\n      const isImportant = typeof value === 'string' ? value.endsWith('!important') : false;\n\n      if (isImportant) {\n        // !important has to be stripped from the value for it to be valid.\n        value = value.slice(0, -10);\n        flags! |= RendererStyleFlags2.Important;\n      }\n\n      ngDevMode && ngDevMode.rendererSetStyle++;\n      if (isProcedural) {\n        (renderer as Renderer2).setStyle(rNode, prop, value, flags);\n      } else {\n        ngDevMode && assertDefined((rNode as HTMLElement).style, 'HTMLElement expected');\n        (rNode as HTMLElement).style.setProperty(prop, value, isImportant ? 'important' : '');\n      }\n    }\n  }\n}\n\n\n/**\n * Write `cssText` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nexport function writeDirectStyle(renderer: Renderer3, element: RElement, newValue: string) {\n  ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n  if (isProceduralRenderer(renderer)) {\n    renderer.setAttribute(element, 'style', newValue);\n  } else {\n    (element as HTMLElement).style.cssText = newValue;\n  }\n  ngDevMode && ngDevMode.rendererSetStyle++;\n}\n\n/**\n * Write `className` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nexport function writeDirectClass(renderer: Renderer3, element: RElement, newValue: string) {\n  ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n  if (isProceduralRenderer(renderer)) {\n    if (newValue === '') {\n      // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.\n      renderer.removeAttribute(element, 'class');\n    } else {\n      renderer.setAttribute(element, 'class', newValue);\n    }\n  } else {\n    element.className = newValue;\n  }\n  ngDevMode && ngDevMode.rendererSetClassName++;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertNotEqual} from '../../util/assert';\nimport {CharCode} from '../../util/char_code';\n\n\n/**\n * Returns an index of `classToSearch` in `className` taking token boundaries into account.\n *\n * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)\n *\n * @param className A string containing classes (whitespace separated)\n * @param classToSearch A class name to locate\n * @param startingIndex Starting location of search\n * @returns an index of the located class (or -1 if not found)\n */\nexport function classIndexOf(\n    className: string, classToSearch: string, startingIndex: number): number {\n  ngDevMode && assertNotEqual(classToSearch, '', 'can not look for \"\" string.');\n  let end = className.length;\n  while (true) {\n    const foundIndex = className.indexOf(classToSearch, startingIndex);\n    if (foundIndex === -1) return foundIndex;\n    if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= CharCode.SPACE) {\n      // Ensure that it has leading whitespace\n      const length = classToSearch.length;\n      if (foundIndex + length === end ||\n          className.charCodeAt(foundIndex + length) <= CharCode.SPACE) {\n        // Ensure that it has trailing whitespace\n        return foundIndex;\n      }\n    }\n    // False positive, keep searching from where we left off.\n    startingIndex = foundIndex + 1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport '../util/ng_dev_mode';\n\nimport {assertDefined, assertEqual, assertNotEqual} from '../util/assert';\n\nimport {AttributeMarker, TAttributes, TNode, TNodeType, unusedValueExportToPlacateAjd as unused1} from './interfaces/node';\nimport {CssSelector, CssSelectorList, SelectorFlags, unusedValueExportToPlacateAjd as unused2} from './interfaces/projection';\nimport {classIndexOf} from './styling/class_differ';\nimport {isNameOnlyAttributeMarker} from './util/attrs_utils';\n\nconst unusedValueToPlacateAjd = unused1 + unused2;\n\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n\n/**\n * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)\n *\n * @param attrs `TAttributes` to search through.\n * @param cssClassToMatch class to match (lowercase)\n * @param isProjectionMode Whether or not class matching should look into the attribute `class` in\n *    addition to the `AttributeMarker.Classes`.\n */\nfunction isCssClassMatching(\n    attrs: TAttributes, cssClassToMatch: string, isProjectionMode: boolean): boolean {\n  // TODO(misko): The fact that this function needs to know about `isProjectionMode` seems suspect.\n  // It is strange to me that sometimes the class information comes in form of `class` attribute\n  // and sometimes in form of `AttributeMarker.Classes`. Some investigation is needed to determine\n  // if that is the right behavior.\n  ngDevMode &&\n      assertEqual(\n          cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');\n  let i = 0;\n  while (i < attrs.length) {\n    let item = attrs[i++];\n    if (isProjectionMode && item === 'class') {\n      item = attrs[i] as string;\n      if (classIndexOf(item.toLowerCase(), cssClassToMatch, 0) !== -1) {\n        return true;\n      }\n    } else if (item === AttributeMarker.Classes) {\n      // We found the classes section. Start searching for the class.\n      while (i < attrs.length && typeof (item = attrs[i++]) == 'string') {\n        // while we have strings\n        if (item.toLowerCase() === cssClassToMatch) return true;\n      }\n      return false;\n    }\n  }\n  return false;\n}\n\n/**\n * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).\n *\n * @param tNode current TNode\n */\nexport function isInlineTemplate(tNode: TNode): boolean {\n  return tNode.type === TNodeType.Container && tNode.value !== NG_TEMPLATE_SELECTOR;\n}\n\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode:\n * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n * tag name was extracted from * syntax so we would match the same directive twice);\n * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n * (applicable to TNodeType.Container only).\n */\nfunction hasTagAndTypeMatch(\n    tNode: TNode, currentSelector: string, isProjectionMode: boolean): boolean {\n  const tagNameToCompare =\n      tNode.type === TNodeType.Container && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;\n  return currentSelector === tagNameToCompare;\n}\n\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param node static data of the node to match\n * @param selector The selector to try matching against the node.\n * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n * directive matching.\n * @returns true if node matches the selector.\n */\nexport function isNodeMatchingSelector(\n    tNode: TNode, selector: CssSelector, isProjectionMode: boolean): boolean {\n  ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n  let mode: SelectorFlags = SelectorFlags.ELEMENT;\n  const nodeAttrs = tNode.attrs || [];\n\n  // Find the index of first attribute that has no value, only a name.\n  const nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);\n\n  // When processing \":not\" selectors, we skip to the next \":not\" if the\n  // current one doesn't match\n  let skipToNextSelector = false;\n\n  for (let i = 0; i < selector.length; i++) {\n    const current = selector[i];\n    if (typeof current === 'number') {\n      // If we finish processing a :not selector and it hasn't failed, return false\n      if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\n        return false;\n      }\n      // If we are skipping to the next :not() and this mode flag is positive,\n      // it's a part of the current :not() selector, and we should keep skipping\n      if (skipToNextSelector && isPositive(current)) continue;\n      skipToNextSelector = false;\n      mode = (current as number) | (mode & SelectorFlags.NOT);\n      continue;\n    }\n\n    if (skipToNextSelector) continue;\n\n    if (mode & SelectorFlags.ELEMENT) {\n      mode = SelectorFlags.ATTRIBUTE | mode & SelectorFlags.NOT;\n      if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) ||\n          current === '' && selector.length === 1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n      }\n    } else {\n      const selectorAttrValue = mode & SelectorFlags.CLASS ? current : selector[++i];\n\n      // special case for matching against classes when a tNode has been instantiated with\n      // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])\n      if ((mode & SelectorFlags.CLASS) && tNode.attrs !== null) {\n        if (!isCssClassMatching(tNode.attrs, selectorAttrValue as string, isProjectionMode)) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n        continue;\n      }\n\n      const attrName = (mode & SelectorFlags.CLASS) ? 'class' : current;\n      const attrIndexInNode =\n          findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);\n\n      if (attrIndexInNode === -1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n        continue;\n      }\n\n      if (selectorAttrValue !== '') {\n        let nodeAttrValue: string;\n        if (attrIndexInNode > nameOnlyMarkerIdx) {\n          nodeAttrValue = '';\n        } else {\n          ngDevMode &&\n              assertNotEqual(\n                  nodeAttrs[attrIndexInNode], AttributeMarker.NamespaceURI,\n                  'We do not match directives on namespaced attributes');\n          // we lowercase the attribute value to be able to match\n          // selectors without case-sensitivity\n          // (selectors are already in lowercase when generated)\n          nodeAttrValue = (nodeAttrs[attrIndexInNode + 1] as string).toLowerCase();\n        }\n\n        const compareAgainstClassName = mode & SelectorFlags.CLASS ? nodeAttrValue : null;\n        if (compareAgainstClassName &&\n                classIndexOf(compareAgainstClassName, selectorAttrValue as string, 0) !== -1 ||\n            mode & SelectorFlags.ATTRIBUTE && selectorAttrValue !== nodeAttrValue) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n      }\n    }\n  }\n\n  return isPositive(mode) || skipToNextSelector;\n}\n\nfunction isPositive(mode: SelectorFlags): boolean {\n  return (mode & SelectorFlags.NOT) === 0;\n}\n\n/**\n * Examines the attribute's definition array for a node to find the index of the\n * attribute that matches the given `name`.\n *\n * NOTE: This will not match namespaced attributes.\n *\n * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n * The following table summarizes which types of attributes we attempt to match:\n *\n * ===========================================================================================================\n * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\n * Attributes\n * ===========================================================================================================\n * Inline + Projection     | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Inline + Directive      | NO                | NO                  | YES                 | NO\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Projection | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Directive  | YES               | YES                 | NO                  | YES\n * ===========================================================================================================\n *\n * @param name the name of the attribute to find\n * @param attrs the attribute array to examine\n * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n * rather than a manually expanded template node (e.g `<ng-template>`).\n * @param isProjectionMode true if we are matching against content projection otherwise we are\n * matching against directives.\n */\nfunction findAttrIndexInNode(\n    name: string, attrs: TAttributes|null, isInlineTemplate: boolean,\n    isProjectionMode: boolean): number {\n  if (attrs === null) return -1;\n\n  let i = 0;\n\n  if (isProjectionMode || !isInlineTemplate) {\n    let bindingsMode = false;\n    while (i < attrs.length) {\n      const maybeAttrName = attrs[i];\n      if (maybeAttrName === name) {\n        return i;\n      } else if (\n          maybeAttrName === AttributeMarker.Bindings || maybeAttrName === AttributeMarker.I18n) {\n        bindingsMode = true;\n      } else if (\n          maybeAttrName === AttributeMarker.Classes || maybeAttrName === AttributeMarker.Styles) {\n        let value = attrs[++i];\n        // We should skip classes here because we have a separate mechanism for\n        // matching classes in projection mode.\n        while (typeof value === 'string') {\n          value = attrs[++i];\n        }\n        continue;\n      } else if (maybeAttrName === AttributeMarker.Template) {\n        // We do not care about Template attributes in this scenario.\n        break;\n      } else if (maybeAttrName === AttributeMarker.NamespaceURI) {\n        // Skip the whole namespaced attribute and value. This is by design.\n        i += 4;\n        continue;\n      }\n      // In binding mode there are only names, rather than name-value pairs.\n      i += bindingsMode ? 1 : 2;\n    }\n    // We did not match the attribute\n    return -1;\n  } else {\n    return matchTemplateAttribute(attrs, name);\n  }\n}\n\nexport function isNodeMatchingSelectorList(\n    tNode: TNode, selector: CssSelectorList, isProjectionMode: boolean = false): boolean {\n  for (let i = 0; i < selector.length; i++) {\n    if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function getProjectAsAttrValue(tNode: TNode): CssSelector|null {\n  const nodeAttrs = tNode.attrs;\n  if (nodeAttrs != null) {\n    const ngProjectAsAttrIdx = nodeAttrs.indexOf(AttributeMarker.ProjectAs);\n    // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n    // (attribute names are stored at even indexes)\n    if ((ngProjectAsAttrIdx & 1) === 0) {\n      return nodeAttrs[ngProjectAsAttrIdx + 1] as CssSelector;\n    }\n  }\n  return null;\n}\n\nfunction getNameOnlyMarkerIndex(nodeAttrs: TAttributes) {\n  for (let i = 0; i < nodeAttrs.length; i++) {\n    const nodeAttr = nodeAttrs[i];\n    if (isNameOnlyAttributeMarker(nodeAttr)) {\n      return i;\n    }\n  }\n  return nodeAttrs.length;\n}\n\nfunction matchTemplateAttribute(attrs: TAttributes, name: string): number {\n  let i = attrs.indexOf(AttributeMarker.Template);\n  if (i > -1) {\n    i++;\n    while (i < attrs.length) {\n      const attr = attrs[i];\n      // Return in case we checked all template attrs and are switching to the next section in the\n      // attrs array (that starts with a number that represents an attribute marker).\n      if (typeof attr === 'number') return -1;\n      if (attr === name) return i;\n      i++;\n    }\n  }\n  return -1;\n}\n\n/**\n * Checks whether a selector is inside a CssSelectorList\n * @param selector Selector to be checked.\n * @param list List in which to look for the selector.\n */\nexport function isSelectorInSelectorList(selector: CssSelector, list: CssSelectorList): boolean {\n  selectorListLoop: for (let i = 0; i < list.length; i++) {\n    const currentSelectorInList = list[i];\n    if (selector.length !== currentSelectorInList.length) {\n      continue;\n    }\n    for (let j = 0; j < selector.length; j++) {\n      if (selector[j] !== currentSelectorInList[j]) {\n        continue selectorListLoop;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\nfunction maybeWrapInNotSelector(isNegativeMode: boolean, chunk: string): string {\n  return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;\n}\n\nfunction stringifyCSSSelector(selector: CssSelector): string {\n  let result = selector[0] as string;\n  let i = 1;\n  let mode = SelectorFlags.ATTRIBUTE;\n  let currentChunk = '';\n  let isNegativeMode = false;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode & SelectorFlags.ATTRIBUTE) {\n        const attrValue = selector[++i] as string;\n        currentChunk +=\n            '[' + valueOrMarker + (attrValue.length > 0 ? '=\"' + attrValue + '\"' : '') + ']';\n      } else if (mode & SelectorFlags.CLASS) {\n        currentChunk += '.' + valueOrMarker;\n      } else if (mode & SelectorFlags.ELEMENT) {\n        currentChunk += ' ' + valueOrMarker;\n      }\n    } else {\n      //\n      // Append current chunk to the final result in case we come across SelectorFlag, which\n      // indicates that the previous section of a selector is over. We need to accumulate content\n      // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.\n      // ```\n      //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']\n      // ```\n      // should be transformed to `.classA :not(.classB .classC)`.\n      //\n      // Note: for negative selector part, we accumulate content between flags until we find the\n      // next negative flag. This is needed to support a case where `:not()` rule contains more than\n      // one chunk, e.g. the following selector:\n      // ```\n      //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']\n      // ```\n      // should be stringified to `:not(p.foo) :not(.bar)`\n      //\n      if (currentChunk !== '' && !isPositive(valueOrMarker)) {\n        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n        currentChunk = '';\n      }\n      mode = valueOrMarker;\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector.\n      isNegativeMode = isNegativeMode || !isPositive(mode);\n    }\n    i++;\n  }\n  if (currentChunk !== '') {\n    result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n  }\n  return result;\n}\n\n/**\n * Generates string representation of CSS selector in parsed form.\n *\n * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing\n * additional parsing at runtime (for example, for directive matching). However in some cases (for\n * example, while bootstrapping a component), a string version of the selector is required to query\n * for the host element on the page. This function takes the parsed form of a selector and returns\n * its string representation.\n *\n * @param selectorList selector in parsed form\n * @returns string representation of a given selector\n */\nexport function stringifyCSSSelectorList(selectorList: CssSelectorList): string {\n  return selectorList.map(stringifyCSSSelector).join(',');\n}\n\n/**\n * Extracts attributes and classes information from a given CSS selector.\n *\n * This function is used while creating a component dynamically. In this case, the host element\n * (that is created dynamically) should contain attributes and classes specified in component's CSS\n * selector.\n *\n * @param selector CSS selector in parsed form (in a form of array)\n * @returns object with `attrs` and `classes` fields that contain extracted information\n */\nexport function extractAttrsAndClassesFromSelector(selector: CssSelector):\n    {attrs: string[], classes: string[]} {\n  const attrs: string[] = [];\n  const classes: string[] = [];\n  let i = 1;\n  let mode = SelectorFlags.ATTRIBUTE;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode === SelectorFlags.ATTRIBUTE) {\n        if (valueOrMarker !== '') {\n          attrs.push(valueOrMarker, selector[++i] as string);\n        }\n      } else if (mode === SelectorFlags.CLASS) {\n        classes.push(valueOrMarker);\n      }\n    } else {\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector. Since attributes and classes are\n      // extracted only for \"positive\" part of the selector, we can stop here.\n      if (!isPositive(mode)) break;\n      mode = valueOrMarker;\n    }\n    i++;\n  }\n  return {attrs, classes};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport interface NO_CHANGE {\n  // This is a brand that ensures that this type can never match anything else\n  __brand__: 'NO_CHANGE';\n}\n\n/** A special value which designates that a value has not changed. */\nexport const NO_CHANGE: NO_CHANGE =\n    (typeof ngDevMode === 'undefined' || ngDevMode) ? {__brand__: 'NO_CHANGE'} : ({} as NO_CHANGE);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {assertGreaterThan} from '../../util/assert';\nimport {assertIndexInDeclRange} from '../assert';\nimport {executeCheckHooks, executeInitAndCheckHooks} from '../hooks';\nimport {FLAGS, InitPhaseState, LView, LViewFlags, TView} from '../interfaces/view';\nimport {getLView, getSelectedIndex, getTView, isInCheckNoChangesMode, setSelectedIndex} from '../state';\n\n\n/**\n * Advances to an element for later binding instructions.\n *\n * Used in conjunction with instructions like {@link property} to act on elements with specified\n * indices, for example those created with {@link element} or {@link elementStart}.\n *\n * ```ts\n * (rf: RenderFlags, ctx: any) => {\n *   if (rf & 1) {\n *     text(0, 'Hello');\n *     text(1, 'Goodbye')\n *     element(2, 'div');\n *   }\n *   if (rf & 2) {\n *     advance(2); // Advance twice to the <div>.\n *     property('title', 'test');\n *   }\n *  }\n * ```\n * @param delta Number of elements to advance forwards by.\n *\n * @codeGenApi\n */\nexport function ɵɵadvance(delta: number): void {\n  ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');\n  selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, isInCheckNoChangesMode());\n}\n\nexport function selectIndexInternal(\n    tView: TView, lView: LView, index: number, checkNoChangesMode: boolean) {\n  ngDevMode && assertIndexInDeclRange(lView, index);\n\n  // Flush the initial hooks for elements in the view that have been added up to this point.\n  // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n  if (!checkNoChangesMode) {\n    const hooksInitPhaseCompleted =\n        (lView[FLAGS] & LViewFlags.InitPhaseStateMask) === InitPhaseState.InitPhaseCompleted;\n    if (hooksInitPhaseCompleted) {\n      const preOrderCheckHooks = tView.preOrderCheckHooks;\n      if (preOrderCheckHooks !== null) {\n        executeCheckHooks(lView, preOrderCheckHooks, index);\n      }\n    } else {\n      const preOrderHooks = tView.preOrderHooks;\n      if (preOrderHooks !== null) {\n        executeInitAndCheckHooks(lView, preOrderHooks, InitPhaseState.OnInitHooksToBeRun, index);\n      }\n    }\n  }\n\n  // We must set the selected index *after* running the hooks, because hooks may have side-effects\n  // that cause other template functions to run, thus updating the selected index, which is global\n  // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n  // will be altered by the time we leave the `ɵɵadvance` instruction.\n  setSelectedIndex(index);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {KeyValueArray} from '../../util/array_utils';\nimport {assertNumber, assertNumberInRange} from '../../util/assert';\n\n/**\n * Value stored in the `TData` which is needed to re-concatenate the styling.\n *\n * See: `TStylingKeyPrimitive` and `TStylingStatic`\n */\nexport type TStylingKey = TStylingKeyPrimitive|TStylingStatic;\n\n\n/**\n * The primitive portion (`TStylingStatic` removed) of the value stored in the `TData` which is\n * needed to re-concatenate the styling.\n *\n * - `string`: Stores the property name. Used with `ɵɵstyleProp`/`ɵɵclassProp` instruction.\n * - `null`: Represents map, so there is no name. Used with `ɵɵstyleMap`/`ɵɵclassMap`.\n * - `false`: Represents an ignore case. This happens when `ɵɵstyleProp`/`ɵɵclassProp` instruction\n *   is combined with directive which shadows its input `@Input('class')`. That way the binding\n *   should not participate in the styling resolution.\n */\nexport type TStylingKeyPrimitive = string|null|false;\n\n/**\n * Store the static values for the styling binding.\n *\n * The `TStylingStatic` is just `KeyValueArray` where key `\"\"` (stored at location 0) contains the\n * `TStylingKey` (stored at location 1). In other words this wraps the `TStylingKey` such that the\n * `\"\"` contains the wrapped value.\n *\n * When instructions are resolving styling they may need to look forward or backwards in the linked\n * list to resolve the value. For this reason we have to make sure that he linked list also contains\n * the static values. However the list only has space for one item per styling instruction. For this\n * reason we store the static values here as part of the `TStylingKey`. This means that the\n * resolution function when looking for a value needs to first look at the binding value, and than\n * at `TStylingKey` (if it exists).\n *\n * Imagine we have:\n *\n * ```\n * <div class=\"TEMPLATE\" my-dir>\n *\n * @Directive({\n *   host: {\n *     class: 'DIR',\n *     '[class.dynamic]': 'exp' // ɵɵclassProp('dynamic', ctx.exp);\n *   }\n * })\n * ```\n *\n * In the above case the linked list will contain one item:\n *\n * ```\n *   // assume binding location: 10 for `ɵɵclassProp('dynamic', ctx.exp);`\n *   tData[10] = <TStylingStatic>[\n *     '': 'dynamic', // This is the wrapped value of `TStylingKey`\n *     'DIR': true,   // This is the default static value of directive binding.\n *   ];\n *   tData[10 + 1] = 0; // We don't have prev/next.\n *\n *   lView[10] = undefined;     // assume `ctx.exp` is `undefined`\n *   lView[10 + 1] = undefined; // Just normalized `lView[10]`\n * ```\n *\n * So when the function is resolving styling value, it first needs to look into the linked list\n * (there is none) and than into the static `TStylingStatic` too see if there is a default value for\n * `dynamic` (there is not). Therefore it is safe to remove it.\n *\n * If setting `true` case:\n * ```\n *   lView[10] = true;     // assume `ctx.exp` is `true`\n *   lView[10 + 1] = true; // Just normalized `lView[10]`\n * ```\n * So when the function is resolving styling value, it first needs to look into the linked list\n * (there is none) and than into `TNode.residualClass` (TNode.residualStyle) which contains\n * ```\n *   tNode.residualClass = [\n *     'TEMPLATE': true,\n *   ];\n * ```\n *\n * This means that it is safe to add class.\n */\nexport interface TStylingStatic extends KeyValueArray<any> {}\n\n/**\n * This is a branded number which contains previous and next index.\n *\n * When we come across styling instructions we need to store the `TStylingKey` in the correct\n * order so that we can re-concatenate the styling value in the desired priority.\n *\n * The insertion can happen either at the:\n * - end of template as in the case of coming across additional styling instruction in the template\n * - in front of the template in the case of coming across additional instruction in the\n *   `hostBindings`.\n *\n * We use `TStylingRange` to store the previous and next index into the `TData` where the template\n * bindings can be found.\n *\n * - bit 0 is used to mark that the previous index has a duplicate for current value.\n * - bit 1 is used to mark that the next index has a duplicate for the current value.\n * - bits 2-16 are used to encode the next/tail of the template.\n * - bits 17-32 are used to encode the previous/head of template.\n *\n * NODE: *duplicate* false implies that it is statically known that this binding will not collide\n * with other bindings and therefore there is no need to check other bindings. For example the\n * bindings in `<div [style.color]=\"exp\" [style.width]=\"exp\">` will never collide and will have\n * their bits set accordingly. Previous duplicate means that we may need to check previous if the\n * current binding is `null`. Next duplicate means that we may need to check next bindings if the\n * current binding is not `null`.\n *\n * NOTE: `0` has special significance and represents `null` as in no additional pointer.\n */\nexport interface TStylingRange {\n  __brand__: 'TStylingRange';\n}\n\n/**\n * Shift and masks constants for encoding two numbers into and duplicate info into a single number.\n */\nexport const enum StylingRange {\n  /// Number of bits to shift for the previous pointer\n  PREV_SHIFT = 17,\n  /// Previous pointer mask.\n  PREV_MASK = 0xFFFE0000,\n\n  /// Number of bits to shift for the next pointer\n  NEXT_SHIFT = 2,\n  /// Next pointer mask.\n  NEXT_MASK = 0x001FFFC,\n\n  // Mask to remove nagative bit. (interpret number as positive)\n  UNSIGNED_MASK = 0x7FFF,\n\n  /**\n   * This bit is set if the previous bindings contains a binding which could possibly cause a\n   * duplicate. For example: `<div [style]=\"map\" [style.width]=\"width\">`, the `width` binding will\n   * have previous duplicate set. The implication is that if `width` binding becomes `null`, it is\n   * necessary to defer the value to `map.width`. (Because `width` overwrites `map.width`.)\n   */\n  PREV_DUPLICATE = 0x02,\n\n  /**\n   * This bit is set to if the next binding contains a binding which could possibly cause a\n   * duplicate. For example: `<div [style]=\"map\" [style.width]=\"width\">`, the `map` binding will\n   * have next duplicate set. The implication is that if `map.width` binding becomes not `null`, it\n   * is necessary to defer the value to `width`. (Because `width` overwrites `map.width`.)\n   */\n  NEXT_DUPLICATE = 0x01,\n}\n\n\nexport function toTStylingRange(prev: number, next: number): TStylingRange {\n  ngDevMode && assertNumberInRange(prev, 0, StylingRange.UNSIGNED_MASK);\n  ngDevMode && assertNumberInRange(next, 0, StylingRange.UNSIGNED_MASK);\n  return (prev << StylingRange.PREV_SHIFT | next << StylingRange.NEXT_SHIFT) as any;\n}\n\nexport function getTStylingRangePrev(tStylingRange: TStylingRange): number {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) >> StylingRange.PREV_SHIFT) & StylingRange.UNSIGNED_MASK;\n}\n\nexport function getTStylingRangePrevDuplicate(tStylingRange: TStylingRange): boolean {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) & StylingRange.PREV_DUPLICATE) ==\n      StylingRange.PREV_DUPLICATE;\n}\n\nexport function setTStylingRangePrev(\n    tStylingRange: TStylingRange, previous: number): TStylingRange {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(previous, 0, StylingRange.UNSIGNED_MASK);\n  return (((tStylingRange as any as number) & ~StylingRange.PREV_MASK) |\n          (previous << StylingRange.PREV_SHIFT)) as any;\n}\n\nexport function setTStylingRangePrevDuplicate(tStylingRange: TStylingRange): TStylingRange {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) | StylingRange.PREV_DUPLICATE) as any;\n}\n\nexport function getTStylingRangeNext(tStylingRange: TStylingRange): number {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) & StylingRange.NEXT_MASK) >> StylingRange.NEXT_SHIFT;\n}\n\nexport function setTStylingRangeNext(tStylingRange: TStylingRange, next: number): TStylingRange {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(next, 0, StylingRange.UNSIGNED_MASK);\n  return (((tStylingRange as any as number) & ~StylingRange.NEXT_MASK) |  //\n          next << StylingRange.NEXT_SHIFT) as any;\n}\n\nexport function getTStylingRangeNextDuplicate(tStylingRange: TStylingRange): boolean {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) & StylingRange.NEXT_DUPLICATE) ===\n      StylingRange.NEXT_DUPLICATE;\n}\n\nexport function setTStylingRangeNextDuplicate(tStylingRange: TStylingRange): TStylingRange {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) | StylingRange.NEXT_DUPLICATE) as any;\n}\n\nexport function getTStylingRangeTail(tStylingRange: TStylingRange): number {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  const next = getTStylingRangeNext(tStylingRange);\n  return next === 0 ? getTStylingRangePrev(tStylingRange) : next;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injector} from '../../di';\nimport {ErrorHandler} from '../../error_handler';\nimport {DoCheck, OnChanges, OnInit} from '../../interface/lifecycle_hooks';\nimport {CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, SchemaMetadata} from '../../metadata/schema';\nimport {ViewEncapsulation} from '../../metadata/view';\nimport {validateAgainstEventAttributes, validateAgainstEventProperties} from '../../sanitization/sanitization';\nimport {Sanitizer} from '../../sanitization/sanitizer';\nimport {assertDefined, assertDomNode, assertEqual, assertGreaterThanOrEqual, assertIndexInRange, assertNotEqual, assertNotSame, assertSame, assertString} from '../../util/assert';\nimport {escapeCommentText} from '../../util/dom';\nimport {createNamedArrayType} from '../../util/named_array_type';\nimport {initNgDevMode} from '../../util/ng_dev_mode';\nimport {normalizeDebugBindingName, normalizeDebugBindingValue} from '../../util/ng_reflect';\nimport {stringify} from '../../util/stringify';\nimport {assertFirstCreatePass, assertFirstUpdatePass, assertLContainer, assertLView, assertTNodeForLView, assertTNodeForTView} from '../assert';\nimport {attachPatchData} from '../context_discovery';\nimport {getFactoryDef} from '../definition_factory';\nimport {diPublicInInjector, getNodeInjectable, getOrCreateNodeInjectorForNode} from '../di';\nimport {formatRuntimeError, RuntimeError, RuntimeErrorCode} from '../error_code';\nimport {throwMultipleComponentError} from '../errors';\nimport {executeCheckHooks, executeInitAndCheckHooks, incrementInitPhaseFlags} from '../hooks';\nimport {CONTAINER_HEADER_OFFSET, HAS_TRANSPLANTED_VIEWS, LContainer, MOVED_VIEWS} from '../interfaces/container';\nimport {ComponentDef, ComponentTemplate, DirectiveDef, DirectiveDefListOrFactory, HostBindingsFunction, PipeDefListOrFactory, RenderFlags, ViewQueriesFunction} from '../interfaces/definition';\nimport {NodeInjectorFactory} from '../interfaces/injector';\nimport {AttributeMarker, InitialInputData, InitialInputs, LocalRefExtractor, PropertyAliases, PropertyAliasValue, TAttributes, TConstantsOrFactory, TContainerNode, TDirectiveHostNode, TElementContainerNode, TElementNode, TIcuContainerNode, TNode, TNodeFlags, TNodeType, TProjectionNode} from '../interfaces/node';\nimport {isProceduralRenderer, Renderer3, RendererFactory3} from '../interfaces/renderer';\nimport {RComment, RElement, RNode, RText} from '../interfaces/renderer_dom';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {isComponentDef, isComponentHost, isContentQueryHost, isRootView} from '../interfaces/type_checks';\nimport {CHILD_HEAD, CHILD_TAIL, CLEANUP, CONTEXT, DECLARATION_COMPONENT_VIEW, DECLARATION_VIEW, FLAGS, HEADER_OFFSET, HOST, HostBindingOpCodes, InitPhaseState, INJECTOR, LView, LViewFlags, NEXT, PARENT, RENDERER, RENDERER_FACTORY, RootContext, RootContextFlags, SANITIZER, T_HOST, TData, TRANSPLANTED_VIEWS_TO_REFRESH, TVIEW, TView, TViewType} from '../interfaces/view';\nimport {assertPureTNodeType, assertTNodeType} from '../node_assert';\nimport {updateTextNode} from '../node_manipulation';\nimport {isInlineTemplate, isNodeMatchingSelectorList} from '../node_selector_matcher';\nimport {enterView, getBindingsEnabled, getCurrentDirectiveIndex, getCurrentParentTNode, getCurrentTNode, getCurrentTNodePlaceholderOk, getSelectedIndex, isCurrentTNodeParent, isInCheckNoChangesMode, isInI18nBlock, leaveView, setBindingIndex, setBindingRootForHostBindings, setCurrentDirectiveIndex, setCurrentQueryIndex, setCurrentTNode, setIsInCheckNoChangesMode, setSelectedIndex} from '../state';\nimport {NO_CHANGE} from '../tokens';\nimport {isAnimationProp, mergeHostAttrs} from '../util/attrs_utils';\nimport {INTERPOLATION_DELIMITER} from '../util/misc_utils';\nimport {renderStringify, stringifyForError} from '../util/stringify_utils';\nimport {getFirstLContainer, getLViewParent, getNextLContainer} from '../util/view_traversal_utils';\nimport {getComponentLViewByIndex, getNativeByIndex, getNativeByTNode, isCreationMode, readPatchedLView, resetPreOrderHookFlags, unwrapLView, updateTransplantedViewCount, viewAttachedToChangeDetector} from '../util/view_utils';\n\nimport {selectIndexInternal} from './advance';\nimport {attachLContainerDebug, attachLViewDebug, cloneToLViewFromTViewBlueprint, cloneToTViewData, LCleanup, LViewBlueprint, MatchesArray, TCleanup, TNodeDebug, TNodeInitialInputs, TNodeLocalNames, TViewComponents, TViewConstructor} from './lview_debug';\n\n\n\n/**\n * A permanent marker promise which signifies that the current CD tree is\n * clean.\n */\nconst _CLEAN_PROMISE = (() => Promise.resolve(null))();\n\n/**\n * Invoke `HostBindingsFunction`s for view.\n *\n * This methods executes `TView.hostBindingOpCodes`. It is used to execute the\n * `HostBindingsFunction`s associated with the current `LView`.\n *\n * @param tView Current `TView`.\n * @param lView Current `LView`.\n */\nexport function processHostBindingOpCodes(tView: TView, lView: LView): void {\n  const hostBindingOpCodes = tView.hostBindingOpCodes;\n  if (hostBindingOpCodes === null) return;\n  try {\n    for (let i = 0; i < hostBindingOpCodes.length; i++) {\n      const opCode = hostBindingOpCodes[i] as number;\n      if (opCode < 0) {\n        // Negative numbers are element indexes.\n        setSelectedIndex(~opCode);\n      } else {\n        // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n        const directiveIdx = opCode;\n        const bindingRootIndx = hostBindingOpCodes[++i] as number;\n        const hostBindingFn = hostBindingOpCodes[++i] as HostBindingsFunction<any>;\n        setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n        const context = lView[directiveIdx];\n        hostBindingFn(RenderFlags.Update, context);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n  }\n}\n\n\n/** Refreshes all content queries declared by directives in a given view */\nfunction refreshContentQueries(tView: TView, lView: LView): void {\n  const contentQueries = tView.contentQueries;\n  if (contentQueries !== null) {\n    for (let i = 0; i < contentQueries.length; i += 2) {\n      const queryStartIdx = contentQueries[i];\n      const directiveDefIdx = contentQueries[i + 1];\n      if (directiveDefIdx !== -1) {\n        const directiveDef = tView.data[directiveDefIdx] as DirectiveDef<any>;\n        ngDevMode && assertDefined(directiveDef, 'DirectiveDef not found.');\n        ngDevMode &&\n            assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n        setCurrentQueryIndex(queryStartIdx);\n        directiveDef.contentQueries!(RenderFlags.Update, lView[directiveDefIdx], directiveDefIdx);\n      }\n    }\n  }\n}\n\n/** Refreshes child components in the current view (update mode). */\nfunction refreshChildComponents(hostLView: LView, components: number[]): void {\n  for (let i = 0; i < components.length; i++) {\n    refreshComponent(hostLView, components[i]);\n  }\n}\n\n/** Renders child components in the current view (creation mode). */\nfunction renderChildComponents(hostLView: LView, components: number[]): void {\n  for (let i = 0; i < components.length; i++) {\n    renderComponent(hostLView, components[i]);\n  }\n}\n\nexport function createLView<T>(\n    parentLView: LView|null, tView: TView, context: T|null, flags: LViewFlags, host: RElement|null,\n    tHostNode: TNode|null, rendererFactory: RendererFactory3|null, renderer: Renderer3|null,\n    sanitizer: Sanitizer|null, injector: Injector|null): LView {\n  const lView =\n      ngDevMode ? cloneToLViewFromTViewBlueprint(tView) : tView.blueprint.slice() as LView;\n  lView[HOST] = host;\n  lView[FLAGS] = flags | LViewFlags.CreationMode | LViewFlags.Attached | LViewFlags.FirstLViewPass;\n  resetPreOrderHookFlags(lView);\n  ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);\n  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n  lView[CONTEXT] = context;\n  lView[RENDERER_FACTORY] = (rendererFactory || parentLView && parentLView[RENDERER_FACTORY])!;\n  ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n  lView[RENDERER] = (renderer || parentLView && parentLView[RENDERER])!;\n  ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n  lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null!;\n  lView[INJECTOR as any] = injector || parentLView && parentLView[INJECTOR] || null;\n  lView[T_HOST] = tHostNode;\n  ngDevMode &&\n      assertEqual(\n          tView.type == TViewType.Embedded ? parentLView !== null : true, true,\n          'Embedded views must have parentLView');\n  lView[DECLARATION_COMPONENT_VIEW] =\n      tView.type == TViewType.Embedded ? parentLView![DECLARATION_COMPONENT_VIEW] : lView;\n  ngDevMode && attachLViewDebug(lView);\n  return lView;\n}\n\n/**\n * Create and stores the TNode, and hooks it up to the tree.\n *\n * @param tView The current `TView`.\n * @param index The index at which the TNode should be saved (null if view, since they are not\n * saved).\n * @param type The type of TNode to create\n * @param native The native element for this node, if applicable\n * @param name The tag name of the associated native element, if applicable\n * @param attrs Any attrs for the native element, if applicable\n */\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType.Element|TNodeType.Text, name: string|null,\n    attrs: TAttributes|null): TElementNode;\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType.Container, name: string|null,\n    attrs: TAttributes|null): TContainerNode;\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType.Projection, name: null,\n    attrs: TAttributes|null): TProjectionNode;\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType.ElementContainer, name: string|null,\n    attrs: TAttributes|null): TElementContainerNode;\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType.Icu, name: null,\n    attrs: TAttributes|null): TElementContainerNode;\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType, name: string|null, attrs: TAttributes|null):\n    TElementNode&TContainerNode&TElementContainerNode&TProjectionNode&TIcuContainerNode {\n  ngDevMode && index !== 0 &&  // 0 are bogus nodes and they are OK. See `createContainerRef` in\n                               // `view_engine_compatibility` for additional context.\n      assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n  // Keep this function short, so that the VM will inline it.\n  ngDevMode && assertPureTNodeType(type);\n  let tNode = tView.data[index] as TNode;\n  if (tNode === null) {\n    tNode = createTNodeAtIndex(tView, index, type, name, attrs);\n    if (isInI18nBlock()) {\n      // If we are in i18n block then all elements should be pre declared through `Placeholder`\n      // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n      // If the `TNode` was not pre-declared than it means it was not mentioned which means it was\n      // removed, so we mark it as detached.\n      tNode.flags |= TNodeFlags.isDetached;\n    }\n  } else if (tNode.type & TNodeType.Placeholder) {\n    tNode.type = type;\n    tNode.value = name;\n    tNode.attrs = attrs;\n    const parent = getCurrentParentTNode();\n    tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;\n    ngDevMode && assertTNodeForTView(tNode, tView);\n    ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');\n  }\n  setCurrentTNode(tNode, true);\n  return tNode as TElementNode & TContainerNode & TElementContainerNode & TProjectionNode &\n      TIcuContainerNode;\n}\n\nexport function createTNodeAtIndex(\n    tView: TView, index: number, type: TNodeType, name: string|null, attrs: TAttributes|null) {\n  const currentTNode = getCurrentTNodePlaceholderOk();\n  const isParent = isCurrentTNodeParent();\n  const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;\n  // Parents cannot cross component boundaries because components will be used in multiple places.\n  const tNode = tView.data[index] =\n      createTNode(tView, parent as TElementNode | TContainerNode, type, index, name, attrs);\n  // Assign a pointer to the first child node of a given view. The first node is not always the one\n  // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has\n  // the index 1 or more, so we can't just check node index.\n  if (tView.firstChild === null) {\n    tView.firstChild = tNode;\n  }\n  if (currentTNode !== null) {\n    if (isParent) {\n      // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?\n      if (currentTNode.child == null && tNode.parent !== null) {\n        // We are in the same view, which means we are adding content node to the parent view.\n        currentTNode.child = tNode;\n      }\n    } else {\n      if (currentTNode.next === null) {\n        // In the case of i18n the `currentTNode` may already be linked, in which case we don't want\n        // to break the links which i18n created.\n        currentTNode.next = tNode;\n      }\n    }\n  }\n  return tNode;\n}\n\n\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply()), we need to adjust the blueprint for future\n * template passes.\n *\n * @param tView `TView` associated with `LView`\n * @param lView The `LView` containing the blueprint to adjust\n * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0\n * @param initialValue Initial value to store in blueprint\n */\nexport function allocExpando(\n    tView: TView, lView: LView, numSlotsToAlloc: number, initialValue: any): number {\n  if (numSlotsToAlloc === 0) return -1;\n  if (ngDevMode) {\n    assertFirstCreatePass(tView);\n    assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');\n    assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');\n    assertEqual(\n        tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');\n    assertFirstUpdatePass(tView);\n  }\n  const allocIdx = lView.length;\n  for (let i = 0; i < numSlotsToAlloc; i++) {\n    lView.push(initialValue);\n    tView.blueprint.push(initialValue);\n    tView.data.push(null);\n  }\n  return allocIdx;\n}\n\n\n//////////////////////////\n//// Render\n//////////////////////////\n\n/**\n * Processes a view in the creation mode. This includes a number of steps in a specific order:\n * - creating view query functions (if any);\n * - executing a template function in the creation mode;\n * - updating static queries (if any);\n * - creating child components defined in a given view.\n */\nexport function renderView<T>(tView: TView, lView: LView, context: T): void {\n  ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');\n  enterView(lView);\n  try {\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn(RenderFlags.Create, viewQuery, context);\n    }\n\n    // Execute a template associated with this view, if it exists. A template function might not be\n    // defined for the root component views.\n    const templateFn = tView.template;\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, RenderFlags.Create, context);\n    }\n\n    // This needs to be set before children are processed to support recursive components.\n    // This must be set to false immediately after the first creation run because in an\n    // ngFor loop, all the views will be created together before update mode runs and turns\n    // off firstCreatePass. If we don't set it here, instances will perform directive\n    // matching, etc again and again.\n    if (tView.firstCreatePass) {\n      tView.firstCreatePass = false;\n    }\n\n    // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n    // content queries are resolved during change detection (i.e. update mode), after embedded\n    // views are refreshed (see block above).\n    if (tView.staticContentQueries) {\n      refreshContentQueries(tView, lView);\n    }\n\n    // We must materialize query results before child components are processed\n    // in case a child component has projected a container. The LContainer needs\n    // to exist so the embedded views are properly attached by the container.\n    if (tView.staticViewQueries) {\n      executeViewQueryFn(RenderFlags.Update, tView.viewQuery!, context);\n    }\n\n    // Render child component views.\n    const components = tView.components;\n    if (components !== null) {\n      renderChildComponents(lView, components);\n    }\n\n  } catch (error) {\n    // If we didn't manage to get past the first template pass due to\n    // an error, mark the view as corrupted so we can try to recover.\n    if (tView.firstCreatePass) {\n      tView.incompleteFirstPass = true;\n    }\n\n    throw error;\n  } finally {\n    lView[FLAGS] &= ~LViewFlags.CreationMode;\n    leaveView();\n  }\n}\n\n/**\n * Processes a view in update mode. This includes a number of steps in a specific order:\n * - executing a template function in update mode;\n * - executing hooks;\n * - refreshing queries;\n * - setting host bindings;\n * - refreshing child (embedded and component) views.\n */\nexport function refreshView<T>(\n    tView: TView, lView: LView, templateFn: ComponentTemplate<{}>|null, context: T) {\n  ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');\n  const flags = lView[FLAGS];\n  if ((flags & LViewFlags.Destroyed) === LViewFlags.Destroyed) return;\n  enterView(lView);\n  // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to execute lifecycle hooks in that mode.\n  const isInCheckNoChangesPass = isInCheckNoChangesMode();\n  try {\n    resetPreOrderHookFlags(lView);\n\n    setBindingIndex(tView.bindingStartIndex);\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, RenderFlags.Update, context);\n    }\n\n    const hooksInitPhaseCompleted =\n        (flags & LViewFlags.InitPhaseStateMask) === InitPhaseState.InitPhaseCompleted;\n\n    // execute pre-order hooks (OnInit, OnChanges, DoCheck)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const preOrderCheckHooks = tView.preOrderCheckHooks;\n        if (preOrderCheckHooks !== null) {\n          executeCheckHooks(lView, preOrderCheckHooks, null);\n        }\n      } else {\n        const preOrderHooks = tView.preOrderHooks;\n        if (preOrderHooks !== null) {\n          executeInitAndCheckHooks(lView, preOrderHooks, InitPhaseState.OnInitHooksToBeRun, null);\n        }\n        incrementInitPhaseFlags(lView, InitPhaseState.OnInitHooksToBeRun);\n      }\n    }\n\n    // First mark transplanted views that are declared in this lView as needing a refresh at their\n    // insertion points. This is needed to avoid the situation where the template is defined in this\n    // `LView` but its declaration appears after the insertion component.\n    markTransplantedViewsForRefresh(lView);\n    refreshEmbeddedViews(lView);\n\n    // Content query results must be refreshed before content hooks are called.\n    if (tView.contentQueries !== null) {\n      refreshContentQueries(tView, lView);\n    }\n\n    // execute content hooks (AfterContentInit, AfterContentChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const contentCheckHooks = tView.contentCheckHooks;\n        if (contentCheckHooks !== null) {\n          executeCheckHooks(lView, contentCheckHooks);\n        }\n      } else {\n        const contentHooks = tView.contentHooks;\n        if (contentHooks !== null) {\n          executeInitAndCheckHooks(\n              lView, contentHooks, InitPhaseState.AfterContentInitHooksToBeRun);\n        }\n        incrementInitPhaseFlags(lView, InitPhaseState.AfterContentInitHooksToBeRun);\n      }\n    }\n\n    processHostBindingOpCodes(tView, lView);\n\n    // Refresh child component views.\n    const components = tView.components;\n    if (components !== null) {\n      refreshChildComponents(lView, components);\n    }\n\n    // View queries must execute after refreshing child components because a template in this view\n    // could be inserted in a child component. If the view query executes before child component\n    // refresh, the template might not yet be inserted.\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn(RenderFlags.Update, viewQuery, context);\n    }\n\n    // execute view hooks (AfterViewInit, AfterViewChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const viewCheckHooks = tView.viewCheckHooks;\n        if (viewCheckHooks !== null) {\n          executeCheckHooks(lView, viewCheckHooks);\n        }\n      } else {\n        const viewHooks = tView.viewHooks;\n        if (viewHooks !== null) {\n          executeInitAndCheckHooks(lView, viewHooks, InitPhaseState.AfterViewInitHooksToBeRun);\n        }\n        incrementInitPhaseFlags(lView, InitPhaseState.AfterViewInitHooksToBeRun);\n      }\n    }\n    if (tView.firstUpdatePass === true) {\n      // We need to make sure that we only flip the flag on successful `refreshView` only\n      // Don't do this in `finally` block.\n      // If we did this in `finally` block then an exception could block the execution of styling\n      // instructions which in turn would be unable to insert themselves into the styling linked\n      // list. The result of this would be that if the exception would not be throw on subsequent CD\n      // the styling would be unable to process it data and reflect to the DOM.\n      tView.firstUpdatePass = false;\n    }\n\n    // Do not reset the dirty state when running in check no changes mode. We don't want components\n    // to behave differently depending on whether check no changes is enabled or not. For example:\n    // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to\n    // refresh a `NgClass` binding should work. If we would reset the dirty state in the check\n    // no changes cycle, the component would be not be dirty for the next update pass. This would\n    // be different in production mode where the component dirty state is not reset.\n    if (!isInCheckNoChangesPass) {\n      lView[FLAGS] &= ~(LViewFlags.Dirty | LViewFlags.FirstLViewPass);\n    }\n    if (lView[FLAGS] & LViewFlags.RefreshTransplantedView) {\n      lView[FLAGS] &= ~LViewFlags.RefreshTransplantedView;\n      updateTransplantedViewCount(lView[PARENT] as LContainer, -1);\n    }\n  } finally {\n    leaveView();\n  }\n}\n\nexport function renderComponentOrTemplate<T>(\n    tView: TView, lView: LView, templateFn: ComponentTemplate<{}>|null, context: T) {\n  const rendererFactory = lView[RENDERER_FACTORY];\n  const normalExecutionPath = !isInCheckNoChangesMode();\n  const creationModeIsActive = isCreationMode(lView);\n  try {\n    if (normalExecutionPath && !creationModeIsActive && rendererFactory.begin) {\n      rendererFactory.begin();\n    }\n    if (creationModeIsActive) {\n      renderView(tView, lView, context);\n    }\n    refreshView(tView, lView, templateFn, context);\n  } finally {\n    if (normalExecutionPath && !creationModeIsActive && rendererFactory.end) {\n      rendererFactory.end();\n    }\n  }\n}\n\nfunction executeTemplate<T>(\n    tView: TView, lView: LView, templateFn: ComponentTemplate<T>, rf: RenderFlags, context: T) {\n  const prevSelectedIndex = getSelectedIndex();\n  try {\n    setSelectedIndex(-1);\n    if (rf & RenderFlags.Update && lView.length > HEADER_OFFSET) {\n      // When we're updating, inherently select 0 so we don't\n      // have to generate that instruction for most update blocks.\n      selectIndexInternal(tView, lView, HEADER_OFFSET, isInCheckNoChangesMode());\n    }\n    templateFn(rf, context);\n  } finally {\n    setSelectedIndex(prevSelectedIndex);\n  }\n}\n\n//////////////////////////\n//// Element\n//////////////////////////\n\nexport function executeContentQueries(tView: TView, tNode: TNode, lView: LView) {\n  if (isContentQueryHost(tNode)) {\n    const start = tNode.directiveStart;\n    const end = tNode.directiveEnd;\n    for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n      const def = tView.data[directiveIndex] as DirectiveDef<any>;\n      if (def.contentQueries) {\n        def.contentQueries(RenderFlags.Create, lView[directiveIndex], directiveIndex);\n      }\n    }\n  }\n}\n\n\n/**\n * Creates directive instances.\n */\nexport function createDirectivesInstances(tView: TView, lView: LView, tNode: TDirectiveHostNode) {\n  if (!getBindingsEnabled()) return;\n  instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));\n  if ((tNode.flags & TNodeFlags.hasHostBindings) === TNodeFlags.hasHostBindings) {\n    invokeDirectivesHostBindings(tView, lView, tNode);\n  }\n}\n\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n */\nexport function saveResolvedLocalsInData(\n    viewData: LView, tNode: TDirectiveHostNode,\n    localRefExtractor: LocalRefExtractor = getNativeByTNode): void {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < localNames.length; i += 2) {\n      const index = localNames[i + 1] as number;\n      const value = index === -1 ?\n          localRefExtractor(\n              tNode as TElementNode | TContainerNode | TElementContainerNode, viewData) :\n          viewData[index];\n      viewData[localIndex++] = value;\n    }\n  }\n}\n\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param def ComponentDef\n * @returns TView\n */\nexport function getOrCreateTComponentView(def: ComponentDef<any>): TView {\n  const tView = def.tView;\n\n  // Create a TView if there isn't one, or recreate it if the first create pass didn't\n  // complete successfully since we can't know for sure whether it's in a usable shape.\n  if (tView === null || tView.incompleteFirstPass) {\n    // Declaration node here is null since this function is called when we dynamically create a\n    // component and hence there is no declaration.\n    const declTNode = null;\n    return def.tView = createTView(\n               TViewType.Component, declTNode, def.template, def.decls, def.vars, def.directiveDefs,\n               def.pipeDefs, def.viewQuery, def.schemas, def.consts);\n  }\n\n  return tView;\n}\n\n\n/**\n * Creates a TView instance\n *\n * @param type Type of `TView`.\n * @param declTNode Declaration location of this `TView`.\n * @param templateFn Template function\n * @param decls The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n * @param viewQuery View queries for this view\n * @param schemas Schemas for this view\n * @param consts Constants for this view\n */\nexport function createTView(\n    type: TViewType, declTNode: TNode|null, templateFn: ComponentTemplate<any>|null, decls: number,\n    vars: number, directives: DirectiveDefListOrFactory|null, pipes: PipeDefListOrFactory|null,\n    viewQuery: ViewQueriesFunction<any>|null, schemas: SchemaMetadata[]|null,\n    constsOrFactory: TConstantsOrFactory|null): TView {\n  ngDevMode && ngDevMode.tView++;\n  const bindingStartIndex = HEADER_OFFSET + decls;\n  // This length does not yet contain host bindings from child directives because at this point,\n  // we don't know which directives are active on this template. As soon as a directive is matched\n  // that has a host binding, we will update the blueprint with that def's hostVars count.\n  const initialViewLength = bindingStartIndex + vars;\n  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n  const consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;\n  const tView = blueprint[TVIEW as any] = ngDevMode ?\n      new TViewConstructor(\n          type,        // type: TViewType,\n          blueprint,   // blueprint: LView,\n          templateFn,  // template: ComponentTemplate<{}>|null,\n          null,        // queries: TQueries|null\n          viewQuery,   // viewQuery: ViewQueriesFunction<{}>|null,\n          declTNode,   // declTNode: TNode|null,\n          cloneToTViewData(blueprint).fill(null, bindingStartIndex),  // data: TData,\n          bindingStartIndex,                                          // bindingStartIndex: number,\n          initialViewLength,                                          // expandoStartIndex: number,\n          null,                               // hostBindingOpCodes: HostBindingOpCodes,\n          true,                               // firstCreatePass: boolean,\n          true,                               // firstUpdatePass: boolean,\n          false,                              // staticViewQueries: boolean,\n          false,                              // staticContentQueries: boolean,\n          null,                               // preOrderHooks: HookData|null,\n          null,                               // preOrderCheckHooks: HookData|null,\n          null,                               // contentHooks: HookData|null,\n          null,                               // contentCheckHooks: HookData|null,\n          null,                               // viewHooks: HookData|null,\n          null,                               // viewCheckHooks: HookData|null,\n          null,                               // destroyHooks: DestroyHookData|null,\n          null,                               // cleanup: any[]|null,\n          null,                               // contentQueries: number[]|null,\n          null,                               // components: number[]|null,\n          typeof directives === 'function' ?  //\n              directives() :                  //\n              directives,                     // directiveRegistry: DirectiveDefList|null,\n          typeof pipes === 'function' ? pipes() : pipes,  // pipeRegistry: PipeDefList|null,\n          null,                                           // firstChild: TNode|null,\n          schemas,                                        // schemas: SchemaMetadata[]|null,\n          consts,                                         // consts: TConstants|null\n          false,                                          // incompleteFirstPass: boolean\n          decls,                                          // ngDevMode only: decls\n          vars,                                           // ngDevMode only: vars\n          ) :\n      {\n        type: type,\n        blueprint: blueprint,\n        template: templateFn,\n        queries: null,\n        viewQuery: viewQuery,\n        declTNode: declTNode,\n        data: blueprint.slice().fill(null, bindingStartIndex),\n        bindingStartIndex: bindingStartIndex,\n        expandoStartIndex: initialViewLength,\n        hostBindingOpCodes: null,\n        firstCreatePass: true,\n        firstUpdatePass: true,\n        staticViewQueries: false,\n        staticContentQueries: false,\n        preOrderHooks: null,\n        preOrderCheckHooks: null,\n        contentHooks: null,\n        contentCheckHooks: null,\n        viewHooks: null,\n        viewCheckHooks: null,\n        destroyHooks: null,\n        cleanup: null,\n        contentQueries: null,\n        components: null,\n        directiveRegistry: typeof directives === 'function' ? directives() : directives,\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n        firstChild: null,\n        schemas: schemas,\n        consts: consts,\n        incompleteFirstPass: false\n      };\n  if (ngDevMode) {\n    // For performance reasons it is important that the tView retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tView);\n  }\n  return tView;\n}\n\nfunction createViewBlueprint(bindingStartIndex: number, initialViewLength: number): LView {\n  const blueprint = ngDevMode ? new LViewBlueprint() : [];\n\n  for (let i = 0; i < initialViewLength; i++) {\n    blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);\n  }\n\n  return blueprint as LView;\n}\n\nfunction createError(text: string, token: any) {\n  return new Error(`Renderer: ${text} [${stringifyForError(token)}]`);\n}\n\nfunction assertHostNodeExists(rElement: RElement, elementOrSelector: RElement|string) {\n  if (!rElement) {\n    if (typeof elementOrSelector === 'string') {\n      throw createError('Host node with selector not found:', elementOrSelector);\n    } else {\n      throw createError('Host node is required:', elementOrSelector);\n    }\n  }\n}\n\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param rendererFactory Factory function to create renderer instance.\n * @param elementOrSelector Render element or CSS selector to locate the element.\n * @param encapsulation View Encapsulation defined for component that requests host element.\n */\nexport function locateHostElement(\n    renderer: Renderer3, elementOrSelector: RElement|string,\n    encapsulation: ViewEncapsulation): RElement {\n  if (isProceduralRenderer(renderer)) {\n    // When using native Shadow DOM, do not clear host element to allow native slot projection\n    const preserveContent = encapsulation === ViewEncapsulation.ShadowDom;\n    return renderer.selectRootElement(elementOrSelector, preserveContent);\n  }\n\n  let rElement = typeof elementOrSelector === 'string' ?\n      renderer.querySelector(elementOrSelector)! :\n      elementOrSelector;\n  ngDevMode && assertHostNodeExists(rElement, elementOrSelector);\n\n  // Always clear host element's content when Renderer3 is in use. For procedural renderer case we\n  // make it depend on whether ShadowDom encapsulation is used (in which case the content should be\n  // preserved to allow native slot projection). ShadowDom encapsulation requires procedural\n  // renderer, and procedural renderer case is handled above.\n  rElement.textContent = '';\n\n  return rElement;\n}\n\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n *\n * This function can also be used to store instance specific cleanup fns. In that case the `context`\n * is `null` and the function is store in `LView` (rather than it `TView`).\n */\nexport function storeCleanupWithContext(\n    tView: TView, lView: LView, context: any, cleanupFn: Function): void {\n  const lCleanup = getOrCreateLViewCleanup(lView);\n  if (context === null) {\n    // If context is null that this is instance specific callback. These callbacks can only be\n    // inserted after template shared instances. For this reason in ngDevMode we freeze the TView.\n    if (ngDevMode) {\n      Object.freeze(getOrCreateTViewCleanup(tView));\n    }\n    lCleanup.push(cleanupFn);\n  } else {\n    lCleanup.push(context);\n\n    if (tView.firstCreatePass) {\n      getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);\n    }\n  }\n}\n\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param tView `TView` to which this `TNode` belongs (used only in `ngDevMode`)\n * @param tParent Parent `TNode`\n * @param type The type of the node\n * @param index The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param tagName The tag name of the node\n * @param attrs The attributes defined on this node\n * @param tViews Any TViews attached to this node\n * @returns the TNode object\n */\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType.Container,\n    index: number, tagName: string|null, attrs: TAttributes|null): TContainerNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType.Element|TNodeType.Text,\n    index: number, tagName: string|null, attrs: TAttributes|null): TElementNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType.ElementContainer,\n    index: number, tagName: string|null, attrs: TAttributes|null): TElementContainerNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType.Icu, index: number,\n    tagName: string|null, attrs: TAttributes|null): TIcuContainerNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType.Projection,\n    index: number, tagName: string|null, attrs: TAttributes|null): TProjectionNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType, index: number,\n    tagName: string|null, attrs: TAttributes|null): TNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType, index: number,\n    value: string|null, attrs: TAttributes|null): TNode {\n  ngDevMode && index !== 0 &&  // 0 are bogus nodes and they are OK. See `createContainerRef` in\n                               // `view_engine_compatibility` for additional context.\n      assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n  ngDevMode && assertNotSame(attrs, undefined, '\\'undefined\\' is not valid value for \\'attrs\\'');\n  ngDevMode && ngDevMode.tNode++;\n  ngDevMode && tParent && assertTNodeForTView(tParent, tView);\n  let injectorIndex = tParent ? tParent.injectorIndex : -1;\n  const tNode = ngDevMode ?\n      new TNodeDebug(\n          tView,          // tView_: TView\n          type,           // type: TNodeType\n          index,          // index: number\n          null,           // insertBeforeIndex: null|-1|number|number[]\n          injectorIndex,  // injectorIndex: number\n          -1,             // directiveStart: number\n          -1,             // directiveEnd: number\n          -1,             // directiveStylingLast: number\n          null,           // propertyBindings: number[]|null\n          0,              // flags: TNodeFlags\n          0,              // providerIndexes: TNodeProviderIndexes\n          value,          // value: string|null\n          attrs,          // attrs: (string|AttributeMarker|(string|SelectorFlags)[])[]|null\n          null,           // mergedAttrs\n          null,           // localNames: (string|number)[]|null\n          undefined,      // initialInputs: (string[]|null)[]|null|undefined\n          null,           // inputs: PropertyAliases|null\n          null,           // outputs: PropertyAliases|null\n          null,           // tViews: ITView|ITView[]|null\n          null,           // next: ITNode|null\n          null,           // projectionNext: ITNode|null\n          null,           // child: ITNode|null\n          tParent,        // parent: TElementNode|TContainerNode|null\n          null,           // projection: number|(ITNode|RNode[])[]|null\n          null,           // styles: string|null\n          null,           // stylesWithoutHost: string|null\n          undefined,      // residualStyles: string|null\n          null,           // classes: string|null\n          null,           // classesWithoutHost: string|null\n          undefined,      // residualClasses: string|null\n          0 as any,       // classBindings: TStylingRange;\n          0 as any,       // styleBindings: TStylingRange;\n          ) :\n      {\n        type,\n        index,\n        insertBeforeIndex: null,\n        injectorIndex,\n        directiveStart: -1,\n        directiveEnd: -1,\n        directiveStylingLast: -1,\n        propertyBindings: null,\n        flags: 0,\n        providerIndexes: 0,\n        value: value,\n        attrs: attrs,\n        mergedAttrs: null,\n        localNames: null,\n        initialInputs: undefined,\n        inputs: null,\n        outputs: null,\n        tViews: null,\n        next: null,\n        projectionNext: null,\n        child: null,\n        parent: tParent,\n        projection: null,\n        styles: null,\n        stylesWithoutHost: null,\n        residualStyles: undefined,\n        classes: null,\n        classesWithoutHost: null,\n        residualClasses: undefined,\n        classBindings: 0 as any,\n        styleBindings: 0 as any,\n      };\n  if (ngDevMode) {\n    // For performance reasons it is important that the tNode retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tNode);\n  }\n  return tNode;\n}\n\n\nfunction generatePropertyAliases(\n    inputAliasMap: {[publicName: string]: string}, directiveDefIdx: number,\n    propStore: PropertyAliases|null): PropertyAliases|null {\n  for (let publicName in inputAliasMap) {\n    if (inputAliasMap.hasOwnProperty(publicName)) {\n      propStore = propStore === null ? {} : propStore;\n      const internalName = inputAliasMap[publicName];\n\n      if (propStore.hasOwnProperty(publicName)) {\n        propStore[publicName].push(directiveDefIdx, internalName);\n      } else {\n        (propStore[publicName] = [directiveDefIdx, internalName]);\n      }\n    }\n  }\n  return propStore;\n}\n\n/**\n * Initializes data structures required to work with directive inputs and outputs.\n * Initialization is done for all directives matched on a given TNode.\n */\nfunction initializeInputAndOutputAliases(tView: TView, tNode: TNode): void {\n  ngDevMode && assertFirstCreatePass(tView);\n\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const tViewData = tView.data;\n\n  const tNodeAttrs = tNode.attrs;\n  const inputsFromAttrs: InitialInputData = ngDevMode ? new TNodeInitialInputs() : [];\n  let inputsStore: PropertyAliases|null = null;\n  let outputsStore: PropertyAliases|null = null;\n  for (let i = start; i < end; i++) {\n    const directiveDef = tViewData[i] as DirectiveDef<any>;\n    const directiveInputs = directiveDef.inputs;\n    // Do not use unbound attributes as inputs to structural directives, since structural\n    // directive inputs can only be set using microsyntax (e.g. `<div *dir=\"exp\">`).\n    // TODO(FW-1930): microsyntax expressions may also contain unbound/static attributes, which\n    // should be set for inline templates.\n    const initialInputs = (tNodeAttrs !== null && !isInlineTemplate(tNode)) ?\n        generateInitialInputs(directiveInputs, tNodeAttrs) :\n        null;\n    inputsFromAttrs.push(initialInputs);\n    inputsStore = generatePropertyAliases(directiveInputs, i, inputsStore);\n    outputsStore = generatePropertyAliases(directiveDef.outputs, i, outputsStore);\n  }\n\n  if (inputsStore !== null) {\n    if (inputsStore.hasOwnProperty('class')) {\n      tNode.flags |= TNodeFlags.hasClassInput;\n    }\n    if (inputsStore.hasOwnProperty('style')) {\n      tNode.flags |= TNodeFlags.hasStyleInput;\n    }\n  }\n\n  tNode.initialInputs = inputsFromAttrs;\n  tNode.inputs = inputsStore;\n  tNode.outputs = outputsStore;\n}\n\n/**\n * Mapping between attributes names that don't correspond to their element property names.\n *\n * Performance note: this function is written as a series of if checks (instead of, say, a property\n * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of\n * mapping property names. Do NOT change without benchmarking.\n *\n * Note: this mapping has to be kept in sync with the equally named mapping in the template\n * type-checking machinery of ngtsc.\n */\nfunction mapPropName(name: string): string {\n  if (name === 'class') return 'className';\n  if (name === 'for') return 'htmlFor';\n  if (name === 'formaction') return 'formAction';\n  if (name === 'innerHtml') return 'innerHTML';\n  if (name === 'readonly') return 'readOnly';\n  if (name === 'tabindex') return 'tabIndex';\n  return name;\n}\n\nexport function elementPropertyInternal<T>(\n    tView: TView, tNode: TNode, lView: LView, propName: string, value: T, renderer: Renderer3,\n    sanitizer: SanitizerFn|null|undefined, nativeOnly: boolean): void {\n  ngDevMode && assertNotSame(value, NO_CHANGE as any, 'Incoming value should never be NO_CHANGE.');\n  const element = getNativeByTNode(tNode, lView) as RElement | RComment;\n  let inputData = tNode.inputs;\n  let dataValue: PropertyAliasValue|undefined;\n  if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {\n    setInputsForProperty(tView, lView, dataValue, propName, value);\n    if (isComponentHost(tNode)) markDirtyIfOnPush(lView, tNode.index);\n    if (ngDevMode) {\n      setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n    }\n  } else if (tNode.type & TNodeType.AnyRNode) {\n    propName = mapPropName(propName);\n\n    if (ngDevMode) {\n      validateAgainstEventProperties(propName);\n      if (!validateProperty(tView, element, propName, tNode)) {\n        // Return here since we only log warnings for unknown properties.\n        logUnknownPropertyError(propName, tNode);\n        return;\n      }\n      ngDevMode.rendererSetProperty++;\n    }\n\n    // It is assumed that the sanitizer is only added when the compiler determines that the\n    // property is risky, so sanitization can be done without further checks.\n    value = sanitizer != null ? (sanitizer(value, tNode.value || '', propName) as any) : value;\n    if (isProceduralRenderer(renderer)) {\n      renderer.setProperty(element as RElement, propName, value);\n    } else if (!isAnimationProp(propName)) {\n      (element as RElement).setProperty ? (element as any).setProperty(propName, value) :\n                                          (element as any)[propName] = value;\n    }\n  } else if (tNode.type & TNodeType.AnyContainer) {\n    // If the node is a container and the property didn't\n    // match any of the inputs or schemas we should throw.\n    if (ngDevMode && !matchingSchemas(tView, tNode.value)) {\n      logUnknownPropertyError(propName, tNode);\n    }\n  }\n}\n\n/** If node is an OnPush component, marks its LView dirty. */\nfunction markDirtyIfOnPush(lView: LView, viewIndex: number): void {\n  ngDevMode && assertLView(lView);\n  const childComponentLView = getComponentLViewByIndex(viewIndex, lView);\n  if (!(childComponentLView[FLAGS] & LViewFlags.CheckAlways)) {\n    childComponentLView[FLAGS] |= LViewFlags.Dirty;\n  }\n}\n\nfunction setNgReflectProperty(\n    lView: LView, element: RElement|RComment, type: TNodeType, attrName: string, value: any) {\n  const renderer = lView[RENDERER];\n  attrName = normalizeDebugBindingName(attrName);\n  const debugValue = normalizeDebugBindingValue(value);\n  if (type & TNodeType.AnyRNode) {\n    if (value == null) {\n      isProceduralRenderer(renderer) ? renderer.removeAttribute((element as RElement), attrName) :\n                                       (element as RElement).removeAttribute(attrName);\n    } else {\n      isProceduralRenderer(renderer) ?\n          renderer.setAttribute((element as RElement), attrName, debugValue) :\n          (element as RElement).setAttribute(attrName, debugValue);\n    }\n  } else {\n    const textContent =\n        escapeCommentText(`bindings=${JSON.stringify({[attrName]: debugValue}, null, 2)}`);\n    if (isProceduralRenderer(renderer)) {\n      renderer.setValue((element as RComment), textContent);\n    } else {\n      (element as RComment).textContent = textContent;\n    }\n  }\n}\n\nexport function setNgReflectProperties(\n    lView: LView, element: RElement|RComment, type: TNodeType, dataValue: PropertyAliasValue,\n    value: any) {\n  if (type & (TNodeType.AnyRNode | TNodeType.Container)) {\n    /**\n     * dataValue is an array containing runtime input or output names for the directives:\n     * i+0: directive instance index\n     * i+1: privateName\n     *\n     * e.g. [0, 'change', 'change-minified']\n     * we want to set the reflected property with the privateName: dataValue[i+1]\n     */\n    for (let i = 0; i < dataValue.length; i += 2) {\n      setNgReflectProperty(lView, element, type, dataValue[i + 1] as string, value);\n    }\n  }\n}\n\nfunction validateProperty(\n    tView: TView, element: RElement|RComment, propName: string, tNode: TNode): boolean {\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (tView.schemas === null) return true;\n\n  // The property is considered valid if the element matches the schema, it exists on the element\n  // or it is synthetic, and we are in a browser context (web worker nodes should be skipped).\n  if (matchingSchemas(tView, tNode.value) || propName in element || isAnimationProp(propName)) {\n    return true;\n  }\n\n  // Note: `typeof Node` returns 'function' in most browsers, but on IE it is 'object' so we\n  // need to account for both here, while being careful for `typeof null` also returning 'object'.\n  return typeof Node === 'undefined' || Node === null || !(element instanceof Node);\n}\n\nexport function matchingSchemas(tView: TView, tagName: string|null): boolean {\n  const schemas = tView.schemas;\n\n  if (schemas !== null) {\n    for (let i = 0; i < schemas.length; i++) {\n      const schema = schemas[i];\n      if (schema === NO_ERRORS_SCHEMA ||\n          schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\n * Logs an error that a property is not supported on an element.\n * @param propName Name of the invalid property.\n * @param tNode Node on which we encountered the property.\n */\nfunction logUnknownPropertyError(propName: string, tNode: TNode): void {\n  let message = `Can't bind to '${propName}' since it isn't a known property of '${tNode.value}'.`;\n  console.error(formatRuntimeError(RuntimeErrorCode.UNKNOWN_BINDING, message));\n}\n\n/**\n * Instantiate a root component.\n */\nexport function instantiateRootComponent<T>(tView: TView, lView: LView, def: ComponentDef<T>): T {\n  const rootTNode = getCurrentTNode()!;\n  if (tView.firstCreatePass) {\n    if (def.providersResolver) def.providersResolver(def);\n    const directiveIndex = allocExpando(tView, lView, 1, null);\n    ngDevMode &&\n        assertEqual(\n            directiveIndex, rootTNode.directiveStart,\n            'Because this is a root component the allocated expando should match the TNode component.');\n    configureViewWithDirective(tView, rootTNode, lView, directiveIndex, def);\n  }\n  const directive =\n      getNodeInjectable(lView, tView, rootTNode.directiveStart, rootTNode as TElementNode);\n  attachPatchData(directive, lView);\n  const native = getNativeByTNode(rootTNode, lView);\n  if (native) {\n    attachPatchData(native, lView);\n  }\n  return directive;\n}\n\n/**\n * Resolve the matched directives on a node.\n */\nexport function resolveDirectives(\n    tView: TView, lView: LView, tNode: TElementNode|TContainerNode|TElementContainerNode,\n    localRefs: string[]|null): boolean {\n  // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in\n  // tsickle.\n  ngDevMode && assertFirstCreatePass(tView);\n\n  let hasDirectives = false;\n  if (getBindingsEnabled()) {\n    const directiveDefs: DirectiveDef<any>[]|null = findDirectiveDefMatches(tView, lView, tNode);\n    const exportsMap: ({[key: string]: number}|null) = localRefs === null ? null : {'': -1};\n\n    if (directiveDefs !== null) {\n      hasDirectives = true;\n      initTNodeFlags(tNode, tView.data.length, directiveDefs.length);\n      // When the same token is provided by several directives on the same node, some rules apply in\n      // the viewEngine:\n      // - viewProviders have priority over providers\n      // - the last directive in NgModule.declarations has priority over the previous one\n      // So to match these rules, the order in which providers are added in the arrays is very\n      // important.\n      for (let i = 0; i < directiveDefs.length; i++) {\n        const def = directiveDefs[i];\n        if (def.providersResolver) def.providersResolver(def);\n      }\n      let preOrderHooksFound = false;\n      let preOrderCheckHooksFound = false;\n      let directiveIdx = allocExpando(tView, lView, directiveDefs.length, null);\n      ngDevMode &&\n          assertSame(\n              directiveIdx, tNode.directiveStart,\n              'TNode.directiveStart should point to just allocated space');\n\n      for (let i = 0; i < directiveDefs.length; i++) {\n        const def = directiveDefs[i];\n        // Merge the attrs in the order of matches. This assumes that the first directive is the\n        // component itself, so that the component has the least priority.\n        tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n\n        configureViewWithDirective(tView, tNode, lView, directiveIdx, def);\n        saveNameToExportMap(directiveIdx, def, exportsMap);\n\n        if (def.contentQueries !== null) tNode.flags |= TNodeFlags.hasContentQuery;\n        if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0)\n          tNode.flags |= TNodeFlags.hasHostBindings;\n\n        const lifeCycleHooks: OnChanges&OnInit&DoCheck = def.type.prototype;\n        // Only push a node index into the preOrderHooks array if this is the first\n        // pre-order hook found on this node.\n        if (!preOrderHooksFound &&\n            (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {\n          // We will push the actual hook function into this array later during dir instantiation.\n          // We cannot do it now because we must ensure hooks are registered in the same\n          // order that directives are created (i.e. injection order).\n          (tView.preOrderHooks || (tView.preOrderHooks = [])).push(tNode.index);\n          preOrderHooksFound = true;\n        }\n\n        if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {\n          (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(tNode.index);\n          preOrderCheckHooksFound = true;\n        }\n\n        directiveIdx++;\n      }\n\n      initializeInputAndOutputAliases(tView, tNode);\n    }\n    if (exportsMap) cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n  }\n  // Merge the template attrs last so that they have the highest priority.\n  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n  return hasDirectives;\n}\n\n/**\n * Add `hostBindings` to the `TView.hostBindingOpCodes`.\n *\n * @param tView `TView` to which the `hostBindings` should be added.\n * @param tNode `TNode` the element which contains the directive\n * @param lView `LView` current `LView`\n * @param directiveIdx Directive index in view.\n * @param directiveVarsIdx Where will the directive's vars be stored\n * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.\n */\nexport function registerHostBindingOpCodes(\n    tView: TView, tNode: TNode, lView: LView, directiveIdx: number, directiveVarsIdx: number,\n    def: ComponentDef<any>|DirectiveDef<any>): void {\n  ngDevMode && assertFirstCreatePass(tView);\n\n  const hostBindings = def.hostBindings;\n  if (hostBindings) {\n    let hostBindingOpCodes = tView.hostBindingOpCodes;\n    if (hostBindingOpCodes === null) {\n      hostBindingOpCodes = tView.hostBindingOpCodes = [] as any as HostBindingOpCodes;\n    }\n    const elementIndx = ~tNode.index;\n    if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {\n      // Conditionally add select element so that we are more efficient in execution.\n      // NOTE: this is strictly not necessary and it trades code size for runtime perf.\n      // (We could just always add it.)\n      hostBindingOpCodes.push(elementIndx);\n    }\n    hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);\n  }\n}\n\n/**\n * Returns the last selected element index in the `HostBindingOpCodes`\n *\n * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only\n * if it changes. This method returns the last index (or '0' if not found.)\n *\n * Selected element index are only the ones which are negative.\n */\nfunction lastSelectedElementIdx(hostBindingOpCodes: HostBindingOpCodes): number {\n  let i = hostBindingOpCodes.length;\n  while (i > 0) {\n    const value = hostBindingOpCodes[--i];\n    if (typeof value === 'number' && value < 0) {\n      return value;\n    }\n  }\n  return 0;\n}\n\n\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n */\nfunction instantiateAllDirectives(\n    tView: TView, lView: LView, tNode: TDirectiveHostNode, native: RNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  if (!tView.firstCreatePass) {\n    getOrCreateNodeInjectorForNode(tNode, lView);\n  }\n\n  attachPatchData(native, lView);\n\n  const initialInputs = tNode.initialInputs;\n  for (let i = start; i < end; i++) {\n    const def = tView.data[i] as DirectiveDef<any>;\n    const isComponent = isComponentDef(def);\n\n    if (isComponent) {\n      ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode);\n      addComponentLogic(lView, tNode as TElementNode, def as ComponentDef<any>);\n    }\n\n    const directive = getNodeInjectable(lView, tView, i, tNode);\n    attachPatchData(directive, lView);\n\n    if (initialInputs !== null) {\n      setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs!);\n    }\n\n    if (isComponent) {\n      const componentView = getComponentLViewByIndex(tNode.index, lView);\n      componentView[CONTEXT] = directive;\n    }\n  }\n}\n\nfunction invokeDirectivesHostBindings(tView: TView, lView: LView, tNode: TNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const firstCreatePass = tView.firstCreatePass;\n  const elementIndex = tNode.index;\n  const currentDirectiveIndex = getCurrentDirectiveIndex();\n  try {\n    setSelectedIndex(elementIndex);\n    for (let dirIndex = start; dirIndex < end; dirIndex++) {\n      const def = tView.data[dirIndex] as DirectiveDef<unknown>;\n      const directive = lView[dirIndex];\n      setCurrentDirectiveIndex(dirIndex);\n      if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {\n        invokeHostBindingsInCreationMode(def, directive);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n    setCurrentDirectiveIndex(currentDirectiveIndex);\n  }\n}\n\n/**\n * Invoke the host bindings in creation mode.\n *\n * @param def `DirectiveDef` which may contain the `hostBindings` function.\n * @param directive Instance of directive.\n */\nexport function invokeHostBindingsInCreationMode(def: DirectiveDef<any>, directive: any) {\n  if (def.hostBindings !== null) {\n    def.hostBindings!(RenderFlags.Create, directive);\n  }\n}\n\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n */\nfunction findDirectiveDefMatches(\n    tView: TView, viewData: LView,\n    tNode: TElementNode|TContainerNode|TElementContainerNode): DirectiveDef<any>[]|null {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode | TNodeType.AnyContainer);\n\n  const registry = tView.directiveRegistry;\n  let matches: any[]|null = null;\n  if (registry) {\n    for (let i = 0; i < registry.length; i++) {\n      const def = registry[i] as ComponentDef<any>| DirectiveDef<any>;\n      if (isNodeMatchingSelectorList(tNode, def.selectors!, /* isProjectionMode */ false)) {\n        matches || (matches = ngDevMode ? new MatchesArray() : []);\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, viewData), tView, def.type);\n\n        if (isComponentDef(def)) {\n          if (ngDevMode) {\n            assertTNodeType(\n                tNode, TNodeType.Element,\n                `\"${tNode.value}\" tags cannot be used as component hosts. ` +\n                    `Please use a different tag to activate the ${stringify(def.type)} component.`);\n\n            if (tNode.flags & TNodeFlags.isComponentHost) throwMultipleComponentError(tNode);\n          }\n          markAsComponentHost(tView, tNode);\n          // The component is always stored first with directives after.\n          matches.unshift(def);\n        } else {\n          matches.push(def);\n        }\n      }\n    }\n  }\n  return matches;\n}\n\n/**\n * Marks a given TNode as a component's host. This consists of:\n * - setting appropriate TNode flags;\n * - storing index of component's host element so it will be queued for view refresh during CD.\n */\nexport function markAsComponentHost(tView: TView, hostTNode: TNode): void {\n  ngDevMode && assertFirstCreatePass(tView);\n  hostTNode.flags |= TNodeFlags.isComponentHost;\n  (tView.components || (tView.components = ngDevMode ? new TViewComponents() : []))\n      .push(hostTNode.index);\n}\n\n\n/** Caches local names and their matching directive indices for query and template lookups. */\nfunction cacheMatchingLocalNames(\n    tNode: TNode, localRefs: string[]|null, exportsMap: {[key: string]: number}): void {\n  if (localRefs) {\n    const localNames: (string|number)[] = tNode.localNames = ngDevMode ? new TNodeLocalNames() : [];\n\n    // Local names must be stored in tNode in the same order that localRefs are defined\n    // in the template to ensure the data is loaded in the same slots as their refs\n    // in the template (for template queries).\n    for (let i = 0; i < localRefs.length; i += 2) {\n      const index = exportsMap[localRefs[i + 1]];\n      if (index == null)\n        throw new RuntimeError(\n            RuntimeErrorCode.EXPORT_NOT_FOUND, `Export of name '${localRefs[i + 1]}' not found!`);\n      localNames.push(localRefs[i], index);\n    }\n  }\n}\n\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n */\nfunction saveNameToExportMap(\n    directiveIdx: number, def: DirectiveDef<any>|ComponentDef<any>,\n    exportsMap: {[key: string]: number}|null) {\n  if (exportsMap) {\n    if (def.exportAs) {\n      for (let i = 0; i < def.exportAs.length; i++) {\n        exportsMap[def.exportAs[i]] = directiveIdx;\n      }\n    }\n    if (isComponentDef(def)) exportsMap[''] = directiveIdx;\n  }\n}\n\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param index the initial index\n */\nexport function initTNodeFlags(tNode: TNode, index: number, numberOfDirectives: number) {\n  ngDevMode &&\n      assertNotEqual(\n          numberOfDirectives, tNode.directiveEnd - tNode.directiveStart,\n          'Reached the max number of directives');\n  tNode.flags |= TNodeFlags.isDirectiveHost;\n  // When the first directive is created on a node, save the index\n  tNode.directiveStart = index;\n  tNode.directiveEnd = index + numberOfDirectives;\n  tNode.providerIndexes = index;\n}\n\n/**\n * Setup directive for instantiation.\n *\n * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well\n * as `LView`. `TView` gets the `DirectiveDef`.\n *\n * @param tView `TView`\n * @param tNode `TNode`\n * @param lView `LView`\n * @param directiveIndex Index where the directive will be stored in the Expando.\n * @param def `DirectiveDef`\n */\nfunction configureViewWithDirective<T>(\n    tView: TView, tNode: TNode, lView: LView, directiveIndex: number, def: DirectiveDef<T>): void {\n  ngDevMode &&\n      assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');\n  tView.data[directiveIndex] = def;\n  const directiveFactory =\n      def.factory || ((def as {factory: Function}).factory = getFactoryDef(def.type, true));\n  const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);\n  tView.blueprint[directiveIndex] = nodeInjectorFactory;\n  lView[directiveIndex] = nodeInjectorFactory;\n\n  registerHostBindingOpCodes(\n      tView, tNode, lView, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE),\n      def);\n}\n\nfunction addComponentLogic<T>(lView: LView, hostTNode: TElementNode, def: ComponentDef<T>): void {\n  const native = getNativeByTNode(hostTNode, lView) as RElement;\n  const tView = getOrCreateTComponentView(def);\n\n  // Only component views should be added to the view tree directly. Embedded views are\n  // accessed through their containers because they may be removed / re-added later.\n  const rendererFactory = lView[RENDERER_FACTORY];\n  const componentView = addToViewTree(\n      lView,\n      createLView(\n          lView, tView, null, def.onPush ? LViewFlags.Dirty : LViewFlags.CheckAlways, native,\n          hostTNode as TElementNode, rendererFactory, rendererFactory.createRenderer(native, def),\n          null, null));\n\n  // Component view will always be created before any injected LContainers,\n  // so this is a regular element, wrap it with the component view\n  lView[hostTNode.index] = componentView;\n}\n\nexport function elementAttributeInternal(\n    tNode: TNode, lView: LView, name: string, value: any, sanitizer: SanitizerFn|null|undefined,\n    namespace: string|null|undefined) {\n  if (ngDevMode) {\n    assertNotSame(value, NO_CHANGE as any, 'Incoming value should never be NO_CHANGE.');\n    validateAgainstEventAttributes(name);\n    assertTNodeType(\n        tNode, TNodeType.Element,\n        `Attempted to set attribute \\`${name}\\` on a container node. ` +\n            `Host bindings are not valid on ng-container or ng-template.`);\n  }\n  const element = getNativeByTNode(tNode, lView) as RElement;\n  setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);\n}\n\nexport function setElementAttribute(\n    renderer: Renderer3, element: RElement, namespace: string|null|undefined, tagName: string|null,\n    name: string, value: any, sanitizer: SanitizerFn|null|undefined) {\n  if (value == null) {\n    ngDevMode && ngDevMode.rendererRemoveAttribute++;\n    isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name, namespace) :\n                                     element.removeAttribute(name);\n  } else {\n    ngDevMode && ngDevMode.rendererSetAttribute++;\n    const strValue =\n        sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);\n\n\n    if (isProceduralRenderer(renderer)) {\n      renderer.setAttribute(element, name, strValue, namespace);\n    } else {\n      namespace ? element.setAttributeNS(namespace, name, strValue) :\n                  element.setAttribute(name, strValue);\n    }\n  }\n}\n\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @param lView Current LView that is being processed.\n * @param directiveIndex Index of the directive in directives array\n * @param instance Instance of the directive on which to set the initial inputs\n * @param def The directive def that contains the list of inputs\n * @param tNode The static data for this node\n */\nfunction setInputsFromAttrs<T>(\n    lView: LView, directiveIndex: number, instance: T, def: DirectiveDef<T>, tNode: TNode,\n    initialInputData: InitialInputData): void {\n  const initialInputs: InitialInputs|null = initialInputData![directiveIndex];\n  if (initialInputs !== null) {\n    const setInput = def.setInput;\n    for (let i = 0; i < initialInputs.length;) {\n      const publicName = initialInputs[i++];\n      const privateName = initialInputs[i++];\n      const value = initialInputs[i++];\n      if (setInput !== null) {\n        def.setInput!(instance, value, publicName, privateName);\n      } else {\n        (instance as any)[privateName] = value;\n      }\n      if (ngDevMode) {\n        const nativeElement = getNativeByTNode(tNode, lView) as RElement;\n        setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);\n      }\n    }\n  }\n}\n\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an @Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` @Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param inputs The list of inputs from the directive def\n * @param attrs The static attrs on this node\n */\nfunction generateInitialInputs(inputs: {[key: string]: string}, attrs: TAttributes): InitialInputs|\n    null {\n  let inputsToStore: InitialInputs|null = null;\n  let i = 0;\n  while (i < attrs.length) {\n    const attrName = attrs[i];\n    if (attrName === AttributeMarker.NamespaceURI) {\n      // We do not allow inputs on namespaced attributes.\n      i += 4;\n      continue;\n    } else if (attrName === AttributeMarker.ProjectAs) {\n      // Skip over the `ngProjectAs` value.\n      i += 2;\n      continue;\n    }\n\n    // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n    if (typeof attrName === 'number') break;\n\n    if (inputs.hasOwnProperty(attrName as string)) {\n      if (inputsToStore === null) inputsToStore = [];\n      inputsToStore.push(attrName as string, inputs[attrName as string], attrs[i + 1] as string);\n    }\n\n    i += 2;\n  }\n  return inputsToStore;\n}\n\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n\n// Not sure why I need to do `any` here but TS complains later.\nconst LContainerArray: any = ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) &&\n    createNamedArrayType('LContainer');\n\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\nexport function createLContainer(\n    hostNative: RElement|RComment|LView, currentView: LView, native: RComment,\n    tNode: TNode): LContainer {\n  ngDevMode && assertLView(currentView);\n  ngDevMode && !isProceduralRenderer(currentView[RENDERER]) && assertDomNode(native);\n  // https://jsperf.com/array-literal-vs-new-array-really\n  const lContainer: LContainer = new (ngDevMode ? LContainerArray : Array)(\n      hostNative,   // host native\n      true,         // Boolean `true` in this position signifies that this is an `LContainer`\n      false,        // has transplanted views\n      currentView,  // parent\n      null,         // next\n      0,            // transplanted views to refresh count\n      tNode,        // t_host\n      native,       // native,\n      null,         // view refs\n      null,         // moved views\n  );\n  ngDevMode &&\n      assertEqual(\n          lContainer.length, CONTAINER_HEADER_OFFSET,\n          'Should allocate correct number of slots for LContainer header.');\n  ngDevMode && attachLContainerDebug(lContainer);\n  return lContainer;\n}\n\n/**\n * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes\n * them by executing an associated template function.\n */\nfunction refreshEmbeddedViews(lView: LView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null;\n       lContainer = getNextLContainer(lContainer)) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n      const embeddedLView = lContainer[i];\n      const embeddedTView = embeddedLView[TVIEW];\n      ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');\n      if (viewAttachedToChangeDetector(embeddedLView)) {\n        refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]!);\n      }\n    }\n  }\n}\n\n/**\n * Mark transplanted views as needing to be refreshed at their insertion points.\n *\n * @param lView The `LView` that may have transplanted views.\n */\nfunction markTransplantedViewsForRefresh(lView: LView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null;\n       lContainer = getNextLContainer(lContainer)) {\n    if (!lContainer[HAS_TRANSPLANTED_VIEWS]) continue;\n\n    const movedViews = lContainer[MOVED_VIEWS]!;\n    ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');\n    for (let i = 0; i < movedViews.length; i++) {\n      const movedLView = movedViews[i]!;\n      const insertionLContainer = movedLView[PARENT] as LContainer;\n      ngDevMode && assertLContainer(insertionLContainer);\n      // We don't want to increment the counter if the moved LView was already marked for\n      // refresh.\n      if ((movedLView[FLAGS] & LViewFlags.RefreshTransplantedView) === 0) {\n        updateTransplantedViewCount(insertionLContainer, 1);\n      }\n      // Note, it is possible that the `movedViews` is tracking views that are transplanted *and*\n      // those that aren't (declaration component === insertion component). In the latter case,\n      // it's fine to add the flag, as we will clear it immediately in\n      // `refreshEmbeddedViews` for the view currently being refreshed.\n      movedLView[FLAGS] |= LViewFlags.RefreshTransplantedView;\n    }\n  }\n}\n\n/////////////\n\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)\n */\nfunction refreshComponent(hostLView: LView, componentHostIdx: number): void {\n  ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n  if (viewAttachedToChangeDetector(componentView)) {\n    const tView = componentView[TVIEW];\n    if (componentView[FLAGS] & (LViewFlags.CheckAlways | LViewFlags.Dirty)) {\n      refreshView(tView, componentView, tView.template, componentView[CONTEXT]);\n    } else if (componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n      // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n      refreshContainsDirtyView(componentView);\n    }\n  }\n}\n\n/**\n * Refreshes all transplanted views marked with `LViewFlags.RefreshTransplantedView` that are\n * children or descendants of the given lView.\n *\n * @param lView The lView which contains descendant transplanted views that need to be refreshed.\n */\nfunction refreshContainsDirtyView(lView: LView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null;\n       lContainer = getNextLContainer(lContainer)) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n      const embeddedLView = lContainer[i];\n      if (embeddedLView[FLAGS] & LViewFlags.RefreshTransplantedView) {\n        const embeddedTView = embeddedLView[TVIEW];\n        ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');\n        refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]!);\n      } else if (embeddedLView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n        refreshContainsDirtyView(embeddedLView);\n      }\n    }\n  }\n\n  const tView = lView[TVIEW];\n  // Refresh child component views.\n  const components = tView.components;\n  if (components !== null) {\n    for (let i = 0; i < components.length; i++) {\n      const componentView = getComponentLViewByIndex(components[i], lView);\n      // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n      if (viewAttachedToChangeDetector(componentView) &&\n          componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n        refreshContainsDirtyView(componentView);\n      }\n    }\n  }\n}\n\nfunction renderComponent(hostLView: LView, componentHostIdx: number) {\n  ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  const componentTView = componentView[TVIEW];\n  syncViewWithBlueprint(componentTView, componentView);\n  renderView(componentTView, componentView, componentView[CONTEXT]);\n}\n\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param tView The `TView` that contains the blueprint for syncing\n * @param lView The view to sync\n */\nfunction syncViewWithBlueprint(tView: TView, lView: LView) {\n  for (let i = lView.length; i < tView.blueprint.length; i++) {\n    lView.push(tView.blueprint[i]);\n  }\n}\n\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param lView The view where LView or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param lViewOrLContainer The LView or LContainer to add to the view tree\n * @returns The state passed in\n */\nexport function addToViewTree<T extends LView|LContainer>(lView: LView, lViewOrLContainer: T): T {\n  // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n  // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n  // of order, the change detection will run out of order, as the act of retrieving the the\n  // LContainer from the RNode is what adds it to the queue.\n  if (lView[CHILD_HEAD]) {\n    lView[CHILD_TAIL]![NEXT] = lViewOrLContainer;\n  } else {\n    lView[CHILD_HEAD] = lViewOrLContainer;\n  }\n  lView[CHILD_TAIL] = lViewOrLContainer;\n  return lViewOrLContainer;\n}\n\n///////////////////////////////\n//// Change detection\n///////////////////////////////\n\n\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param lView The starting LView to mark dirty\n * @returns the root LView\n */\nexport function markViewDirty(lView: LView): LView|null {\n  while (lView) {\n    lView[FLAGS] |= LViewFlags.Dirty;\n    const parent = getLViewParent(lView);\n    // Stop traversing up as soon as you find a root view that wasn't attached to any container\n    if (isRootView(lView) && !parent) {\n      return lView;\n    }\n    // continue otherwise\n    lView = parent!;\n  }\n  return null;\n}\n\n\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n */\nexport function scheduleTick(rootContext: RootContext, flags: RootContextFlags) {\n  const nothingScheduled = rootContext.flags === RootContextFlags.Empty;\n  if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {\n    // https://github.com/angular/angular/issues/39296\n    // should only attach the flags when really scheduling a tick\n    rootContext.flags |= flags;\n    let res: null|((val: null) => void);\n    rootContext.clean = new Promise<null>((r) => res = r);\n    rootContext.scheduler(() => {\n      if (rootContext.flags & RootContextFlags.DetectChanges) {\n        rootContext.flags &= ~RootContextFlags.DetectChanges;\n        tickRootContext(rootContext);\n      }\n\n      if (rootContext.flags & RootContextFlags.FlushPlayers) {\n        rootContext.flags &= ~RootContextFlags.FlushPlayers;\n        const playerHandler = rootContext.playerHandler;\n        if (playerHandler) {\n          playerHandler.flushPlayers();\n        }\n      }\n\n      rootContext.clean = _CLEAN_PROMISE;\n      res!(null);\n    });\n  }\n}\n\nexport function tickRootContext(rootContext: RootContext) {\n  for (let i = 0; i < rootContext.components.length; i++) {\n    const rootComponent = rootContext.components[i];\n    const lView = readPatchedLView(rootComponent)!;\n    const tView = lView[TVIEW];\n    renderComponentOrTemplate(tView, lView, tView.template, rootComponent);\n  }\n}\n\nexport function detectChangesInternal<T>(tView: TView, lView: LView, context: T) {\n  const rendererFactory = lView[RENDERER_FACTORY];\n  if (rendererFactory.begin) rendererFactory.begin();\n  try {\n    refreshView(tView, lView, tView.template, context);\n  } catch (error) {\n    handleError(lView, error);\n    throw error;\n  } finally {\n    if (rendererFactory.end) rendererFactory.end();\n  }\n}\n\n/**\n * Synchronously perform change detection on a root view and its components.\n *\n * @param lView The view which the change detection should be performed on.\n */\nexport function detectChangesInRootView(lView: LView): void {\n  tickRootContext(lView[CONTEXT] as RootContext);\n}\n\nexport function checkNoChangesInternal<T>(tView: TView, view: LView, context: T) {\n  setIsInCheckNoChangesMode(true);\n  try {\n    detectChangesInternal(tView, view, context);\n  } finally {\n    setIsInCheckNoChangesMode(false);\n  }\n}\n\n/**\n * Checks the change detector on a root view and its components, and throws if any changes are\n * detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n *\n * @param lView The view which the change detection should be checked on.\n */\nexport function checkNoChangesInRootView(lView: LView): void {\n  setIsInCheckNoChangesMode(true);\n  try {\n    detectChangesInRootView(lView);\n  } finally {\n    setIsInCheckNoChangesMode(false);\n  }\n}\n\nfunction executeViewQueryFn<T>(\n    flags: RenderFlags, viewQueryFn: ViewQueriesFunction<{}>, component: T): void {\n  ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');\n  setCurrentQueryIndex(0);\n  viewQueryFn(flags, component);\n}\n\n\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n\n/**\n * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.\n *\n * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:\n * - a bound property name;\n * - a static parts of interpolated strings;\n *\n * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a\n * property binding metadata will be stored in `TView.data` at the same index as a bound value in\n * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the\n * following format:\n * - `propertyName` for bound properties;\n * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for\n * interpolated properties.\n *\n * @param tData `TData` where meta-data will be saved;\n * @param tNode `TNode` that is a target of the binding;\n * @param propertyName bound property name;\n * @param bindingIndex binding index in `LView`\n * @param interpolationParts static interpolation parts (for property interpolations)\n */\nexport function storePropertyBindingMetadata(\n    tData: TData, tNode: TNode, propertyName: string, bindingIndex: number,\n    ...interpolationParts: string[]) {\n  // Binding meta-data are stored only the first time a given property instruction is processed.\n  // Since we don't have a concept of the \"first update pass\" we need to check for presence of the\n  // binding meta-data to decide if one should be stored (or if was stored already).\n  if (tData[bindingIndex] === null) {\n    if (tNode.inputs == null || !tNode.inputs[propertyName]) {\n      const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);\n      propBindingIdxs.push(bindingIndex);\n      let bindingMetadata = propertyName;\n      if (interpolationParts.length > 0) {\n        bindingMetadata +=\n            INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);\n      }\n      tData[bindingIndex] = bindingMetadata;\n    }\n  }\n}\n\nexport const CLEAN_PROMISE = _CLEAN_PROMISE;\n\nexport function getOrCreateLViewCleanup(view: LView): any[] {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return view[CLEANUP] || (view[CLEANUP] = ngDevMode ? new LCleanup() : []);\n}\n\nexport function getOrCreateTViewCleanup(tView: TView): any[] {\n  return tView.cleanup || (tView.cleanup = ngDevMode ? new TCleanup() : []);\n}\n\n/**\n * There are cases where the sub component's renderer needs to be included\n * instead of the current renderer (see the componentSyntheticHost* instructions).\n */\nexport function loadComponentRenderer(\n    currentDef: DirectiveDef<any>|null, tNode: TNode, lView: LView): Renderer3 {\n  // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root\n  // component (see packages/core/src/render3/component.ts). This is not consistent with the process\n  // of creating inner components, when current directive index is available in the state. In order\n  // to avoid relying on current def being `null` (thus special-casing root component creation), the\n  // process of creating root component should be unified with the process of creating inner\n  // components.\n  if (currentDef === null || isComponentDef(currentDef)) {\n    lView = unwrapLView(lView[tNode.index])!;\n  }\n  return lView[RENDERER];\n}\n\n/** Handles an error thrown in an LView. */\nexport function handleError(lView: LView, error: any): void {\n  const injector = lView[INJECTOR];\n  const errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n  errorHandler && errorHandler.handleError(error);\n}\n\n/**\n * Set the inputs of directives at the current node to corresponding value.\n *\n * @param tView The current TView\n * @param lView the `LView` which contains the directives.\n * @param inputs mapping between the public \"input\" name and privately-known,\n *        possibly minified, property names to write to.\n * @param value Value to set.\n */\nexport function setInputsForProperty(\n    tView: TView, lView: LView, inputs: PropertyAliasValue, publicName: string, value: any): void {\n  for (let i = 0; i < inputs.length;) {\n    const index = inputs[i++] as number;\n    const privateName = inputs[i++] as string;\n    const instance = lView[index];\n    ngDevMode && assertIndexInRange(lView, index);\n    const def = tView.data[index] as DirectiveDef<any>;\n    if (def.setInput !== null) {\n      def.setInput!(instance, value, publicName, privateName);\n    } else {\n      instance[privateName] = value;\n    }\n  }\n}\n\n/**\n * Updates a text binding at a given index in a given LView.\n */\nexport function textBindingInternal(lView: LView, index: number, value: string): void {\n  ngDevMode && assertString(value, 'Value should be a string');\n  ngDevMode && assertNotSame(value, NO_CHANGE as any, 'value should not be NO_CHANGE');\n  ngDevMode && assertIndexInRange(lView, index);\n  const element = getNativeByIndex(index, lView) as any as RText;\n  ngDevMode && assertDefined(element, 'native element should exist');\n  updateTextNode(lView[RENDERER], element, value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {concatStringsWithSpace} from '../../util/stringify';\nimport {assertFirstCreatePass} from '../assert';\nimport {AttributeMarker, TAttributes, TNode} from '../interfaces/node';\nimport {getTView} from '../state';\n\n/**\n * Compute the static styling (class/style) from `TAttributes`.\n *\n * This function should be called during `firstCreatePass` only.\n *\n * @param tNode The `TNode` into which the styling information should be loaded.\n * @param attrs `TAttributes` containing the styling information.\n * @param writeToHost Where should the resulting static styles be written?\n *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`\n *   - `true` Write to `TNode.styles` / `TNode.classes`\n */\nexport function computeStaticStyling(\n    tNode: TNode, attrs: TAttributes|null, writeToHost: boolean): void {\n  ngDevMode &&\n      assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');\n  let styles: string|null = writeToHost ? tNode.styles : null;\n  let classes: string|null = writeToHost ? tNode.classes : null;\n  let mode: AttributeMarker|0 = 0;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const value = attrs[i];\n      if (typeof value === 'number') {\n        mode = value;\n      } else if (mode == AttributeMarker.Classes) {\n        classes = concatStringsWithSpace(classes, value as string);\n      } else if (mode == AttributeMarker.Styles) {\n        const style = value as string;\n        const styleValue = attrs[++i] as string;\n        styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');\n      }\n    }\n  }\n  writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;\n  writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from './injection_token';\nimport {Injector} from './injector';\nimport {InjectorMarkers} from './injector_marker';\n\n\n\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nexport const INJECTOR = new InjectionToken<Injector>(\n    'INJECTOR',\n    // Dissable tslint because this is const enum which gets inlined not top level prop access.\n    // tslint:disable-next-line: no-toplevel-property-access\n    InjectorMarkers.Injector as any,  // Special value used by Ivy to identify `Injector`.\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport '../util/ng_dev_mode';\n\nimport {OnDestroy} from '../interface/lifecycle_hooks';\nimport {AbstractType, Type} from '../interface/type';\nimport {FactoryFn, getFactoryDef} from '../render3/definition_factory';\nimport {throwCyclicDependencyError, throwInvalidProviderError, throwMixedMultiProviderError} from '../render3/errors_di';\nimport {deepForEach, newArray} from '../util/array_utils';\nimport {stringify} from '../util/stringify';\n\nimport {resolveForwardRef} from './forward_ref';\nimport {InjectionToken} from './injection_token';\nimport {Injector} from './injector';\nimport {catchInjectorError, injectArgs, NG_TEMP_TOKEN_PATH, setCurrentInjector, THROW_IF_NOT_FOUND, USE_VALUE, ɵɵinject} from './injector_compatibility';\nimport {INJECTOR} from './injector_token';\nimport {getInheritedInjectableDef, getInjectableDef, getInjectorDef, InjectorType, InjectorTypeWithProviders, ɵɵInjectableDef} from './interface/defs';\nimport {InjectFlags} from './interface/injector';\nimport {ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, StaticClassProvider, StaticProvider, TypeProvider, ValueProvider} from './interface/provider';\nimport {NullInjector} from './null_injector';\nimport {INJECTOR_SCOPE} from './scope';\n\n\n\n/**\n * Internal type for a single provider in a deep provider array.\n */\ntype SingleProvider = TypeProvider|ValueProvider|ClassProvider|ConstructorProvider|ExistingProvider|\n    FactoryProvider|StaticClassProvider;\n\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n */\nconst NOT_YET = {};\n\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n */\nconst CIRCULAR = {};\n\nconst EMPTY_ARRAY = [] as any[];\n\n/**\n * A lazily initialized NullInjector.\n */\nlet NULL_INJECTOR: Injector|undefined = undefined;\n\nfunction getNullInjector(): Injector {\n  if (NULL_INJECTOR === undefined) {\n    NULL_INJECTOR = new NullInjector();\n  }\n  return NULL_INJECTOR;\n}\n\n/**\n * An entry in the injector which tracks information about the given token, including a possible\n * current value.\n */\ninterface Record<T> {\n  factory: (() => T)|undefined;\n  value: T|{};\n  multi: any[]|undefined;\n}\n\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * @publicApi\n */\nexport function createInjector(\n    defType: /* InjectorType<any> */ any, parent: Injector|null = null,\n    additionalProviders: StaticProvider[]|null = null, name?: string): Injector {\n  const injector =\n      createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);\n  injector._resolveInjectorDefTypes();\n  return injector;\n}\n\n/**\n * Creates a new injector without eagerly resolving its injector types. Can be used in places\n * where resolving the injector types immediately can lead to an infinite loop. The injector types\n * should be resolved at a later point by calling `_resolveInjectorDefTypes`.\n */\nexport function createInjectorWithoutInjectorInstances(\n    defType: /* InjectorType<any> */ any, parent: Injector|null = null,\n    additionalProviders: StaticProvider[]|null = null, name?: string): R3Injector {\n  return new R3Injector(defType, additionalProviders, parent || getNullInjector(), name);\n}\n\nexport class R3Injector {\n  /**\n   * Map of tokens to records which contain the instances of those tokens.\n   * - `null` value implies that we don't have the record. Used by tree-shakable injectors\n   * to prevent further searches.\n   */\n  private records = new Map<Type<any>|AbstractType<any>|InjectionToken<any>, Record<any>|null>();\n\n  /**\n   * The transitive set of `InjectorType`s which define this injector.\n   */\n  private injectorDefTypes = new Set<InjectorType<any>>();\n\n  /**\n   * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n   */\n  private onDestroy = new Set<OnDestroy>();\n\n  /**\n   * Flag indicating this injector provides the APP_ROOT_SCOPE token, and thus counts as the\n   * root scope.\n   */\n  private readonly scope: 'root'|'platform'|null;\n\n  readonly source: string|null;\n\n  /**\n   * Flag indicating that this injector was previously destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n  private _destroyed = false;\n\n  constructor(\n      def: InjectorType<any>, additionalProviders: StaticProvider[]|null, readonly parent: Injector,\n      source: string|null = null) {\n    const dedupStack: InjectorType<any>[] = [];\n\n    // Start off by creating Records for every provider declared in every InjectorType\n    // included transitively in additional providers then do the same for `def`. This order is\n    // important because `def` may include providers that override ones in additionalProviders.\n    additionalProviders &&\n        deepForEach(\n            additionalProviders,\n            provider => this.processProvider(provider, def, additionalProviders));\n\n    deepForEach([def], injectorDef => this.processInjectorType(injectorDef, [], dedupStack));\n\n    // Make sure the INJECTOR token provides this injector.\n    this.records.set(INJECTOR, makeRecord(undefined, this));\n\n    // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n    // any injectable scoped to APP_ROOT_SCOPE.\n    const record = this.records.get(INJECTOR_SCOPE);\n    this.scope = record != null ? record.value : null;\n\n    // Source name, used for debugging\n    this.source = source || (typeof def === 'object' ? null : stringify(def));\n  }\n\n  /**\n   * Destroy the injector and release references to every instance or provider associated with it.\n   *\n   * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n   * hook was found.\n   */\n  destroy(): void {\n    this.assertNotDestroyed();\n\n    // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n    this._destroyed = true;\n    try {\n      // Call all the lifecycle hooks.\n      this.onDestroy.forEach(service => service.ngOnDestroy());\n    } finally {\n      // Release all references.\n      this.records.clear();\n      this.onDestroy.clear();\n      this.injectorDefTypes.clear();\n    }\n  }\n\n  get<T>(\n      token: Type<T>|AbstractType<T>|InjectionToken<T>, notFoundValue: any = THROW_IF_NOT_FOUND,\n      flags = InjectFlags.Default): T {\n    this.assertNotDestroyed();\n    // Set the injection context.\n    const previousInjector = setCurrentInjector(this);\n    try {\n      // Check for the SkipSelf flag.\n      if (!(flags & InjectFlags.SkipSelf)) {\n        // SkipSelf isn't set, check if the record belongs to this injector.\n        let record: Record<T>|undefined|null = this.records.get(token);\n        if (record === undefined) {\n          // No record, but maybe the token is scoped to this injector. Look for an injectable\n          // def with a scope matching this injector.\n          const def = couldBeInjectableType(token) && getInjectableDef(token);\n          if (def && this.injectableDefInScope(def)) {\n            // Found an injectable def and it's scoped to this injector. Pretend as if it was here\n            // all along.\n            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n          } else {\n            record = null;\n          }\n          this.records.set(token, record);\n        }\n        // If a record was found, get the instance for it and return it.\n        if (record != null /* NOT null || undefined */) {\n          return this.hydrate(token, record);\n        }\n      }\n\n      // Select the next injector based on the Self flag - if self is set, the next injector is\n      // the NullInjector, otherwise it's the parent.\n      const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n      // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue\n      // is undefined, the value is null, otherwise it's the notFoundValue.\n      notFoundValue = (flags & InjectFlags.Optional) && notFoundValue === THROW_IF_NOT_FOUND ?\n          null :\n          notFoundValue;\n      return nextInjector.get(token, notFoundValue);\n    } catch (e) {\n      if (e.name === 'NullInjectorError') {\n        const path: any[] = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(stringify(token));\n        if (previousInjector) {\n          // We still have a parent injector, keep throwing\n          throw e;\n        } else {\n          // Format & throw the final error message when we don't have any previous injector\n          return catchInjectorError(e, token, 'R3InjectorError', this.source);\n        }\n      } else {\n        throw e;\n      }\n    } finally {\n      // Lastly, clean up the state by restoring the previous injector.\n      setCurrentInjector(previousInjector);\n    }\n  }\n\n  /** @internal */\n  _resolveInjectorDefTypes() {\n    this.injectorDefTypes.forEach(defType => this.get(defType));\n  }\n\n  toString() {\n    const tokens = <string[]>[], records = this.records;\n    records.forEach((v, token) => tokens.push(stringify(token)));\n    return `R3Injector[${tokens.join(', ')}]`;\n  }\n\n  private assertNotDestroyed(): void {\n    if (this._destroyed) {\n      throw new Error('Injector has already been destroyed.');\n    }\n  }\n\n  /**\n   * Add an `InjectorType` or `InjectorTypeWithProviders` and all of its transitive providers\n   * to this injector.\n   *\n   * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\n   * the function will return \"true\" to indicate that the providers of the type definition need\n   * to be processed. This allows us to process providers of injector types after all imports of\n   * an injector definition are processed. (following View Engine semantics: see FW-1349)\n   */\n  private processInjectorType(\n      defOrWrappedDef: InjectorType<any>|InjectorTypeWithProviders<any>,\n      parents: InjectorType<any>[],\n      dedupStack: InjectorType<any>[]): defOrWrappedDef is InjectorTypeWithProviders<any> {\n    defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n    if (!defOrWrappedDef) return false;\n\n    // Either the defOrWrappedDef is an InjectorType (with injector def) or an\n    // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic\n    // read, so care is taken to only do the read once.\n\n    // First attempt to read the injector def (`ɵinj`).\n    let def = getInjectorDef(defOrWrappedDef);\n\n    // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.\n    const ngModule =\n        (def == null) && (defOrWrappedDef as InjectorTypeWithProviders<any>).ngModule || undefined;\n\n    // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,\n    // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type\n    // is the `ngModule`.\n    const defType: InjectorType<any> =\n        (ngModule === undefined) ? (defOrWrappedDef as InjectorType<any>) : ngModule;\n\n    // Check for circular dependencies.\n    if (ngDevMode && parents.indexOf(defType) !== -1) {\n      const defName = stringify(defType);\n      const path = parents.map(stringify);\n      throwCyclicDependencyError(defName, path);\n    }\n\n    // Check for multiple imports of the same module\n    const isDuplicate = dedupStack.indexOf(defType) !== -1;\n\n    // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n    // `InjectorDef` is on its `ngModule`.\n    if (ngModule !== undefined) {\n      def = getInjectorDef(ngModule);\n    }\n\n    // If no definition was found, it might be from exports. Remove it.\n    if (def == null) {\n      return false;\n    }\n\n    // Add providers in the same way that @NgModule resolution did:\n\n    // First, include providers from any imports.\n    if (def.imports != null && !isDuplicate) {\n      // Before processing defType's imports, add it to the set of parents. This way, if it ends\n      // up deeply importing itself, this can be detected.\n      ngDevMode && parents.push(defType);\n      // Add it to the set of dedups. This way we can detect multiple imports of the same module\n      dedupStack.push(defType);\n\n      let importTypesWithProviders: (InjectorTypeWithProviders<any>[])|undefined;\n      try {\n        deepForEach(def.imports, imported => {\n          if (this.processInjectorType(imported, parents, dedupStack)) {\n            if (importTypesWithProviders === undefined) importTypesWithProviders = [];\n            // If the processed import is an injector type with providers, we store it in the\n            // list of import types with providers, so that we can process those afterwards.\n            importTypesWithProviders.push(imported);\n          }\n        });\n      } finally {\n        // Remove it from the parents set when finished.\n        ngDevMode && parents.pop();\n      }\n\n      // Imports which are declared with providers (TypeWithProviders) need to be processed\n      // after all imported modules are processed. This is similar to how View Engine\n      // processes/merges module imports in the metadata resolver. See: FW-1349.\n      if (importTypesWithProviders !== undefined) {\n        for (let i = 0; i < importTypesWithProviders.length; i++) {\n          const {ngModule, providers} = importTypesWithProviders[i];\n          deepForEach(\n              providers!,\n              provider => this.processProvider(provider, ngModule, providers || EMPTY_ARRAY));\n        }\n      }\n    }\n    // Track the InjectorType and add a provider for it. It's important that this is done after the\n    // def's imports.\n    this.injectorDefTypes.add(defType);\n    this.records.set(defType, makeRecord(def.factory, NOT_YET));\n\n    // Next, include providers listed on the definition itself.\n    const defProviders = def.providers;\n    if (defProviders != null && !isDuplicate) {\n      const injectorType = defOrWrappedDef as InjectorType<any>;\n      deepForEach(\n          defProviders, provider => this.processProvider(provider, injectorType, defProviders));\n    }\n\n    return (\n        ngModule !== undefined &&\n        (defOrWrappedDef as InjectorTypeWithProviders<any>).providers !== undefined);\n  }\n\n  /**\n   * Process a `SingleProvider` and add it.\n   */\n  private processProvider(\n      provider: SingleProvider, ngModuleType: InjectorType<any>, providers: any[]): void {\n    // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n    // property.\n    provider = resolveForwardRef(provider);\n    let token: any =\n        isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n\n    // Construct a `Record` for the provider.\n    const record = providerToRecord(provider, ngModuleType, providers);\n\n    if (!isTypeProvider(provider) && provider.multi === true) {\n      // If the provider indicates that it's a multi-provider, process it specially.\n      // First check whether it's been defined already.\n      let multiRecord = this.records.get(token);\n      if (multiRecord) {\n        // It has. Throw a nice error if\n        if (ngDevMode && multiRecord.multi === undefined) {\n          throwMixedMultiProviderError();\n        }\n      } else {\n        multiRecord = makeRecord(undefined, NOT_YET, true);\n        multiRecord.factory = () => injectArgs(multiRecord!.multi!);\n        this.records.set(token, multiRecord);\n      }\n      token = provider;\n      multiRecord.multi!.push(provider);\n    } else {\n      const existing = this.records.get(token);\n      if (ngDevMode && existing && existing.multi !== undefined) {\n        throwMixedMultiProviderError();\n      }\n    }\n    this.records.set(token, record);\n  }\n\n  private hydrate<T>(token: Type<T>|AbstractType<T>|InjectionToken<T>, record: Record<T>): T {\n    if (ngDevMode && record.value === CIRCULAR) {\n      throwCyclicDependencyError(stringify(token));\n    } else if (record.value === NOT_YET) {\n      record.value = CIRCULAR;\n      record.value = record.factory!();\n    }\n    if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n      this.onDestroy.add(record.value);\n    }\n    return record.value as T;\n  }\n\n  private injectableDefInScope(def: ɵɵInjectableDef<any>): boolean {\n    if (!def.providedIn) {\n      return false;\n    } else if (typeof def.providedIn === 'string') {\n      return def.providedIn === 'any' || (def.providedIn === this.scope);\n    } else {\n      return this.injectorDefTypes.has(def.providedIn);\n    }\n  }\n}\n\nfunction injectableDefOrInjectorDefFactory(token: Type<any>|AbstractType<any>|\n                                           InjectionToken<any>): FactoryFn<any> {\n  // Most tokens will have an injectable def directly on them, which specifies a factory directly.\n  const injectableDef = getInjectableDef(token);\n  const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);\n\n  if (factory !== null) {\n    return factory;\n  }\n\n  // If the token is an NgModule, it's also injectable but the factory is on its injector def\n  // (`ɵinj`)\n  const injectorDef = getInjectorDef(token);\n  if (injectorDef !== null) {\n    return injectorDef.factory;\n  }\n\n  // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.\n  // If it's missing that, it's an error.\n  if (token instanceof InjectionToken) {\n    throw new Error(`Token ${stringify(token)} is missing a ɵprov definition.`);\n  }\n\n  // Undecorated types can sometimes be created if they have no constructor arguments.\n  if (token instanceof Function) {\n    return getUndecoratedInjectableFactory(token);\n  }\n\n  // There was no way to resolve a factory for this token.\n  throw new Error('unreachable');\n}\n\nfunction getUndecoratedInjectableFactory(token: Function) {\n  // If the token has parameters then it has dependencies that we cannot resolve implicitly.\n  const paramLength = token.length;\n  if (paramLength > 0) {\n    const args: string[] = newArray(paramLength, '?');\n    throw new Error(`Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);\n  }\n\n  // The constructor function appears to have no parameters.\n  // This might be because it inherits from a super-class. In which case, use an injectable\n  // def from an ancestor if there is one.\n  // Otherwise this really is a simple class with no dependencies, so return a factory that\n  // just instantiates the zero-arg constructor.\n  const inheritedInjectableDef = getInheritedInjectableDef(token);\n  if (inheritedInjectableDef !== null) {\n    return () => inheritedInjectableDef.factory(token as Type<any>);\n  } else {\n    return () => new (token as Type<any>)();\n  }\n}\n\nfunction providerToRecord(\n    provider: SingleProvider, ngModuleType: InjectorType<any>, providers: any[]): Record<any> {\n  if (isValueProvider(provider)) {\n    return makeRecord(undefined, provider.useValue);\n  } else {\n    const factory: (() => any)|undefined = providerToFactory(provider, ngModuleType, providers);\n    return makeRecord(factory, NOT_YET);\n  }\n}\n\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param provider provider to convert to factory\n */\nexport function providerToFactory(\n    provider: SingleProvider, ngModuleType?: InjectorType<any>, providers?: any[]): () => any {\n  let factory: (() => any)|undefined = undefined;\n  if (isTypeProvider(provider)) {\n    const unwrappedProvider = resolveForwardRef(provider);\n    return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);\n  } else {\n    if (isValueProvider(provider)) {\n      factory = () => resolveForwardRef(provider.useValue);\n    } else if (isFactoryProvider(provider)) {\n      factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n    } else if (isExistingProvider(provider)) {\n      factory = () => ɵɵinject(resolveForwardRef(provider.useExisting));\n    } else {\n      const classRef = resolveForwardRef(\n          provider &&\n          ((provider as StaticClassProvider | ClassProvider).useClass || provider.provide));\n      if (ngDevMode && !classRef) {\n        throwInvalidProviderError(ngModuleType, providers, provider);\n      }\n      if (hasDeps(provider)) {\n        factory = () => new (classRef)(...injectArgs(provider.deps));\n      } else {\n        return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);\n      }\n    }\n  }\n  return factory;\n}\n\nfunction makeRecord<T>(\n    factory: (() => T)|undefined, value: T|{}, multi: boolean = false): Record<T> {\n  return {\n    factory: factory,\n    value: value,\n    multi: multi ? [] : undefined,\n  };\n}\n\nfunction isValueProvider(value: SingleProvider): value is ValueProvider {\n  return value !== null && typeof value == 'object' && USE_VALUE in value;\n}\n\nfunction isExistingProvider(value: SingleProvider): value is ExistingProvider {\n  return !!(value && (value as ExistingProvider).useExisting);\n}\n\nfunction isFactoryProvider(value: SingleProvider): value is FactoryProvider {\n  return !!(value && (value as FactoryProvider).useFactory);\n}\n\nexport function isTypeProvider(value: SingleProvider): value is TypeProvider {\n  return typeof value === 'function';\n}\n\nexport function isClassProvider(value: SingleProvider): value is ClassProvider {\n  return !!(value as StaticClassProvider | ClassProvider).useClass;\n}\n\nfunction hasDeps(value: ClassProvider|ConstructorProvider|\n                 StaticClassProvider): value is ClassProvider&{deps: any[]} {\n  return !!(value as any).deps;\n}\n\nfunction hasOnDestroy(value: any): value is OnDestroy {\n  return value !== null && typeof value === 'object' &&\n      typeof (value as OnDestroy).ngOnDestroy === 'function';\n}\n\nfunction couldBeInjectableType(value: any): value is Type<any>|AbstractType<any>|\n    InjectionToken<any> {\n  return (typeof value === 'function') ||\n      (typeof value === 'object' && value instanceof InjectionToken);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringify} from '../util/stringify';\nimport {Injector} from './injector';\nimport {THROW_IF_NOT_FOUND} from './injector_compatibility';\n\nexport class NullInjector implements Injector {\n  get(token: any, notFoundValue: any = THROW_IF_NOT_FOUND): any {\n    if (notFoundValue === THROW_IF_NOT_FOUND) {\n      const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n      error.name = 'NullInjectorError';\n      throw error;\n    }\n    return notFoundValue;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from './injection_token';\n\n\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nexport const INJECTOR_SCOPE = new InjectionToken<'root'|'platform'|null>('Set Injector scope.');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AbstractType, Type} from '../interface/type';\nimport {stringify} from '../util/stringify';\nimport {resolveForwardRef} from './forward_ref';\nimport {InjectionToken} from './injection_token';\nimport {catchInjectorError, formatError, NG_TEMP_TOKEN_PATH, setCurrentInjector, THROW_IF_NOT_FOUND, USE_VALUE, ɵɵinject} from './injector_compatibility';\nimport {InjectorMarkers} from './injector_marker';\nimport {INJECTOR} from './injector_token';\nimport {getInjectableDef, ɵɵdefineInjectable} from './interface/defs';\nimport {InjectFlags} from './interface/injector';\nimport {ConstructorProvider, ExistingProvider, FactoryProvider, StaticClassProvider, StaticProvider, ValueProvider} from './interface/provider';\nimport {Inject, Optional, Self, SkipSelf} from './metadata';\nimport {NullInjector} from './null_injector';\nimport {createInjector} from './r3_injector';\nimport {INJECTOR_SCOPE} from './scope';\n\nexport function INJECTOR_IMPL__PRE_R3__(\n    providers: StaticProvider[], parent: Injector|undefined, name: string) {\n  return new StaticInjector(providers, parent, name);\n}\n\nexport function INJECTOR_IMPL__POST_R3__(\n    providers: StaticProvider[], parent: Injector|undefined, name: string) {\n  return createInjector({name: name}, parent, providers, name);\n}\n\nexport const INJECTOR_IMPL = INJECTOR_IMPL__PRE_R3__;\n\n/**\n * Concrete injectors implement this interface. Injectors are configured\n * with [providers](guide/glossary#provider) that associate\n * dependencies of various types with [injection tokens](guide/glossary#di-token).\n *\n * @see [\"DI Providers\"](guide/dependency-injection-providers).\n * @see `StaticProvider`\n *\n * @usageNotes\n *\n *  The following example creates a service injector instance.\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Usage example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nexport abstract class Injector {\n  static THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\n  static NULL: Injector = new NullInjector();\n\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   */\n  abstract get<T>(\n      token: Type<T>|AbstractType<T>|InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  /**\n   * @deprecated from v4.0.0 use Type<T>, AbstractType<T> or InjectionToken<T>\n   * @suppress {duplicate}\n   */\n  abstract get(token: any, notFoundValue?: any): any;\n\n  /**\n   * @deprecated from v5 use the new signature Injector.create(options)\n   */\n  static create(providers: StaticProvider[], parent?: Injector): Injector;\n\n  /**\n   * Creates a new injector instance that provides one or more dependencies,\n   * according to a given type or types of `StaticProvider`.\n   *\n   * @param options An object with the following properties:\n   * * `providers`: An array of providers of the [StaticProvider type](api/core/StaticProvider).\n   * * `parent`: (optional) A parent injector.\n   * * `name`: (optional) A developer-defined identifying name for the new injector.\n   *\n   * @returns The new injector instance.\n   *\n   */\n  static create(options: {providers: StaticProvider[], parent?: Injector, name?: string}): Injector;\n\n\n  static create(\n      options: StaticProvider[]|{providers: StaticProvider[], parent?: Injector, name?: string},\n      parent?: Injector): Injector {\n    if (Array.isArray(options)) {\n      return INJECTOR_IMPL(options, parent, '');\n    } else {\n      return INJECTOR_IMPL(options.providers, options.parent, options.name || '');\n    }\n  }\n\n  /** @nocollapse */\n  static ɵprov = ɵɵdefineInjectable({\n    token: Injector,\n    providedIn: 'any' as any,\n    factory: () => ɵɵinject(INJECTOR),\n  });\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__ = InjectorMarkers.Injector;\n}\n\n\n\nconst IDENT = function<T>(value: T): T {\n  return value;\n};\nconst EMPTY = <any[]>[];\nconst CIRCULAR = IDENT;\nconst MULTI_PROVIDER_FN = function(): any[] {\n  return Array.prototype.slice.call(arguments);\n};\n\nconst enum OptionFlags {\n  Optional = 1 << 0,\n  CheckSelf = 1 << 1,\n  CheckParent = 1 << 2,\n  Default = CheckSelf | CheckParent\n}\nconst NO_NEW_LINE = 'ɵ';\n\nexport class StaticInjector implements Injector {\n  readonly parent: Injector;\n  readonly source: string|null;\n  readonly scope: string|null;\n\n  private _records: Map<any, Record|null>;\n\n  constructor(\n      providers: StaticProvider[], parent: Injector = Injector.NULL, source: string|null = null) {\n    this.parent = parent;\n    this.source = source;\n    const records = this._records = new Map<any, Record>();\n    records.set(\n        Injector, <Record>{token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false});\n    records.set(\n        INJECTOR, <Record>{token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false});\n    this.scope = recursivelyProcessProviders(records, providers);\n  }\n\n  get<T>(token: Type<T>|AbstractType<T>|InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags):\n      T;\n  get(token: any, notFoundValue?: any): any;\n  get(token: any, notFoundValue?: any, flags: InjectFlags = InjectFlags.Default): any {\n    const records = this._records;\n    let record = records.get(token);\n    if (record === undefined) {\n      // This means we have never seen this record, see if it is tree shakable provider.\n      const injectableDef = getInjectableDef(token);\n      if (injectableDef) {\n        const providedIn = injectableDef && injectableDef.providedIn;\n        if (providedIn === 'any' || providedIn != null && providedIn === this.scope) {\n          records.set(\n              token,\n              record = resolveProvider(\n                  {provide: token, useFactory: injectableDef.factory, deps: EMPTY}));\n        }\n      }\n      if (record === undefined) {\n        // Set record to null to make sure that we don't go through expensive lookup above again.\n        records.set(token, null);\n      }\n    }\n    let lastInjector = setCurrentInjector(this);\n    try {\n      return tryResolveToken(token, record, records, this.parent, notFoundValue, flags);\n    } catch (e) {\n      return catchInjectorError(e, token, 'StaticInjectorError', this.source);\n    } finally {\n      setCurrentInjector(lastInjector);\n    }\n  }\n\n  toString() {\n    const tokens = <string[]>[], records = this._records;\n    records.forEach((v, token) => tokens.push(stringify(token)));\n    return `StaticInjector[${tokens.join(', ')}]`;\n  }\n}\n\ntype SupportedProvider =\n    ValueProvider|ExistingProvider|StaticClassProvider|ConstructorProvider|FactoryProvider;\n\ninterface Record {\n  fn: Function;\n  useNew: boolean;\n  deps: DependencyRecord[];\n  value: any;\n}\n\ninterface DependencyRecord {\n  token: any;\n  options: number;\n}\n\nfunction resolveProvider(provider: SupportedProvider): Record {\n  const deps = computeDeps(provider);\n  let fn: Function = IDENT;\n  let value: any = EMPTY;\n  let useNew: boolean = false;\n  let provide = resolveForwardRef(provider.provide);\n  if (USE_VALUE in provider) {\n    // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n    value = (provider as ValueProvider).useValue;\n  } else if ((provider as FactoryProvider).useFactory) {\n    fn = (provider as FactoryProvider).useFactory;\n  } else if ((provider as ExistingProvider).useExisting) {\n    // Just use IDENT\n  } else if ((provider as StaticClassProvider).useClass) {\n    useNew = true;\n    fn = resolveForwardRef((provider as StaticClassProvider).useClass);\n  } else if (typeof provide == 'function') {\n    useNew = true;\n    fn = provide;\n  } else {\n    throw staticError(\n        'StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable',\n        provider);\n  }\n  return {deps, fn, useNew, value};\n}\n\nfunction multiProviderMixError(token: any) {\n  return staticError('Cannot mix multi providers and regular providers', token);\n}\n\nfunction recursivelyProcessProviders(records: Map<any, Record>, provider: StaticProvider): string|\n    null {\n  let scope: string|null = null;\n  if (provider) {\n    provider = resolveForwardRef(provider);\n    if (Array.isArray(provider)) {\n      // if we have an array recurse into the array\n      for (let i = 0; i < provider.length; i++) {\n        scope = recursivelyProcessProviders(records, provider[i]) || scope;\n      }\n    } else if (typeof provider === 'function') {\n      // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n      // error messages\n      throw staticError('Function/Class not supported', provider);\n    } else if (provider && typeof provider === 'object' && provider.provide) {\n      // At this point we have what looks like a provider: {provide: ?, ....}\n      let token = resolveForwardRef(provider.provide);\n      const resolvedProvider = resolveProvider(provider);\n      if (provider.multi === true) {\n        // This is a multi provider.\n        let multiProvider: Record|undefined = records.get(token);\n        if (multiProvider) {\n          if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n            throw multiProviderMixError(token);\n          }\n        } else {\n          // Create a placeholder factory which will look up the constituents of the multi provider.\n          records.set(token, multiProvider = <Record>{\n            token: provider.provide,\n            deps: [],\n            useNew: false,\n            fn: MULTI_PROVIDER_FN,\n            value: EMPTY\n          });\n        }\n        // Treat the provider as the token.\n        token = provider;\n        multiProvider.deps.push({token, options: OptionFlags.Default});\n      }\n      const record = records.get(token);\n      if (record && record.fn == MULTI_PROVIDER_FN) {\n        throw multiProviderMixError(token);\n      }\n      if (token === INJECTOR_SCOPE) {\n        scope = resolvedProvider.value;\n      }\n      records.set(token, resolvedProvider);\n    } else {\n      throw staticError('Unexpected provider', provider);\n    }\n  }\n  return scope;\n}\n\nfunction tryResolveToken(\n    token: any, record: Record|undefined|null, records: Map<any, Record|null>, parent: Injector,\n    notFoundValue: any, flags: InjectFlags): any {\n  try {\n    return resolveToken(token, record, records, parent, notFoundValue, flags);\n  } catch (e) {\n    // ensure that 'e' is of type Error.\n    if (!(e instanceof Error)) {\n      e = new Error(e);\n    }\n    const path: any[] = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n    path.unshift(token);\n    if (record && record.value == CIRCULAR) {\n      // Reset the Circular flag.\n      record.value = EMPTY;\n    }\n    throw e;\n  }\n}\n\nfunction resolveToken(\n    token: any, record: Record|undefined|null, records: Map<any, Record|null>, parent: Injector,\n    notFoundValue: any, flags: InjectFlags): any {\n  let value;\n  if (record && !(flags & InjectFlags.SkipSelf)) {\n    // If we don't have a record, this implies that we don't own the provider hence don't know how\n    // to resolve it.\n    value = record.value;\n    if (value == CIRCULAR) {\n      throw Error(NO_NEW_LINE + 'Circular dependency');\n    } else if (value === EMPTY) {\n      record.value = CIRCULAR;\n      let obj = undefined;\n      let useNew = record.useNew;\n      let fn = record.fn;\n      let depRecords = record.deps;\n      let deps = EMPTY;\n      if (depRecords.length) {\n        deps = [];\n        for (let i = 0; i < depRecords.length; i++) {\n          const depRecord: DependencyRecord = depRecords[i];\n          const options = depRecord.options;\n          const childRecord =\n              options & OptionFlags.CheckSelf ? records.get(depRecord.token) : undefined;\n          deps.push(tryResolveToken(\n              // Current Token to resolve\n              depRecord.token,\n              // A record which describes how to resolve the token.\n              // If undefined, this means we don't have such a record\n              childRecord,\n              // Other records we know about.\n              records,\n              // If we don't know how to resolve dependency and we should not check parent for it,\n              // than pass in Null injector.\n              !childRecord && !(options & OptionFlags.CheckParent) ? Injector.NULL : parent,\n              options & OptionFlags.Optional ? null : Injector.THROW_IF_NOT_FOUND,\n              InjectFlags.Default));\n        }\n      }\n      record.value = value = useNew ? new (fn as any)(...deps) : fn.apply(obj, deps);\n    }\n  } else if (!(flags & InjectFlags.Self)) {\n    value = parent.get(token, notFoundValue, InjectFlags.Default);\n  } else if (!(flags & InjectFlags.Optional)) {\n    value = Injector.NULL.get(token, notFoundValue);\n  } else {\n    value = Injector.NULL.get(token, typeof notFoundValue !== 'undefined' ? notFoundValue : null);\n  }\n  return value;\n}\n\nfunction computeDeps(provider: StaticProvider): DependencyRecord[] {\n  let deps: DependencyRecord[] = EMPTY;\n  const providerDeps: any[] =\n      (provider as ExistingProvider & StaticClassProvider & ConstructorProvider).deps;\n  if (providerDeps && providerDeps.length) {\n    deps = [];\n    for (let i = 0; i < providerDeps.length; i++) {\n      let options = OptionFlags.Default;\n      let token = resolveForwardRef(providerDeps[i]);\n      if (Array.isArray(token)) {\n        for (let j = 0, annotations = token; j < annotations.length; j++) {\n          const annotation = annotations[j];\n          if (annotation instanceof Optional || annotation == Optional) {\n            options = options | OptionFlags.Optional;\n          } else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n            options = options & ~OptionFlags.CheckSelf;\n          } else if (annotation instanceof Self || annotation == Self) {\n            options = options & ~OptionFlags.CheckParent;\n          } else if (annotation instanceof Inject) {\n            token = (annotation as Inject).token;\n          } else {\n            token = resolveForwardRef(annotation);\n          }\n        }\n      }\n      deps.push({token, options});\n    }\n  } else if ((provider as ExistingProvider).useExisting) {\n    const token = resolveForwardRef((provider as ExistingProvider).useExisting);\n    deps = [{token, options: OptionFlags.Default}];\n  } else if (!providerDeps && !(USE_VALUE in provider)) {\n    // useValue & useExisting are the only ones which are exempt from deps all others need it.\n    throw staticError('\\'deps\\' required', provider);\n  }\n  return deps;\n}\n\nfunction staticError(text: string, obj: any): Error {\n  return new Error(formatError(text, obj, 'StaticInjectorError'));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// We are temporarily importing the existing viewEngine from core so we can be sure we are\n// correctly implementing its interfaces for backwards compatibility.\nimport {Injector} from '../di/injector';\nimport {Type} from '../interface/type';\nimport {Sanitizer} from '../sanitization/sanitizer';\nimport {assertDefined, assertIndexInRange} from '../util/assert';\nimport {assertComponentType} from './assert';\nimport {getComponentDef} from './definition';\nimport {diPublicInInjector, getOrCreateNodeInjectorForNode} from './di';\nimport {throwProviderNotFoundError} from './errors_di';\nimport {registerPostOrderHooks} from './hooks';\nimport {addToViewTree, CLEAN_PROMISE, createLView, createTView, getOrCreateTComponentView, getOrCreateTNode, initTNodeFlags, instantiateRootComponent, invokeHostBindingsInCreationMode, locateHostElement, markAsComponentHost, refreshView, registerHostBindingOpCodes, renderView} from './instructions/shared';\nimport {ComponentDef, ComponentType, RenderFlags} from './interfaces/definition';\nimport {TElementNode, TNodeType} from './interfaces/node';\nimport {PlayerHandler} from './interfaces/player';\nimport {domRendererFactory3, Renderer3, RendererFactory3} from './interfaces/renderer';\nimport {RElement} from './interfaces/renderer_dom';\nimport {CONTEXT, HEADER_OFFSET, LView, LViewFlags, RootContext, RootContextFlags, TVIEW, TViewType} from './interfaces/view';\nimport {writeDirectClass, writeDirectStyle} from './node_manipulation';\nimport {enterView, getCurrentTNode, leaveView, setSelectedIndex} from './state';\nimport {computeStaticStyling} from './styling/static_styling';\nimport {setUpAttributes} from './util/attrs_utils';\nimport {publishDefaultGlobalUtils} from './util/global_utils';\nimport {defaultScheduler} from './util/misc_utils';\nimport {getRootContext} from './util/view_traversal_utils';\nimport {readPatchedLView} from './util/view_utils';\n\n\n\n/** Options that control how the component should be bootstrapped. */\nexport interface CreateComponentOptions {\n  /** Which renderer factory to use. */\n  rendererFactory?: RendererFactory3;\n\n  /** A custom sanitizer instance */\n  sanitizer?: Sanitizer;\n\n  /** A custom animation player handler */\n  playerHandler?: PlayerHandler;\n\n  /**\n   * Host element on which the component will be bootstrapped. If not specified,\n   * the component definition's `tag` is used to query the existing DOM for the\n   * element to bootstrap.\n   */\n  host?: RElement|string;\n\n  /** Module injector for the component. If unspecified, the injector will be NULL_INJECTOR. */\n  injector?: Injector;\n\n  /**\n   * List of features to be applied to the created component. Features are simply\n   * functions that decorate a component with a certain behavior.\n   *\n   * Typically, the features in this list are features that cannot be added to the\n   * other features list in the component definition because they rely on other factors.\n   *\n   * Example: `LifecycleHooksFeature` is a function that adds lifecycle hook capabilities\n   * to root components in a tree-shakable way. It cannot be added to the component\n   * features list because there's no way of knowing when the component will be used as\n   * a root component.\n   */\n  hostFeatures?: HostFeature[];\n\n  /**\n   * A function which is used to schedule change detection work in the future.\n   *\n   * When marking components as dirty, it is necessary to schedule the work of\n   * change detection in the future. This is done to coalesce multiple\n   * {@link markDirty} calls into a single changed detection processing.\n   *\n   * The default value of the scheduler is the `requestAnimationFrame` function.\n   *\n   * It is also useful to override this function for testing purposes.\n   */\n  scheduler?: (work: () => void) => void;\n}\n\n/** See CreateComponentOptions.hostFeatures */\ntype HostFeature = (<T>(component: T, componentDef: ComponentDef<T>) => void);\n\n// TODO: A hack to not pull in the NullInjector from @angular/core.\nexport const NULL_INJECTOR: Injector = {\n  get: (token: any, notFoundValue?: any) => {\n    throwProviderNotFoundError(token, 'NullInjector');\n  }\n};\n\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {@link ViewContainer#createComponent}.\n *\n * @param componentType Component to bootstrap\n * @param options Optional parameters which control bootstrapping\n */\nexport function renderComponent<T>(\n    componentType: ComponentType<T>|\n    Type<T>/* Type as workaround for: Microsoft/TypeScript/issues/4881 */\n    ,\n    opts: CreateComponentOptions = {}): T {\n  ngDevMode && publishDefaultGlobalUtils();\n  ngDevMode && assertComponentType(componentType);\n\n  const rendererFactory = opts.rendererFactory || domRendererFactory3;\n  const sanitizer = opts.sanitizer || null;\n  const componentDef = getComponentDef<T>(componentType)!;\n  if (componentDef.type != componentType) (componentDef as {type: Type<any>}).type = componentType;\n\n  // The first index of the first selector is the tag name.\n  const componentTag = componentDef.selectors![0]![0] as string;\n  const hostRenderer = rendererFactory.createRenderer(null, null);\n  const hostRNode =\n      locateHostElement(hostRenderer, opts.host || componentTag, componentDef.encapsulation);\n  const rootFlags = componentDef.onPush ? LViewFlags.Dirty | LViewFlags.IsRoot :\n                                          LViewFlags.CheckAlways | LViewFlags.IsRoot;\n  const rootContext = createRootContext(opts.scheduler, opts.playerHandler);\n\n  const renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n  const rootTView = createTView(TViewType.Root, null, null, 1, 0, null, null, null, null, null);\n  const rootView: LView = createLView(\n      null, rootTView, rootContext, rootFlags, null, null, rendererFactory, renderer, null,\n      opts.injector || null);\n\n  enterView(rootView);\n  let component: T;\n\n  try {\n    if (rendererFactory.begin) rendererFactory.begin();\n    const componentView = createRootComponentView(\n        hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);\n    component = createRootComponent(\n        componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n\n    // create mode pass\n    renderView(rootTView, rootView, null);\n    // update mode pass\n    refreshView(rootTView, rootView, null, null);\n\n  } finally {\n    leaveView();\n    if (rendererFactory.end) rendererFactory.end();\n  }\n\n  return component;\n}\n\n/**\n * Creates the root component view and the root component node.\n *\n * @param rNode Render host element.\n * @param def ComponentDef\n * @param rootView The parent view where the host node is stored\n * @param rendererFactory Factory to be used for creating child renderers.\n * @param hostRenderer The current renderer\n * @param sanitizer The sanitizer, if provided\n *\n * @returns Component view created\n */\nexport function createRootComponentView(\n    rNode: RElement|null, def: ComponentDef<any>, rootView: LView,\n    rendererFactory: RendererFactory3, hostRenderer: Renderer3, sanitizer?: Sanitizer|null): LView {\n  const tView = rootView[TVIEW];\n  const index = HEADER_OFFSET;\n  ngDevMode && assertIndexInRange(rootView, index);\n  rootView[index] = rNode;\n  // '#host' is added here as we don't know the real host DOM name (we don't want to read it) and at\n  // the same time we want to communicate the debug `TNode` that this is a special `TNode`\n  // representing a host element.\n  const tNode: TElementNode = getOrCreateTNode(tView, index, TNodeType.Element, '#host', null);\n  const mergedAttrs = tNode.mergedAttrs = def.hostAttrs;\n  if (mergedAttrs !== null) {\n    computeStaticStyling(tNode, mergedAttrs, true);\n    if (rNode !== null) {\n      setUpAttributes(hostRenderer, rNode, mergedAttrs);\n      if (tNode.classes !== null) {\n        writeDirectClass(hostRenderer, rNode, tNode.classes);\n      }\n      if (tNode.styles !== null) {\n        writeDirectStyle(hostRenderer, rNode, tNode.styles);\n      }\n    }\n  }\n\n  const viewRenderer = rendererFactory.createRenderer(rNode, def);\n  const componentView = createLView(\n      rootView, getOrCreateTComponentView(def), null,\n      def.onPush ? LViewFlags.Dirty : LViewFlags.CheckAlways, rootView[index], tNode,\n      rendererFactory, viewRenderer, sanitizer || null, null);\n\n  if (tView.firstCreatePass) {\n    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), tView, def.type);\n    markAsComponentHost(tView, tNode);\n    initTNodeFlags(tNode, rootView.length, 1);\n  }\n\n  addToViewTree(rootView, componentView);\n\n  // Store component view at node index, with node as the HOST\n  return rootView[index] = componentView;\n}\n\n/**\n * Creates a root component and sets it up with features and host bindings. Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n */\nexport function createRootComponent<T>(\n    componentView: LView, componentDef: ComponentDef<T>, rootLView: LView, rootContext: RootContext,\n    hostFeatures: HostFeature[]|null): any {\n  const tView = rootLView[TVIEW];\n  // Create directive instance with factory() and store at next index in viewData\n  const component = instantiateRootComponent(tView, rootLView, componentDef);\n\n  rootContext.components.push(component);\n  componentView[CONTEXT] = component;\n\n  hostFeatures && hostFeatures.forEach((feature) => feature(component, componentDef));\n\n  // We want to generate an empty QueryList for root content queries for backwards\n  // compatibility with ViewEngine.\n  if (componentDef.contentQueries) {\n    const tNode = getCurrentTNode()!;\n    ngDevMode && assertDefined(tNode, 'TNode expected');\n    componentDef.contentQueries(RenderFlags.Create, component, tNode.directiveStart);\n  }\n\n  const rootTNode = getCurrentTNode()!;\n  ngDevMode && assertDefined(rootTNode, 'tNode should have been already created');\n  if (tView.firstCreatePass &&\n      (componentDef.hostBindings !== null || componentDef.hostAttrs !== null)) {\n    setSelectedIndex(rootTNode.index);\n\n    const rootTView = rootLView[TVIEW];\n    registerHostBindingOpCodes(\n        rootTView, rootTNode, rootLView, rootTNode.directiveStart, rootTNode.directiveEnd,\n        componentDef);\n\n    invokeHostBindingsInCreationMode(componentDef, component);\n  }\n  return component;\n}\n\n\nexport function createRootContext(\n    scheduler?: (workFn: () => void) => void, playerHandler?: PlayerHandler|null): RootContext {\n  return {\n    components: [],\n    scheduler: scheduler || defaultScheduler,\n    clean: CLEAN_PROMISE,\n    playerHandler: playerHandler || null,\n    flags: RootContextFlags.Empty\n  };\n}\n\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});\n * ```\n */\nexport function LifecycleHooksFeature(component: any, def: ComponentDef<any>): void {\n  const lView = readPatchedLView(component)!;\n  ngDevMode && assertDefined(lView, 'LView is required');\n  const tView = lView[TVIEW];\n  const tNode = getCurrentTNode()!;\n  ngDevMode && assertDefined(tNode, 'TNode is required');\n  registerPostOrderHooks(tView, tNode);\n}\n\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param component Component to wait upon\n * @returns Promise which resolves when the component is rendered.\n */\nexport function whenRendered(component: any): Promise<null> {\n  return getRootContext(component).clean;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type, Writable} from '../../interface/type';\nimport {fillProperties} from '../../util/property';\nimport {EMPTY_ARRAY, EMPTY_OBJ} from '../empty';\nimport {ComponentDef, ContentQueriesFunction, DirectiveDef, DirectiveDefFeature, HostBindingsFunction, RenderFlags, ViewQueriesFunction} from '../interfaces/definition';\nimport {TAttributes} from '../interfaces/node';\nimport {isComponentDef} from '../interfaces/type_checks';\nimport {mergeHostAttrs} from '../util/attrs_utils';\n\nexport function getSuperType(type: Type<any>): Type<any>&\n    {ɵcmp?: ComponentDef<any>, ɵdir?: DirectiveDef<any>} {\n  return Object.getPrototypeOf(type.prototype).constructor;\n}\n\ntype WritableDef = Writable<DirectiveDef<any>|ComponentDef<any>>;\n\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n *\n * @codeGenApi\n */\nexport function ɵɵInheritDefinitionFeature(definition: DirectiveDef<any>|ComponentDef<any>): void {\n  let superType = getSuperType(definition.type);\n  let shouldInheritFields = true;\n  const inheritanceChain: WritableDef[] = [definition];\n\n  while (superType) {\n    let superDef: DirectiveDef<any>|ComponentDef<any>|undefined = undefined;\n    if (isComponentDef(definition)) {\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵcmp || superType.ɵdir;\n    } else {\n      if (superType.ɵcmp) {\n        throw new Error('Directives cannot inherit Components');\n      }\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵdir;\n    }\n\n    if (superDef) {\n      if (shouldInheritFields) {\n        inheritanceChain.push(superDef);\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        const writeableDef = definition as WritableDef;\n        writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n        writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n        writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n\n        // Merge hostBindings\n        const superHostBindings = superDef.hostBindings;\n        superHostBindings && inheritHostBindings(definition, superHostBindings);\n\n        // Merge queries\n        const superViewQuery = superDef.viewQuery;\n        const superContentQueries = superDef.contentQueries;\n        superViewQuery && inheritViewQuery(definition, superViewQuery);\n        superContentQueries && inheritContentQueries(definition, superContentQueries);\n\n        // Merge inputs and outputs\n        fillProperties(definition.inputs, superDef.inputs);\n        fillProperties(definition.declaredInputs, superDef.declaredInputs);\n        fillProperties(definition.outputs, superDef.outputs);\n\n        // Merge animations metadata.\n        // If `superDef` is a Component, the `data` field is present (defaults to an empty object).\n        if (isComponentDef(superDef) && superDef.data.animation) {\n          // If super def is a Component, the `definition` is also a Component, since Directives can\n          // not inherit Components (we throw an error above and cannot reach this code).\n          const defData = (definition as ComponentDef<any>).data;\n          defData.animation = (defData.animation || []).concat(superDef.data.animation);\n        }\n      }\n\n      // Run parent features\n      const features = superDef.features;\n      if (features) {\n        for (let i = 0; i < features.length; i++) {\n          const feature = features[i];\n          if (feature && feature.ngInherit) {\n            (feature as DirectiveDefFeature)(definition);\n          }\n          // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this\n          // def already has all the necessary information inherited from its super class(es), so we\n          // can stop merging fields from super classes. However we need to iterate through the\n          // prototype chain to look for classes that might contain other \"features\" (like\n          // NgOnChanges), which we should invoke for the original `definition`. We set the\n          // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance\n          // logic and only invoking functions from the \"features\" list.\n          if (feature === ɵɵInheritDefinitionFeature) {\n            shouldInheritFields = false;\n          }\n        }\n      }\n    }\n\n    superType = Object.getPrototypeOf(superType);\n  }\n  mergeHostAttrsAcrossInheritance(inheritanceChain);\n}\n\n/**\n * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.\n *\n * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing\n * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child\n * type.\n */\nfunction mergeHostAttrsAcrossInheritance(inheritanceChain: WritableDef[]) {\n  let hostVars: number = 0;\n  let hostAttrs: TAttributes|null = null;\n  // We process the inheritance order from the base to the leaves here.\n  for (let i = inheritanceChain.length - 1; i >= 0; i--) {\n    const def = inheritanceChain[i];\n    // For each `hostVars`, we need to add the superclass amount.\n    def.hostVars = (hostVars += def.hostVars);\n    // for each `hostAttrs` we need to merge it with superclass.\n    def.hostAttrs =\n        mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));\n  }\n}\n\nfunction maybeUnwrapEmpty<T>(value: T[]): T[];\nfunction maybeUnwrapEmpty<T>(value: T): T;\nfunction maybeUnwrapEmpty(value: any): any {\n  if (value === EMPTY_OBJ) {\n    return {};\n  } else if (value === EMPTY_ARRAY) {\n    return [];\n  } else {\n    return value;\n  }\n}\n\nfunction inheritViewQuery(definition: WritableDef, superViewQuery: ViewQueriesFunction<any>) {\n  const prevViewQuery = definition.viewQuery;\n  if (prevViewQuery) {\n    definition.viewQuery = (rf, ctx) => {\n      superViewQuery(rf, ctx);\n      prevViewQuery(rf, ctx);\n    };\n  } else {\n    definition.viewQuery = superViewQuery;\n  }\n}\n\nfunction inheritContentQueries(\n    definition: WritableDef, superContentQueries: ContentQueriesFunction<any>) {\n  const prevContentQueries = definition.contentQueries;\n  if (prevContentQueries) {\n    definition.contentQueries = (rf, ctx, directiveIndex) => {\n      superContentQueries(rf, ctx, directiveIndex);\n      prevContentQueries(rf, ctx, directiveIndex);\n    };\n  } else {\n    definition.contentQueries = superContentQueries;\n  }\n}\n\nfunction inheritHostBindings(\n    definition: WritableDef, superHostBindings: HostBindingsFunction<any>) {\n  const prevHostBindings = definition.hostBindings;\n  if (prevHostBindings) {\n    definition.hostBindings = (rf: RenderFlags, ctx: any) => {\n      superHostBindings(rf, ctx);\n      prevHostBindings(rf, ctx);\n    };\n  } else {\n    definition.hostBindings = superHostBindings;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {global as _global} from './global';\n\n// When Symbol.iterator doesn't exist, retrieves the key used in es6-shim\ndeclare const Symbol: any;\nlet _symbolIterator: any = null;\nexport function getSymbolIterator(): string|symbol {\n  if (!_symbolIterator) {\n    const Symbol = _global['Symbol'];\n    if (Symbol && Symbol.iterator) {\n      _symbolIterator = Symbol.iterator;\n    } else {\n      // es6-shim specific logic\n      const keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (key !== 'entries' && key !== 'size' &&\n            (Map as any).prototype[key] === Map.prototype['entries']) {\n          _symbolIterator = key;\n        }\n      }\n    }\n  }\n  return _symbolIterator;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getSymbolIterator} from '../util/symbol';\n\nexport function devModeEqual(a: any, b: any): boolean {\n  const isListLikeIterableA = isListLikeIterable(a);\n  const isListLikeIterableB = isListLikeIterable(b);\n  if (isListLikeIterableA && isListLikeIterableB) {\n    return areIterablesEqual(a, b, devModeEqual);\n  } else {\n    const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n    const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n      return true;\n    } else {\n      return Object.is(a, b);\n    }\n  }\n}\n\n/**\n * Indicates that the result of a {@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * @publicApi\n * @deprecated from v10 stop using. (No replacement, deemed unnecessary.)\n */\nexport class WrappedValue {\n  /** @deprecated from 5.3, use `unwrap()` instead - will switch to protected */\n  wrapped: any;\n\n  constructor(value: any) {\n    this.wrapped = value;\n  }\n\n  /** Creates a wrapped value. */\n  static wrap(value: any): WrappedValue {\n    return new WrappedValue(value);\n  }\n\n  /**\n   * Returns the underlying value of a wrapped value.\n   * Returns the given `value` when it is not wrapped.\n   **/\n  static unwrap(value: any): any {\n    return WrappedValue.isWrapped(value) ? value.wrapped : value;\n  }\n\n  /** Returns true if `value` is a wrapped value. */\n  static isWrapped(value: any): value is WrappedValue {\n    return value instanceof WrappedValue;\n  }\n}\n\nexport function isListLikeIterable(obj: any): boolean {\n  if (!isJsObject(obj)) return false;\n  return Array.isArray(obj) ||\n      (!(obj instanceof Map) &&      // JS Map are iterables but return entries as [k, v]\n       getSymbolIterator() in obj);  // JS Iterable have a Symbol.iterator prop\n}\n\nexport function areIterablesEqual(\n    a: any, b: any, comparator: (a: any, b: any) => boolean): boolean {\n  const iterator1 = a[getSymbolIterator()]();\n  const iterator2 = b[getSymbolIterator()]();\n\n  while (true) {\n    const item1 = iterator1.next();\n    const item2 = iterator2.next();\n    if (item1.done && item2.done) return true;\n    if (item1.done || item2.done) return false;\n    if (!comparator(item1.value, item2.value)) return false;\n  }\n}\n\nexport function iterateListLike(obj: any, fn: (p: any) => any) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      fn(obj[i]);\n    }\n  } else {\n    const iterator = obj[getSymbolIterator()]();\n    let item: any;\n    while (!((item = iterator.next()).done)) {\n      fn(item.value);\n    }\n  }\n}\n\nexport function isJsObject(o: any): boolean {\n  return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {devModeEqual} from '../change_detection/change_detection_util';\nimport {assertIndexInRange, assertLessThan, assertNotSame} from '../util/assert';\n\nimport {getExpressionChangedErrorDetails, throwErrorIfNoChangesMode} from './errors';\nimport {LView} from './interfaces/view';\nimport {isInCheckNoChangesMode} from './state';\nimport {NO_CHANGE} from './tokens';\n\n\n// TODO(misko): consider inlining\n/** Updates binding and returns the value. */\nexport function updateBinding(lView: LView, bindingIndex: number, value: any): any {\n  return lView[bindingIndex] = value;\n}\n\n\n/** Gets the current binding value. */\nexport function getBinding(lView: LView, bindingIndex: number): any {\n  ngDevMode && assertIndexInRange(lView, bindingIndex);\n  ngDevMode &&\n      assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n  return lView[bindingIndex];\n}\n\n/**\n * Updates binding if changed, then returns whether it was updated.\n *\n * This function also checks the `CheckNoChangesMode` and throws if changes are made.\n * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE\n * behavior.\n *\n * @param lView current `LView`\n * @param bindingIndex The binding in the `LView` to check\n * @param value New value to check against `lView[bindingIndex]`\n * @returns `true` if the bindings has changed. (Throws if binding has changed during\n *          `CheckNoChangesMode`)\n */\nexport function bindingUpdated(lView: LView, bindingIndex: number, value: any): boolean {\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n  ngDevMode &&\n      assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n  const oldValue = lView[bindingIndex];\n\n  if (Object.is(oldValue, value)) {\n    return false;\n  } else {\n    if (ngDevMode && isInCheckNoChangesMode()) {\n      // View engine didn't report undefined values as changed on the first checkNoChanges pass\n      // (before the change detection was run).\n      const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n      if (!devModeEqual(oldValueToCompare, value)) {\n        const details =\n            getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);\n        throwErrorIfNoChangesMode(\n            oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName);\n      }\n      // There was a change, but the `devModeEqual` decided that the change is exempt from an error.\n      // For this reason we exit as if no change. The early exit is needed to prevent the changed\n      // value to be written into `LView` (If we would write the new value that we would not see it\n      // as change on next CD.)\n      return false;\n    }\n    lView[bindingIndex] = value;\n    return true;\n  }\n}\n\n/** Updates 2 bindings if changed, then returns whether either was updated. */\nexport function bindingUpdated2(lView: LView, bindingIndex: number, exp1: any, exp2: any): boolean {\n  const different = bindingUpdated(lView, bindingIndex, exp1);\n  return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n\n/** Updates 3 bindings if changed, then returns whether any was updated. */\nexport function bindingUpdated3(\n    lView: LView, bindingIndex: number, exp1: any, exp2: any, exp3: any): boolean {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n\n/** Updates 4 bindings if changed, then returns whether any was updated. */\nexport function bindingUpdated4(\n    lView: LView, bindingIndex: number, exp1: any, exp2: any, exp3: any, exp4: any): boolean {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {bindingUpdated} from '../bindings';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {getLView, getSelectedTNode, getTView, nextBindingIndex} from '../state';\nimport {elementAttributeInternal, storePropertyBindingMetadata} from './shared';\n\n\n\n/**\n * Updates the value of or removes a bound attribute on an Element.\n *\n * Used in the case of `[attr.title]=\"value\"`\n *\n * @param name name The name of the attribute.\n * @param value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param sanitizer An optional function used to sanitize the value.\n * @param namespace Optional namespace to use when setting the attribute.\n *\n * @codeGenApi\n */\nexport function ɵɵattribute(\n    name: string, value: any, sanitizer?: SanitizerFn|null,\n    namespace?: string): typeof ɵɵattribute {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);\n  }\n  return ɵɵattribute;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertEqual, assertLessThan} from '../../util/assert';\nimport {bindingUpdated, bindingUpdated2, bindingUpdated3, bindingUpdated4} from '../bindings';\nimport {LView} from '../interfaces/view';\nimport {getBindingIndex, incrementBindingIndex, nextBindingIndex, setBindingIndex} from '../state';\nimport {NO_CHANGE} from '../tokens';\nimport {renderStringify} from '../util/stringify_utils';\n\n\n\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function interpolationV(lView: LView, values: any[]): string|NO_CHANGE {\n  ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n  ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n  let isBindingUpdated = false;\n  let bindingIndex = getBindingIndex();\n\n  for (let i = 1; i < values.length; i += 2) {\n    // Check if bindings (odd indexes) have changed\n    isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\n  }\n  setBindingIndex(bindingIndex);\n\n  if (!isBindingUpdated) {\n    return NO_CHANGE;\n  }\n\n  // Build the updated content\n  let content = values[0];\n  for (let i = 1; i < values.length; i += 2) {\n    content += renderStringify(values[i]) + values[i + 1];\n  }\n\n  return content;\n}\n\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param prefix static value used for concatenation only.\n * @param v0 value checked for change.\n * @param suffix static value used for concatenation only.\n */\nexport function interpolation1(lView: LView, prefix: string, v0: any, suffix: string): string|\n    NO_CHANGE {\n  const different = bindingUpdated(lView, nextBindingIndex(), v0);\n  return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 2 expressions.\n */\nexport function interpolation2(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated2(lView, bindingIndex, v0, v1);\n  incrementBindingIndex(2);\n\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 3 expressions.\n */\nexport function interpolation3(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any,\n    suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n  incrementBindingIndex(3);\n\n  return different ?\n      prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix :\n      NO_CHANGE;\n}\n\n/**\n * Create an interpolation binding with 4 expressions.\n */\nexport function interpolation4(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  incrementBindingIndex(4);\n\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n          renderStringify(v2) + i2 + renderStringify(v3) + suffix :\n                     NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 5 expressions.\n */\nexport function interpolation5(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n  incrementBindingIndex(5);\n\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n          renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix :\n                     NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 6 expressions.\n */\nexport function interpolation6(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n  incrementBindingIndex(6);\n\n  return different ?\n      prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n          renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix :\n      NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 7 expressions.\n */\nexport function interpolation7(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string): string|\n    NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n  incrementBindingIndex(7);\n\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n          renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 +\n          renderStringify(v5) + i5 + renderStringify(v6) + suffix :\n                     NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 8 expressions.\n */\nexport function interpolation8(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n  incrementBindingIndex(8);\n\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n          renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 +\n          renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix :\n                     NO_CHANGE;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {assertFirstCreatePass} from '../assert';\nimport {attachPatchData} from '../context_discovery';\nimport {registerPostOrderHooks} from '../hooks';\nimport {ComponentTemplate} from '../interfaces/definition';\nimport {LocalRefExtractor, TAttributes, TContainerNode, TNodeType} from '../interfaces/node';\nimport {isDirectiveHost} from '../interfaces/type_checks';\nimport {HEADER_OFFSET, LView, RENDERER, TView, TViewType} from '../interfaces/view';\nimport {appendChild} from '../node_manipulation';\nimport {getLView, getTView, setCurrentTNode} from '../state';\nimport {getConstant} from '../util/view_utils';\nimport {addToViewTree, createDirectivesInstances, createLContainer, createTView, getOrCreateTNode, resolveDirectives, saveResolvedLocalsInData} from './shared';\n\n\n\nfunction templateFirstCreatePass(\n    index: number, tView: TView, lView: LView, templateFn: ComponentTemplate<any>|null,\n    decls: number, vars: number, tagName?: string|null, attrsIndex?: number|null,\n    localRefsIndex?: number|null): TContainerNode {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && ngDevMode.firstCreatePass++;\n  const tViewConsts = tView.consts;\n  // TODO(pk): refactor getOrCreateTNode to have the \"create\" only version\n  const tNode = getOrCreateTNode(\n      tView, index, TNodeType.Container, tagName || null,\n      getConstant<TAttributes>(tViewConsts, attrsIndex));\n\n  resolveDirectives(tView, lView, tNode, getConstant<string[]>(tViewConsts, localRefsIndex));\n  registerPostOrderHooks(tView, tNode);\n\n  const embeddedTView = tNode.tViews = createTView(\n      TViewType.Embedded, tNode, templateFn, decls, vars, tView.directiveRegistry,\n      tView.pipeRegistry, null, tView.schemas, tViewConsts);\n\n  if (tView.queries !== null) {\n    tView.queries.template(tView, tNode);\n    embeddedTView.queries = tView.queries.embeddedTView(tNode);\n  }\n\n  return tNode;\n}\n\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @codeGenApi\n */\nexport function ɵɵtemplate(\n    index: number, templateFn: ComponentTemplate<any>|null, decls: number, vars: number,\n    tagName?: string|null, attrsIndex?: number|null, localRefsIndex?: number|null,\n    localRefExtractor?: LocalRefExtractor) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n\n  const tNode = tView.firstCreatePass ? templateFirstCreatePass(\n                                            adjustedIndex, tView, lView, templateFn, decls, vars,\n                                            tagName, attrsIndex, localRefsIndex) :\n                                        tView.data[adjustedIndex] as TContainerNode;\n  setCurrentTNode(tNode, false);\n\n  const comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n  appendChild(tView, lView, comment, tNode);\n  attachPatchData(comment, lView);\n\n  addToViewTree(lView, lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode));\n\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n  }\n\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode, localRefExtractor);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {HEADER_OFFSET, LView, TView} from '../interfaces/view';\nimport {getContextLView} from '../state';\nimport {load} from '../util/view_utils';\n\n\n/** Store a value in the `data` at a given `index`. */\nexport function store<T>(tView: TView, lView: LView, index: number, value: T): void {\n  // We don't store any static data for local variables, so the first time\n  // we see the template, we should store as null to avoid a sparse array\n  if (index >= tView.data.length) {\n    tView.data[index] = null;\n    tView.blueprint[index] = null;\n  }\n  lView[index] = value;\n}\n\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @param index The index of the local ref in contextViewData.\n *\n * @codeGenApi\n */\nexport function ɵɵreference<T>(index: number) {\n  const contextLView = getContextLView();\n  return load<T>(contextLView, HEADER_OFFSET + index);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectFlags, InjectionToken, resolveForwardRef} from '../../di';\nimport {assertInjectImplementationNotEqual} from '../../di/inject_switch';\nimport {ɵɵinject} from '../../di/injector_compatibility';\nimport {AbstractType, Type} from '../../interface/type';\nimport {getOrCreateInjectable} from '../di';\nimport {TDirectiveHostNode} from '../interfaces/node';\nimport {getCurrentTNode, getLView} from '../state';\n\n/**\n * Returns the value associated to the given token from the injectors.\n *\n * `directiveInject` is intended to be used for directive, component and pipe factories.\n *  All other injection use `inject` which does not walk the node injector tree.\n *\n * Usage example (in factory function):\n *\n * ```ts\n * class SomeDirective {\n *   constructor(directive: DirectiveA) {}\n *\n *   static ɵdir = ɵɵdefineDirective({\n *     type: SomeDirective,\n *     factory: () => new SomeDirective(ɵɵdirectiveInject(DirectiveA))\n *   });\n * }\n * ```\n * @param token the type or token to inject\n * @param flags Injection flags\n * @returns the value from the injector or `null` when not found\n *\n * @codeGenApi\n */\nexport function ɵɵdirectiveInject<T>(token: Type<T>|AbstractType<T>|InjectionToken<T>): T;\nexport function ɵɵdirectiveInject<T>(\n    token: Type<T>|AbstractType<T>|InjectionToken<T>, flags: InjectFlags): T;\nexport function ɵɵdirectiveInject<T>(\n    token: Type<T>|AbstractType<T>|InjectionToken<T>, flags = InjectFlags.Default): T|null {\n  const lView = getLView();\n  // Fall back to inject() if view hasn't been created. This situation can happen in tests\n  // if inject utilities are used before bootstrapping.\n  if (lView === null) {\n    // Verify that we will not get into infinite loop.\n    ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);\n    return ɵɵinject(token, flags);\n  }\n  const tNode = getCurrentTNode();\n  return getOrCreateInjectable<T>(\n      tNode as TDirectiveHostNode, lView, resolveForwardRef(token), flags);\n}\n\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n * off, saving bytes of generated code while still providing a good experience in dev mode.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nexport function ɵɵinvalidFactory(): never {\n  const msg =\n      ngDevMode ? `This constructor was not compatible with Dependency Injection.` : 'invalid';\n  throw new Error(msg);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {bindingUpdated} from '../bindings';\nimport {TNode} from '../interfaces/node';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {LView, RENDERER, TView} from '../interfaces/view';\nimport {getLView, getSelectedTNode, getTView, nextBindingIndex} from '../state';\n\nimport {elementPropertyInternal, setInputsForProperty, storePropertyBindingMetadata} from './shared';\n\n\n/**\n * Update a property on a selected element.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nexport function ɵɵproperty<T>(\n    propName: string, value: T, sanitizer?: SanitizerFn|null): typeof ɵɵproperty {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵproperty;\n}\n\n/**\n * Given `<div style=\"...\" my-dir>` and `MyDir` with `@Input('style')` we need to write to\n * directive input.\n */\nexport function setDirectiveInputsWhichShadowsStyling(\n    tView: TView, tNode: TNode, lView: LView, value: any, isClassBased: boolean) {\n  const inputs = tNode.inputs!;\n  const property = isClassBased ? 'class' : 'style';\n  // We support both 'class' and `className` hence the fallback.\n  setInputsForProperty(tView, lView, inputs[property], property, value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDefined, assertEqual, assertIndexInRange} from '../../util/assert';\nimport {assertFirstCreatePass, assertHasParent} from '../assert';\nimport {attachPatchData} from '../context_discovery';\nimport {formatRuntimeError, RuntimeErrorCode} from '../error_code';\nimport {registerPostOrderHooks} from '../hooks';\nimport {hasClassInput, hasStyleInput, TAttributes, TElementNode, TNode, TNodeFlags, TNodeType} from '../interfaces/node';\nimport {RElement} from '../interfaces/renderer_dom';\nimport {isContentQueryHost, isDirectiveHost} from '../interfaces/type_checks';\nimport {HEADER_OFFSET, LView, RENDERER, TView} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {appendChild, createElementNode, writeDirectClass, writeDirectStyle} from '../node_manipulation';\nimport {decreaseElementDepthCount, getBindingIndex, getCurrentTNode, getElementDepthCount, getLView, getNamespace, getTView, increaseElementDepthCount, isCurrentTNodeParent, setCurrentTNode, setCurrentTNodeAsNotParent} from '../state';\nimport {computeStaticStyling} from '../styling/static_styling';\nimport {setUpAttributes} from '../util/attrs_utils';\nimport {getConstant} from '../util/view_utils';\nimport {setDirectiveInputsWhichShadowsStyling} from './property';\nimport {createDirectivesInstances, executeContentQueries, getOrCreateTNode, matchingSchemas, resolveDirectives, saveResolvedLocalsInData} from './shared';\n\n\n\nfunction elementStartFirstCreatePass(\n    index: number, tView: TView, lView: LView, native: RElement, name: string,\n    attrsIndex?: number|null, localRefsIndex?: number): TElementNode {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && ngDevMode.firstCreatePass++;\n\n  const tViewConsts = tView.consts;\n  const attrs = getConstant<TAttributes>(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, TNodeType.Element, name, attrs);\n\n  const hasDirectives =\n      resolveDirectives(tView, lView, tNode, getConstant<string[]>(tViewConsts, localRefsIndex));\n  ngDevMode && logUnknownElementError(tView, native, tNode, hasDirectives);\n\n  if (tNode.attrs !== null) {\n    computeStaticStyling(tNode, tNode.attrs, false);\n  }\n\n  if (tNode.mergedAttrs !== null) {\n    computeStaticStyling(tNode, tNode.mergedAttrs, true);\n  }\n\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n\n  return tNode;\n}\n\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n *\n * @codeGenApi\n */\nexport function ɵɵelementStart(\n    index: number, name: string, attrsIndex?: number|null, localRefsIndex?: number): void {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = HEADER_OFFSET + index;\n\n  ngDevMode &&\n      assertEqual(\n          getBindingIndex(), tView.bindingStartIndex,\n          'elements should be created before any bindings');\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n\n  const renderer = lView[RENDERER];\n  const native = lView[adjustedIndex] = createElementNode(renderer, name, getNamespace());\n  const tNode = tView.firstCreatePass ?\n      elementStartFirstCreatePass(\n          adjustedIndex, tView, lView, native, name, attrsIndex, localRefsIndex) :\n      tView.data[adjustedIndex] as TElementNode;\n  setCurrentTNode(tNode, true);\n\n  const mergedAttrs = tNode.mergedAttrs;\n  if (mergedAttrs !== null) {\n    setUpAttributes(renderer, native, mergedAttrs);\n  }\n  const classes = tNode.classes;\n  if (classes !== null) {\n    writeDirectClass(renderer, native, classes);\n  }\n  const styles = tNode.styles;\n  if (styles !== null) {\n    writeDirectStyle(renderer, native, styles);\n  }\n\n  if ((tNode.flags & TNodeFlags.isDetached) !== TNodeFlags.isDetached) {\n    // In the i18n case, the translation may have removed this element, so only add it if it is not\n    // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n    appendChild(tView, lView, native, tNode);\n  }\n\n  // any immediate children of a component or template container must be pre-emptively\n  // monkey-patched with the component view data so that the element can be inspected\n  // later on using any element discovery utility methods (see `element_discovery.ts`)\n  if (getElementDepthCount() === 0) {\n    attachPatchData(native, lView);\n  }\n  increaseElementDepthCount();\n\n\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n  if (localRefsIndex !== null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n}\n\n/**\n * Mark the end of the element.\n *\n * @codeGenApi\n */\nexport function ɵɵelementEnd(): void {\n  let currentTNode = getCurrentTNode()!;\n  ngDevMode && assertDefined(currentTNode, 'No parent node to close.');\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(getCurrentTNode());\n    currentTNode = currentTNode.parent!;\n    setCurrentTNode(currentTNode, false);\n  }\n\n  const tNode = currentTNode;\n  ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode);\n\n\n  decreaseElementDepthCount();\n\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    registerPostOrderHooks(tView, currentTNode);\n    if (isContentQueryHost(currentTNode)) {\n      tView.queries!.elementEnd(currentTNode);\n    }\n  }\n\n  if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);\n  }\n\n  if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);\n  }\n}\n\n/**\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n *\n * @codeGenApi\n */\nexport function ɵɵelement(\n    index: number, name: string, attrsIndex?: number|null, localRefsIndex?: number): void {\n  ɵɵelementStart(index, name, attrsIndex, localRefsIndex);\n  ɵɵelementEnd();\n}\n\nfunction logUnknownElementError(\n    tView: TView, element: RElement, tNode: TNode, hasDirectives: boolean): void {\n  const schemas = tView.schemas;\n\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (schemas === null) return;\n\n  const tagName = tNode.value;\n\n  // If the element matches any directive, it's considered as valid.\n  if (!hasDirectives && tagName !== null) {\n    // The element is unknown if it's an instance of HTMLUnknownElement or it isn't registered\n    // as a custom element. Note that unknown elements with a dash in their name won't be instances\n    // of HTMLUnknownElement in browsers that support web components.\n    const isUnknown =\n        // Note that we can't check for `typeof HTMLUnknownElement === 'function'`,\n        // because while most browsers return 'function', IE returns 'object'.\n        (typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement &&\n         element instanceof HTMLUnknownElement) ||\n        (typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 &&\n         !customElements.get(tagName));\n\n    if (isUnknown && !matchingSchemas(tView, tagName)) {\n      let message = `'${tagName}' is not a known element:\\n`;\n      message += `1. If '${\n          tagName}' is an Angular component, then verify that it is part of this module.\\n`;\n      if (tagName && tagName.indexOf('-') > -1) {\n        message += `2. If '${\n            tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`;\n      } else {\n        message +=\n            `2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;\n      }\n      console.error(formatRuntimeError(RuntimeErrorCode.UNKNOWN_ELEMENT, message));\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {KeyValueArray} from '../../util/array_utils';\nimport {TStylingRange} from '../interfaces/styling';\nimport {TIcu} from './i18n';\nimport {CssSelector} from './projection';\nimport {RNode} from './renderer_dom';\nimport {LView, TView} from './view';\n\n\n/**\n * TNodeType corresponds to the {@link TNode} `type` property.\n *\n * NOTE: type IDs are such that we use each bit to denote a type. This is done so that we can easily\n * check if the `TNode` is of more than one type.\n *\n * `if (tNode.type === TNodeType.Text || tNode.type === TNode.Element)`\n * can be written as:\n * `if (tNode.type & (TNodeType.Text | TNodeType.Element))`\n *\n * However any given `TNode` can only be of one type.\n */\nexport const enum TNodeType {\n  /**\n   * The TNode contains information about a DOM element aka {@link RText}.\n   */\n  Text = 0b1,\n\n  /**\n   * The TNode contains information about a DOM element aka {@link RElement}.\n   */\n  Element = 0b10,\n\n  /**\n   * The TNode contains information about an {@link LContainer} for embedded views.\n   */\n  Container = 0b100,\n\n  /**\n   * The TNode contains information about an `<ng-container>` element {@link RNode}.\n   */\n  ElementContainer = 0b1000,\n\n  /**\n   * The TNode contains information about an `<ng-content>` projection\n   */\n  Projection = 0b10000,\n\n  /**\n   * The TNode contains information about an ICU comment used in `i18n`.\n   */\n  Icu = 0b100000,\n\n  /**\n   * Special node type representing a placeholder for future `TNode` at this location.\n   *\n   * I18n translation blocks are created before the element nodes which they contain. (I18n blocks\n   * can span over many elements.) Because i18n `TNode`s (representing text) are created first they\n   * often may need to point to element `TNode`s which are not yet created. In such a case we create\n   * a `Placeholder` `TNode`. This allows the i18n to structurally link the `TNode`s together\n   * without knowing any information about the future nodes which will be at that location.\n   *\n   * On `firstCreatePass` When element instruction executes it will try to create a `TNode` at that\n   * location. Seeing a `Placeholder` `TNode` already there tells the system that it should reuse\n   * existing `TNode` (rather than create a new one) and just update the missing information.\n   */\n  Placeholder = 0b1000000,\n\n  // Combined Types These should never be used for `TNode.type` only as a useful way to check\n  // if `TNode.type` is one of several choices.\n\n  // See: https://github.com/microsoft/TypeScript/issues/35875 why we can't refer to existing enum.\n  AnyRNode = 0b11,        // Text | Element,\n  AnyContainer = 0b1100,  // Container | ElementContainer, // See:\n}\n\n/**\n * Converts `TNodeType` into human readable text.\n * Make sure this matches with `TNodeType`\n */\nexport function toTNodeTypeAsString(tNodeType: TNodeType): string {\n  let text = '';\n  (tNodeType & TNodeType.Text) && (text += '|Text');\n  (tNodeType & TNodeType.Element) && (text += '|Element');\n  (tNodeType & TNodeType.Container) && (text += '|Container');\n  (tNodeType & TNodeType.ElementContainer) && (text += '|ElementContainer');\n  (tNodeType & TNodeType.Projection) && (text += '|Projection');\n  (tNodeType & TNodeType.Icu) && (text += '|IcuContainer');\n  (tNodeType & TNodeType.Placeholder) && (text += '|Placeholder');\n  return text.length > 0 ? text.substring(1) : text;\n}\n\n/**\n * Corresponds to the TNode.flags property.\n */\nexport const enum TNodeFlags {\n  /** Bit #1 - This bit is set if the node is a host for any directive (including a component) */\n  isDirectiveHost = 0x1,\n\n  /**\n   * Bit #2 - This bit is set if the node is a host for a component.\n   *\n   * Setting this bit implies that the `isDirectiveHost` bit is set as well.\n   * */\n  isComponentHost = 0x2,\n\n  /** Bit #3 - This bit is set if the node has been projected */\n  isProjected = 0x4,\n\n  /** Bit #4 - This bit is set if any directive on this node has content queries */\n  hasContentQuery = 0x8,\n\n  /** Bit #5 - This bit is set if the node has any \"class\" inputs */\n  hasClassInput = 0x10,\n\n  /** Bit #6 - This bit is set if the node has any \"style\" inputs */\n  hasStyleInput = 0x20,\n\n  /** Bit #7 This bit is set if the node has been detached by i18n */\n  isDetached = 0x40,\n\n  /**\n   * Bit #8 - This bit is set if the node has directives with host bindings.\n   *\n   * This flags allows us to guard host-binding logic and invoke it only on nodes\n   * that actually have directives with host bindings.\n   */\n  hasHostBindings = 0x80,\n}\n\n/**\n * Corresponds to the TNode.providerIndexes property.\n */\nexport const enum TNodeProviderIndexes {\n  /** The index of the first provider on this node is encoded on the least significant bits. */\n  ProvidersStartIndexMask = 0b00000000000011111111111111111111,\n\n  /**\n   * The count of view providers from the component on this node is\n   * encoded on the 20 most significant bits.\n   */\n  CptViewProvidersCountShift = 20,\n  CptViewProvidersCountShifter = 0b00000000000100000000000000000000,\n}\n\n/**\n * A set of marker values to be used in the attributes arrays. These markers indicate that some\n * items are not regular attributes and the processing should be adapted accordingly.\n */\nexport const enum AttributeMarker {\n  /**\n   * An implicit marker which indicates that the value in the array are of `attributeKey`,\n   * `attributeValue` format.\n   *\n   * NOTE: This is implicit as it is the type when no marker is present in array. We indicate that\n   * it should not be present at runtime by the negative number.\n   */\n  ImplicitAttributes = -1,\n\n  /**\n   * Marker indicates that the following 3 values in the attributes array are:\n   * namespaceUri, attributeName, attributeValue\n   * in that order.\n   */\n  NamespaceURI = 0,\n\n  /**\n   * Signals class declaration.\n   *\n   * Each value following `Classes` designates a class name to include on the element.\n   * ## Example:\n   *\n   * Given:\n   * ```\n   * <div class=\"foo bar baz\">...<d/vi>\n   * ```\n   *\n   * the generated code is:\n   * ```\n   * var _c1 = [AttributeMarker.Classes, 'foo', 'bar', 'baz'];\n   * ```\n   */\n  Classes = 1,\n\n  /**\n   * Signals style declaration.\n   *\n   * Each pair of values following `Styles` designates a style name and value to include on the\n   * element.\n   * ## Example:\n   *\n   * Given:\n   * ```\n   * <div style=\"width:100px; height:200px; color:red\">...</div>\n   * ```\n   *\n   * the generated code is:\n   * ```\n   * var _c1 = [AttributeMarker.Styles, 'width', '100px', 'height'. '200px', 'color', 'red'];\n   * ```\n   */\n  Styles = 2,\n\n  /**\n   * Signals that the following attribute names were extracted from input or output bindings.\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <div moo=\"car\" [foo]=\"exp\" (bar)=\"doSth()\">\n   * ```\n   *\n   * the generated code is:\n   *\n   * ```\n   * var _c1 = ['moo', 'car', AttributeMarker.Bindings, 'foo', 'bar'];\n   * ```\n   */\n  Bindings = 3,\n\n  /**\n   * Signals that the following attribute names were hoisted from an inline-template declaration.\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <div *ngFor=\"let value of values; trackBy:trackBy\" dirA [dirB]=\"value\">\n   * ```\n   *\n   * the generated code for the `template()` instruction would include:\n   *\n   * ```\n   * ['dirA', '', AttributeMarker.Bindings, 'dirB', AttributeMarker.Template, 'ngFor', 'ngForOf',\n   * 'ngForTrackBy', 'let-value']\n   * ```\n   *\n   * while the generated code for the `element()` instruction inside the template function would\n   * include:\n   *\n   * ```\n   * ['dirA', '', AttributeMarker.Bindings, 'dirB']\n   * ```\n   */\n  Template = 4,\n\n  /**\n   * Signals that the following attribute is `ngProjectAs` and its value is a parsed\n   * `CssSelector`.\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <h1 attr=\"value\" ngProjectAs=\"[title]\">\n   * ```\n   *\n   * the generated code for the `element()` instruction would include:\n   *\n   * ```\n   * ['attr', 'value', AttributeMarker.ProjectAs, ['', 'title', '']]\n   * ```\n   */\n  ProjectAs = 5,\n\n  /**\n   * Signals that the following attribute will be translated by runtime i18n\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <div moo=\"car\" foo=\"value\" i18n-foo [bar]=\"binding\" i18n-bar>\n   * ```\n   *\n   * the generated code is:\n   *\n   * ```\n   * var _c1 = ['moo', 'car', AttributeMarker.I18n, 'foo', 'bar'];\n   */\n  I18n = 6,\n}\n\n/**\n * A combination of:\n * - Attribute names and values.\n * - Special markers acting as flags to alter attributes processing.\n * - Parsed ngProjectAs selectors.\n */\nexport type TAttributes = (string|AttributeMarker|CssSelector)[];\n\n/**\n * Constants that are associated with a view. Includes:\n * - Attribute arrays.\n * - Local definition arrays.\n * - Translated messages (i18n).\n */\nexport type TConstants = (TAttributes|string)[];\n\n/**\n * Factory function that returns an array of consts. Consts can be represented as a function in\n * case any additional statements are required to define consts in the list. An example is i18n\n * where additional i18n calls are generated, which should be executed when consts are requested\n * for the first time.\n */\nexport type TConstantsFactory = () => TConstants;\n\n/**\n * TConstants type that describes how the `consts` field is generated on ComponentDef: it can be\n * either an array or a factory function that returns that array.\n */\nexport type TConstantsOrFactory = TConstants|TConstantsFactory;\n\n/**\n * Binding data (flyweight) for a particular node that is shared between all templates\n * of a specific type.\n *\n * If a property is:\n *    - PropertyAliases: that property's data was generated and this is it\n *    - Null: that property's data was already generated and nothing was found.\n *    - Undefined: that property's data has not yet been generated\n *\n * see: https://en.wikipedia.org/wiki/Flyweight_pattern for more on the Flyweight pattern\n */\nexport interface TNode {\n  /** The type of the TNode. See TNodeType. */\n  type: TNodeType;\n\n  /**\n   * Index of the TNode in TView.data and corresponding native element in LView.\n   *\n   * This is necessary to get from any TNode to its corresponding native element when\n   * traversing the node tree.\n   *\n   * If index is -1, this is a dynamically created container node or embedded view node.\n   */\n  index: number;\n\n  /**\n   * Insert before existing DOM node index.\n   *\n   * When DOM nodes are being inserted, normally they are being appended as they are created.\n   * Under i18n case, the translated text nodes are created ahead of time as part of the\n   * `ɵɵi18nStart` instruction which means that this `TNode` can't just be appended and instead\n   * needs to be inserted using `insertBeforeIndex` semantics.\n   *\n   * Additionally sometimes it is necessary to insert new text nodes as a child of this `TNode`. In\n   * such a case the value stores an array of text nodes to insert.\n   *\n   * Example:\n   * ```\n   * <div i18n>\n   *   Hello <span>World</span>!\n   * </div>\n   * ```\n   * In the above example the `ɵɵi18nStart` instruction can create `Hello `, `World` and `!` text\n   * nodes. It can also insert `Hello ` and `!` text node as a child of `<div>`, but it can't\n   * insert `World` because the `<span>` node has not yet been created. In such a case the\n   * `<span>` `TNode` will have an array which will direct the `<span>` to not only insert\n   * itself in front of `!` but also to insert the `World` (created by `ɵɵi18nStart`) into\n   * `<span>` itself.\n   *\n   * Pseudo code:\n   * ```\n   *   if (insertBeforeIndex === null) {\n   *     // append as normal\n   *   } else if (Array.isArray(insertBeforeIndex)) {\n   *     // First insert current `TNode` at correct location\n   *     const currentNode = lView[this.index];\n   *     parentNode.insertBefore(currentNode, lView[this.insertBeforeIndex[0]]);\n   *     // Now append all of the children\n   *     for(let i=1; i<this.insertBeforeIndex; i++) {\n   *       currentNode.appendChild(lView[this.insertBeforeIndex[i]]);\n   *     }\n   *   } else {\n   *     parentNode.insertBefore(lView[this.index], lView[this.insertBeforeIndex])\n   *   }\n   * ```\n   * - null: Append as normal using `parentNode.appendChild`\n   * - `number`: Append using\n   *      `parentNode.insertBefore(lView[this.index], lView[this.insertBeforeIndex])`\n   *\n   * *Initialization*\n   *\n   * Because `ɵɵi18nStart` executes before nodes are created, on `TView.firstCreatePass` it is not\n   * possible for `ɵɵi18nStart` to set the `insertBeforeIndex` value as the corresponding `TNode`\n   * has not yet been created. For this reason the `ɵɵi18nStart` creates a `TNodeType.Placeholder`\n   * `TNode` at that location. See `TNodeType.Placeholder` for more information.\n   */\n  insertBeforeIndex: InsertBeforeIndex;\n\n  /**\n   * The index of the closest injector in this node's LView.\n   *\n   * If the index === -1, there is no injector on this node or any ancestor node in this view.\n   *\n   * If the index !== -1, it is the index of this node's injector OR the index of a parent\n   * injector in the same view. We pass the parent injector index down the node tree of a view so\n   * it's possible to find the parent injector without walking a potentially deep node tree.\n   * Injector indices are not set across view boundaries because there could be multiple component\n   * hosts.\n   *\n   * If tNode.injectorIndex === tNode.parent.injectorIndex, then the index belongs to a parent\n   * injector.\n   */\n  injectorIndex: number;\n\n  /**\n   * Stores starting index of the directives.\n   *\n   * NOTE: The first directive is always component (if present).\n   */\n  directiveStart: number;\n\n  /**\n   * Stores final exclusive index of the directives.\n   *\n   * The area right behind the `directiveStart-directiveEnd` range is used to allocate the\n   * `HostBindingFunction` `vars` (or null if no bindings.) Therefore `directiveEnd` is used to set\n   * `LFrame.bindingRootIndex` before `HostBindingFunction` is executed.\n   */\n  directiveEnd: number;\n\n  /**\n   * Stores the last directive which had a styling instruction.\n   *\n   * Initial value of this is `-1` which means that no `hostBindings` styling instruction has\n   * executed. As `hostBindings` instructions execute they set the value to the index of the\n   * `DirectiveDef` which contained the last `hostBindings` styling instruction.\n   *\n   * Valid values are:\n   * - `-1` No `hostBindings` instruction has executed.\n   * - `directiveStart <= directiveStylingLast < directiveEnd`: Points to the `DirectiveDef` of\n   * the last styling instruction which executed in the `hostBindings`.\n   *\n   * This data is needed so that styling instructions know which static styling data needs to be\n   * collected from the `DirectiveDef.hostAttrs`. A styling instruction needs to collect all data\n   * since last styling instruction.\n   */\n  directiveStylingLast: number;\n\n  /**\n   * Stores indexes of property bindings. This field is only set in the ngDevMode and holds\n   * indexes of property bindings so TestBed can get bound property metadata for a given node.\n   */\n  propertyBindings: number[]|null;\n\n  /**\n   * Stores if Node isComponent, isProjected, hasContentQuery, hasClassInput and hasStyleInput\n   * etc.\n   */\n  flags: TNodeFlags;\n\n  /**\n   * This number stores two values using its bits:\n   *\n   * - the index of the first provider on that node (first 16 bits)\n   * - the count of view providers from the component on this node (last 16 bits)\n   */\n  // TODO(misko): break this into actual vars.\n  providerIndexes: TNodeProviderIndexes;\n\n  /**\n   * The value name associated with this node.\n   * if type:\n   *   `TNodeType.Text`: text value\n   *   `TNodeType.Element`: tag name\n   *   `TNodeType.ICUContainer`: `TIcu`\n   */\n  value: any;\n\n  /**\n   * Attributes associated with an element. We need to store attributes to support various\n   * use-cases (attribute injection, content projection with selectors, directives matching).\n   * Attributes are stored statically because reading them from the DOM would be way too slow for\n   * content projection and queries.\n   *\n   * Since attrs will always be calculated first, they will never need to be marked undefined by\n   * other instructions.\n   *\n   * For regular attributes a name of an attribute and its value alternate in the array.\n   * e.g. ['role', 'checkbox']\n   * This array can contain flags that will indicate \"special attributes\" (attributes with\n   * namespaces, attributes extracted from bindings and outputs).\n   */\n  attrs: TAttributes|null;\n\n  /**\n   * Same as `TNode.attrs` but contains merged data across all directive host bindings.\n   *\n   * We need to keep `attrs` as unmerged so that it can be used for attribute selectors.\n   * We merge attrs here so that it can be used in a performant way for initial rendering.\n   *\n   * The `attrs` are merged in first pass in following order:\n   * - Component's `hostAttrs`\n   * - Directives' `hostAttrs`\n   * - Template `TNode.attrs` associated with the current `TNode`.\n   */\n  mergedAttrs: TAttributes|null;\n\n  /**\n   * A set of local names under which a given element is exported in a template and\n   * visible to queries. An entry in this array can be created for different reasons:\n   * - an element itself is referenced, ex.: `<div #foo>`\n   * - a component is referenced, ex.: `<my-cmpt #foo>`\n   * - a directive is referenced, ex.: `<my-cmpt #foo=\"directiveExportAs\">`.\n   *\n   * A given element might have different local names and those names can be associated\n   * with a directive. We store local names at even indexes while odd indexes are reserved\n   * for directive index in a view (or `-1` if there is no associated directive).\n   *\n   * Some examples:\n   * - `<div #foo>` => `[\"foo\", -1]`\n   * - `<my-cmpt #foo>` => `[\"foo\", myCmptIdx]`\n   * - `<my-cmpt #foo #bar=\"directiveExportAs\">` => `[\"foo\", myCmptIdx, \"bar\", directiveIdx]`\n   * - `<div #foo #bar=\"directiveExportAs\">` => `[\"foo\", -1, \"bar\", directiveIdx]`\n   */\n  localNames: (string|number)[]|null;\n\n  /** Information about input properties that need to be set once from attribute data. */\n  initialInputs: InitialInputData|null|undefined;\n\n  /**\n   * Input data for all directives on this node. `null` means that there are no directives with\n   * inputs on this node.\n   */\n  inputs: PropertyAliases|null;\n\n  /**\n   * Output data for all directives on this node. `null` means that there are no directives with\n   * outputs on this node.\n   */\n  outputs: PropertyAliases|null;\n\n  /**\n   * The TView or TViews attached to this node.\n   *\n   * If this TNode corresponds to an LContainer with inline views, the container will\n   * need to store separate static data for each of its view blocks (TView[]). Otherwise,\n   * nodes in inline views with the same index as nodes in their parent views will overwrite\n   * each other, as they are in the same template.\n   *\n   * Each index in this array corresponds to the static data for a certain\n   * view. So if you had V(0) and V(1) in a container, you might have:\n   *\n   * [\n   *   [{tagName: 'div', attrs: ...}, null],     // V(0) TView\n   *   [{tagName: 'button', attrs ...}, null]    // V(1) TView\n   *\n   * If this TNode corresponds to an LContainer with a template (e.g. structural\n   * directive), the template's TView will be stored here.\n   *\n   * If this TNode corresponds to an element, tViews will be null .\n   */\n  tViews: TView|TView[]|null;\n\n  /**\n   * The next sibling node. Necessary so we can propagate through the root nodes of a view\n   * to insert them or remove them from the DOM.\n   */\n  next: TNode|null;\n\n  /**\n   * The next projected sibling. Since in Angular content projection works on the node-by-node\n   * basis the act of projecting nodes might change nodes relationship at the insertion point\n   * (target view). At the same time we need to keep initial relationship between nodes as\n   * expressed in content view.\n   */\n  projectionNext: TNode|null;\n\n  /**\n   * First child of the current node.\n   *\n   * For component nodes, the child will always be a ContentChild (in same view).\n   * For embedded view nodes, the child will be in their child view.\n   */\n  child: TNode|null;\n\n  /**\n   * Parent node (in the same view only).\n   *\n   * We need a reference to a node's parent so we can append the node to its parent's native\n   * element at the appropriate time.\n   *\n   * If the parent would be in a different view (e.g. component host), this property will be null.\n   * It's important that we don't try to cross component boundaries when retrieving the parent\n   * because the parent will change (e.g. index, attrs) depending on where the component was\n   * used (and thus shouldn't be stored on TNode). In these cases, we retrieve the parent through\n   * LView.node instead (which will be instance-specific).\n   *\n   * If this is an inline view node (V), the parent will be its container.\n   */\n  parent: TElementNode|TContainerNode|null;\n\n  /**\n   * List of projected TNodes for a given component host element OR index into the said nodes.\n   *\n   * For easier discussion assume this example:\n   * `<parent>`'s view definition:\n   * ```\n   * <child id=\"c1\">content1</child>\n   * <child id=\"c2\"><span>content2</span></child>\n   * ```\n   * `<child>`'s view definition:\n   * ```\n   * <ng-content id=\"cont1\"></ng-content>\n   * ```\n   *\n   * If `Array.isArray(projection)` then `TNode` is a host element:\n   * - `projection` stores the content nodes which are to be projected.\n   *    - The nodes represent categories defined by the selector: For example:\n   *      `<ng-content/><ng-content select=\"abc\"/>` would represent the heads for `<ng-content/>`\n   *      and `<ng-content select=\"abc\"/>` respectively.\n   *    - The nodes we store in `projection` are heads only, we used `.next` to get their\n   *      siblings.\n   *    - The nodes `.next` is sorted/rewritten as part of the projection setup.\n   *    - `projection` size is equal to the number of projections `<ng-content>`. The size of\n   *      `c1` will be `1` because `<child>` has only one `<ng-content>`.\n   * - we store `projection` with the host (`c1`, `c2`) rather than the `<ng-content>` (`cont1`)\n   *   because the same component (`<child>`) can be used in multiple locations (`c1`, `c2`) and\n   * as a result have different set of nodes to project.\n   * - without `projection` it would be difficult to efficiently traverse nodes to be projected.\n   *\n   * If `typeof projection == 'number'` then `TNode` is a `<ng-content>` element:\n   * - `projection` is an index of the host's `projection`Nodes.\n   *   - This would return the first head node to project:\n   *     `getHost(currentTNode).projection[currentTNode.projection]`.\n   * - When projecting nodes the parent node retrieved may be a `<ng-content>` node, in which case\n   *   the process is recursive in nature.\n   *\n   * If `projection` is of type `RNode[][]` than we have a collection of native nodes passed as\n   * projectable nodes during dynamic component creation.\n   */\n  projection: (TNode|RNode[])[]|number|null;\n\n  /**\n   * A collection of all `style` static values for an element (including from host).\n   *\n   * This field will be populated if and when:\n   *\n   * - There are one or more initial `style`s on an element (e.g. `<div style=\"width:200px;\">`)\n   * - There are one or more initial `style`s on a directive/component host\n   *   (e.g. `@Directive({host: {style: \"width:200px;\" } }`)\n   */\n  styles: string|null;\n\n\n  /**\n   * A collection of all `style` static values for an element excluding host sources.\n   *\n   * Populated when there are one or more initial `style`s on an element\n   * (e.g. `<div style=\"width:200px;\">`)\n   * Must be stored separately from `tNode.styles` to facilitate setting directive\n   * inputs that shadow the `style` property. If we used `tNode.styles` as is for shadowed inputs,\n   * we would feed host styles back into directives as \"inputs\". If we used `tNode.attrs`, we\n   * would have to concatenate the attributes on every template pass. Instead, we process once on\n   * first create pass and store here.\n   */\n  stylesWithoutHost: string|null;\n\n  /**\n   * A `KeyValueArray` version of residual `styles`.\n   *\n   * When there are styling instructions than each instruction stores the static styling\n   * which is of lower priority than itself. This means that there may be a higher priority\n   * styling than the instruction.\n   *\n   * Imagine:\n   * ```\n   * <div style=\"color: highest;\" my-dir>\n   *\n   * @Directive({\n   *   host: {\n   *     style: 'color: lowest; ',\n   *     '[styles.color]': 'exp' // ɵɵstyleProp('color', ctx.exp);\n   *   }\n   * })\n   * ```\n   *\n   * In the above case:\n   * - `color: lowest` is stored with `ɵɵstyleProp('color', ctx.exp);` instruction\n   * -  `color: highest` is the residual and is stored here.\n   *\n   * - `undefined': not initialized.\n   * - `null`: initialized but `styles` is `null`\n   * - `KeyValueArray`: parsed version of `styles`.\n   */\n  residualStyles: KeyValueArray<any>|undefined|null;\n\n  /**\n   * A collection of all class static values for an element (including from host).\n   *\n   * This field will be populated if and when:\n   *\n   * - There are one or more initial classes on an element (e.g. `<div class=\"one two three\">`)\n   * - There are one or more initial classes on an directive/component host\n   *   (e.g. `@Directive({host: {class: \"SOME_CLASS\" } }`)\n   */\n  classes: string|null;\n\n  /**\n   * A collection of all class static values for an element excluding host sources.\n   *\n   * Populated when there are one or more initial classes on an element\n   * (e.g. `<div class=\"SOME_CLASS\">`)\n   * Must be stored separately from `tNode.classes` to facilitate setting directive\n   * inputs that shadow the `class` property. If we used `tNode.classes` as is for shadowed\n   * inputs, we would feed host classes back into directives as \"inputs\". If we used\n   * `tNode.attrs`, we would have to concatenate the attributes on every template pass. Instead,\n   * we process once on first create pass and store here.\n   */\n  classesWithoutHost: string|null;\n\n  /**\n   * A `KeyValueArray` version of residual `classes`.\n   *\n   * Same as `TNode.residualStyles` but for classes.\n   *\n   * - `undefined': not initialized.\n   * - `null`: initialized but `classes` is `null`\n   * - `KeyValueArray`: parsed version of `classes`.\n   */\n  residualClasses: KeyValueArray<any>|undefined|null;\n\n  /**\n   * Stores the head/tail index of the class bindings.\n   *\n   * - If no bindings, the head and tail will both be 0.\n   * - If there are template bindings, stores the head/tail of the class bindings in the template.\n   * - If no template bindings but there are host bindings, the head value will point to the last\n   *   host binding for \"class\" (not the head of the linked list), tail will be 0.\n   *\n   * See: `style_binding_list.ts` for details.\n   *\n   * This is used by `insertTStylingBinding` to know where the next styling binding should be\n   * inserted so that they can be sorted in priority order.\n   */\n  classBindings: TStylingRange;\n\n  /**\n   * Stores the head/tail index of the class bindings.\n   *\n   * - If no bindings, the head and tail will both be 0.\n   * - If there are template bindings, stores the head/tail of the style bindings in the template.\n   * - If no template bindings but there are host bindings, the head value will point to the last\n   *   host binding for \"style\" (not the head of the linked list), tail will be 0.\n   *\n   * See: `style_binding_list.ts` for details.\n   *\n   * This is used by `insertTStylingBinding` to know where the next styling binding should be\n   * inserted so that they can be sorted in priority order.\n   */\n  styleBindings: TStylingRange;\n}\n\n/**\n * See `TNode.insertBeforeIndex`\n */\nexport type InsertBeforeIndex = null|number|number[];\n\n/** Static data for an element  */\nexport interface TElementNode extends TNode {\n  /** Index in the data[] array */\n  index: number;\n  child: TElementNode|TTextNode|TElementContainerNode|TContainerNode|TProjectionNode|null;\n  /**\n   * Element nodes will have parents unless they are the first node of a component or\n   * embedded view (which means their parent is in a different view and must be\n   * retrieved using viewData[HOST_NODE]).\n   */\n  parent: TElementNode|TElementContainerNode|null;\n  tViews: null;\n\n  /**\n   * If this is a component TNode with projection, this will be an array of projected\n   * TNodes or native nodes (see TNode.projection for more info). If it's a regular element node\n   * or a component without projection, it will be null.\n   */\n  projection: (TNode|RNode[])[]|null;\n\n  /**\n   * Stores TagName\n   */\n  value: string;\n}\n\n/** Static data for a text node */\nexport interface TTextNode extends TNode {\n  /** Index in the data[] array */\n  index: number;\n  child: null;\n  /**\n   * Text nodes will have parents unless they are the first node of a component or\n   * embedded view (which means their parent is in a different view and must be\n   * retrieved using LView.node).\n   */\n  parent: TElementNode|TElementContainerNode|null;\n  tViews: null;\n  projection: null;\n}\n\n/** Static data for an LContainer */\nexport interface TContainerNode extends TNode {\n  /**\n   * Index in the data[] array.\n   *\n   * If it's -1, this is a dynamically created container node that isn't stored in\n   * data[] (e.g. when you inject ViewContainerRef) .\n   */\n  index: number;\n  child: null;\n\n  /**\n   * Container nodes will have parents unless:\n   *\n   * - They are the first node of a component or embedded view\n   * - They are dynamically created\n   */\n  parent: TElementNode|TElementContainerNode|null;\n  tViews: TView|TView[]|null;\n  projection: null;\n  value: null;\n}\n\n/** Static data for an <ng-container> */\nexport interface TElementContainerNode extends TNode {\n  /** Index in the LView[] array. */\n  index: number;\n  child: TElementNode|TTextNode|TContainerNode|TElementContainerNode|TProjectionNode|null;\n  parent: TElementNode|TElementContainerNode|null;\n  tViews: null;\n  projection: null;\n}\n\n/** Static data for an ICU expression */\nexport interface TIcuContainerNode extends TNode {\n  /** Index in the LView[] array. */\n  index: number;\n  child: null;\n  parent: TElementNode|TElementContainerNode|null;\n  tViews: null;\n  projection: null;\n  value: TIcu;\n}\n\n/** Static data for an LProjectionNode  */\nexport interface TProjectionNode extends TNode {\n  /** Index in the data[] array */\n  child: null;\n  /**\n   * Projection nodes will have parents unless they are the first node of a component\n   * or embedded view (which means their parent is in a different view and must be\n   * retrieved using LView.node).\n   */\n  parent: TElementNode|TElementContainerNode|null;\n  tViews: null;\n\n  /** Index of the projection node. (See TNode.projection for more info.) */\n  projection: number;\n  value: null;\n}\n\n/**\n * A union type representing all TNode types that can host a directive.\n */\nexport type TDirectiveHostNode = TElementNode|TContainerNode|TElementContainerNode;\n\n/**\n * This mapping is necessary so we can set input properties and output listeners\n * properly at runtime when property names are minified or aliased.\n *\n * Key: unminified / public input or output name\n * Value: array containing minified / internal name and related directive index\n *\n * The value must be an array to support inputs and outputs with the same name\n * on the same node.\n */\nexport type PropertyAliases = {\n  // This uses an object map because using the Map type would be too slow\n  [key: string]: PropertyAliasValue\n};\n\n/**\n * Store the runtime input or output names for all the directives.\n *\n * i+0: directive instance index\n * i+1: privateName\n *\n * e.g. [0, 'change-minified']\n */\nexport type PropertyAliasValue = (number|string)[];\n\n/**\n * This array contains information about input properties that\n * need to be set once from attribute data. It's ordered by\n * directive index (relative to element) so it's simple to\n * look up a specific directive's initial input data.\n *\n * Within each sub-array:\n *\n * i+0: attribute name\n * i+1: minified/internal input name\n * i+2: initial value\n *\n * If a directive on a node does not have any input properties\n * that should be set from attributes, its index is set to null\n * to avoid a sparse array.\n *\n * e.g. [null, ['role-min', 'minified-input', 'button']]\n */\nexport type InitialInputData = (InitialInputs|null)[];\n\n/**\n * Used by InitialInputData to store input properties\n * that should be set once from attributes.\n *\n * i+0: attribute name\n * i+1: minified/internal input name\n * i+2: initial value\n *\n * e.g. ['role-min', 'minified-input', 'button']\n */\nexport type InitialInputs = string[];\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n\n/**\n * Type representing a set of TNodes that can have local refs (`#foo`) placed on them.\n */\nexport type TNodeWithLocalRefs = TContainerNode|TElementNode|TElementContainerNode;\n\n/**\n * Type for a function that extracts a value for a local refs.\n * Example:\n * - `<div #nativeDivEl>` - `nativeDivEl` should point to the native `<div>` element;\n * - `<ng-template #tplRef>` - `tplRef` should point to the `TemplateRef` instance;\n */\nexport type LocalRefExtractor = (tNode: TNodeWithLocalRefs, currentView: LView) => any;\n\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.\n *\n * ```\n * <div my-dir [class]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nexport function hasClassInput(tNode: TNode) {\n  return (tNode.flags & TNodeFlags.hasClassInput) !== 0;\n}\n\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.\n *\n * ```\n * <div my-dir [style]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nexport function hasStyleInput(tNode: TNode) {\n  return (tNode.flags & TNodeFlags.hasStyleInput) !== 0;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {OpaqueViewState} from '../interfaces/view';\nimport {getLView} from '../state';\n\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @codeGenApi\n */\nexport function ɵɵgetCurrentView(): OpaqueViewState {\n  return getLView() as any as OpaqueViewState;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscribable} from 'rxjs';\n\n/**\n * Determine if the argument is shaped like a Promise\n */\nexport function isPromise<T = any>(obj: any): obj is Promise<T> {\n  // allow any Promise/A+ compliant thenable.\n  // It's up to the caller to ensure that obj.then conforms to the spec\n  return !!obj && typeof obj.then === 'function';\n}\n\n/**\n * Determine if the argument is a Subscribable\n */\nexport function isSubscribable(obj: any|Subscribable<any>): obj is Subscribable<any> {\n  return !!obj && typeof obj.subscribe === 'function';\n}\n\n/**\n * Determine if the argument is an Observable\n *\n * Strictly this tests that the `obj` is `Subscribable`, since `Observable`\n * types need additional methods, such as `lift()`. But it is adequate for our\n * needs since within the Angular framework code we only ever need to use the\n * `subscribe()` method, and RxJS has mechanisms to wrap `Subscribable` objects\n * into `Observable` as needed.\n */\nexport const isObservable =\n    isSubscribable as ((obj: any|Observable<any>) => obj is Observable<any>);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {assertIndexInRange} from '../../util/assert';\nimport {isObservable} from '../../util/lang';\nimport {EMPTY_OBJ} from '../empty';\nimport {PropertyAliasValue, TNode, TNodeFlags, TNodeType} from '../interfaces/node';\nimport {GlobalTargetResolver, isProceduralRenderer, Renderer3} from '../interfaces/renderer';\nimport {RElement} from '../interfaces/renderer_dom';\nimport {isDirectiveHost} from '../interfaces/type_checks';\nimport {CLEANUP, FLAGS, LView, LViewFlags, RENDERER, TView} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {getCurrentDirectiveDef, getCurrentTNode, getLView, getTView} from '../state';\nimport {getComponentLViewByIndex, getNativeByTNode, unwrapRNode} from '../util/view_utils';\n\nimport {getOrCreateLViewCleanup, getOrCreateTViewCleanup, handleError, loadComponentRenderer, markViewDirty} from './shared';\n\n\n\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nexport function ɵɵlistener(\n    eventName: string, listenerFn: (e?: any) => any, useCapture = false,\n    eventTargetResolver?: GlobalTargetResolver): typeof ɵɵlistener {\n  const lView = getLView();\n  const tView = getTView();\n  const tNode = getCurrentTNode()!;\n  listenerInternal(\n      tView, lView, lView[RENDERER], tNode, eventName, listenerFn, useCapture, eventTargetResolver);\n  return ɵɵlistener;\n}\n\n/**\n * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\n * in the component's renderer. Normally all host listeners are evaluated with the\n * parent component's renderer, but, in the case of animation @triggers, they need\n * to be evaluated with the sub component's renderer (because that's where the\n * animation triggers are defined).\n *\n * Do not use this instruction as a replacement for `listener`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nexport function ɵɵsyntheticHostListener(\n    eventName: string, listenerFn: (e?: any) => any, useCapture = false,\n    eventTargetResolver?: GlobalTargetResolver): typeof ɵɵsyntheticHostListener {\n  const tNode = getCurrentTNode()!;\n  const lView = getLView();\n  const tView = getTView();\n  const currentDef = getCurrentDirectiveDef(tView.data);\n  const renderer = loadComponentRenderer(currentDef, tNode, lView);\n  listenerInternal(\n      tView, lView, renderer, tNode, eventName, listenerFn, useCapture, eventTargetResolver);\n  return ɵɵsyntheticHostListener;\n}\n\n/**\n * A utility function that checks if a given element has already an event handler registered for an\n * event with a specified name. The TView.cleanup data structure is used to find out which events\n * are registered for a given element.\n */\nfunction findExistingListener(\n    tView: TView, lView: LView, eventName: string, tNodeIdx: number): ((e?: any) => any)|null {\n  const tCleanup = tView.cleanup;\n  if (tCleanup != null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      const cleanupEventName = tCleanup[i];\n      if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {\n        // We have found a matching event name on the same node but it might not have been\n        // registered yet, so we must explicitly verify entries in the LView cleanup data\n        // structures.\n        const lCleanup = lView[CLEANUP]!;\n        const listenerIdxInLCleanup = tCleanup[i + 2];\n        return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n      }\n      // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n      // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n      // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n      // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n      // documentation of TView.cleanup for more details of this data structure layout.\n      if (typeof cleanupEventName === 'string') {\n        i += 2;\n      }\n    }\n  }\n  return null;\n}\n\nfunction listenerInternal(\n    tView: TView, lView: LView, renderer: Renderer3, tNode: TNode, eventName: string,\n    listenerFn: (e?: any) => any, useCapture = false,\n    eventTargetResolver?: GlobalTargetResolver): void {\n  const isTNodeDirectiveHost = isDirectiveHost(tNode);\n  const firstCreatePass = tView.firstCreatePass;\n  const tCleanup: false|any[] = firstCreatePass && getOrCreateTViewCleanup(tView);\n\n  // When the ɵɵlistener instruction was generated and is executed we know that there is either a\n  // native listener or a directive output on this element. As such we we know that we will have to\n  // register a listener and store its cleanup function on LView.\n  const lCleanup = getOrCreateLViewCleanup(lView);\n\n  ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode | TNodeType.AnyContainer);\n\n  let processOutputs = true;\n\n  // add native event listener - applicable to elements only\n  if (tNode.type & TNodeType.AnyRNode) {\n    const native = getNativeByTNode(tNode, lView) as RElement;\n    const resolved = eventTargetResolver ? eventTargetResolver(native) : EMPTY_OBJ as any;\n    const target = resolved.target || native;\n    const lCleanupIndex = lCleanup.length;\n    const idxOrTargetGetter = eventTargetResolver ?\n        (_lView: LView) => eventTargetResolver(unwrapRNode(_lView[tNode.index])).target :\n        tNode.index;\n\n    // In order to match current behavior, native DOM event listeners must be added for all\n    // events (including outputs).\n    if (isProceduralRenderer(renderer)) {\n      // There might be cases where multiple directives on the same element try to register an event\n      // handler function for the same event. In this situation we want to avoid registration of\n      // several native listeners as each registration would be intercepted by NgZone and\n      // trigger change detection. This would mean that a single user action would result in several\n      // change detections being invoked. To avoid this situation we want to have only one call to\n      // native handler registration (for the same element and same type of event).\n      //\n      // In order to have just one native event handler in presence of multiple handler functions,\n      // we just register a first handler function as a native event listener and then chain\n      // (coalesce) other handler functions on top of the first native handler function.\n      let existingListener = null;\n      // Please note that the coalescing described here doesn't happen for events specifying an\n      // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n      // view engine.\n      // Also, we don't have to search for existing listeners is there are no directives\n      // matching on a given node as we can't register multiple event handlers for the same event in\n      // a template (this would mean having duplicate attributes).\n      if (!eventTargetResolver && isTNodeDirectiveHost) {\n        existingListener = findExistingListener(tView, lView, eventName, tNode.index);\n      }\n      if (existingListener !== null) {\n        // Attach a new listener to coalesced listeners list, maintaining the order in which\n        // listeners are registered. For performance reasons, we keep a reference to the last\n        // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through\n        // the entire set each time we need to add a new listener.\n        const lastListenerFn = (<any>existingListener).__ngLastListenerFn__ || existingListener;\n        lastListenerFn.__ngNextListenerFn__ = listenerFn;\n        (<any>existingListener).__ngLastListenerFn__ = listenerFn;\n        processOutputs = false;\n      } else {\n        // The first argument of `listen` function in Procedural Renderer is:\n        // - either a target name (as a string) in case of global target (window, document, body)\n        // - or element reference (in all other cases)\n        listenerFn = wrapListener(tNode, lView, listenerFn, false /** preventDefault */);\n        const cleanupFn = renderer.listen(resolved.name || target, eventName, listenerFn);\n        ngDevMode && ngDevMode.rendererAddEventListener++;\n\n        lCleanup.push(listenerFn, cleanupFn);\n        tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);\n      }\n\n    } else {\n      listenerFn = wrapListener(tNode, lView, listenerFn, true /** preventDefault */);\n      target.addEventListener(eventName, listenerFn, useCapture);\n      ngDevMode && ngDevMode.rendererAddEventListener++;\n\n      lCleanup.push(listenerFn);\n      tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, useCapture);\n    }\n  } else {\n    // Even if there is no native listener to add, we still need to wrap the listener so that OnPush\n    // ancestors are marked dirty when an event occurs.\n    listenerFn = wrapListener(tNode, lView, listenerFn, false /** preventDefault */);\n  }\n\n  // subscribe to directive outputs\n  const outputs = tNode.outputs;\n  let props: PropertyAliasValue|undefined;\n  if (processOutputs && outputs !== null && (props = outputs[eventName])) {\n    const propsLength = props.length;\n    if (propsLength) {\n      for (let i = 0; i < propsLength; i += 2) {\n        const index = props[i] as number;\n        ngDevMode && assertIndexInRange(lView, index);\n        const minifiedName = props[i + 1];\n        const directiveInstance = lView[index];\n        const output = directiveInstance[minifiedName];\n\n        if (ngDevMode && !isObservable(output)) {\n          throw new Error(`@Output ${minifiedName} not initialized in '${\n              directiveInstance.constructor.name}'.`);\n        }\n\n        const subscription = output.subscribe(listenerFn);\n        const idx = lCleanup.length;\n        lCleanup.push(listenerFn, subscription);\n        tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n      }\n    }\n  }\n}\n\nfunction executeListenerWithErrorHandling(\n    lView: LView, listenerFn: (e?: any) => any, e: any): boolean {\n  try {\n    // Only explicitly returning false from a listener should preventDefault\n    return listenerFn(e) !== false;\n  } catch (error) {\n    handleError(lView, error);\n    return false;\n  }\n}\n\n/**\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n * if applicable.\n *\n * @param tNode The TNode associated with this listener\n * @param lView The LView that contains this listener\n * @param listenerFn The listener function to call\n * @param wrapWithPreventDefault Whether or not to prevent default behavior\n * (the procedural renderer does this already, so in those cases, we should skip)\n */\nfunction wrapListener(\n    tNode: TNode, lView: LView, listenerFn: (e?: any) => any,\n    wrapWithPreventDefault: boolean): EventListener {\n  // Note: we are performing most of the work in the listener function itself\n  // to optimize listener registration.\n  return function wrapListenerIn_markDirtyAndPreventDefault(e: any) {\n    // Ivy uses `Function` as a special token that allows us to unwrap the function\n    // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.\n    if (e === Function) {\n      return listenerFn;\n    }\n\n    // In order to be backwards compatible with View Engine, events on component host nodes\n    // must also mark the component view itself dirty (i.e. the view that it owns).\n    const startView = tNode.flags & TNodeFlags.isComponentHost ?\n        getComponentLViewByIndex(tNode.index, lView) :\n        lView;\n\n    // See interfaces/view.ts for more on LViewFlags.ManualOnPush\n    if ((lView[FLAGS] & LViewFlags.ManualOnPush) === 0) {\n      markViewDirty(startView);\n    }\n\n    let result = executeListenerWithErrorHandling(lView, listenerFn, e);\n    // A just-invoked listener function might have coalesced listeners so we need to check for\n    // their presence and invoke as needed.\n    let nextListenerFn = (<any>wrapListenerIn_markDirtyAndPreventDefault).__ngNextListenerFn__;\n    while (nextListenerFn) {\n      // We should prevent default if any of the listeners explicitly return false\n      result = executeListenerWithErrorHandling(lView, nextListenerFn, e) && result;\n      nextListenerFn = (<any>nextListenerFn).__ngNextListenerFn__;\n    }\n\n    if (wrapWithPreventDefault && result === false) {\n      e.preventDefault();\n      // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n      e.returnValue = false;\n    }\n\n    return result;\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {nextContextImpl} from '../state';\n\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @param level The relative level of the view from which to grab context compared to contextVewData\n * @returns context\n *\n * @codeGenApi\n */\nexport function ɵɵnextContext<T = any>(level: number = 1): T {\n  return nextContextImpl(level);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {newArray} from '../../util/array_utils';\nimport {TAttributes, TElementNode, TNode, TNodeFlags, TNodeType} from '../interfaces/node';\nimport {ProjectionSlots} from '../interfaces/projection';\nimport {DECLARATION_COMPONENT_VIEW, HEADER_OFFSET, T_HOST} from '../interfaces/view';\nimport {applyProjection} from '../node_manipulation';\nimport {getProjectAsAttrValue, isNodeMatchingSelectorList, isSelectorInSelectorList} from '../node_selector_matcher';\nimport {getLView, getTView, setCurrentTNodeAsNotParent} from '../state';\nimport {getOrCreateTNode} from './shared';\n\n\n\n/**\n * Checks a given node against matching projection slots and returns the\n * determined slot index. Returns \"null\" if no slot matched the given node.\n *\n * This function takes into account the parsed ngProjectAs selector from the\n * node's attributes. If present, it will check whether the ngProjectAs selector\n * matches any of the projection slot selectors.\n */\nexport function matchingProjectionSlotIndex(tNode: TNode, projectionSlots: ProjectionSlots): number|\n    null {\n  let wildcardNgContentIndex = null;\n  const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n  for (let i = 0; i < projectionSlots.length; i++) {\n    const slotValue = projectionSlots[i];\n    // The last wildcard projection slot should match all nodes which aren't matching\n    // any selector. This is necessary to be backwards compatible with view engine.\n    if (slotValue === '*') {\n      wildcardNgContentIndex = i;\n      continue;\n    }\n    // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n    // to the list of selectors, otherwise we fall back to matching against the node.\n    if (ngProjectAsAttrVal === null ?\n            isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */ true) :\n            isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {\n      return i;  // first matching selector \"captures\" a given node\n    }\n  }\n  return wildcardNgContentIndex;\n}\n\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param projectionSlots? A collection of projection slots. A projection slot can be based\n *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\n *        all nodes which do not match any selector. If not specified, a single wildcard\n *        selector projection slot will be defined.\n *\n * @codeGenApi\n */\nexport function ɵɵprojectionDef(projectionSlots?: ProjectionSlots): void {\n  const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST] as TElementNode;\n\n  if (!componentNode.projection) {\n    // If no explicit projection slots are defined, fall back to a single\n    // projection slot with the wildcard selector.\n    const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\n    const projectionHeads: (TNode|null)[] = componentNode.projection =\n        newArray(numProjectionSlots, null! as TNode);\n    const tails: (TNode|null)[] = projectionHeads.slice();\n\n    let componentChild: TNode|null = componentNode.child;\n\n    while (componentChild !== null) {\n      const slotIndex =\n          projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;\n\n      if (slotIndex !== null) {\n        if (tails[slotIndex]) {\n          tails[slotIndex]!.projectionNext = componentChild;\n        } else {\n          projectionHeads[slotIndex] = componentChild;\n        }\n        tails[slotIndex] = componentChild;\n      }\n\n      componentChild = componentChild.next;\n    }\n  }\n}\n\n\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param nodeIndex\n * @param selectorIndex:\n *        - 0 when the selector is `*` (or unspecified as this is the default value),\n *        - 1 based index of the selector from the {@link projectionDef}\n *\n * @codeGenApi\n */\nexport function ɵɵprojection(\n    nodeIndex: number, selectorIndex: number = 0, attrs?: TAttributes): void {\n  const lView = getLView();\n  const tView = getTView();\n  const tProjectionNode =\n      getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, TNodeType.Projection, null, attrs || null);\n\n  // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n  if (tProjectionNode.projection === null) tProjectionNode.projection = selectorIndex;\n\n  // `<ng-content>` has no content\n  setCurrentTNodeAsNotParent();\n\n  if ((tProjectionNode.flags & TNodeFlags.isDetached) !== TNodeFlags.isDetached) {\n    // re-distribution of projectable nodes is stored on a component's view level\n    applyProjection(tView, lView, tProjectionNode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {RENDERER} from '../interfaces/view';\nimport {getBindingIndex, getLView, getSelectedTNode, getTView} from '../state';\nimport {NO_CHANGE} from '../tokens';\n\nimport {interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV} from './interpolation';\nimport {elementPropertyInternal, storePropertyBindingMetadata} from './shared';\n\n\n/**\n *\n * Update an interpolated property on an element with a lone bound value\n *\n * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div title=\"{{v0}}\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate('title', v0);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate(\n    propName: string, v0: any, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate {\n  ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);\n  return ɵɵpropertyInterpolate;\n}\n\n\n/**\n *\n * Update an interpolated property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate1(\n    propName: string, prefix: string, v0: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate1 {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);\n  }\n  return ɵɵpropertyInterpolate1;\n}\n\n/**\n *\n * Update an interpolated property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate2(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate2 {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);\n  }\n  return ɵɵpropertyInterpolate2;\n}\n\n/**\n *\n * Update an interpolated property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate3(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any,\n    suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate3 {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n  }\n  return ɵɵpropertyInterpolate3;\n}\n\n/**\n *\n * Update an interpolated property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate4(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate4 {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n  }\n  return ɵɵpropertyInterpolate4;\n}\n\n/**\n *\n * Update an interpolated property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate5(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate5 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n  }\n  return ɵɵpropertyInterpolate5;\n}\n\n/**\n *\n * Update an interpolated property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate6(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate6 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n  }\n  return ɵɵpropertyInterpolate6;\n}\n\n/**\n *\n * Update an interpolated property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate7(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate7 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5,\n            suffix);\n  }\n  return ɵɵpropertyInterpolate7;\n}\n\n/**\n *\n * Update an interpolated property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate8(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate8 {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(\n      lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6,\n            suffix);\n  }\n  return ɵɵpropertyInterpolate8;\n}\n\n/**\n * Update an interpolated property on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update.\n * @param values The collection of values and the strings inbetween those values, beginning with a\n * string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolateV(\n    propName: string, values: any[], sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolateV {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    if (ngDevMode) {\n      const interpolationInBetween = [values[0]];  // prefix\n      for (let i = 2; i < values.length; i += 2) {\n        interpolationInBetween.push(values[i]);\n      }\n      storePropertyBindingMetadata(\n          tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1,\n          ...interpolationInBetween);\n    }\n  }\n  return ɵɵpropertyInterpolateV;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {initNgDevMode} from './ng_dev_mode';\n\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n */\n\nexport const EMPTY_OBJ: {} = {};\nexport const EMPTY_ARRAY: any[] = [];\n\n// freezing the values prevents any code from accidentally inserting new values in\nif ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {\n  // These property accesses can be ignored because ngDevMode will be set to false\n  // when optimizing code and the whole if statement will be dropped.\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_OBJ);\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_ARRAY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {KeyValueArray, keyValueArrayIndexOf} from '../../util/array_utils';\nimport {assertEqual, assertIndexInRange, assertNotEqual} from '../../util/assert';\nimport {assertFirstUpdatePass} from '../assert';\nimport {TNode} from '../interfaces/node';\nimport {getTStylingRangeNext, getTStylingRangePrev, setTStylingRangeNext, setTStylingRangeNextDuplicate, setTStylingRangePrev, setTStylingRangePrevDuplicate, toTStylingRange, TStylingKey, TStylingKeyPrimitive, TStylingRange} from '../interfaces/styling';\nimport {TData} from '../interfaces/view';\nimport {getTView} from '../state';\n\n\n/**\n * NOTE: The word `styling` is used interchangeably as style or class styling.\n *\n * This file contains code to link styling instructions together so that they can be replayed in\n * priority order. The file exists because Ivy styling instruction execution order does not match\n * that of the priority order. The purpose of this code is to create a linked list so that the\n * instructions can be traversed in priority order when computing the styles.\n *\n * Assume we are dealing with the following code:\n * ```\n * @Component({\n *   template: `\n *     <my-cmp [style]=\" {color: '#001'} \"\n *             [style.color]=\" #002 \"\n *             dir-style-color-1\n *             dir-style-color-2> `\n * })\n * class ExampleComponent {\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#001'});\n *     ɵɵstyleProp('color', '#002');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-1]',\n * })\n * class Style1Directive {\n *   @HostBinding('style') style = {color: '#005'};\n *   @HostBinding('style.color') color = '#006';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#005'});\n *     ɵɵstyleProp('color', '#006');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-2]',\n * })\n * class Style2Directive {\n *   @HostBinding('style') style = {color: '#007'};\n *   @HostBinding('style.color') color = '#008';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#007'});\n *     ɵɵstyleProp('color', '#008');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `my-cmp',\n * })\n * class MyComponent {\n *   @HostBinding('style') style = {color: '#003'};\n *   @HostBinding('style.color') color = '#004';\n *\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#003'});\n *     ɵɵstyleProp('color', '#004');\n *     ...\n *   }\n * }\n * ```\n *\n * The Order of instruction execution is:\n *\n * NOTE: the comment binding location is for illustrative purposes only.\n *\n * ```\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * ```\n *\n * The correct priority order of concatenation is:\n *\n * ```\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * ```\n *\n * What color should be rendered?\n *\n * Once the items are correctly sorted in the list, the answer is simply the last item in the\n * concatenation list which is `#002`.\n *\n * To do so we keep a linked list of all of the bindings which pertain to this element.\n * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows\n * us to traverse them in the order of priority.\n *\n * |Idx|`TView.data`|`LView`          | Notes\n * |---|------------|-----------------|--------------\n * |...|            |                 |\n * |10 |`null`      |`{color: '#001'}`| `ɵɵstyleMap('color', {color: '#001'})`\n * |11 |`30 | 12`   | ...             |\n * |12 |`color`     |`'#002'`         | `ɵɵstyleProp('color', '#002')`\n * |13 |`10 | 0`    | ...             |\n * |...|            |                 |\n * |20 |`null`      |`{color: '#003'}`| `ɵɵstyleMap('color', {color: '#003'})`\n * |21 |`0 | 22`    | ...             |\n * |22 |`color`     |`'#004'`         | `ɵɵstyleProp('color', '#004')`\n * |23 |`20 | 24`   | ...             |\n * |24 |`null`      |`{color: '#005'}`| `ɵɵstyleMap('color', {color: '#005'})`\n * |25 |`22 | 26`   | ...             |\n * |26 |`color`     |`'#006'`         | `ɵɵstyleProp('color', '#006')`\n * |27 |`24 | 28`   | ...             |\n * |28 |`null`      |`{color: '#007'}`| `ɵɵstyleMap('color', {color: '#007'})`\n * |29 |`26 | 30`   | ...             |\n * |30 |`color`     |`'#008'`         | `ɵɵstyleProp('color', '#008')`\n * |31 |`28 | 10`   | ...             |\n *\n * The above data structure allows us to re-concatenate the styling no matter which data binding\n * changes.\n *\n * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next\n * duplicate bit. The duplicate bit if true says there either is a binding with the same name or\n * there is a map (which may contain the name). This information is useful in knowing if other\n * styles with higher priority need to be searched for overwrites.\n *\n * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in\n * `tnode_linked_list_spec.ts` for working example.\n */\nlet __unused_const_as_closure_does_not_like_standalone_comment_blocks__: undefined;\n\n/**\n * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked\n * list of styles and compute the duplicate flag.\n *\n * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.\n *\n * The function works by keeping track of `tStylingRange` which contains two pointers pointing to\n * the head/tail of the template portion of the styles.\n *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`\n *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`\n *\n * @param tData The `TData` to insert into.\n * @param tNode `TNode` associated with the styling element.\n * @param tStylingKey See `TStylingKey`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of\n *               template.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nexport function insertTStylingBinding(\n    tData: TData, tNode: TNode, tStylingKeyWithStatic: TStylingKey, index: number,\n    isHostBinding: boolean, isClassBinding: boolean): void {\n  ngDevMode && assertFirstUpdatePass(getTView());\n  let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;\n  let tmplHead = getTStylingRangePrev(tBindings);\n  let tmplTail = getTStylingRangeNext(tBindings);\n\n  tData[index] = tStylingKeyWithStatic;\n  let isKeyDuplicateOfStatic = false;\n  let tStylingKey: TStylingKeyPrimitive;\n  if (Array.isArray(tStylingKeyWithStatic)) {\n    // We are case when the `TStylingKey` contains static fields as well.\n    const staticKeyValueArray = tStylingKeyWithStatic as KeyValueArray<any>;\n    tStylingKey = staticKeyValueArray[1];  // unwrap.\n    // We need to check if our key is present in the static so that we can mark it as duplicate.\n    if (tStylingKey === null ||\n        keyValueArrayIndexOf(staticKeyValueArray, tStylingKey as string) > 0) {\n      // tStylingKey is present in the statics, need to mark it as duplicate.\n      isKeyDuplicateOfStatic = true;\n    }\n  } else {\n    tStylingKey = tStylingKeyWithStatic;\n  }\n  if (isHostBinding) {\n    // We are inserting host bindings\n\n    // If we don't have template bindings then `tail` is 0.\n    const hasTemplateBindings = tmplTail !== 0;\n    // This is important to know because that means that the `head` can't point to the first\n    // template bindings (there are none.) Instead the head points to the tail of the template.\n    if (hasTemplateBindings) {\n      // template head's \"prev\" will point to last host binding or to 0 if no host bindings yet\n      const previousNode = getTStylingRangePrev(tData[tmplHead + 1] as TStylingRange);\n      tData[index + 1] = toTStylingRange(previousNode, tmplHead);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (previousNode !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[previousNode + 1] =\n            setTStylingRangeNext(tData[previousNode + 1] as TStylingRange, index);\n      }\n      // The \"previous\" of the template binding head should point to this host binding\n      tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1] as TStylingRange, index);\n    } else {\n      tData[index + 1] = toTStylingRange(tmplHead, 0);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (tmplHead !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1] as TStylingRange, index);\n      }\n      // if we don't have template, the head points to template-tail, and needs to be advanced.\n      tmplHead = index;\n    }\n  } else {\n    // We are inserting in template section.\n    // We need to set this binding's \"previous\" to the current template tail\n    tData[index + 1] = toTStylingRange(tmplTail, 0);\n    ngDevMode &&\n        assertEqual(\n            tmplHead !== 0 && tmplTail === 0, false,\n            'Adding template bindings after hostBindings is not allowed.');\n    if (tmplHead === 0) {\n      tmplHead = index;\n    } else {\n      // We need to update the previous value \"next\" to point to this binding\n      tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1] as TStylingRange, index);\n    }\n    tmplTail = index;\n  }\n\n  // Now we need to update / compute the duplicates.\n  // Starting with our location search towards head (least priority)\n  if (isKeyDuplicateOfStatic) {\n    tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1] as TStylingRange);\n  }\n  markDuplicates(tData, tStylingKey, index, true, isClassBinding);\n  markDuplicates(tData, tStylingKey, index, false, isClassBinding);\n  markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);\n\n  tBindings = toTStylingRange(tmplHead, tmplTail);\n  if (isClassBinding) {\n    tNode.classBindings = tBindings;\n  } else {\n    tNode.styleBindings = tBindings;\n  }\n}\n\n/**\n * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.\n *\n * @param tNode `TNode` where the residual is stored.\n * @param tStylingKey `TStylingKey` to store.\n * @param tData `TData` associated with the current `LView`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction markDuplicateOfResidualStyling(\n    tNode: TNode, tStylingKey: TStylingKey, tData: TData, index: number, isClassBinding: boolean) {\n  const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;\n  if (residual != null /* or undefined */ && typeof tStylingKey == 'string' &&\n      keyValueArrayIndexOf(residual, tStylingKey) >= 0) {\n    // We have duplicate in the residual so mark ourselves as duplicate.\n    tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1] as TStylingRange);\n  }\n}\n\n\n/**\n * Marks `TStyleValue`s as duplicates if another style binding in the list has the same\n * `TStyleValue`.\n *\n * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once\n * with it set to `false` to search both the previous as well as next items in the list.\n *\n * No duplicate case\n * ```\n *   [style.color]\n *   [style.width.px] <<- index\n *   [style.height.px]\n * ```\n *\n * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no\n * duplicates because `width` is not found in any other part of the linked list.\n *\n * Duplicate case\n * ```\n *   [style.color]\n *   [style.width.em]\n *   [style.width.px] <<- index\n * ```\n * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`\n * because `width` is found in the chain.\n *\n * Map case 1\n * ```\n *   [style.width.px]\n *   [style.color]\n *   [style]  <<- index\n * ```\n * In the above case adding `[style]` will produce a duplicate with any other bindings because\n * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.\n *\n * Map case 2\n * ```\n *   [style]\n *   [style.width.px]\n *   [style.color]  <<- index\n * ```\n * In the above case adding `[style.color]` will produce a duplicate because there is already a\n * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or\n * `width`.\n *\n * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.\n * NOTE: We use `style` as example, but same logic is applied to `class`es as well.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in\n *        the linked list.\n * @param index Starting location in the linked list to search from\n * @param isPrevDir Direction.\n *        - `true` for previous (lower priority);\n *        - `false` for next (higher priority).\n */\nfunction markDuplicates(\n    tData: TData, tStylingKey: TStylingKeyPrimitive, index: number, isPrevDir: boolean,\n    isClassBinding: boolean) {\n  const tStylingAtIndex = tData[index + 1] as TStylingRange;\n  const isMap = tStylingKey === null;\n  let cursor =\n      isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);\n  let foundDuplicate = false;\n  // We keep iterating as long as we have a cursor\n  // AND either:\n  // - we found what we are looking for, OR\n  // - we are a map in which case we have to continue searching even after we find what we were\n  //   looking for since we are a wild card and everything needs to be flipped to duplicate.\n  while (cursor !== 0 && (foundDuplicate === false || isMap)) {\n    ngDevMode && assertIndexInRange(tData, cursor);\n    const tStylingValueAtCursor = tData[cursor] as TStylingKey;\n    const tStyleRangeAtCursor = tData[cursor + 1] as TStylingRange;\n    if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {\n      foundDuplicate = true;\n      tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) :\n                                      setTStylingRangePrevDuplicate(tStyleRangeAtCursor);\n    }\n    cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) :\n                         getTStylingRangeNext(tStyleRangeAtCursor);\n  }\n  if (foundDuplicate) {\n    // if we found a duplicate, than mark ourselves.\n    tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) :\n                                   setTStylingRangeNextDuplicate(tStylingAtIndex);\n  }\n}\n\n/**\n * Determines if two `TStylingKey`s are a match.\n *\n * When computing whether a binding contains a duplicate, we need to compare if the instruction\n * `TStylingKey` has a match.\n *\n * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:\n * - `color`\n *    - `color`    // Match another color\n *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction\n *    - `['', 'color', 'other', true]` // wrapped `color` so match\n *    - `['', null, 'other', true]`       // wrapped `null` so match\n *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`\n * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction\n *\n * @param tStylingKeyCursor\n * @param tStylingKey\n */\nfunction isStylingMatch(tStylingKeyCursor: TStylingKey, tStylingKey: TStylingKeyPrimitive) {\n  ngDevMode &&\n      assertNotEqual(\n          Array.isArray(tStylingKey), true, 'Expected that \\'tStylingKey\\' has been unwrapped');\n  if (\n      tStylingKeyCursor === null ||  // If the cursor is `null` it means that we have map at that\n                                     // location so we must assume that we have a match.\n      tStylingKey == null ||  // If `tStylingKey` is `null` then it is a map therefor assume that it\n                              // contains a match.\n      (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) ===\n          tStylingKey  // If the keys match explicitly than we are a match.\n  ) {\n    return true;\n  } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {\n    // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has\n    // statics and we need to check those as well.\n    return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >=\n        0;  // see if we are matching the key\n  }\n  return false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SafeValue, unwrapSafeValue} from '../../sanitization/bypass';\nimport {KeyValueArray, keyValueArrayGet, keyValueArraySet} from '../../util/array_utils';\nimport {assertDefined, assertEqual, assertLessThan, assertNotEqual, throwError} from '../../util/assert';\nimport {EMPTY_ARRAY} from '../../util/empty';\nimport {concatStringsWithSpace, stringify} from '../../util/stringify';\nimport {assertFirstUpdatePass} from '../assert';\nimport {bindingUpdated} from '../bindings';\nimport {DirectiveDef} from '../interfaces/definition';\nimport {AttributeMarker, TAttributes, TNode, TNodeFlags, TNodeType} from '../interfaces/node';\nimport {Renderer3} from '../interfaces/renderer';\nimport {RElement} from '../interfaces/renderer_dom';\nimport {getTStylingRangeNext, getTStylingRangeNextDuplicate, getTStylingRangePrev, getTStylingRangePrevDuplicate, TStylingKey, TStylingRange} from '../interfaces/styling';\nimport {LView, RENDERER, TData, TView} from '../interfaces/view';\nimport {applyStyling} from '../node_manipulation';\nimport {getCurrentDirectiveDef, getLView, getSelectedIndex, getTView, incrementBindingIndex} from '../state';\nimport {insertTStylingBinding} from '../styling/style_binding_list';\nimport {getLastParsedKey, getLastParsedValue, parseClassName, parseClassNameNext, parseStyle, parseStyleNext} from '../styling/styling_parser';\nimport {NO_CHANGE} from '../tokens';\nimport {getNativeByIndex} from '../util/view_utils';\nimport {setDirectiveInputsWhichShadowsStyling} from './property';\n\n\n/**\n * Update a style binding on an element with the provided value.\n *\n * If the style value is falsy then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `styleMap` or any static styles that are\n * present from when the element was created with `styling`).\n *\n * Note that the styling element is updated as part of `stylingApply`.\n *\n * @param prop A valid CSS property.\n * @param value New value to write (`null` or an empty string to remove).\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *\n * Note that this will apply the provided style value to the host element if this function is called\n * within a host binding function.\n *\n * @codeGenApi\n */\nexport function ɵɵstyleProp(\n    prop: string, value: string|number|SafeValue|undefined|null,\n    suffix?: string|null): typeof ɵɵstyleProp {\n  checkStylingProperty(prop, value, suffix, false);\n  return ɵɵstyleProp;\n}\n\n/**\n * Update a class binding on an element with the provided value.\n *\n * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n * therefore, the class binding itself must already be allocated using\n * `styling` within the creation block.\n *\n * @param prop A valid CSS class (only one).\n * @param value A true/false value which will turn the class on or off.\n *\n * Note that this will apply the provided class value to the host element if this function\n * is called within a host binding function.\n *\n * @codeGenApi\n */\nexport function ɵɵclassProp(className: string, value: boolean|undefined|null): typeof ɵɵclassProp {\n  checkStylingProperty(className, value, null, true);\n  return ɵɵclassProp;\n}\n\n\n/**\n * Update style bindings using an object literal on an element.\n *\n * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\n * When styles are applied to the element they will then be updated with respect to\n * any styles/classes set via `styleProp`. If any styles are set to falsy\n * then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n *\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * Note that this will apply the provided styleMap value to the host element if this function\n * is called within a host binding.\n *\n * @codeGenApi\n */\nexport function ɵɵstyleMap(styles: {[styleName: string]: any}|string|undefined|null): void {\n  checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);\n}\n\n\n/**\n * Parse text as style and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵstyleMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nexport function styleStringParser(keyValueArray: KeyValueArray<any>, text: string): void {\n  for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {\n    styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));\n  }\n}\n\n\n/**\n * Update class bindings using an object literal or class-string on an element.\n *\n * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\n * When classes are applied to the element they will then be updated with\n * respect to any styles/classes set via `classProp`. If any\n * classes are set to falsy then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n * Note that this will the provided classMap value to the host element if this function is called\n * within a host binding.\n *\n * @param classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n *\n * @codeGenApi\n */\nexport function ɵɵclassMap(classes: {[className: string]: boolean|undefined|null}|string|undefined|\n                           null): void {\n  checkStylingMap(keyValueArraySet, classStringParser, classes, true);\n}\n\n/**\n * Parse text as class and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵclassMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nexport function classStringParser(keyValueArray: KeyValueArray<any>, text: string): void {\n  for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n    keyValueArraySet(keyValueArray, getLastParsedKey(text), true);\n  }\n}\n\n/**\n * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.\n *\n * @param prop property name.\n * @param value binding value.\n * @param suffix suffix for the property (e.g. `em` or `px`)\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nexport function checkStylingProperty(\n    prop: string, value: any|NO_CHANGE, suffix: string|undefined|null,\n    isClassBased: boolean): void {\n  const lView = getLView();\n  const tView = getTView();\n  // Styling instructions use 2 slots per binding.\n  // 1. one for the value / TStylingKey\n  // 2. one for the intermittent-value / TStylingRange\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);\n  }\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    const tNode = tView.data[getSelectedIndex()] as TNode;\n    updateStyling(\n        tView, tNode, lView, lView[RENDERER], prop,\n        lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);\n  }\n}\n\n/**\n * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done for tree shaking purposes.\n * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`\n *        have different parsers.)\n * @param value bound value from application\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nexport function checkStylingMap(\n    keyValueArraySet: (keyValueArray: KeyValueArray<any>, key: string, value: any) => void,\n    stringParser: (styleKeyValueArray: KeyValueArray<any>, text: string) => void,\n    value: any|NO_CHANGE, isClassBased: boolean): void {\n  const tView = getTView();\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);\n  }\n  const lView = getLView();\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tView.data[getSelectedIndex()] as TNode;\n    if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {\n      if (ngDevMode) {\n        // verify that if we are shadowing then `TData` is appropriately marked so that we skip\n        // processing this binding in styling resolution.\n        const tStylingKey = tView.data[bindingIndex];\n        assertEqual(\n            Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false,\n            'Styling linked list shadow input should be marked as \\'false\\'');\n      }\n      // VE does not concatenate the static portion like we are doing here.\n      // Instead VE just ignores the static completely if dynamic binding is present.\n      // Because of locality we have already set the static portion because we don't know if there\n      // is a dynamic portion until later. If we would ignore the static portion it would look like\n      // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong\n      // thing as it would think that the static portion was removed. For this reason we\n      // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.\n      let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;\n      ngDevMode && isClassBased === false && staticPrefix !== null &&\n          assertEqual(\n              staticPrefix.endsWith(';'), true, 'Expecting static portion to end with \\';\\'');\n      if (staticPrefix !== null) {\n        // We want to make sure that falsy values of `value` become empty strings.\n        value = concatStringsWithSpace(staticPrefix, value ? value : '');\n      }\n      // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.\n      // This takes over the `[style]` binding. (Same for `[class]`)\n      setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);\n    } else {\n      updateStylingMap(\n          tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1],\n          lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value),\n          isClassBased, bindingIndex);\n    }\n  }\n}\n\n/**\n * Determines when the binding is in `hostBindings` section\n *\n * @param tView Current `TView`\n * @param bindingIndex index of binding which we would like if it is in `hostBindings`\n */\nfunction isInHostBindings(tView: TView, bindingIndex: number): boolean {\n  // All host bindings are placed after the expando section.\n  return bindingIndex >= tView.expandoStartIndex;\n}\n\n/**\n * Collects the necessary information to insert the binding into a linked list of style bindings\n * using `insertTStylingBinding`.\n *\n * @param tView `TView` where the binding linked list will be stored.\n * @param tStylingKey Property/key of the binding.\n * @param bindingIndex Index of binding associated with the `prop`\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction stylingFirstUpdatePass(\n    tView: TView, tStylingKey: TStylingKey, bindingIndex: number, isClassBased: boolean): void {\n  ngDevMode && assertFirstUpdatePass(tView);\n  const tData = tView.data;\n  if (tData[bindingIndex + 1] === null) {\n    // The above check is necessary because we don't clear first update pass until first successful\n    // (no exception) template execution. This prevents the styling instruction from double adding\n    // itself to the list.\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tData[getSelectedIndex()] as TNode;\n    ngDevMode && assertDefined(tNode, 'TNode expected');\n    const isHostBindings = isInHostBindings(tView, bindingIndex);\n    if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {\n      // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.\n      // If there is a directive which uses `@Input('style')` or `@Input('class')` than\n      // we need to neutralize this binding since that directive is shadowing it.\n      // We turn this into a noop by setting the key to `false`\n      tStylingKey = false;\n    }\n    tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);\n    insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);\n  }\n}\n\n/**\n * Adds static styling information to the binding if applicable.\n *\n * The linked list of styles not only stores the list and keys, but also stores static styling\n * information on some of the keys. This function determines if the key should contain the styling\n * information and computes it.\n *\n * See `TStylingStatic` for more details.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nexport function wrapInStaticStylingKey(\n    tData: TData, tNode: TNode, stylingKey: TStylingKey, isClassBased: boolean): TStylingKey {\n  const hostDirectiveDef = getCurrentDirectiveDef(tData);\n  let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n  if (hostDirectiveDef === null) {\n    // We are in template node.\n    // If template node already had styling instruction then it has already collected the static\n    // styling and there is no need to collect them again. We know that we are the first styling\n    // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).\n    const isFirstStylingInstructionInTemplate =\n        (isClassBased ? tNode.classBindings : tNode.styleBindings) as any as number === 0;\n    if (isFirstStylingInstructionInTemplate) {\n      // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point\n      // they are already merged and it would not be possible to figure which property belongs where\n      // in the priority.\n      stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);\n      stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);\n      // We know that if we have styling binding in template we can't have residual.\n      residual = null;\n    }\n  } else {\n    // We are in host binding node and there was no binding instruction in template node.\n    // This means that we need to compute the residual.\n    const directiveStylingLast = tNode.directiveStylingLast;\n    const isFirstStylingInstructionInHostBinding =\n        directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;\n    if (isFirstStylingInstructionInHostBinding) {\n      stylingKey =\n          collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);\n      if (residual === null) {\n        // - If `null` than either:\n        //    - Template styling instruction already ran and it has consumed the static\n        //      styling into its `TStylingKey` and so there is no need to update residual. Instead\n        //      we need to update the `TStylingKey` associated with the first template node\n        //      instruction. OR\n        //    - Some other styling instruction ran and determined that there are no residuals\n        let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);\n        if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {\n          // Only recompute if `templateStylingKey` had static values. (If no static value found\n          // then there is nothing to do since this operation can only produce less static keys, not\n          // more.)\n          templateStylingKey = collectStylingFromDirectives(\n              null, tData, tNode, templateStylingKey[1] /* unwrap previous statics */,\n              isClassBased);\n          templateStylingKey =\n              collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);\n          setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);\n        }\n      } else {\n        // We only need to recompute residual if it is not `null`.\n        // - If existing residual (implies there was no template styling). This means that some of\n        //   the statics may have moved from the residual to the `stylingKey` and so we have to\n        //   recompute.\n        // - If `undefined` this is the first time we are running.\n        residual = collectResidual(tData, tNode, isClassBased);\n      }\n    }\n  }\n  if (residual !== undefined) {\n    isClassBased ? (tNode.residualClasses = residual) : (tNode.residualStyles = residual);\n  }\n  return stylingKey;\n}\n\n/**\n * Retrieve the `TStylingKey` for the template styling instruction.\n *\n * This is needed since `hostBinding` styling instructions are inserted after the template\n * instruction. While the template instruction needs to update the residual in `TNode` the\n * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because\n * the template instruction is downstream from the `hostBindings` instructions.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @return `TStylingKey` if found or `undefined` if not found.\n */\nfunction getTemplateHeadTStylingKey(tData: TData, tNode: TNode, isClassBased: boolean): TStylingKey|\n    undefined {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  if (getTStylingRangeNext(bindings) === 0) {\n    // There does not seem to be a styling instruction in the `template`.\n    return undefined;\n  }\n  return tData[getTStylingRangePrev(bindings)] as TStylingKey;\n}\n\n/**\n * Update the `TStylingKey` of the first template instruction in `TNode`.\n *\n * Logically `hostBindings` styling instructions are of lower priority than that of the template.\n * However, they execute after the template styling instructions. This means that they get inserted\n * in front of the template styling instructions.\n *\n * If we have a template styling instruction and a new `hostBindings` styling instruction is\n * executed it means that it may need to steal static fields from the template instruction. This\n * method allows us to update the first template instruction `TStylingKey` with a new value.\n *\n * Assume:\n * ```\n * <div my-dir style=\"color: red\" [style.color]=\"tmplExp\"></div>\n *\n * @Directive({\n *   host: {\n *     'style': 'width: 100px',\n *     '[style.color]': 'dirExp',\n *   }\n * })\n * class MyDir {}\n * ```\n *\n * when `[style.color]=\"tmplExp\"` executes it creates this data structure.\n * ```\n *  ['', 'color', 'color', 'red', 'width', '100px'],\n * ```\n *\n * The reason for this is that the template instruction does not know if there are styling\n * instructions and must assume that there are none and must collect all of the static styling.\n * (both\n * `color' and 'width`)\n *\n * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.\n * ```\n *  ['', 'color', 'width', '100px'],  // newly inserted\n *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong\n * ```\n *\n * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to\n * update it like so:\n * ```\n *  ['', 'color', 'width', '100px'],\n *  ['', 'color', 'color', 'red'],    // UPDATE\n * ```\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param tStylingKey New `TStylingKey` which is replacing the old one.\n */\nfunction setTemplateHeadTStylingKey(\n    tData: TData, tNode: TNode, isClassBased: boolean, tStylingKey: TStylingKey): void {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  ngDevMode &&\n      assertNotEqual(\n          getTStylingRangeNext(bindings), 0,\n          'Expecting to have at least one template styling binding.');\n  tData[getTStylingRangePrev(bindings)] = tStylingKey;\n}\n\n/**\n * Collect all static values after the current `TNode.directiveStylingLast` index.\n *\n * Collect the remaining styling information which has not yet been collected by an existing\n * styling instruction.\n *\n * @param tData `TData` where the `DirectiveDefs` are stored.\n * @param tNode `TNode` which contains the directive range.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectResidual(tData: TData, tNode: TNode, isClassBased: boolean): KeyValueArray<any>|\n    null {\n  let residual: KeyValueArray<any>|null|undefined = undefined;\n  const directiveEnd = tNode.directiveEnd;\n  ngDevMode &&\n      assertNotEqual(\n          tNode.directiveStylingLast, -1,\n          'By the time this function gets called at least one hostBindings-node styling instruction must have executed.');\n  // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are\n  // collecting things after the last `hostBindings` directive which had a styling instruction.)\n  for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {\n    const attrs = (tData[i] as DirectiveDef<any>).hostAttrs;\n    residual = collectStylingFromTAttrs(residual, attrs, isClassBased) as KeyValueArray<any>| null;\n  }\n  return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased) as KeyValueArray<any>| null;\n}\n\n/**\n * Collect the static styling information with lower priority than `hostDirectiveDef`.\n *\n * (This is opposite of residual styling.)\n *\n * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static\n *        styling. (Or `null` if template styling)\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey Existing `TStylingKey` to update or wrap.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromDirectives(\n    hostDirectiveDef: DirectiveDef<any>|null, tData: TData, tNode: TNode, stylingKey: TStylingKey,\n    isClassBased: boolean): TStylingKey {\n  // We need to loop because there can be directives which have `hostAttrs` but don't have\n  // `hostBindings` so this loop catches up to the current directive..\n  let currentDirective: DirectiveDef<any>|null = null;\n  const directiveEnd = tNode.directiveEnd;\n  let directiveStylingLast = tNode.directiveStylingLast;\n  if (directiveStylingLast === -1) {\n    directiveStylingLast = tNode.directiveStart;\n  } else {\n    directiveStylingLast++;\n  }\n  while (directiveStylingLast < directiveEnd) {\n    currentDirective = tData[directiveStylingLast] as DirectiveDef<any>;\n    ngDevMode && assertDefined(currentDirective, 'expected to be defined');\n    stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);\n    if (currentDirective === hostDirectiveDef) break;\n    directiveStylingLast++;\n  }\n  if (hostDirectiveDef !== null) {\n    // we only advance the styling cursor if we are collecting data from host bindings.\n    // Template executes before host bindings and so if we would update the index,\n    // host bindings would not get their statics.\n    tNode.directiveStylingLast = directiveStylingLast;\n  }\n  return stylingKey;\n}\n\n/**\n * Convert `TAttrs` into `TStylingStatic`.\n *\n * @param stylingKey existing `TStylingKey` to update or wrap.\n * @param attrs `TAttributes` to process.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromTAttrs(\n    stylingKey: TStylingKey|undefined, attrs: TAttributes|null,\n    isClassBased: boolean): TStylingKey {\n  const desiredMarker = isClassBased ? AttributeMarker.Classes : AttributeMarker.Styles;\n  let currentMarker = AttributeMarker.ImplicitAttributes;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const item = attrs[i] as number | string;\n      if (typeof item === 'number') {\n        currentMarker = item;\n      } else {\n        if (currentMarker === desiredMarker) {\n          if (!Array.isArray(stylingKey)) {\n            stylingKey = stylingKey === undefined ? [] : ['', stylingKey] as any;\n          }\n          keyValueArraySet(\n              stylingKey as KeyValueArray<any>, item, isClassBased ? true : attrs[++i]);\n        }\n      }\n    }\n  }\n  return stylingKey === undefined ? null : stylingKey;\n}\n\n/**\n * Convert user input to `KeyValueArray`.\n *\n * This function takes user input which could be `string`, Object literal, or iterable and converts\n * it into a consistent representation. The output of this is `KeyValueArray` (which is an array\n * where\n * even indexes contain keys and odd indexes contain values for those keys).\n *\n * The advantage of converting to `KeyValueArray` is that we can perform diff in an input\n * independent\n * way.\n * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be\n * applied)\n *\n * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the\n * difference in linear fashion without the need to allocate any additional data.\n *\n * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine\n * which values need to be deleted, over the new `Map` to determine additions, and we would have to\n * keep additional `Map` to keep track of duplicates or items which have not yet been visited.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done\n *        for tree shaking purposes.\n * @param stringParser The parser is passed in so that it will be tree shakable. See\n *        `styleStringParser` and `classStringParser`\n * @param value The value to parse/convert to `KeyValueArray`\n */\nexport function toStylingKeyValueArray(\n    keyValueArraySet: (keyValueArray: KeyValueArray<any>, key: string, value: any) => void,\n    stringParser: (styleKeyValueArray: KeyValueArray<any>, text: string) => void,\n    value: string|string[]|{[key: string]: any}|SafeValue|null|undefined): KeyValueArray<any> {\n  if (value == null /*|| value === undefined */ || value === '') return EMPTY_ARRAY as any;\n  const styleKeyValueArray: KeyValueArray<any> = [] as any;\n  const unwrappedValue = unwrapSafeValue(value) as string | string[] | {[key: string]: any};\n  if (Array.isArray(unwrappedValue)) {\n    for (let i = 0; i < unwrappedValue.length; i++) {\n      keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);\n    }\n  } else if (typeof unwrappedValue === 'object') {\n    for (const key in unwrappedValue) {\n      if (unwrappedValue.hasOwnProperty(key)) {\n        keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);\n      }\n    }\n  } else if (typeof unwrappedValue === 'string') {\n    stringParser(styleKeyValueArray, unwrappedValue);\n  } else {\n    ngDevMode &&\n        throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);\n  }\n  return styleKeyValueArray;\n}\n\n/**\n * Set a `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nexport function styleKeyValueArraySet(keyValueArray: KeyValueArray<any>, key: string, value: any) {\n  keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));\n}\n\n/**\n * Update map based styling.\n *\n * Map based styling could be anything which contains more than one binding. For example `string`,\n * or object literal. Dealing with all of these types would complicate the logic so\n * instead this function expects that the complex input is first converted into normalized\n * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it\n * very cheap to compute deltas between the previous and current value.\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param oldKeyValueArray Previous value represented as `KeyValueArray`\n * @param newKeyValueArray Current value represented as `KeyValueArray`\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStylingMap(\n    tView: TView, tNode: TNode, lView: LView, renderer: Renderer3,\n    oldKeyValueArray: KeyValueArray<any>, newKeyValueArray: KeyValueArray<any>,\n    isClassBased: boolean, bindingIndex: number) {\n  if (oldKeyValueArray as KeyValueArray<any>| NO_CHANGE === NO_CHANGE) {\n    // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.\n    oldKeyValueArray = EMPTY_ARRAY as any;\n  }\n  let oldIndex = 0;\n  let newIndex = 0;\n  let oldKey: string|null = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;\n  let newKey: string|null = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;\n  while (oldKey !== null || newKey !== null) {\n    ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');\n    ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');\n    const oldValue =\n        oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;\n    const newValue =\n        newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;\n    let setKey: string|null = null;\n    let setValue: any = undefined;\n    if (oldKey === newKey) {\n      // UPDATE: Keys are equal => new value is overwriting old value.\n      oldIndex += 2;\n      newIndex += 2;\n      if (oldValue !== newValue) {\n        setKey = newKey;\n        setValue = newValue;\n      }\n    } else if (newKey === null || oldKey !== null && oldKey < newKey!) {\n      // DELETE: oldKey key is missing or we did not find the oldKey in the newValue\n      // (because the keyValueArray is sorted and `newKey` is found later alphabetically).\n      // `\"background\" < \"color\"` so we need to delete `\"background\"` because it is not found in the\n      // new array.\n      oldIndex += 2;\n      setKey = oldKey;\n    } else {\n      // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.\n      // `\"color\" > \"background\"` so we need to add `color` because it is in new array but not in\n      // old array.\n      ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');\n      newIndex += 2;\n      setKey = newKey;\n      setValue = newValue;\n    }\n    if (setKey !== null) {\n      updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);\n    }\n    oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;\n    newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;\n  }\n}\n\n/**\n * Update a simple (property name) styling.\n *\n * This function takes `prop` and updates the DOM to that value. The function takes the binding\n * value as well as binding priority into consideration to determine which value should be written\n * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks\n * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param prop Either style property name or a class name.\n * @param value Either style value for `prop` or `true`/`false` if `prop` is class.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStyling(\n    tView: TView, tNode: TNode, lView: LView, renderer: Renderer3, prop: string,\n    value: string|undefined|null|boolean, isClassBased: boolean, bindingIndex: number) {\n  if (!(tNode.type & TNodeType.AnyRNode)) {\n    // It is possible to have styling on non-elements (such as ng-container).\n    // This is rare, but it does happen. In such a case, just ignore the binding.\n    return;\n  }\n  const tData = tView.data;\n  const tRange = tData[bindingIndex + 1] as TStylingRange;\n  const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ?\n      findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) :\n      undefined;\n  if (!isStylingValuePresent(higherPriorityValue)) {\n    // We don't have a next duplicate, or we did not find a duplicate value.\n    if (!isStylingValuePresent(value)) {\n      // We should delete current value or restore to lower priority value.\n      if (getTStylingRangePrevDuplicate(tRange)) {\n        // We have a possible prev duplicate, let's retrieve it.\n        value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);\n      }\n    }\n    const rNode = getNativeByIndex(getSelectedIndex(), lView) as RElement;\n    applyStyling(renderer, isClassBased, rNode, prop, value);\n  }\n}\n\n/**\n * Search for styling value with higher priority which is overwriting current value, or a\n * value of lower priority to which we should fall back if the value is `undefined`.\n *\n * When value is being applied at a location, related values need to be consulted.\n * - If there is a higher priority binding, we should be using that one instead.\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp1`\n *   requires that we check `exp2` to see if it is set to value other than `undefined`.\n * - If there is a lower priority binding and we are changing to `undefined`\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp2` to\n *   `undefined` requires that we check `exp1` (and static values) and use that as new value.\n *\n * NOTE: The styling stores two values.\n * 1. The raw value which came from the application is stored at `index + 0` location. (This value\n *    is used for dirty checking).\n * 2. The normalized value is stored at `index + 1`.\n *\n * @param tData `TData` used for traversing the priority.\n * @param tNode `TNode` to use for resolving static styling. Also controls search direction.\n *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n *   - `null` search prev and go all the way to end. Return last value where\n *     `isStylingValuePresent(value)` is true.\n * @param lView `LView` used for retrieving the actual values.\n * @param prop Property which we are interested in.\n * @param index Starting index in the linked list of styling bindings where the search should start.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction findStylingValue(\n    tData: TData, tNode: TNode|null, lView: LView, prop: string, index: number,\n    isClassBased: boolean): any {\n  // `TNode` to use for resolving static styling. Also controls search direction.\n  //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n  //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n  //   - `null` search prev and go all the way to end. Return last value where\n  //     `isStylingValuePresent(value)` is true.\n  const isPrevDirection = tNode === null;\n  let value: any = undefined;\n  while (index > 0) {\n    const rawKey = tData[index] as TStylingKey;\n    const containsStatics = Array.isArray(rawKey);\n    // Unwrap the key if we contain static values.\n    const key = containsStatics ? (rawKey as string[])[1] : rawKey;\n    const isStylingMap = key === null;\n    let valueAtLViewIndex = lView[index + 1];\n    if (valueAtLViewIndex === NO_CHANGE) {\n      // In firstUpdatePass the styling instructions create a linked list of styling.\n      // On subsequent passes it is possible for a styling instruction to try to read a binding\n      // which\n      // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that\n      // we have `undefined` (or empty array in case of styling-map instruction) instead. This\n      // allows the resolution to apply the value (which may later be overwritten when the\n      // binding actually executes.)\n      valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;\n    }\n    let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) :\n                                      key === prop ? valueAtLViewIndex : undefined;\n    if (containsStatics && !isStylingValuePresent(currentValue)) {\n      currentValue = keyValueArrayGet(rawKey as KeyValueArray<any>, prop);\n    }\n    if (isStylingValuePresent(currentValue)) {\n      value = currentValue;\n      if (isPrevDirection) {\n        return value;\n      }\n    }\n    const tRange = tData[index + 1] as TStylingRange;\n    index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);\n  }\n  if (tNode !== null) {\n    // in case where we are going in next direction AND we did not find anything, we need to\n    // consult residual styling\n    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n    if (residual != null /** OR residual !=== undefined */) {\n      value = keyValueArrayGet(residual!, prop);\n    }\n  }\n  return value;\n}\n\n/**\n * Determines if the binding value should be used (or if the value is 'undefined' and hence priority\n * resolution should be used.)\n *\n * @param value Binding style value.\n */\nfunction isStylingValuePresent(value: any): boolean {\n  // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't\n  // have an opinion as to what this binding should be and you should consult other bindings by\n  // priority to determine the valid value.\n  // This is extracted into a single function so that we have a single place to control this.\n  return value !== undefined;\n}\n\n/**\n * Normalizes and/or adds a suffix to the value.\n *\n * If value is `null`/`undefined` no suffix is added\n * @param value\n * @param suffix\n */\nfunction normalizeSuffix(value: any, suffix: string|undefined|null): string|null|undefined|boolean {\n  if (value == null /** || value === undefined */) {\n    // do nothing\n  } else if (typeof suffix === 'string') {\n    value = value + suffix;\n  } else if (typeof value === 'object') {\n    value = stringify(unwrapSafeValue(value));\n  }\n  return value;\n}\n\n\n/**\n * Tests if the `TNode` has input shadow.\n *\n * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or\n * `@Input('class')` as input.\n *\n * @param tNode `TNode` which we would like to see if it has shadow.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nexport function hasStylingInputShadow(tNode: TNode, isClassBased: boolean) {\n  return (tNode.flags & (isClassBased ? TNodeFlags.hasClassInput : TNodeFlags.hasStyleInput)) !== 0;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {assertEqual, assertIndexInRange} from '../../util/assert';\nimport {TElementNode, TNodeType} from '../interfaces/node';\nimport {HEADER_OFFSET, RENDERER, T_HOST} from '../interfaces/view';\nimport {appendChild, createTextNode} from '../node_manipulation';\nimport {getBindingIndex, getLView, getTView, setCurrentTNode} from '../state';\n\nimport {getOrCreateTNode} from './shared';\n\n\n\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Static string value to write.\n *\n * @codeGenApi\n */\nexport function ɵɵtext(index: number, value: string = ''): void {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n\n  ngDevMode &&\n      assertEqual(\n          getBindingIndex(), tView.bindingStartIndex,\n          'text nodes should be created before any bindings');\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n\n  const tNode = tView.firstCreatePass ?\n      getOrCreateTNode(tView, adjustedIndex, TNodeType.Text, value, null) :\n      tView.data[adjustedIndex] as TElementNode;\n\n  const textNative = lView[adjustedIndex] = createTextNode(lView[RENDERER], value);\n  appendChild(tView, lView, textNative, tNode);\n\n  // Text nodes are self closing.\n  setCurrentTNode(tNode, false);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {getLView, getSelectedIndex} from '../state';\nimport {NO_CHANGE} from '../tokens';\n\nimport {interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV} from './interpolation';\nimport {textBindingInternal} from './shared';\n\n\n/**\n *\n * Update text content with a lone bound value\n *\n * Used when a text node has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div>{{v0}}</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate(v0);\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate(v0: any): typeof ɵɵtextInterpolate {\n  ɵɵtextInterpolate1('', v0, '');\n  return ɵɵtextInterpolate;\n}\n\n\n/**\n *\n * Update text content with single bound value surrounded by other text.\n *\n * Used when a text node has 1 interpolated value in it:\n *\n * ```html\n * <div>prefix{{v0}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate1('prefix', v0, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate1(\n    prefix: string, v0: any, suffix: string): typeof ɵɵtextInterpolate1 {\n  const lView = getLView();\n  const interpolated = interpolation1(lView, prefix, v0, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate1;\n}\n\n/**\n *\n * Update text content with 2 bound values surrounded by other text.\n *\n * Used when a text node has 2 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate2(\n    prefix: string, v0: any, i0: string, v1: any, suffix: string): typeof ɵɵtextInterpolate2 {\n  const lView = getLView();\n  const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate2;\n}\n\n/**\n *\n * Update text content with 3 bound values surrounded by other text.\n *\n * Used when a text node has 3 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate3(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any,\n    suffix: string): typeof ɵɵtextInterpolate3 {\n  const lView = getLView();\n  const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate3;\n}\n\n/**\n *\n * Update text content with 4 bound values surrounded by other text.\n *\n * Used when a text node has 4 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see ɵɵtextInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate4(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    suffix: string): typeof ɵɵtextInterpolate4 {\n  const lView = getLView();\n  const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate4;\n}\n\n/**\n *\n * Update text content with 5 bound values surrounded by other text.\n *\n * Used when a text node has 5 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate5(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, suffix: string): typeof ɵɵtextInterpolate5 {\n  const lView = getLView();\n  const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate5;\n}\n\n/**\n *\n * Update text content with 6 bound values surrounded by other text.\n *\n * Used when a text node has 6 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change. @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate6(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, suffix: string): typeof ɵɵtextInterpolate6 {\n  const lView = getLView();\n  const interpolated =\n      interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate6;\n}\n\n/**\n *\n * Update text content with 7 bound values surrounded by other text.\n *\n * Used when a text node has 7 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate7(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any,\n    suffix: string): typeof ɵɵtextInterpolate7 {\n  const lView = getLView();\n  const interpolated =\n      interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate7;\n}\n\n/**\n *\n * Update text content with 8 bound values surrounded by other text.\n *\n * Used when a text node has 8 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate8(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string): typeof ɵɵtextInterpolate8 {\n  const lView = getLView();\n  const interpolated = interpolation8(\n      lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate8;\n}\n\n/**\n * Update text content with 9 or more bound values other surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n *\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵtextInterpolateV(values: any[]): typeof ɵɵtextInterpolateV {\n  const lView = getLView();\n  const interpolated = interpolationV(lView, values);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolateV;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {bindingUpdated} from '../bindings';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {RENDERER} from '../interfaces/view';\nimport {getCurrentDirectiveDef, getLView, getSelectedTNode, getTView, nextBindingIndex} from '../state';\nimport {NO_CHANGE} from '../tokens';\n\nimport {elementPropertyInternal, loadComponentRenderer, storePropertyBindingMetadata} from './shared';\n\n/**\n * Update a property on a host element. Only applies to native node properties, not inputs.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nexport function ɵɵhostProperty<T>(\n    propName: string, value: T, sanitizer?: SanitizerFn|null): typeof ɵɵhostProperty {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵhostProperty;\n}\n\n\n/**\n * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation @triggers, they need to be\n * evaluated with the sub component's renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n *\n * @codeGenApi\n */\nexport function ɵɵsyntheticHostProperty<T>(\n    propName: string, value: T|NO_CHANGE,\n    sanitizer?: SanitizerFn|null): typeof ɵɵsyntheticHostProperty {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    const currentDef = getCurrentDirectiveDef(tView.data);\n    const renderer = loadComponentRenderer(currentDef, tNode, lView);\n    elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵsyntheticHostProperty;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// THIS CODE IS GENERATED - DO NOT MODIFY\n// See angular/tools/gulp-tasks/cldr/extract.js\n\nconst u = undefined;\n\nfunction plural(n: number): number {\n  let i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '').length;\n  if (i === 1 && v === 0) return 1;\n  return 5;\n}\n\nexport default [\n  'en',\n  [['a', 'p'], ['AM', 'PM'], u],\n  [['AM', 'PM'], u, u],\n  [\n    ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n  ],\n  u,\n  [\n    ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    [\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n      'October', 'November', 'December'\n    ]\n  ],\n  u,\n  [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']],\n  0,\n  [6, 0],\n  ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],\n  ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'],\n  ['{1}, {0}', u, '{1} \\'at\\' {0}', u],\n  ['.', ',', ';', '%', '+', '-', 'E', '×', '‰', '∞', 'NaN', ':'],\n  ['#,##0.###', '#,##0%', '¤#,##0.00', '#E0'],\n  'USD',\n  '$',\n  'US Dollar',\n  {},\n  'ltr',\n  plural\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {global} from '../util/global';\n\nimport localeEn from './locale_en';\n\n/**\n * This const is used to store the locale data registered with `registerLocaleData`\n */\nlet LOCALE_DATA: {[localeId: string]: any} = {};\n\n/**\n * Register locale data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale data.\n *\n * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1\n */\nexport function registerLocaleData(data: any, localeId?: string|any, extraData?: any): void {\n  if (typeof localeId !== 'string') {\n    extraData = localeId;\n    localeId = data[LocaleDataIndex.LocaleId];\n  }\n\n  localeId = localeId.toLowerCase().replace(/_/g, '-');\n\n  LOCALE_DATA[localeId] = data;\n\n  if (extraData) {\n    LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;\n  }\n}\n\n/**\n * Finds the locale data for a given locale.\n *\n * @param locale The locale code.\n * @returns The locale data.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n */\nexport function findLocaleData(locale: string): any {\n  const normalizedLocale = normalizeLocale(locale);\n\n  let match = getLocaleData(normalizedLocale);\n  if (match) {\n    return match;\n  }\n\n  // let's try to find a parent locale\n  const parentLocale = normalizedLocale.split('-')[0];\n  match = getLocaleData(parentLocale);\n  if (match) {\n    return match;\n  }\n\n  if (parentLocale === 'en') {\n    return localeEn;\n  }\n\n  throw new Error(`Missing locale data for the locale \"${locale}\".`);\n}\n\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n */\nexport function getLocaleCurrencyCode(locale: string): string|null {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencyCode] || null;\n}\n\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The plural function for the locale.\n * @see `NgPlural`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n */\nexport function getLocalePluralCase(locale: string): (value: number) => number {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.PluralCase];\n}\n\n\n\n/**\n * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`\n * or from the global `ng.common.locale`.\n */\nexport function getLocaleData(normalizedLocale: string): any {\n  if (!(normalizedLocale in LOCALE_DATA)) {\n    LOCALE_DATA[normalizedLocale] = global.ng && global.ng.common && global.ng.common.locales &&\n        global.ng.common.locales[normalizedLocale];\n  }\n  return LOCALE_DATA[normalizedLocale];\n}\n\n/**\n * Helper function to remove all the locale data from `LOCALE_DATA`.\n */\nexport function unregisterAllLocaleData() {\n  LOCALE_DATA = {};\n}\n\n/**\n * Index of each type of locale data from the locale data array\n */\nexport enum LocaleDataIndex {\n  LocaleId = 0,\n  DayPeriodsFormat,\n  DayPeriodsStandalone,\n  DaysFormat,\n  DaysStandalone,\n  MonthsFormat,\n  MonthsStandalone,\n  Eras,\n  FirstDayOfWeek,\n  WeekendRange,\n  DateFormat,\n  TimeFormat,\n  DateTimeFormat,\n  NumberSymbols,\n  NumberFormats,\n  CurrencyCode,\n  CurrencySymbol,\n  CurrencyName,\n  Currencies,\n  Directionality,\n  PluralCase,\n  ExtraData\n}\n\n/**\n * Index of each type of locale data from the extra locale data array\n */\nexport const enum ExtraLocaleDataIndex {\n  ExtraDayPeriodFormats = 0,\n  ExtraDayPeriodStandalone,\n  ExtraDayPeriodsRules\n}\n\n/**\n * Index of each value in currency data (used to describe CURRENCIES_EN in currencies.ts)\n */\nexport const enum CurrencyIndex {\n  Symbol = 0,\n  SymbolNarrow,\n  NbOfDigits\n}\n\n/**\n * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.\n */\nfunction normalizeLocale(locale: string): string {\n  return locale.toLowerCase().replace(/_/g, '-');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DEFAULT_LOCALE_ID} from '../../i18n/localization';\nimport {assertDefined} from '../../util/assert';\n\n\n/**\n * The locale id that the application is currently using (for translations and ICU expressions).\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nlet LOCALE_ID = DEFAULT_LOCALE_ID;\n\n/**\n * Sets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n *\n * @param localeId\n */\nexport function setLocaleId(localeId: string) {\n  assertDefined(localeId, `Expected localeId to be defined`);\n  if (typeof localeId === 'string') {\n    LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');\n  }\n}\n\n/**\n * Gets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nexport function getLocaleId(): string {\n  return LOCALE_ID;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// The functions in this file verify that the assumptions we are making\n// about state in an instruction are correct before implementing any logic.\n// They are meant only to be called in dev mode as sanity checks.\n\nimport {stringify} from './stringify';\n\nexport function assertNumber(actual: any, msg: string): asserts actual is number {\n  if (!(typeof actual === 'number')) {\n    throwError(msg, typeof actual, 'number', '===');\n  }\n}\n\nexport function assertNumberInRange(\n    actual: any, minInclusive: number, maxInclusive: number): asserts actual is number {\n  assertNumber(actual, 'Expected a number');\n  assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');\n  assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');\n}\n\nexport function assertString(actual: any, msg: string): asserts actual is string {\n  if (!(typeof actual === 'string')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');\n  }\n}\n\nexport function assertFunction(actual: any, msg: string): asserts actual is Function {\n  if (!(typeof actual === 'function')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');\n  }\n}\n\nexport function assertEqual<T>(actual: T, expected: T, msg: string) {\n  if (!(actual == expected)) {\n    throwError(msg, actual, expected, '==');\n  }\n}\n\nexport function assertNotEqual<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual != expected)) {\n    throwError(msg, actual, expected, '!=');\n  }\n}\n\nexport function assertSame<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual === expected)) {\n    throwError(msg, actual, expected, '===');\n  }\n}\n\nexport function assertNotSame<T>(actual: T, expected: T, msg: string) {\n  if (!(actual !== expected)) {\n    throwError(msg, actual, expected, '!==');\n  }\n}\n\nexport function assertLessThan<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual < expected)) {\n    throwError(msg, actual, expected, '<');\n  }\n}\n\nexport function assertLessThanOrEqual<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual <= expected)) {\n    throwError(msg, actual, expected, '<=');\n  }\n}\n\nexport function assertGreaterThan<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual > expected)) {\n    throwError(msg, actual, expected, '>');\n  }\n}\n\nexport function assertGreaterThanOrEqual<T>(\n    actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual >= expected)) {\n    throwError(msg, actual, expected, '>=');\n  }\n}\n\nexport function assertNotDefined<T>(actual: T, msg: string) {\n  if (actual != null) {\n    throwError(msg, actual, null, '==');\n  }\n}\n\nexport function assertDefined<T>(actual: T|null|undefined, msg: string): asserts actual is T {\n  if (actual == null) {\n    throwError(msg, actual, null, '!=');\n  }\n}\n\nexport function throwError(msg: string): never;\nexport function throwError(msg: string, actual: any, expected: any, comparison: string): never;\nexport function throwError(msg: string, actual?: any, expected?: any, comparison?: string): never {\n  throw new Error(\n      `ASSERTION ERROR: ${msg}` +\n      (comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));\n}\n\nexport function assertDomNode(node: any): asserts node is Node {\n  // If we're in a worker, `Node` will not be defined.\n  if (!(typeof Node !== 'undefined' && node instanceof Node) &&\n      !(typeof node === 'object' && node != null &&\n        node.constructor.name === 'WebWorkerRenderNode')) {\n    throwError(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);\n  }\n}\n\n\nexport function assertIndexInRange(arr: any[], index: number) {\n  assertDefined(arr, 'Array must be defined.');\n  const maxLen = arr.length;\n  if (index < 0 || index >= maxLen) {\n    throwError(`Index expected to be less than ${maxLen} but got ${index}`);\n  }\n}\n\n\nexport function assertOneOf(value: any, ...validValues: any[]) {\n  if (validValues.indexOf(value) !== -1) return true;\n  throwError(`Expected value to be one of ${JSON.stringify(validValues)} but was ${\n      JSON.stringify(value)}.`);\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {resolveForwardRef} from '../di/forward_ref';\nimport {ClassProvider, Provider} from '../di/interface/provider';\nimport {isClassProvider, isTypeProvider, providerToFactory} from '../di/r3_injector';\nimport {assertDefined} from '../util/assert';\n\nimport {diPublicInInjector, getNodeInjectable, getOrCreateNodeInjectorForNode} from './di';\nimport {ɵɵdirectiveInject} from './instructions/all';\nimport {DirectiveDef} from './interfaces/definition';\nimport {NodeInjectorFactory} from './interfaces/injector';\nimport {TContainerNode, TDirectiveHostNode, TElementContainerNode, TElementNode, TNodeProviderIndexes} from './interfaces/node';\nimport {isComponentDef} from './interfaces/type_checks';\nimport {DestroyHookData, LView, TData, TVIEW, TView} from './interfaces/view';\nimport {getCurrentTNode, getLView, getTView} from './state';\n\n\n\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @param def the directive definition\n * @param providers: Array of `providers`.\n * @param viewProviders: Array of `viewProviders`.\n */\nexport function providersResolver<T>(\n    def: DirectiveDef<T>, providers: Provider[], viewProviders: Provider[]): void {\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const isComponent = isComponentDef(def);\n\n    // The list of view providers is processed first, and the flags are updated\n    resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\n\n    // Then, the list of providers is processed, and the flags are updated\n    resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n  }\n}\n\n/**\n * Resolves a provider and publishes it to the DI system.\n */\nfunction resolveProvider(\n    provider: Provider, tInjectables: TData, lInjectablesBlueprint: NodeInjectorFactory[],\n    isComponent: boolean, isViewProvider: boolean): void {\n  provider = resolveForwardRef(provider);\n  if (Array.isArray(provider)) {\n    // Recursively call `resolveProvider`\n    // Recursion is OK in this case because this code will not be in hot-path once we implement\n    // cloning of the initial state.\n    for (let i = 0; i < provider.length; i++) {\n      resolveProvider(\n          provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n    }\n  } else {\n    const tView = getTView();\n    const lView = getLView();\n    let token: any = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n    let providerFactory: () => any = providerToFactory(provider);\n\n    const tNode = getCurrentTNode()!;\n    const beginIndex = tNode.providerIndexes & TNodeProviderIndexes.ProvidersStartIndexMask;\n    const endIndex = tNode.directiveStart;\n    const cptViewProvidersCount =\n        tNode.providerIndexes >> TNodeProviderIndexes.CptViewProvidersCountShift;\n\n    if (isTypeProvider(provider) || !provider.multi) {\n      // Single provider case: the factory is created and pushed immediately\n      const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);\n      const existingFactoryIndex = indexOf(\n          token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount,\n          endIndex);\n      if (existingFactoryIndex === -1) {\n        diPublicInInjector(\n            getOrCreateNodeInjectorForNode(\n                tNode as TElementNode | TContainerNode | TElementContainerNode, lView),\n            tView, token);\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += TNodeProviderIndexes.CptViewProvidersCountShifter;\n        }\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        lInjectablesBlueprint[existingFactoryIndex] = factory;\n        lView[existingFactoryIndex] = factory;\n      }\n    } else {\n      // Multi provider case:\n      // We create a multi factory which is going to aggregate all the values.\n      // Since the output of such a factory depends on content or view injection,\n      // we create two of them, which are linked together.\n      //\n      // The first one (for view providers) is always in the first block of the injectables array,\n      // and the second one (for providers) is always in the second block.\n      // This is important because view providers have higher priority. When a multi token\n      // is being looked up, the view providers should be found first.\n      // Note that it is not possible to have a multi factory in the third block (directive block).\n      //\n      // The algorithm to process multi providers is as follows:\n      // 1) If the multi provider comes from the `viewProviders` of the component:\n      //   a) If the special view providers factory doesn't exist, it is created and pushed.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      // 2) If the multi provider comes from the `providers` of the component or of another\n      // directive:\n      //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n      //      It is also linked to the multi factory for view providers, if it exists.\n      //   b) Else, the multi provider is added to the existing multi factory.\n\n      const existingProvidersFactoryIndex =\n          indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n      const existingViewProvidersFactoryIndex =\n          indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n      const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&\n          lInjectablesBlueprint[existingProvidersFactoryIndex];\n      const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\n          lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n\n      if (isViewProvider && !doesViewProvidersFactoryExist ||\n          !isViewProvider && !doesProvidersFactoryExist) {\n        // Cases 1.a and 2.a\n        diPublicInInjector(\n            getOrCreateNodeInjectorForNode(\n                tNode as TElementNode | TContainerNode | TElementContainerNode, lView),\n            tView, token);\n        const factory = multiFactory(\n            isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver,\n            lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n        if (!isViewProvider && doesViewProvidersFactoryExist) {\n          lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n        }\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += TNodeProviderIndexes.CptViewProvidersCountShifter;\n        }\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        // Cases 1.b and 2.b\n        const indexInFactory = multiFactoryAdd(\n            lInjectablesBlueprint!\n                [isViewProvider ? existingViewProvidersFactoryIndex :\n                                  existingProvidersFactoryIndex],\n            providerFactory, !isViewProvider && isComponent);\n        registerDestroyHooksIfSupported(\n            tView, provider,\n            existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex :\n                                                 existingViewProvidersFactoryIndex,\n            indexInFactory);\n      }\n      if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n        lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders!++;\n      }\n    }\n  }\n}\n\n/**\n * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.\n * @param tView `TView` in which to register the hook.\n * @param provider Provider whose hook should be registered.\n * @param contextIndex Index under which to find the context for the hook when it's being invoked.\n * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi\n * provider factory.\n */\nfunction registerDestroyHooksIfSupported(\n    tView: TView, provider: Exclude<Provider, any[]>, contextIndex: number,\n    indexInFactory?: number) {\n  const providerIsTypeProvider = isTypeProvider(provider);\n  if (providerIsTypeProvider || isClassProvider(provider)) {\n    const prototype = ((provider as ClassProvider).useClass || provider).prototype;\n    const ngOnDestroy = prototype.ngOnDestroy;\n    if (ngOnDestroy) {\n      const hooks = tView.destroyHooks || (tView.destroyHooks = []);\n\n      if (!providerIsTypeProvider && ((provider as ClassProvider)).multi) {\n        ngDevMode &&\n            assertDefined(\n                indexInFactory, 'indexInFactory when registering multi factory destroy hook');\n        const existingCallbacksIndex = hooks.indexOf(contextIndex);\n\n        if (existingCallbacksIndex === -1) {\n          hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);\n        } else {\n          (hooks[existingCallbacksIndex + 1] as DestroyHookData).push(indexInFactory!, ngOnDestroy);\n        }\n      } else {\n        hooks.push(contextIndex, ngOnDestroy);\n      }\n    }\n  }\n}\n\n/**\n * Add a factory in a multi factory.\n * @returns Index at which the factory was inserted.\n */\nfunction multiFactoryAdd(\n    multiFactory: NodeInjectorFactory, factory: () => any, isComponentProvider: boolean): number {\n  if (isComponentProvider) {\n    multiFactory.componentProviders!++;\n  }\n  return multiFactory.multi!.push(factory) - 1;\n}\n\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n */\nfunction indexOf(item: any, arr: any[], begin: number, end: number) {\n  for (let i = begin; i < end; i++) {\n    if (arr[i] === item) return i;\n  }\n  return -1;\n}\n\n/**\n * Use this with `multi` `providers`.\n */\nfunction multiProvidersFactoryResolver(\n    this: NodeInjectorFactory, _: undefined, tData: TData, lData: LView,\n    tNode: TDirectiveHostNode): any[] {\n  return multiResolve(this.multi!, []);\n}\n\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n */\nfunction multiViewProvidersFactoryResolver(\n    this: NodeInjectorFactory, _: undefined, tData: TData, lView: LView,\n    tNode: TDirectiveHostNode): any[] {\n  const factories = this.multi!;\n  let result: any[];\n  if (this.providerFactory) {\n    const componentCount = this.providerFactory.componentProviders!;\n    const multiProviders =\n        getNodeInjectable(lView, lView[TVIEW], this.providerFactory!.index!, tNode);\n    // Copy the section of the array which contains `multi` `providers` from the component\n    result = multiProviders.slice(0, componentCount);\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n    // Copy the section of the array which contains `multi` `providers` from other directives\n    for (let i = componentCount; i < multiProviders.length; i++) {\n      result.push(multiProviders[i]);\n    }\n  } else {\n    result = [];\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n  }\n  return result;\n}\n\n/**\n * Maps an array of factories into an array of values.\n */\nfunction multiResolve(factories: Array<() => any>, result: any[]): any[] {\n  for (let i = 0; i < factories.length; i++) {\n    const factory = factories[i]! as () => null;\n    result.push(factory());\n  }\n  return result;\n}\n\n/**\n * Creates a multi factory.\n */\nfunction multiFactory(\n    factoryFn: (\n        this: NodeInjectorFactory, _: undefined, tData: TData, lData: LView,\n        tNode: TDirectiveHostNode) => any,\n    index: number, isViewProvider: boolean, isComponent: boolean,\n    f: () => any): NodeInjectorFactory {\n  const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);\n  factory.multi = [];\n  factory.index = index;\n  factory.componentProviders = 0;\n  multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n  return factory;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ProcessProvidersFunction, Provider} from '../../di/interface/provider';\nimport {providersResolver} from '../di_setup';\nimport {DirectiveDef} from '../interfaces/definition';\n\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * ```ts\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ɵcmp = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    decls: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        ɵɵtext(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        ɵɵtextInterpolate(ctx.greeter.greet());\n *      }\n *    },\n *    features: [ɵɵProvidersFeature([GreeterDE])]\n *  });\n * }\n * ```\n *\n * @param definition\n *\n * @codeGenApi\n */\nexport function ɵɵProvidersFeature<T>(providers: Provider[], viewProviders: Provider[] = []) {\n  return (definition: DirectiveDef<T>) => {\n    definition.providersResolver =\n        (def: DirectiveDef<T>, processProvidersFn?: ProcessProvidersFunction) => {\n          return providersResolver(\n              def,                                                             //\n              processProvidersFn ? processProvidersFn(providers) : providers,  //\n              viewProviders);\n        };\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef} from '../change_detection/change_detection';\nimport {Injector} from '../di/injector';\nimport {Type} from '../interface/type';\n\nimport {ElementRef} from './element_ref';\nimport {NgModuleRef} from './ng_module_factory';\nimport {ViewRef} from './view_ref';\n\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nexport abstract class ComponentRef<C> {\n  /**\n   * The host or anchor [element](guide/glossary#element) for this component instance.\n   */\n  abstract get location(): ElementRef;\n\n  /**\n   * The [dependency injector](guide/glossary#injector) for this component instance.\n   */\n  abstract get injector(): Injector;\n\n  /**\n   * This component instance.\n   */\n  abstract get instance(): C;\n\n  /**\n   * The [host view](guide/glossary#view-tree) defined by the template\n   * for this component instance.\n   */\n  abstract get hostView(): ViewRef;\n\n  /**\n   * The change detector for this component instance.\n   */\n  abstract get changeDetectorRef(): ChangeDetectorRef;\n\n  /**\n   * The type of this component (as created by a `ComponentFactory` class).\n   */\n  abstract get componentType(): Type<any>;\n\n  /**\n   * Destroys the component instance and all of the data structures associated with it.\n   */\n  abstract destroy(): void;\n\n  /**\n   * A lifecycle hook that provides additional developer-defined cleanup\n   * functionality for the component.\n   * @param callback A handler function that cleans up developer-defined data\n   * associated with this component. Called when the `destroy()` method is invoked.\n   */\n  abstract onDestroy(callback: Function): void;\n}\n\n/**\n * Base class for a factory that can create a component dynamically.\n * Instantiate a factory for a given type of component with `resolveComponentFactory()`.\n * Use the resulting `ComponentFactory.create()` method to create a component of that type.\n *\n * @see [Dynamic Components](guide/dynamic-component-loader)\n *\n * @publicApi\n */\nexport abstract class ComponentFactory<C> {\n  /**\n   * The component's HTML selector.\n   */\n  abstract get selector(): string;\n  /**\n   * The type of component the factory will create.\n   */\n  abstract get componentType(): Type<any>;\n  /**\n   * Selector for all <ng-content> elements in the component.\n   */\n  abstract get ngContentSelectors(): string[];\n  /**\n   * The inputs of the component.\n   */\n  abstract get inputs(): {propName: string, templateName: string}[];\n  /**\n   * The outputs of the component.\n   */\n  abstract get outputs(): {propName: string, templateName: string}[];\n  /**\n   * Creates a new component.\n   */\n  abstract create(\n      injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string|any,\n      ngModule?: NgModuleRef<any>): ComponentRef<C>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {Type} from '../interface/type';\nimport {stringify} from '../util/stringify';\n\nimport {ComponentFactory, ComponentRef} from './component_factory';\nimport {NgModuleRef} from './ng_module_factory';\n\nexport function noComponentFactoryError(component: Function) {\n  const error = Error(`No component factory found for ${\n      stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n  (error as any)[ERROR_COMPONENT] = component;\n  return error;\n}\n\nconst ERROR_COMPONENT = 'ngComponent';\n\nexport function getComponent(error: Error): Type<any> {\n  return (error as any)[ERROR_COMPONENT];\n}\n\n\nclass _NullComponentFactoryResolver implements ComponentFactoryResolver {\n  resolveComponentFactory<T>(component: {new(...args: any[]): T}): ComponentFactory<T> {\n    throw noComponentFactoryError(component);\n  }\n}\n\n/**\n * A simple registry that maps `Components` to generated `ComponentFactory` classes\n * that can be used to create instances of components.\n * Use to obtain the factory for a given component type,\n * then use the factory's `create()` method to create a component of that type.\n *\n * @see [Dynamic Components](guide/dynamic-component-loader)\n * @publicApi\n */\nexport abstract class ComponentFactoryResolver {\n  static NULL: ComponentFactoryResolver = new _NullComponentFactoryResolver();\n  /**\n   * Retrieves the factory object that creates a component of the given type.\n   * @param component The component type.\n   */\n  abstract resolveComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n}\n\nexport class CodegenComponentFactoryResolver implements ComponentFactoryResolver {\n  private _factories = new Map<any, ComponentFactory<any>>();\n\n  constructor(\n      factories: ComponentFactory<any>[], private _parent: ComponentFactoryResolver,\n      private _ngModule: NgModuleRef<any>) {\n    for (let i = 0; i < factories.length; i++) {\n      const factory = factories[i];\n      this._factories.set(factory.componentType, factory);\n    }\n  }\n\n  resolveComponentFactory<T>(component: {new(...args: any[]): T}): ComponentFactory<T> {\n    let factory = this._factories.get(component);\n    if (!factory && this._parent) {\n      factory = this._parent.resolveComponentFactory(component);\n    }\n    if (!factory) {\n      throw noComponentFactoryError(component);\n    }\n    return new ComponentFactoryBoundToModule(factory, this._ngModule);\n  }\n}\n\nexport class ComponentFactoryBoundToModule<C> extends ComponentFactory<C> {\n  readonly selector: string;\n  readonly componentType: Type<any>;\n  readonly ngContentSelectors: string[];\n  readonly inputs: {propName: string, templateName: string}[];\n  readonly outputs: {propName: string, templateName: string}[];\n\n  constructor(private factory: ComponentFactory<C>, private ngModule: NgModuleRef<any>) {\n    super();\n    this.selector = factory.selector;\n    this.componentType = factory.componentType;\n    this.ngContentSelectors = factory.ngContentSelectors;\n    this.inputs = factory.inputs;\n    this.outputs = factory.outputs;\n  }\n\n  create(\n      injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string|any,\n      ngModule?: NgModuleRef<any>): ComponentRef<C> {\n    return this.factory.create(\n        injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function noop(...args: any[]): any {\n  // Do nothing.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TNode} from '../render3/interfaces/node';\nimport {RElement} from '../render3/interfaces/renderer_dom';\nimport {LView} from '../render3/interfaces/view';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {getNativeByTNode} from '../render3/util/view_utils';\nimport {noop} from '../util/noop';\n\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\nexport function injectElementRef(): ElementRef {\n  return createElementRef(getCurrentTNode()!, getLView());\n}\n\n/**\n * Creates an ElementRef given a node.\n *\n * @param tNode The node for which you'd like an ElementRef\n * @param lView The view to which the node belongs\n * @returns The ElementRef instance to use\n */\nexport function createElementRef(tNode: TNode, lView: LView): ElementRef {\n  return new ElementRef(getNativeByTNode(tNode, lView) as RElement);\n}\n\nexport const SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = injectElementRef;\nconst SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;\nconst SWITCH_ELEMENT_REF_FACTORY: typeof injectElementRef = SWITCH_ELEMENT_REF_FACTORY__PRE_R3__;\n\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nexport class ElementRef<T = any> {\n  /**\n   * The underlying native element or `null` if direct access to native elements is not supported\n   * (e.g. when the application runs in a web worker).\n   *\n   * <div class=\"callout is-critical\">\n   *   <header>Use with caution</header>\n   *   <p>\n   *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n   *    data-binding provided by Angular instead. Alternatively you can take a look at {@link\n   * Renderer2}\n   *    which provides API that can safely be used even when direct access to native elements is not\n   *    supported.\n   *   </p>\n   *   <p>\n   *    Relying on direct DOM access creates tight coupling between your application and rendering\n   *    layers which will make it impossible to separate the two and deploy your application into a\n   *    web worker.\n   *   </p>\n   * </div>\n   *\n   */\n  public nativeElement: T;\n\n  constructor(nativeElement: T) {\n    this.nativeElement = nativeElement;\n  }\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => ElementRef = SWITCH_ELEMENT_REF_FACTORY;\n}\n\n/**\n * Unwraps `ElementRef` and return the `nativeElement`.\n *\n * @param value value to unwrap\n * @returns `nativeElement` if `ElementRef` otherwise returns value as is.\n */\nexport function unwrapElementRef<T, R>(value: T|ElementRef<R>): T|R {\n  return value instanceof ElementRef ? value.nativeElement : value;\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '../di/injection_token';\nimport {isProceduralRenderer} from '../render3/interfaces/renderer';\nimport {isLView} from '../render3/interfaces/type_checks';\nimport {LView, RENDERER} from '../render3/interfaces/view';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {getComponentLViewByIndex} from '../render3/util/view_utils';\nimport {noop} from '../util/noop';\nimport {RendererStyleFlags2, RendererType2} from './api_flags';\n\n\nexport const Renderer2Interceptor = new InjectionToken<Renderer2[]>('Renderer2Interceptor');\n\n\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * @publicApi\n */\nexport abstract class RendererFactory2 {\n  /**\n   * Creates and initializes a custom renderer for a host DOM element.\n   * @param hostElement The element to render.\n   * @param type The base class to implement.\n   * @returns The new custom renderer instance.\n   */\n  abstract createRenderer(hostElement: any, type: RendererType2|null): Renderer2;\n  /**\n   * A callback invoked when rendering has begun.\n   */\n  abstract begin?(): void;\n  /**\n   * A callback invoked when rendering has completed.\n   */\n  abstract end?(): void;\n  /**\n   * Use with animations test-only mode. Notifies the test when rendering has completed.\n   * @returns The asynchronous result of the developer-defined function.\n   */\n  abstract whenRenderingDone?(): Promise<any>;\n}\n\n\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * @publicApi\n */\nexport abstract class Renderer2 {\n  /**\n   * Use to store arbitrary developer-defined data on a renderer instance,\n   * as an object containing key-value pairs.\n   * This is useful for renderers that delegate to other renderers.\n   */\n  abstract get data(): {[key: string]: any};\n\n  /**\n   * Implement this callback to destroy the renderer or the host element.\n   */\n  abstract destroy(): void;\n  /**\n   * Implement this callback to create an instance of the host element.\n   * @param name An identifying name for the new element, unique within the namespace.\n   * @param namespace The namespace for the new element.\n   * @returns The new element.\n   */\n  abstract createElement(name: string, namespace?: string|null): any;\n  /**\n   * Implement this callback to add a comment to the DOM of the host element.\n   * @param value The comment text.\n   * @returns The modified element.\n   */\n  abstract createComment(value: string): any;\n\n  /**\n   * Implement this callback to add text to the DOM of the host element.\n   * @param value The text string.\n   * @returns The modified element.\n   */\n  abstract createText(value: string): any;\n  /**\n   * If null or undefined, the view engine won't call it.\n   * This is used as a performance optimization for production mode.\n   */\n  // TODO(issue/24571): remove '!'.\n  destroyNode!: ((node: any) => void)|null;\n  /**\n   * Appends a child to a given parent node in the host element DOM.\n   * @param parent The parent node.\n   * @param newChild The new child node.\n   */\n  abstract appendChild(parent: any, newChild: any): void;\n  /**\n   * Implement this callback to insert a child node at a given position in a parent node\n   * in the host element DOM.\n   * @param parent The parent node.\n   * @param newChild The new child nodes.\n   * @param refChild The existing child node before which `newChild` is inserted.\n   * @param isMove Optional argument which signifies if the current `insertBefore` is a result of a\n   *     move. Animation uses this information to trigger move animations. In the past the Animation\n   *     would always assume that any `insertBefore` is a move. This is not strictly true because\n   *     with runtime i18n it is possible to invoke `insertBefore` as a result of i18n and it should\n   *     not trigger an animation move.\n   */\n  abstract insertBefore(parent: any, newChild: any, refChild: any, isMove?: boolean): void;\n  /**\n   * Implement this callback to remove a child node from the host element's DOM.\n   * @param parent The parent node.\n   * @param oldChild The child node to remove.\n   * @param isHostElement Optionally signal to the renderer whether this element is a host element\n   * or not\n   */\n  abstract removeChild(parent: any, oldChild: any, isHostElement?: boolean): void;\n  /**\n   * Implement this callback to prepare an element to be bootstrapped\n   * as a root element, and return the element instance.\n   * @param selectorOrNode The DOM element.\n   * @param preserveContent Whether the contents of the root element\n   * should be preserved, or cleared upon bootstrap (default behavior).\n   * Use with `ViewEncapsulation.ShadowDom` to allow simple native\n   * content projection via `<slot>` elements.\n   * @returns The root element.\n   */\n  abstract selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any;\n  /**\n   * Implement this callback to get the parent of a given node\n   * in the host element's DOM.\n   * @param node The child node to query.\n   * @returns The parent node, or null if there is no parent.\n   * For WebWorkers, always returns true.\n   * This is because the check is synchronous,\n   * and the caller can't rely on checking for null.\n   */\n  abstract parentNode(node: any): any;\n  /**\n   * Implement this callback to get the next sibling node of a given node\n   * in the host element's DOM.\n   * @returns The sibling node, or null if there is no sibling.\n   * For WebWorkers, always returns a value.\n   * This is because the check is synchronous,\n   * and the caller can't rely on checking for null.\n   */\n  abstract nextSibling(node: any): any;\n  /**\n   * Implement this callback to set an attribute value for an element in the DOM.\n   * @param el The element.\n   * @param name The attribute name.\n   * @param value The new value.\n   * @param namespace The namespace.\n   */\n  abstract setAttribute(el: any, name: string, value: string, namespace?: string|null): void;\n\n  /**\n   * Implement this callback to remove an attribute from an element in the DOM.\n   * @param el The element.\n   * @param name The attribute name.\n   * @param namespace The namespace.\n   */\n  abstract removeAttribute(el: any, name: string, namespace?: string|null): void;\n  /**\n   * Implement this callback to add a class to an element in the DOM.\n   * @param el The element.\n   * @param name The class name.\n   */\n  abstract addClass(el: any, name: string): void;\n\n  /**\n   * Implement this callback to remove a class from an element in the DOM.\n   * @param el The element.\n   * @param name The class name.\n   */\n  abstract removeClass(el: any, name: string): void;\n\n  /**\n   * Implement this callback to set a CSS style for an element in the DOM.\n   * @param el The element.\n   * @param style The name of the style.\n   * @param value The new value.\n   * @param flags Flags for style variations. No flags are set by default.\n   */\n  abstract setStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2): void;\n\n  /**\n   * Implement this callback to remove the value from a CSS style for an element in the DOM.\n   * @param el The element.\n   * @param style The name of the style.\n   * @param flags Flags for style variations to remove, if set. ???\n   */\n  abstract removeStyle(el: any, style: string, flags?: RendererStyleFlags2): void;\n\n  /**\n   * Implement this callback to set the value of a property of an element in the DOM.\n   * @param el The element.\n   * @param name The property name.\n   * @param value The new value.\n   */\n  abstract setProperty(el: any, name: string, value: any): void;\n\n  /**\n   * Implement this callback to set the value of a node in the host element.\n   * @param node The node.\n   * @param value The new value.\n   */\n  abstract setValue(node: any, value: string): void;\n\n  /**\n   * Implement this callback to start an event listener.\n   * @param target The context in which to listen for events. Can be\n   * the entire window or document, the body of the document, or a specific\n   * DOM element.\n   * @param eventName The event to listen for.\n   * @param callback A handler function to invoke when the event occurs.\n   * @returns An \"unlisten\" function for disposing of this handler.\n   */\n  abstract listen(\n      target: 'window'|'document'|'body'|any, eventName: string,\n      callback: (event: any) => boolean | void): () => void;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => Renderer2 = () => SWITCH_RENDERER2_FACTORY();\n}\n\n\nexport const SWITCH_RENDERER2_FACTORY__POST_R3__ = injectRenderer2;\nconst SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;\nconst SWITCH_RENDERER2_FACTORY: typeof injectRenderer2 = SWITCH_RENDERER2_FACTORY__PRE_R3__;\n\n/** Returns a Renderer2 (or throws when application was bootstrapped with Renderer3) */\nfunction getOrCreateRenderer2(lView: LView): Renderer2 {\n  const renderer = lView[RENDERER];\n  if (ngDevMode && !isProceduralRenderer(renderer)) {\n    throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n  }\n  return renderer as Renderer2;\n}\n\n/** Injects a Renderer2 for the current component. */\nexport function injectRenderer2(): Renderer2 {\n  // We need the Renderer to be based on the component that it's being injected into, however since\n  // DI happens before we've entered its view, `getLView` will return the parent view instead.\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n  const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);\n  return getOrCreateRenderer2(isLView(nodeAtIndex) ? nodeAtIndex : lView);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵɵdefineInjectable} from '../di/interface/defs';\nimport {SecurityContext} from './security';\n\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nexport abstract class Sanitizer {\n  abstract sanitize(context: SecurityContext, value: {}|string|null): string|null;\n  /** @nocollapse */\n  static ɵprov = ɵɵdefineInjectable({\n    token: Sanitizer,\n    providedIn: 'root',\n    factory: () => null,\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\nexport class Version {\n  public readonly major: string;\n  public readonly minor: string;\n  public readonly patch: string;\n\n  constructor(public full: string) {\n    this.major = full.split('.')[0];\n    this.minor = full.split('.')[1];\n    this.patch = full.split('.').slice(2).join('.');\n  }\n}\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('11.2.3');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringify} from '../../util/stringify';\nimport {isListLikeIterable, iterateListLike} from '../change_detection_util';\n\nimport {IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, NgIterable, TrackByFunction} from './iterable_differs';\n\n\nexport class DefaultIterableDifferFactory implements IterableDifferFactory {\n  constructor() {}\n  supports(obj: Object|null|undefined): boolean {\n    return isListLikeIterable(obj);\n  }\n\n  create<V>(trackByFn?: TrackByFunction<V>): DefaultIterableDiffer<V> {\n    return new DefaultIterableDiffer<V>(trackByFn);\n  }\n}\n\nconst trackByIdentity = (index: number, item: any) => item;\n\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @publicApi\n */\nexport class DefaultIterableDiffer<V> implements IterableDiffer<V>, IterableChanges<V> {\n  public readonly length: number = 0;\n  // TODO(issue/24571): remove '!'.\n  public readonly collection!: V[]|Iterable<V>|null;\n  // Keeps track of the used records at any point in time (during & across `_check()` calls)\n  private _linkedRecords: _DuplicateMap<V>|null = null;\n  // Keeps track of the removed records at any point in time during `_check()` calls.\n  private _unlinkedRecords: _DuplicateMap<V>|null = null;\n  private _previousItHead: IterableChangeRecord_<V>|null = null;\n  private _itHead: IterableChangeRecord_<V>|null = null;\n  private _itTail: IterableChangeRecord_<V>|null = null;\n  private _additionsHead: IterableChangeRecord_<V>|null = null;\n  private _additionsTail: IterableChangeRecord_<V>|null = null;\n  private _movesHead: IterableChangeRecord_<V>|null = null;\n  private _movesTail: IterableChangeRecord_<V>|null = null;\n  private _removalsHead: IterableChangeRecord_<V>|null = null;\n  private _removalsTail: IterableChangeRecord_<V>|null = null;\n  // Keeps track of records where custom track by is the same, but item identity has changed\n  private _identityChangesHead: IterableChangeRecord_<V>|null = null;\n  private _identityChangesTail: IterableChangeRecord_<V>|null = null;\n  private _trackByFn: TrackByFunction<V>;\n\n  constructor(trackByFn?: TrackByFunction<V>) {\n    this._trackByFn = trackByFn || trackByIdentity;\n  }\n\n  forEachItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._itHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n\n  forEachOperation(\n      fn: (item: IterableChangeRecord<V>, previousIndex: number|null, currentIndex: number|null) =>\n          void) {\n    let nextIt = this._itHead;\n    let nextRemove = this._removalsHead;\n    let addRemoveOffset = 0;\n    let moveOffsets: number[]|null = null;\n    while (nextIt || nextRemove) {\n      // Figure out which is the next record to process\n      // Order: remove, add, move\n      const record: IterableChangeRecord<V> = !nextRemove ||\n              nextIt &&\n                  nextIt.currentIndex! <\n                      getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n          nextIt! :\n          nextRemove;\n      const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n      const currentIndex = record.currentIndex;\n\n      // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n      if (record === nextRemove) {\n        addRemoveOffset--;\n        nextRemove = nextRemove._nextRemoved;\n      } else {\n        nextIt = nextIt!._next;\n        if (record.previousIndex == null) {\n          addRemoveOffset++;\n        } else {\n          // INVARIANT:  currentIndex < previousIndex\n          if (!moveOffsets) moveOffsets = [];\n          const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n          const localCurrentIndex = currentIndex! - addRemoveOffset;\n          if (localMovePreviousIndex != localCurrentIndex) {\n            for (let i = 0; i < localMovePreviousIndex; i++) {\n              const offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n              const index = offset + i;\n              if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                moveOffsets[i] = offset + 1;\n              }\n            }\n            const previousIndex = record.previousIndex;\n            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n          }\n        }\n      }\n\n      if (adjPreviousIndex !== currentIndex) {\n        fn(record, adjPreviousIndex, currentIndex);\n      }\n    }\n  }\n\n  forEachPreviousItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n\n  forEachAddedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n\n  forEachMovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._movesHead; record !== null; record = record._nextMoved) {\n      fn(record);\n    }\n  }\n\n  forEachRemovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n\n  forEachIdentityChange(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n      fn(record);\n    }\n  }\n\n  diff(collection: NgIterable<V>|null|undefined): DefaultIterableDiffer<V>|null {\n    if (collection == null) collection = [];\n    if (!isListLikeIterable(collection)) {\n      throw new Error(\n          `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);\n    }\n\n    if (this.check(collection)) {\n      return this;\n    } else {\n      return null;\n    }\n  }\n\n  onDestroy() {}\n\n  check(collection: NgIterable<V>): boolean {\n    this._reset();\n\n    let record: IterableChangeRecord_<V>|null = this._itHead;\n    let mayBeDirty: boolean = false;\n    let index: number;\n    let item: V;\n    let itemTrackBy: any;\n    if (Array.isArray(collection)) {\n      (this as {length: number}).length = collection.length;\n\n      for (let index = 0; index < this.length; index++) {\n        item = collection[index];\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !Object.is(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n        }\n\n        record = record._next;\n      }\n    } else {\n      index = 0;\n      iterateListLike(collection, (item: V) => {\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !Object.is(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n        index++;\n      });\n      (this as {length: number}).length = index;\n    }\n\n    this._truncate(record);\n    (this as {collection: V[] | Iterable<V>}).collection = collection;\n    return this.isDirty;\n  }\n\n  /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n   * changes.\n   */\n  get isDirty(): boolean {\n    return this._additionsHead !== null || this._movesHead !== null ||\n        this._removalsHead !== null || this._identityChangesHead !== null;\n  }\n\n  /**\n   * Reset the state of the change objects to show no changes. This means set previousKey to\n   * currentKey, and clear all of the queues (additions, moves, removals).\n   * Set the previousIndexes of moved and added items to their currentIndexes\n   * Reset the list of additions, moves and removals\n   *\n   * @internal\n   */\n  _reset() {\n    if (this.isDirty) {\n      let record: IterableChangeRecord_<V>|null;\n\n      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._additionsHead = this._additionsTail = null;\n\n      for (record = this._movesHead; record !== null; record = record._nextMoved) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._movesHead = this._movesTail = null;\n      this._removalsHead = this._removalsTail = null;\n      this._identityChangesHead = this._identityChangesTail = null;\n\n      // TODO(vicb): when assert gets supported\n      // assert(!this.isDirty);\n    }\n  }\n\n  /**\n   * This is the core function which handles differences between collections.\n   *\n   * - `record` is the record which we saw at this position last time. If null then it is a new\n   *   item.\n   * - `item` is the current item in the collection\n   * - `index` is the position of the item in the collection\n   *\n   * @internal\n   */\n  _mismatch(record: IterableChangeRecord_<V>|null, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    // The previous record after which we will append the current one.\n    let previousRecord: IterableChangeRecord_<V>|null;\n\n    if (record === null) {\n      previousRecord = this._itTail;\n    } else {\n      previousRecord = record._prev;\n      // Remove the record from the collection since we know it does not match the item.\n      this._remove(record);\n    }\n\n    // See if we have evicted the item, which used to be at some anterior position of _itHead list.\n    record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (record !== null) {\n      // It is an item which we have evicted earlier: reinsert it back into the list.\n      // But first we need to check if identity changed, so we can update in view if necessary.\n      if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n\n      this._reinsertAfter(record, previousRecord, index);\n    } else {\n      // Attempt to see if the item is at some posterior position of _itHead list.\n      record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n      if (record !== null) {\n        // We have the item in _itHead at/after `index` position. We need to move it forward in the\n        // collection.\n        // But first we need to check if identity changed, so we can update in view if necessary.\n        if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n\n        this._moveAfter(record, previousRecord, index);\n      } else {\n        // It is a new item: add it.\n        record =\n            this._addAfter(new IterableChangeRecord_<V>(item, itemTrackBy), previousRecord, index);\n      }\n    }\n    return record;\n  }\n\n  /**\n   * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n   *\n   * Use case: `[a, a]` => `[b, a, a]`\n   *\n   * If we did not have this check then the insertion of `b` would:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) leave `a` at index `1` as is. <-- this is wrong!\n   *   3) reinsert `a` at index 2. <-- this is wrong!\n   *\n   * The correct behavior is:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) reinsert `a` at index 1.\n   *   3) move `a` at from `1` to `2`.\n   *\n   *\n   * Double check that we have not evicted a duplicate item. We need to check if the item type may\n   * have already been removed:\n   * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n   * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n   * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n   * at the end.\n   *\n   * @internal\n   */\n  _verifyReinsertion(record: IterableChangeRecord_<V>, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    let reinsertRecord: IterableChangeRecord_<V>|null =\n        this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (reinsertRecord !== null) {\n      record = this._reinsertAfter(reinsertRecord, record._prev!, index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._addToMoves(record, index);\n    }\n    return record;\n  }\n\n  /**\n   * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n   *\n   * - `record` The first excess {@link IterableChangeRecord_}.\n   *\n   * @internal\n   */\n  _truncate(record: IterableChangeRecord_<V>|null) {\n    // Anything after that needs to be removed;\n    while (record !== null) {\n      const nextRecord: IterableChangeRecord_<V>|null = record._next;\n      this._addToRemovals(this._unlink(record));\n      record = nextRecord;\n    }\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.clear();\n    }\n\n    if (this._additionsTail !== null) {\n      this._additionsTail._nextAdded = null;\n    }\n    if (this._movesTail !== null) {\n      this._movesTail._nextMoved = null;\n    }\n    if (this._itTail !== null) {\n      this._itTail._next = null;\n    }\n    if (this._removalsTail !== null) {\n      this._removalsTail._nextRemoved = null;\n    }\n    if (this._identityChangesTail !== null) {\n      this._identityChangesTail._nextIdentityChange = null;\n    }\n  }\n\n  /** @internal */\n  _reinsertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.remove(record);\n    }\n    const prev = record._prevRemoved;\n    const next = record._nextRemoved;\n\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n\n  /** @internal */\n  _moveAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    this._unlink(record);\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n\n  /** @internal */\n  _addAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    this._insertAfter(record, prevRecord, index);\n\n    if (this._additionsTail === null) {\n      // TODO(vicb):\n      // assert(this._additionsHead === null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_additionsTail._nextAdded === null);\n      // assert(record._nextAdded === null);\n      this._additionsTail = this._additionsTail._nextAdded = record;\n    }\n    return record;\n  }\n\n  /** @internal */\n  _insertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    // TODO(vicb):\n    // assert(record != prevRecord);\n    // assert(record._next === null);\n    // assert(record._prev === null);\n\n    const next: IterableChangeRecord_<V>|null =\n        prevRecord === null ? this._itHead : prevRecord._next;\n    // TODO(vicb):\n    // assert(next != record);\n    // assert(prevRecord != record);\n    record._next = next;\n    record._prev = prevRecord;\n    if (next === null) {\n      this._itTail = record;\n    } else {\n      next._prev = record;\n    }\n    if (prevRecord === null) {\n      this._itHead = record;\n    } else {\n      prevRecord._next = record;\n    }\n\n    if (this._linkedRecords === null) {\n      this._linkedRecords = new _DuplicateMap<V>();\n    }\n    this._linkedRecords.put(record);\n\n    record.currentIndex = index;\n    return record;\n  }\n\n  /** @internal */\n  _remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    return this._addToRemovals(this._unlink(record));\n  }\n\n  /** @internal */\n  _unlink(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._linkedRecords !== null) {\n      this._linkedRecords.remove(record);\n    }\n\n    const prev = record._prev;\n    const next = record._next;\n\n    // TODO(vicb):\n    // assert((record._prev = null) === null);\n    // assert((record._next = null) === null);\n\n    if (prev === null) {\n      this._itHead = next;\n    } else {\n      prev._next = next;\n    }\n    if (next === null) {\n      this._itTail = prev;\n    } else {\n      next._prev = prev;\n    }\n\n    return record;\n  }\n\n  /** @internal */\n  _addToMoves(record: IterableChangeRecord_<V>, toIndex: number): IterableChangeRecord_<V> {\n    // TODO(vicb):\n    // assert(record._nextMoved === null);\n\n    if (record.previousIndex === toIndex) {\n      return record;\n    }\n\n    if (this._movesTail === null) {\n      // TODO(vicb):\n      // assert(_movesHead === null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_movesTail._nextMoved === null);\n      this._movesTail = this._movesTail._nextMoved = record;\n    }\n\n    return record;\n  }\n\n  private _addToRemovals(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords === null) {\n      this._unlinkedRecords = new _DuplicateMap<V>();\n    }\n    this._unlinkedRecords.put(record);\n    record.currentIndex = null;\n    record._nextRemoved = null;\n\n    if (this._removalsTail === null) {\n      // TODO(vicb):\n      // assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n      record._prevRemoved = null;\n    } else {\n      // TODO(vicb):\n      // assert(_removalsTail._nextRemoved === null);\n      // assert(record._nextRemoved === null);\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemoved = record;\n    }\n    return record;\n  }\n\n  /** @internal */\n  _addIdentityChange(record: IterableChangeRecord_<V>, item: V) {\n    record.item = item;\n    if (this._identityChangesTail === null) {\n      this._identityChangesTail = this._identityChangesHead = record;\n    } else {\n      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n    }\n    return record;\n  }\n}\n\nexport class IterableChangeRecord_<V> implements IterableChangeRecord<V> {\n  currentIndex: number|null = null;\n  previousIndex: number|null = null;\n\n  /** @internal */\n  _nextPrevious: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _prev: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _next: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _prevDup: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextDup: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _prevRemoved: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextRemoved: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextAdded: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextMoved: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextIdentityChange: IterableChangeRecord_<V>|null = null;\n\n\n  constructor(public item: V, public trackById: any) {}\n}\n\n// A linked list of IterableChangeRecords with the same IterableChangeRecord_.item\nclass _DuplicateItemRecordList<V> {\n  /** @internal */\n  _head: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _tail: IterableChangeRecord_<V>|null = null;\n\n  /**\n   * Append the record to the list of duplicates.\n   *\n   * Note: by design all records in the list of duplicates hold the same value in record.item.\n   */\n  add(record: IterableChangeRecord_<V>): void {\n    if (this._head === null) {\n      this._head = this._tail = record;\n      record._nextDup = null;\n      record._prevDup = null;\n    } else {\n      // TODO(vicb):\n      // assert(record.item ==  _head.item ||\n      //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n      this._tail!._nextDup = record;\n      record._prevDup = this._tail;\n      record._nextDup = null;\n      this._tail = record;\n    }\n  }\n\n  // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n  // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n  get(trackById: any, atOrAfterIndex: number|null): IterableChangeRecord_<V>|null {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._head; record !== null; record = record._nextDup) {\n      if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex!) &&\n          Object.is(record.trackById, trackById)) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * Returns whether the list of duplicates is empty.\n   */\n  remove(record: IterableChangeRecord_<V>): boolean {\n    // TODO(vicb):\n    // assert(() {\n    //  // verify that the record being removed is in the list.\n    //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n    //    if (identical(cursor, record)) return true;\n    //  }\n    //  return false;\n    //});\n\n    const prev: IterableChangeRecord_<V>|null = record._prevDup;\n    const next: IterableChangeRecord_<V>|null = record._nextDup;\n    if (prev === null) {\n      this._head = next;\n    } else {\n      prev._nextDup = next;\n    }\n    if (next === null) {\n      this._tail = prev;\n    } else {\n      next._prevDup = prev;\n    }\n    return this._head === null;\n  }\n}\n\nclass _DuplicateMap<V> {\n  map = new Map<any, _DuplicateItemRecordList<V>>();\n\n  put(record: IterableChangeRecord_<V>) {\n    const key = record.trackById;\n\n    let duplicates = this.map.get(key);\n    if (!duplicates) {\n      duplicates = new _DuplicateItemRecordList<V>();\n      this.map.set(key, duplicates);\n    }\n    duplicates.add(record);\n  }\n\n  /**\n   * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n   * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n   *\n   * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n   * have any more `a`s needs to return the second `a`.\n   */\n  get(trackById: any, atOrAfterIndex: number|null): IterableChangeRecord_<V>|null {\n    const key = trackById;\n    const recordList = this.map.get(key);\n    return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n  }\n\n  /**\n   * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * The list of duplicates also is removed from the map if it gets empty.\n   */\n  remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    const key = record.trackById;\n    const recordList: _DuplicateItemRecordList<V> = this.map.get(key)!;\n    // Remove the list of duplicates when it gets empty\n    if (recordList.remove(record)) {\n      this.map.delete(key);\n    }\n    return record;\n  }\n\n  get isEmpty(): boolean {\n    return this.map.size === 0;\n  }\n\n  clear() {\n    this.map.clear();\n  }\n}\n\nfunction getPreviousIndex(item: any, addRemoveOffset: number, moveOffsets: number[]|null): number {\n  const previousIndex = item.previousIndex;\n  if (previousIndex === null) return previousIndex;\n  let moveOffset = 0;\n  if (moveOffsets && previousIndex < moveOffsets.length) {\n    moveOffset = moveOffsets[previousIndex];\n  }\n  return previousIndex + addRemoveOffset + moveOffset;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringify} from '../../util/stringify';\nimport {isJsObject} from '../change_detection_util';\nimport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory} from './keyvalue_differs';\n\n\nexport class DefaultKeyValueDifferFactory<K, V> implements KeyValueDifferFactory {\n  constructor() {}\n  supports(obj: any): boolean {\n    return obj instanceof Map || isJsObject(obj);\n  }\n\n  create<K, V>(): KeyValueDiffer<K, V> {\n    return new DefaultKeyValueDiffer<K, V>();\n  }\n}\n\nexport class DefaultKeyValueDiffer<K, V> implements KeyValueDiffer<K, V>, KeyValueChanges<K, V> {\n  private _records = new Map<K, KeyValueChangeRecord_<K, V>>();\n  private _mapHead: KeyValueChangeRecord_<K, V>|null = null;\n  // _appendAfter is used in the check loop\n  private _appendAfter: KeyValueChangeRecord_<K, V>|null = null;\n  private _previousMapHead: KeyValueChangeRecord_<K, V>|null = null;\n  private _changesHead: KeyValueChangeRecord_<K, V>|null = null;\n  private _changesTail: KeyValueChangeRecord_<K, V>|null = null;\n  private _additionsHead: KeyValueChangeRecord_<K, V>|null = null;\n  private _additionsTail: KeyValueChangeRecord_<K, V>|null = null;\n  private _removalsHead: KeyValueChangeRecord_<K, V>|null = null;\n  private _removalsTail: KeyValueChangeRecord_<K, V>|null = null;\n\n  get isDirty(): boolean {\n    return this._additionsHead !== null || this._changesHead !== null ||\n        this._removalsHead !== null;\n  }\n\n  forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._mapHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n\n  forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n\n  forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._changesHead; record !== null; record = record._nextChanged) {\n      fn(record);\n    }\n  }\n\n  forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n\n  forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n\n  diff(map?: Map<any, any>|{[k: string]: any}|null): any {\n    if (!map) {\n      map = new Map();\n    } else if (!(map instanceof Map || isJsObject(map))) {\n      throw new Error(\n          `Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`);\n    }\n\n    return this.check(map) ? this : null;\n  }\n\n  onDestroy() {}\n\n  /**\n   * Check the current state of the map vs the previous.\n   * The algorithm is optimised for when the keys do no change.\n   */\n  check(map: Map<any, any>|{[k: string]: any}): boolean {\n    this._reset();\n\n    let insertBefore = this._mapHead;\n    this._appendAfter = null;\n\n    this._forEach(map, (value: any, key: any) => {\n      if (insertBefore && insertBefore.key === key) {\n        this._maybeAddToChanges(insertBefore, value);\n        this._appendAfter = insertBefore;\n        insertBefore = insertBefore._next;\n      } else {\n        const record = this._getOrCreateRecordForKey(key, value);\n        insertBefore = this._insertBeforeOrAppend(insertBefore, record);\n      }\n    });\n\n    // Items remaining at the end of the list have been deleted\n    if (insertBefore) {\n      if (insertBefore._prev) {\n        insertBefore._prev._next = null;\n      }\n\n      this._removalsHead = insertBefore;\n\n      for (let record: KeyValueChangeRecord_<K, V>|null = insertBefore; record !== null;\n           record = record._nextRemoved) {\n        if (record === this._mapHead) {\n          this._mapHead = null;\n        }\n        this._records.delete(record.key);\n        record._nextRemoved = record._next;\n        record.previousValue = record.currentValue;\n        record.currentValue = null;\n        record._prev = null;\n        record._next = null;\n      }\n    }\n\n    // Make sure tails have no next records from previous runs\n    if (this._changesTail) this._changesTail._nextChanged = null;\n    if (this._additionsTail) this._additionsTail._nextAdded = null;\n\n    return this.isDirty;\n  }\n\n  /**\n   * Inserts a record before `before` or append at the end of the list when `before` is null.\n   *\n   * Notes:\n   * - This method appends at `this._appendAfter`,\n   * - This method updates `this._appendAfter`,\n   * - The return value is the new value for the insertion pointer.\n   */\n  private _insertBeforeOrAppend(\n      before: KeyValueChangeRecord_<K, V>|null,\n      record: KeyValueChangeRecord_<K, V>): KeyValueChangeRecord_<K, V>|null {\n    if (before) {\n      const prev = before._prev;\n      record._next = before;\n      record._prev = prev;\n      before._prev = record;\n      if (prev) {\n        prev._next = record;\n      }\n      if (before === this._mapHead) {\n        this._mapHead = record;\n      }\n\n      this._appendAfter = before;\n      return before;\n    }\n\n    if (this._appendAfter) {\n      this._appendAfter._next = record;\n      record._prev = this._appendAfter;\n    } else {\n      this._mapHead = record;\n    }\n\n    this._appendAfter = record;\n    return null;\n  }\n\n  private _getOrCreateRecordForKey(key: K, value: V): KeyValueChangeRecord_<K, V> {\n    if (this._records.has(key)) {\n      const record = this._records.get(key)!;\n      this._maybeAddToChanges(record, value);\n      const prev = record._prev;\n      const next = record._next;\n      if (prev) {\n        prev._next = next;\n      }\n      if (next) {\n        next._prev = prev;\n      }\n      record._next = null;\n      record._prev = null;\n\n      return record;\n    }\n\n    const record = new KeyValueChangeRecord_<K, V>(key);\n    this._records.set(key, record);\n    record.currentValue = value;\n    this._addToAdditions(record);\n    return record;\n  }\n\n  /** @internal */\n  _reset() {\n    if (this.isDirty) {\n      let record: KeyValueChangeRecord_<K, V>|null;\n      // let `_previousMapHead` contain the state of the map before the changes\n      this._previousMapHead = this._mapHead;\n      for (record = this._previousMapHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      // Update `record.previousValue` with the value of the item before the changes\n      // We need to update all changed items (that's those which have been added and changed)\n      for (record = this._changesHead; record !== null; record = record._nextChanged) {\n        record.previousValue = record.currentValue;\n      }\n      for (record = this._additionsHead; record != null; record = record._nextAdded) {\n        record.previousValue = record.currentValue;\n      }\n\n      this._changesHead = this._changesTail = null;\n      this._additionsHead = this._additionsTail = null;\n      this._removalsHead = null;\n    }\n  }\n\n  // Add the record or a given key to the list of changes only when the value has actually changed\n  private _maybeAddToChanges(record: KeyValueChangeRecord_<K, V>, newValue: any): void {\n    if (!Object.is(newValue, record.currentValue)) {\n      record.previousValue = record.currentValue;\n      record.currentValue = newValue;\n      this._addToChanges(record);\n    }\n  }\n\n  private _addToAdditions(record: KeyValueChangeRecord_<K, V>) {\n    if (this._additionsHead === null) {\n      this._additionsHead = this._additionsTail = record;\n    } else {\n      this._additionsTail!._nextAdded = record;\n      this._additionsTail = record;\n    }\n  }\n\n  private _addToChanges(record: KeyValueChangeRecord_<K, V>) {\n    if (this._changesHead === null) {\n      this._changesHead = this._changesTail = record;\n    } else {\n      this._changesTail!._nextChanged = record;\n      this._changesTail = record;\n    }\n  }\n\n  /** @internal */\n  private _forEach<K, V>(obj: Map<K, V>|{[k: string]: V}, fn: (v: V, k: any) => void) {\n    if (obj instanceof Map) {\n      obj.forEach(fn);\n    } else {\n      Object.keys(obj).forEach(k => fn(obj[k], k));\n    }\n  }\n}\n\nclass KeyValueChangeRecord_<K, V> implements KeyValueChangeRecord<K, V> {\n  previousValue: V|null = null;\n  currentValue: V|null = null;\n\n  /** @internal */\n  _nextPrevious: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _next: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _prev: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _nextAdded: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _nextRemoved: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _nextChanged: KeyValueChangeRecord_<K, V>|null = null;\n\n  constructor(public key: K) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵɵdefineInjectable} from '../../di/interface/defs';\nimport {StaticProvider} from '../../di/interface/provider';\nimport {Optional, SkipSelf} from '../../di/metadata';\nimport {DefaultIterableDifferFactory} from '../differs/default_iterable_differ';\n\n\n\n/**\n * A type describing supported iterable types.\n *\n * @publicApi\n */\nexport type NgIterable<T> = Array<T>|Iterable<T>;\n\n/**\n * A strategy for tracking changes over time to an iterable. Used by {@link NgForOf} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n *\n * @publicApi\n */\nexport interface IterableDiffer<V> {\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: NgIterable<V>|undefined|null): IterableChanges<V>|null;\n}\n\n/**\n * An object describing the changes in the `Iterable` collection since last time\n * `IterableDiffer#diff()` was invoked.\n *\n * @publicApi\n */\nexport interface IterableChanges<V> {\n  /**\n   * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n   * to each item.\n   */\n  forEachItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /**\n   * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n   * new `Iterable`.\n   *\n   * NOTE: These are not necessarily the actual operations which were applied to the original\n   * `Iterable`, rather these are a set of computed operations which may not be the same as the\n   * ones applied.\n   *\n   * @param record A change which needs to be applied\n   * @param previousIndex The `IterableChangeRecord#previousIndex` of the `record` refers to the\n   *        original `Iterable` location, where as `previousIndex` refers to the transient location\n   *        of the item, after applying the operations up to this point.\n   * @param currentIndex The `IterableChangeRecord#currentIndex` of the `record` refers to the\n   *        original `Iterable` location, where as `currentIndex` refers to the transient location\n   *        of the item, after applying the operations up to this point.\n   */\n  forEachOperation(\n      fn:\n          (record: IterableChangeRecord<V>, previousIndex: number|null,\n           currentIndex: number|null) => void): void;\n\n  /**\n   * Iterate over changes in the order of original `Iterable` showing where the original items\n   * have moved.\n   */\n  forEachPreviousItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all added items. */\n  forEachAddedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all moved items. */\n  forEachMovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all removed items. */\n  forEachRemovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /**\n   * Iterate over all items which had their identity (as computed by the `TrackByFunction`)\n   * changed.\n   */\n  forEachIdentityChange(fn: (record: IterableChangeRecord<V>) => void): void;\n}\n\n/**\n * Record representing the item change information.\n *\n * @publicApi\n */\nexport interface IterableChangeRecord<V> {\n  /** Current index of the item in `Iterable` or null if removed. */\n  readonly currentIndex: number|null;\n\n  /** Previous index of the item in `Iterable` or null if added. */\n  readonly previousIndex: number|null;\n\n  /** The item. */\n  readonly item: V;\n\n  /** Track by identity as computed by the `TrackByFunction`. */\n  readonly trackById: any;\n}\n\n/**\n * An optional function passed into the `NgForOf` directive that defines how to track\n * changes for items in an iterable.\n * The function takes the iteration index and item ID.\n * When supplied, Angular tracks changes by the return value of the function.\n *\n * @publicApi\n */\nexport interface TrackByFunction<T> {\n  (index: number, item: T): any;\n}\n\n/**\n * Provides a factory for {@link IterableDiffer}.\n *\n * @publicApi\n */\nexport interface IterableDifferFactory {\n  supports(objects: any): boolean;\n  create<V>(trackByFn?: TrackByFunction<V>): IterableDiffer<V>;\n}\n\nexport function defaultIterableDiffersFactory() {\n  return new IterableDiffers([new DefaultIterableDifferFactory()]);\n}\n\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * @publicApi\n */\nexport class IterableDiffers {\n  /** @nocollapse */\n  static ɵprov = ɵɵdefineInjectable(\n      {token: IterableDiffers, providedIn: 'root', factory: defaultIterableDiffersFactory});\n\n  /**\n   * @deprecated v4.0.0 - Should be private\n   */\n  factories: IterableDifferFactory[];\n  constructor(factories: IterableDifferFactory[]) {\n    this.factories = factories;\n  }\n\n  static create(factories: IterableDifferFactory[], parent?: IterableDiffers): IterableDiffers {\n    if (parent != null) {\n      const copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n\n    return new IterableDiffers(factories);\n  }\n\n  /**\n   * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n   * inherited {@link IterableDiffers} instance with the provided factories and return a new\n   * {@link IterableDiffers} instance.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example shows how to extend an existing list of factories,\n   * which will only be applied to the injector for this component and its children.\n   * This step is all that's required to make a new {@link IterableDiffer} available.\n   *\n   * ```\n   * @Component({\n   *   viewProviders: [\n   *     IterableDiffers.extend([new ImmutableListDiffer()])\n   *   ]\n   * })\n   * ```\n   */\n  static extend(factories: IterableDifferFactory[]): StaticProvider {\n    return {\n      provide: IterableDiffers,\n      useFactory: (parent: IterableDiffers|null) => {\n        // if parent is null, it means that we are in the root injector and we have just overridden\n        // the default injection mechanism for IterableDiffers, in such a case just assume\n        // `defaultIterableDiffersFactory`.\n        return IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n\n  find(iterable: any): IterableDifferFactory {\n    const factory = this.factories.find(f => f.supports(iterable));\n    if (factory != null) {\n      return factory;\n    } else {\n      throw new Error(`Cannot find a differ supporting object '${iterable}' of type '${\n          getTypeNameForDebugging(iterable)}'`);\n    }\n  }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n  return type['name'] || typeof type;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Optional, SkipSelf, StaticProvider, ɵɵdefineInjectable} from '../../di';\nimport {DefaultKeyValueDifferFactory} from './default_keyvalue_differ';\n\n\n/**\n * A differ that tracks changes made to an object over time.\n *\n * @publicApi\n */\nexport interface KeyValueDiffer<K, V> {\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: Map<K, V>): KeyValueChanges<K, V>|null;\n\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: {[key: string]: V}): KeyValueChanges<string, V>|null;\n  // TODO(TS2.1): diff<KP extends string>(this: KeyValueDiffer<KP, V>, object: Record<KP, V>):\n  // KeyValueDiffer<KP, V>;\n}\n\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n *\n * @publicApi\n */\nexport interface KeyValueChanges<K, V> {\n  /**\n   * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n   * to each item.\n   */\n  forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over changes in the order of original Map showing where the original items\n   * have moved.\n   */\n  forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all keys for which values have changed.\n   */\n  forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all added items.\n   */\n  forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all removed items.\n   */\n  forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n}\n\n/**\n * Record representing the item change information.\n *\n * @publicApi\n */\nexport interface KeyValueChangeRecord<K, V> {\n  /**\n   * Current key in the Map.\n   */\n  readonly key: K;\n\n  /**\n   * Current value for the key or `null` if removed.\n   */\n  readonly currentValue: V|null;\n\n  /**\n   * Previous value for the key or `null` if added.\n   */\n  readonly previousValue: V|null;\n}\n\n/**\n * Provides a factory for {@link KeyValueDiffer}.\n *\n * @publicApi\n */\nexport interface KeyValueDifferFactory {\n  /**\n   * Test to see if the differ knows how to diff this kind of object.\n   */\n  supports(objects: any): boolean;\n\n  /**\n   * Create a `KeyValueDiffer`.\n   */\n  create<K, V>(): KeyValueDiffer<K, V>;\n}\n\nexport function defaultKeyValueDiffersFactory() {\n  return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);\n}\n\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * @publicApi\n */\nexport class KeyValueDiffers {\n  /** @nocollapse */\n  static ɵprov = ɵɵdefineInjectable(\n      {token: KeyValueDiffers, providedIn: 'root', factory: defaultKeyValueDiffersFactory});\n\n  /**\n   * @deprecated v4.0.0 - Should be private.\n   */\n  factories: KeyValueDifferFactory[];\n\n  constructor(factories: KeyValueDifferFactory[]) {\n    this.factories = factories;\n  }\n\n  static create<S>(factories: KeyValueDifferFactory[], parent?: KeyValueDiffers): KeyValueDiffers {\n    if (parent) {\n      const copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n    return new KeyValueDiffers(factories);\n  }\n\n  /**\n   * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n   * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n   * {@link KeyValueDiffers} instance.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example shows how to extend an existing list of factories,\n   * which will only be applied to the injector for this component and its children.\n   * This step is all that's required to make a new {@link KeyValueDiffer} available.\n   *\n   * ```\n   * @Component({\n   *   viewProviders: [\n   *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n   *   ]\n   * })\n   * ```\n   */\n  static extend<S>(factories: KeyValueDifferFactory[]): StaticProvider {\n    return {\n      provide: KeyValueDiffers,\n      useFactory: (parent: KeyValueDiffers) => {\n        // if parent is null, it means that we are in the root injector and we have just overridden\n        // the default injection mechanism for KeyValueDiffers, in such a case just assume\n        // `defaultKeyValueDiffersFactory`.\n        return KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n\n  find(kv: any): KeyValueDifferFactory {\n    const factory = this.factories.find(f => f.supports(kv));\n    if (factory) {\n      return factory;\n    }\n    throw new Error(`Cannot find a differ supporting object '${kv}'`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertParentView} from './assert';\nimport {icuContainerIterate} from './i18n/i18n_tree_shaking';\nimport {CONTAINER_HEADER_OFFSET} from './interfaces/container';\nimport {TIcuContainerNode, TNode, TNodeType} from './interfaces/node';\nimport {RNode} from './interfaces/renderer_dom';\nimport {isLContainer} from './interfaces/type_checks';\nimport {DECLARATION_COMPONENT_VIEW, LView, T_HOST, TVIEW, TView} from './interfaces/view';\nimport {assertTNodeType} from './node_assert';\nimport {getProjectionNodes} from './node_manipulation';\nimport {getLViewParent} from './util/view_traversal_utils';\nimport {unwrapRNode} from './util/view_utils';\n\n\n\nexport function collectNativeNodes(\n    tView: TView, lView: LView, tNode: TNode|null, result: any[],\n    isProjection: boolean = false): any[] {\n  while (tNode !== null) {\n    ngDevMode &&\n        assertTNodeType(\n            tNode,\n            TNodeType.AnyRNode | TNodeType.AnyContainer | TNodeType.Projection | TNodeType.Icu);\n\n    const lNode = lView[tNode.index];\n    if (lNode !== null) {\n      result.push(unwrapRNode(lNode));\n    }\n\n    // A given lNode can represent either a native node or a LContainer (when it is a host of a\n    // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes\n    // from the views in this container.\n    if (isLContainer(lNode)) {\n      for (let i = CONTAINER_HEADER_OFFSET; i < lNode.length; i++) {\n        const lViewInAContainer = lNode[i];\n        const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;\n        if (lViewFirstChildTNode !== null) {\n          collectNativeNodes(\n              lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);\n        }\n      }\n    }\n\n    const tNodeType = tNode.type;\n    if (tNodeType & TNodeType.ElementContainer) {\n      collectNativeNodes(tView, lView, tNode.child, result);\n    } else if (tNodeType & TNodeType.Icu) {\n      const nextRNode = icuContainerIterate(tNode as TIcuContainerNode, lView);\n      let rNode: RNode|null;\n      while (rNode = nextRNode()) {\n        result.push(rNode);\n      }\n    } else if (tNodeType & TNodeType.Projection) {\n      const nodesInSlot = getProjectionNodes(lView, tNode);\n      if (Array.isArray(nodesInSlot)) {\n        result.push(...nodesInSlot);\n      } else {\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW])!;\n        ngDevMode && assertParentView(parentView);\n        collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef as viewEngine_ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {EmbeddedViewRef as viewEngine_EmbeddedViewRef, InternalViewRef as viewEngine_InternalViewRef, ViewRefTracker} from '../linker/view_ref';\nimport {removeFromArray} from '../util/array_utils';\nimport {assertEqual} from '../util/assert';\nimport {collectNativeNodes} from './collect_native_nodes';\nimport {checkNoChangesInRootView, checkNoChangesInternal, detectChangesInRootView, detectChangesInternal, markViewDirty, storeCleanupWithContext} from './instructions/shared';\nimport {CONTAINER_HEADER_OFFSET, VIEW_REFS} from './interfaces/container';\nimport {isLContainer} from './interfaces/type_checks';\nimport {CONTEXT, FLAGS, LView, LViewFlags, PARENT, TVIEW} from './interfaces/view';\nimport {destroyLView, detachView, renderDetachView} from './node_manipulation';\n\n\n\n// Needed due to tsickle downleveling where multiple `implements` with classes creates\n// multiple @extends in Closure annotations, which is illegal. This workaround fixes\n// the multiple @extends by making the annotation @implements instead\nexport interface viewEngine_ChangeDetectorRef_interface extends viewEngine_ChangeDetectorRef {}\n\nexport class ViewRef<T> implements viewEngine_EmbeddedViewRef<T>, viewEngine_InternalViewRef,\n                                   viewEngine_ChangeDetectorRef_interface {\n  private _appRef: ViewRefTracker|null = null;\n  private _attachedToViewContainer = false;\n\n  get rootNodes(): any[] {\n    const lView = this._lView;\n    const tView = lView[TVIEW];\n    return collectNativeNodes(tView, lView, tView.firstChild, []);\n  }\n\n  constructor(\n      /**\n       * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.\n       *\n       * When ViewRef is created for a dynamic component, this also represents the `LView` for the\n       * component.\n       *\n       * For a \"regular\" ViewRef created for an embedded view, this is the `LView` for the embedded\n       * view.\n       *\n       * @internal\n       */\n      public _lView: LView,\n\n      /**\n       * This represents the `LView` associated with the point where `ChangeDetectorRef` was\n       * requested.\n       *\n       * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.\n       */\n      private _cdRefInjectingView?: LView) {}\n\n  get context(): T {\n    return this._lView[CONTEXT] as T;\n  }\n\n  get destroyed(): boolean {\n    return (this._lView[FLAGS] & LViewFlags.Destroyed) === LViewFlags.Destroyed;\n  }\n\n  destroy(): void {\n    if (this._appRef) {\n      this._appRef.detachView(this);\n    } else if (this._attachedToViewContainer) {\n      const parent = this._lView[PARENT];\n      if (isLContainer(parent)) {\n        const viewRefs = parent[VIEW_REFS] as ViewRef<unknown>[] | null;\n        const index = viewRefs ? viewRefs.indexOf(this) : -1;\n        if (index > -1) {\n          ngDevMode &&\n              assertEqual(\n                  index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET,\n                  'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');\n          detachView(parent, index);\n          removeFromArray(viewRefs!, index);\n        }\n      }\n      this._attachedToViewContainer = false;\n    }\n    destroyLView(this._lView[TVIEW], this._lView);\n  }\n\n  onDestroy(callback: Function) {\n    storeCleanupWithContext(this._lView[TVIEW], this._lView, null, callback);\n  }\n\n  /**\n   * Marks a view and all of its ancestors dirty.\n   *\n   * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n   * multiple `markForCheck` calls to into one change detection run.\n   *\n   * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n   * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n   * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n   *\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Component({\n   *   selector: 'my-app',\n   *   template: `Number of ticks: {{numberOfTicks}}`\n   *   changeDetection: ChangeDetectionStrategy.OnPush,\n   * })\n   * class AppComponent {\n   *   numberOfTicks = 0;\n   *\n   *   constructor(private ref: ChangeDetectorRef) {\n   *     setInterval(() => {\n   *       this.numberOfTicks++;\n   *       // the following is required, otherwise the view will not be updated\n   *       this.ref.markForCheck();\n   *     }, 1000);\n   *   }\n   * }\n   * ```\n   */\n  markForCheck(): void {\n    markViewDirty(this._cdRefInjectingView || this._lView);\n  }\n\n  /**\n   * Detaches the view from the change detection tree.\n   *\n   * Detached views will not be checked during change detection runs until they are\n   * re-attached, even if they are dirty. `detach` can be used in combination with\n   * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n   * detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds. We can do that by detaching\n   * the component's change detector and doing a local check every five seconds.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   // in a real application the returned data will be different every time\n   *   get data() {\n   *     return [1,2,3,4,5];\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'giant-list',\n   *   template: `\n   *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n   *   `,\n   * })\n   * class GiantList {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n   *     ref.detach();\n   *     setInterval(() => {\n   *       this.ref.detectChanges();\n   *     }, 5000);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   providers: [DataProvider],\n   *   template: `\n   *     <giant-list><giant-list>\n   *   `,\n   * })\n   * class App {\n   * }\n   * ```\n   */\n  detach(): void {\n    this._lView[FLAGS] &= ~LViewFlags.Attached;\n  }\n\n  /**\n   * Re-attaches a view to the change detection tree.\n   *\n   * This can be used to re-attach views that were previously detached from the tree\n   * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example creates a component displaying `live` data. The component will detach\n   * its change detector from the main change detector tree when the component's live property\n   * is set to false.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   data = 1;\n   *\n   *   constructor() {\n   *     setInterval(() => {\n   *       this.data = this.data * 2;\n   *     }, 500);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'live-data',\n   *   inputs: ['live'],\n   *   template: 'Data: {{dataProvider.data}}'\n   * })\n   * class LiveData {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n   *\n   *   set live(value) {\n   *     if (value) {\n   *       this.ref.reattach();\n   *     } else {\n   *       this.ref.detach();\n   *     }\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'my-app',\n   *   providers: [DataProvider],\n   *   template: `\n   *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n   *     <live-data [live]=\"live\"><live-data>\n   *   `,\n   * })\n   * class AppComponent {\n   *   live = true;\n   * }\n   * ```\n   */\n  reattach(): void {\n    this._lView[FLAGS] |= LViewFlags.Attached;\n  }\n\n  /**\n   * Checks the view and its children.\n   *\n   * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n   * local change detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine, the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds.\n   *\n   * We can do that by detaching the component's change detector and doing a local change detection\n   * check every five seconds.\n   *\n   * See {@link ChangeDetectorRef#detach detach} for more information.\n   */\n  detectChanges(): void {\n    detectChangesInternal(this._lView[TVIEW], this._lView, this.context);\n  }\n\n  /**\n   * Checks the change detector and its children, and throws if any changes are detected.\n   *\n   * This is used in development mode to verify that running change detection doesn't\n   * introduce other changes.\n   */\n  checkNoChanges(): void {\n    checkNoChangesInternal(this._lView[TVIEW], this._lView, this.context);\n  }\n\n  attachToViewContainerRef() {\n    if (this._appRef) {\n      throw new Error('This view is already attached directly to the ApplicationRef!');\n    }\n    this._attachedToViewContainer = true;\n  }\n\n  detachFromAppRef() {\n    this._appRef = null;\n    renderDetachView(this._lView[TVIEW], this._lView);\n  }\n\n  attachToAppRef(appRef: ViewRefTracker) {\n    if (this._attachedToViewContainer) {\n      throw new Error('This view is already attached to a ViewContainer!');\n    }\n    this._appRef = appRef;\n  }\n}\n\n/** @internal */\nexport class RootViewRef<T> extends ViewRef<T> {\n  constructor(public _view: LView) {\n    super(_view);\n  }\n\n  detectChanges(): void {\n    detectChangesInRootView(this._view);\n  }\n\n  checkNoChanges(): void {\n    checkNoChangesInRootView(this._view);\n  }\n\n  get context(): T {\n    return null!;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TNode, TNodeType} from '../render3/interfaces/node';\nimport {isComponentHost} from '../render3/interfaces/type_checks';\nimport {DECLARATION_COMPONENT_VIEW, LView} from '../render3/interfaces/view';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {getComponentLViewByIndex} from '../render3/util/view_utils';\nimport {ViewRef as R3_ViewRef} from '../render3/view_ref';\nimport {noop} from '../util/noop';\n\nexport const SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = injectChangeDetectorRef;\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = noop;\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY: typeof injectChangeDetectorRef =\n    SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__;\n\n/**\n * Base class that provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be re-rendered.\n *\n * @see [Using change detection hooks](guide/lifecycle-hooks#using-change-detection-hooks)\n * @see [Defining custom change detection](guide/lifecycle-hooks#defining-custom-change-detection)\n *\n * @usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](https://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * @publicApi\n */\nexport abstract class ChangeDetectorRef {\n  /**\n   * When a view uses the {@link ChangeDetectionStrategy#OnPush OnPush} (checkOnce)\n   * change detection strategy, explicitly marks the view as changed so that\n   * it can be checked again.\n   *\n   * Components are normally marked as dirty (in need of rerendering) when inputs\n   * have changed or events have fired in the view. Call this method to ensure that\n   * a component is checked even if these triggers have not occured.\n   *\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\n   *\n   */\n  abstract markForCheck(): void;\n\n  /**\n   * Detaches this view from the change-detection tree.\n   * A detached view is  not checked until it is reattached.\n   * Use in combination with `detectChanges()` to implement local change detection checks.\n   *\n   * Detached views are not checked during change detection runs until they are\n   * re-attached, even if they are marked as dirty.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   */\n  abstract detach(): void;\n\n  /**\n   * Checks this view and its children. Use in combination with {@link ChangeDetectorRef#detach\n   * detach}\n   * to implement local change detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   */\n  abstract detectChanges(): void;\n\n  /**\n   * Checks the change detector and its children, and throws if any changes are detected.\n   *\n   * Use in development mode to verify that running change detection doesn't introduce\n   * other changes.\n   */\n  abstract checkNoChanges(): void;\n\n  /**\n   * Re-attaches the previously detached view to the change detection tree.\n   * Views are attached to the tree by default.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   *\n   */\n  abstract reattach(): void;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => ChangeDetectorRef = SWITCH_CHANGE_DETECTOR_REF_FACTORY;\n\n  /**\n   * This marker is need so that the JIT compiler can correctly identify this class as special.\n   *\n   * @internal\n   * @nocollapse\n   */\n  static __ChangeDetectorRef__ = true;\n}\n\n\n\n/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\nexport function injectChangeDetectorRef(isPipe = false): ChangeDetectorRef {\n  return createViewRef(getCurrentTNode()!, getLView(), isPipe);\n}\n\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param tNode The node that is requesting a ChangeDetectorRef\n * @param lView The view to which the node belongs\n * @param isPipe Whether the view is being injected into a pipe.\n * @returns The ChangeDetectorRef to use\n */\nfunction createViewRef(tNode: TNode, lView: LView, isPipe: boolean): ChangeDetectorRef {\n  // `isComponentView` will be true for Component and Directives (but not for Pipes).\n  // See https://github.com/angular/angular/pull/33072 for proper fix\n  const isComponentView = !isPipe && isComponentHost(tNode);\n  if (isComponentView) {\n    // The LView represents the location where the component is declared.\n    // Instead we want the LView for the component View and so we need to look it up.\n    const componentView = getComponentLViewByIndex(tNode.index, lView);  // look down\n    return new R3_ViewRef(componentView, componentView);\n  } else if (tNode.type & (TNodeType.AnyRNode | TNodeType.AnyContainer | TNodeType.Icu)) {\n    // The LView represents the location where the injection is requested from.\n    // We need to locate the containing LView (in case where the `lView` is an embedded view)\n    const hostComponentView = lView[DECLARATION_COMPONENT_VIEW];  // look up\n    return new R3_ViewRef(hostComponentView, lView);\n  }\n  return null!;\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DefaultIterableDifferFactory} from './differs/default_iterable_differ';\nimport {DefaultKeyValueDifferFactory} from './differs/default_keyvalue_differ';\nimport {IterableDifferFactory, IterableDiffers} from './differs/iterable_differs';\nimport {KeyValueDifferFactory, KeyValueDiffers} from './differs/keyvalue_differs';\n\nexport {SimpleChange, SimpleChanges} from '../interface/simple_change';\nexport {devModeEqual, WrappedValue} from './change_detection_util';\nexport {ChangeDetectorRef} from './change_detector_ref';\nexport {ChangeDetectionStrategy, ChangeDetectorStatus, isDefaultChangeDetectionStrategy} from './constants';\nexport {DefaultIterableDifferFactory} from './differs/default_iterable_differ';\nexport {DefaultIterableDiffer} from './differs/default_iterable_differ';\nexport {DefaultKeyValueDifferFactory} from './differs/default_keyvalue_differ';\nexport {IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, IterableDiffers, NgIterable, TrackByFunction} from './differs/iterable_differs';\nexport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory, KeyValueDiffers} from './differs/keyvalue_differs';\nexport {PipeTransform} from './pipe_transform';\n\n\n\n/**\n * Structural diffing for `Object`s and `Map`s.\n */\nconst keyValDiff: KeyValueDifferFactory[] = [new DefaultKeyValueDifferFactory()];\n\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n */\nconst iterableDiff: IterableDifferFactory[] = [new DefaultIterableDifferFactory()];\n\nexport const defaultIterableDiffers = new IterableDiffers(iterableDiff);\n\nexport const defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertLContainer} from '../render3/assert';\nimport {createLView, renderView} from '../render3/instructions/shared';\nimport {TContainerNode, TNode, TNodeType} from '../render3/interfaces/node';\nimport {DECLARATION_LCONTAINER, LView, LViewFlags, QUERIES, TView} from '../render3/interfaces/view';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {ViewRef as R3_ViewRef} from '../render3/view_ref';\nimport {assertDefined} from '../util/assert';\nimport {noop} from '../util/noop';\nimport {createElementRef, ElementRef} from './element_ref';\nimport {EmbeddedViewRef} from './view_ref';\n\n\n\nexport const SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = injectTemplateRef;\nconst SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;\nconst SWITCH_TEMPLATE_REF_FACTORY: typeof injectTemplateRef = SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__;\n\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * @publicApi\n */\nexport abstract class TemplateRef<C> {\n  /**\n   * The anchor element in the parent view for this embedded view.\n   *\n   * The data-binding and injection contexts of embedded views created from this `TemplateRef`\n   * inherit from the contexts of this location.\n   *\n   * Typically new embedded views are attached to the view container of this location, but in\n   * advanced use-cases, the view can be attached to a different container while keeping the\n   * data-binding and injection context from the original location.\n   *\n   */\n  // TODO(i): rename to anchor or location\n  abstract get elementRef(): ElementRef;\n\n  /**\n   * Instantiates an embedded view based on this template,\n   * and attaches it to the view container.\n   * @param context The data-binding context of the embedded view, as declared\n   * in the `<ng-template>` usage.\n   * @returns The new embedded view object.\n   */\n  abstract createEmbeddedView(context: C): EmbeddedViewRef<C>;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => TemplateRef<any>| null = SWITCH_TEMPLATE_REF_FACTORY;\n}\n\nconst ViewEngineTemplateRef = TemplateRef;\n\nconst R3TemplateRef = class TemplateRef<T> extends ViewEngineTemplateRef<T> {\n  constructor(\n      private _declarationLView: LView, private _declarationTContainer: TContainerNode,\n      public elementRef: ElementRef) {\n    super();\n  }\n\n  createEmbeddedView(context: T): EmbeddedViewRef<T> {\n    const embeddedTView = this._declarationTContainer.tViews as TView;\n    const embeddedLView = createLView(\n        this._declarationLView, embeddedTView, context, LViewFlags.CheckAlways, null,\n        embeddedTView.declTNode, null, null, null, null);\n\n    const declarationLContainer = this._declarationLView[this._declarationTContainer.index];\n    ngDevMode && assertLContainer(declarationLContainer);\n    embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;\n\n    const declarationViewLQueries = this._declarationLView[QUERIES];\n    if (declarationViewLQueries !== null) {\n      embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);\n    }\n\n    renderView(embeddedTView, embeddedLView, context);\n\n    return new R3_ViewRef<T>(embeddedLView);\n  }\n};\n\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nexport function injectTemplateRef<T>(): TemplateRef<T>|null {\n  return createTemplateRef<T>(getCurrentTNode()!, getLView());\n}\n\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param hostTNode The node on which a TemplateRef is requested\n * @param hostLView The `LView` to which the node belongs\n * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type\n */\nexport function createTemplateRef<T>(hostTNode: TNode, hostLView: LView): TemplateRef<T>|null {\n  if (hostTNode.type & TNodeType.Container) {\n    ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n    return new R3TemplateRef(\n        hostLView, hostTNode as TContainerNode, createElementRef(hostTNode, hostLView));\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {Type} from '../interface/type';\n\nimport {ComponentFactoryResolver} from './component_factory_resolver';\n\n\n/**\n * Represents an instance of an `NgModule` created by an `NgModuleFactory`.\n * Provides access to the `NgModule` instance and related objects.\n *\n * @publicApi\n */\nexport abstract class NgModuleRef<T> {\n  /**\n   * The injector that contains all of the providers of the `NgModule`.\n   */\n  abstract get injector(): Injector;\n\n  /**\n   * The resolver that can retrieve the component factories\n   * declared in the `entryComponents` property of the module.\n   */\n  abstract get componentFactoryResolver(): ComponentFactoryResolver;\n\n  /**\n   * The `NgModule` instance.\n   */\n  abstract get instance(): T;\n\n  /**\n   * Destroys the module instance and all of the data structures associated with it.\n   */\n  abstract destroy(): void;\n\n  /**\n   * Registers a callback to be executed when the module is destroyed.\n   */\n  abstract onDestroy(callback: () => void): void;\n}\n\nexport interface InternalNgModuleRef<T> extends NgModuleRef<T> {\n  // Note: we are using the prefix _ as NgModuleData is an NgModuleRef and therefore directly\n  // exposed to the user.\n  _bootstrapComponents: Type<any>[];\n}\n\n/**\n * @publicApi\n */\nexport abstract class NgModuleFactory<T> {\n  abstract get moduleType(): Type<T>;\n  abstract create(parentInjector: Injector|null): NgModuleRef<T>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {assertNodeInjector} from '../render3/assert';\nimport {getParentInjectorLocation, NodeInjector} from '../render3/di';\nimport {addToViewTree, createLContainer} from '../render3/instructions/shared';\nimport {CONTAINER_HEADER_OFFSET, LContainer, NATIVE, VIEW_REFS} from '../render3/interfaces/container';\nimport {NodeInjectorOffset} from '../render3/interfaces/injector';\nimport {TContainerNode, TDirectiveHostNode, TElementContainerNode, TElementNode, TNodeType} from '../render3/interfaces/node';\nimport {RComment, RElement} from '../render3/interfaces/renderer_dom';\nimport {isLContainer} from '../render3/interfaces/type_checks';\nimport {LView, PARENT, RENDERER, T_HOST, TVIEW} from '../render3/interfaces/view';\nimport {assertTNodeType} from '../render3/node_assert';\nimport {addViewToContainer, destroyLView, detachView, getBeforeNodeForView, insertView, nativeInsertBefore, nativeNextSibling, nativeParentNode} from '../render3/node_manipulation';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {getParentInjectorIndex, getParentInjectorView, hasParentInjector} from '../render3/util/injector_utils';\nimport {getNativeByTNode, unwrapRNode, viewAttachedToContainer} from '../render3/util/view_utils';\nimport {ViewRef as R3ViewRef} from '../render3/view_ref';\nimport {addToArray, removeFromArray} from '../util/array_utils';\nimport {assertEqual, assertGreaterThan, assertLessThan} from '../util/assert';\nimport {noop} from '../util/noop';\nimport {ComponentFactory, ComponentRef} from './component_factory';\nimport {createElementRef, ElementRef} from './element_ref';\nimport {NgModuleRef} from './ng_module_factory';\nimport {TemplateRef} from './template_ref';\nimport {EmbeddedViewRef, ViewRef} from './view_ref';\n\n\nexport const SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = injectViewContainerRef;\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop as typeof injectViewContainerRef;\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY: typeof injectViewContainerRef =\n    SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__;\n\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * @publicApi\n */\nexport abstract class ViewContainerRef {\n  /**\n   * Anchor element that specifies the location of this container in the containing view.\n   * Each view container can have only one anchor element, and each anchor element\n   * can have only a single view container.\n   *\n   * Root elements of views attached to this container become siblings of the anchor element in\n   * the rendered view.\n   *\n   * Access the `ViewContainerRef` of an element by placing a `Directive` injected\n   * with `ViewContainerRef` on the element, or use a `ViewChild` query.\n   *\n   * <!-- TODO: rename to anchorElement -->\n   */\n  abstract get element(): ElementRef;\n\n  /**\n   * The [dependency injector](guide/glossary#injector) for this view container.\n   */\n  abstract get injector(): Injector;\n\n  /** @deprecated No replacement */\n  abstract get parentInjector(): Injector;\n\n  /**\n   * Destroys all views in this container.\n   */\n  abstract clear(): void;\n\n  /**\n   * Retrieves a view from this container.\n   * @param index The 0-based index of the view to retrieve.\n   * @returns The `ViewRef` instance, or null if the index is out of range.\n   */\n  abstract get(index: number): ViewRef|null;\n\n  /**\n   * Reports how many views are currently attached to this container.\n   * @returns The number of views.\n   */\n  abstract get length(): number;\n\n  /**\n   * Instantiates an embedded view and inserts it\n   * into this container.\n   * @param templateRef The HTML template that defines the view.\n   * @param index The 0-based index at which to insert the new view into this container.\n   * If not specified, appends the new view as the last entry.\n   *\n   * @returns The `ViewRef` instance for the newly created view.\n   */\n  abstract createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number):\n      EmbeddedViewRef<C>;\n\n  /**\n   * Instantiates a single component and inserts its host view into this container.\n   *\n   * @param componentFactory The factory to use.\n   * @param index The index at which to insert the new component's host view into this container.\n   * If not specified, appends the new view as the last entry.\n   * @param injector The injector to use as the parent for the new component.\n   * @param projectableNodes\n   * @param ngModule\n   *\n   * @returns The new component instance, containing the host view.\n   *\n   */\n  abstract createComponent<C>(\n      componentFactory: ComponentFactory<C>, index?: number, injector?: Injector,\n      projectableNodes?: any[][], ngModule?: NgModuleRef<any>): ComponentRef<C>;\n\n  /**\n   * Inserts a view into this container.\n   * @param viewRef The view to insert.\n   * @param index The 0-based index at which to insert the view.\n   * If not specified, appends the new view as the last entry.\n   * @returns The inserted `ViewRef` instance.\n   *\n   */\n  abstract insert(viewRef: ViewRef, index?: number): ViewRef;\n\n  /**\n   * Moves a view to a new location in this container.\n   * @param viewRef The view to move.\n   * @param index The 0-based index of the new location.\n   * @returns The moved `ViewRef` instance.\n   */\n  abstract move(viewRef: ViewRef, currentIndex: number): ViewRef;\n\n  /**\n   * Returns the index of a view within the current container.\n   * @param viewRef The view to query.\n   * @returns The 0-based index of the view's position in this container,\n   * or `-1` if this container doesn't contain the view.\n   */\n  abstract indexOf(viewRef: ViewRef): number;\n\n  /**\n   * Destroys a view attached to this container\n   * @param index The 0-based index of the view to destroy.\n   * If not specified, the last view in the container is removed.\n   */\n  abstract remove(index?: number): void;\n\n  /**\n   * Detaches a view from this container without destroying it.\n   * Use along with `insert()` to move a view within the current container.\n   * @param index The 0-based index of the view to detach.\n   * If not specified, the last view in the container is detached.\n   */\n  abstract detach(index?: number): ViewRef|null;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => ViewContainerRef = SWITCH_VIEW_CONTAINER_REF_FACTORY;\n}\n\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\nexport function injectViewContainerRef(): ViewContainerRef {\n  const previousTNode = getCurrentTNode() as TElementNode | TElementContainerNode | TContainerNode;\n  return createContainerRef(previousTNode, getLView());\n}\n\nconst VE_ViewContainerRef = ViewContainerRef;\n\nconst R3ViewContainerRef = class ViewContainerRef extends VE_ViewContainerRef {\n  constructor(\n      private _lContainer: LContainer,\n      private _hostTNode: TElementNode|TContainerNode|TElementContainerNode,\n      private _hostLView: LView) {\n    super();\n  }\n\n  get element(): ElementRef {\n    return createElementRef(this._hostTNode, this._hostLView);\n  }\n\n  get injector(): Injector {\n    return new NodeInjector(this._hostTNode, this._hostLView);\n  }\n\n  /** @deprecated No replacement */\n  get parentInjector(): Injector {\n    const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);\n    if (hasParentInjector(parentLocation)) {\n      const parentView = getParentInjectorView(parentLocation, this._hostLView);\n      const injectorIndex = getParentInjectorIndex(parentLocation);\n      ngDevMode && assertNodeInjector(parentView, injectorIndex);\n      const parentTNode =\n          parentView[TVIEW].data[injectorIndex + NodeInjectorOffset.TNODE] as TElementNode;\n      return new NodeInjector(parentTNode, parentView);\n    } else {\n      return new NodeInjector(null, this._hostLView);\n    }\n  }\n\n  clear(): void {\n    while (this.length > 0) {\n      this.remove(this.length - 1);\n    }\n  }\n\n  get(index: number): ViewRef|null {\n    const viewRefs = getViewRefs(this._lContainer);\n    return viewRefs !== null && viewRefs[index] || null;\n  }\n\n  get length(): number {\n    return this._lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n\n  createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number):\n      EmbeddedViewRef<C> {\n    const viewRef = templateRef.createEmbeddedView(context || <any>{});\n    this.insert(viewRef, index);\n    return viewRef;\n  }\n\n  createComponent<C>(\n      componentFactory: ComponentFactory<C>, index?: number|undefined,\n      injector?: Injector|undefined, projectableNodes?: any[][]|undefined,\n      ngModuleRef?: NgModuleRef<any>|undefined): ComponentRef<C> {\n    const contextInjector = injector || this.parentInjector;\n    if (!ngModuleRef && (componentFactory as any).ngModule == null && contextInjector) {\n      // DO NOT REFACTOR. The code here used to have a `value || undefined` expression\n      // which seems to cause internal google apps to fail. This is documented in the\n      // following internal bug issue: go/b/142967802\n      const result = contextInjector.get(NgModuleRef, null);\n      if (result) {\n        ngModuleRef = result;\n      }\n    }\n\n    const componentRef =\n        componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n    this.insert(componentRef.hostView, index);\n    return componentRef;\n  }\n\n  insert(viewRef: ViewRef, index?: number): ViewRef {\n    const lView = (viewRef as R3ViewRef<any>)._lView!;\n    const tView = lView[TVIEW];\n\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n    }\n\n    if (viewAttachedToContainer(lView)) {\n      // If view is already attached, detach it first so we clean up references appropriately.\n\n      const prevIdx = this.indexOf(viewRef);\n\n      // A view might be attached either to this or a different container. The `prevIdx` for\n      // those cases will be:\n      // equal to -1 for views attached to this ViewContainerRef\n      // >= 0 for views attached to a different ViewContainerRef\n      if (prevIdx !== -1) {\n        this.detach(prevIdx);\n      } else {\n        const prevLContainer = lView[PARENT] as LContainer;\n        ngDevMode &&\n            assertEqual(\n                isLContainer(prevLContainer), true,\n                'An attached view should have its PARENT point to a container.');\n\n\n        // We need to re-create a R3ViewContainerRef instance since those are not stored on\n        // LView (nor anywhere else).\n        const prevVCRef = new R3ViewContainerRef(\n            prevLContainer, prevLContainer[T_HOST] as TDirectiveHostNode, prevLContainer[PARENT]);\n\n        prevVCRef.detach(prevVCRef.indexOf(viewRef));\n      }\n    }\n\n    // Logical operation of adding `LView` to `LContainer`\n    const adjustedIdx = this._adjustIndex(index);\n    const lContainer = this._lContainer;\n    insertView(tView, lView, lContainer, adjustedIdx);\n\n    // Physical operation of adding the DOM nodes.\n    const beforeNode = getBeforeNodeForView(adjustedIdx, lContainer);\n    const renderer = lView[RENDERER];\n    const parentRNode = nativeParentNode(renderer, lContainer[NATIVE] as RElement | RComment);\n    if (parentRNode !== null) {\n      addViewToContainer(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);\n    }\n\n    (viewRef as R3ViewRef<any>).attachToViewContainerRef();\n    addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);\n\n    return viewRef;\n  }\n\n  move(viewRef: ViewRef, newIndex: number): ViewRef {\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot move a destroyed View in a ViewContainer!');\n    }\n    return this.insert(viewRef, newIndex);\n  }\n\n  indexOf(viewRef: ViewRef): number {\n    const viewRefsArr = getViewRefs(this._lContainer);\n    return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;\n  }\n\n  remove(index?: number): void {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const detachedView = detachView(this._lContainer, adjustedIdx);\n\n    if (detachedView) {\n      // Before destroying the view, remove it from the container's array of `ViewRef`s.\n      // This ensures the view container length is updated before calling\n      // `destroyLView`, which could recursively call view container methods that\n      // rely on an accurate container length.\n      // (e.g. a method on this view container being called by a child directive's OnDestroy\n      // lifecycle hook)\n      removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);\n      destroyLView(detachedView[TVIEW], detachedView);\n    }\n  }\n\n  detach(index?: number): ViewRef|null {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const view = detachView(this._lContainer, adjustedIdx);\n\n    const wasDetached =\n        view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;\n    return wasDetached ? new R3ViewRef(view!) : null;\n  }\n\n  private _adjustIndex(index?: number, shift: number = 0) {\n    if (index == null) {\n      return this.length + shift;\n    }\n    if (ngDevMode) {\n      assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);\n      // +1 because it's legal to insert at the end.\n      assertLessThan(index, this.length + 1 + shift, 'index');\n    }\n    return index;\n  }\n};\n\nfunction getViewRefs(lContainer: LContainer): ViewRef[]|null {\n  return lContainer[VIEW_REFS] as ViewRef[];\n}\n\nfunction getOrCreateViewRefs(lContainer: LContainer): ViewRef[] {\n  return (lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = [])) as ViewRef[];\n}\n\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param ViewContainerRefToken The ViewContainerRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostLView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\nexport function createContainerRef(\n    hostTNode: TElementNode|TContainerNode|TElementContainerNode,\n    hostLView: LView): ViewContainerRef {\n  ngDevMode && assertTNodeType(hostTNode, TNodeType.AnyContainer | TNodeType.AnyRNode);\n\n  let lContainer: LContainer;\n  const slotValue = hostLView[hostTNode.index];\n  if (isLContainer(slotValue)) {\n    // If the host is a container, we don't need to create a new LContainer\n    lContainer = slotValue;\n  } else {\n    let commentNode: RComment;\n    // If the host is an element container, the native host element is guaranteed to be a\n    // comment and we can reuse that comment as anchor element for the new LContainer.\n    // The comment node in question is already part of the DOM structure so we don't need to append\n    // it again.\n    if (hostTNode.type & TNodeType.ElementContainer) {\n      commentNode = unwrapRNode(slotValue) as RComment;\n    } else {\n      // If the host is a regular element, we have to insert a comment node manually which will\n      // be used as an anchor when inserting elements. In this specific case we use low-level DOM\n      // manipulation to insert it.\n      const renderer = hostLView[RENDERER];\n      ngDevMode && ngDevMode.rendererCreateComment++;\n      commentNode = renderer.createComment(ngDevMode ? 'container' : '');\n\n      const hostNative = getNativeByTNode(hostTNode, hostLView)!;\n      const parentOfHostNative = nativeParentNode(renderer, hostNative);\n      nativeInsertBefore(\n          renderer, parentOfHostNative!, commentNode, nativeNextSibling(renderer, hostNative),\n          false);\n    }\n\n    hostLView[hostTNode.index] = lContainer =\n        createLContainer(slotValue, hostLView, commentNode, hostTNode);\n\n    addToViewTree(hostLView, lContainer);\n  }\n\n  return new R3ViewContainerRef(lContainer, hostTNode, hostLView);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, SimpleChange, SimpleChanges, WrappedValue} from '../change_detection/change_detection';\nimport {INJECTOR, Injector, resolveForwardRef} from '../di';\nimport {ElementRef} from '../linker/element_ref';\nimport {TemplateRef} from '../linker/template_ref';\nimport {ViewContainerRef} from '../linker/view_container_ref';\nimport {Renderer2} from '../render/api';\nimport {isObservable} from '../util/lang';\nimport {stringify} from '../util/stringify';\n\nimport {createChangeDetectorRef, createInjector} from './refs';\nimport {asElementData, asProviderData, BindingDef, BindingFlags, DepDef, DepFlags, NodeDef, NodeFlags, OutputDef, OutputType, ProviderData, QueryValueType, Services, shouldCallLifecycleInitHook, ViewData, ViewFlags, ViewState} from './types';\nimport {calcBindingFlags, checkBinding, dispatchEvent, isComponentView, splitDepsDsl, splitMatchedQueriesDsl, tokenKey, viewParentEl} from './util';\n\nconst Renderer2TokenKey = tokenKey(Renderer2);\nconst ElementRefTokenKey = tokenKey(ElementRef);\nconst ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\nconst TemplateRefTokenKey = tokenKey(TemplateRef);\nconst ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\nconst InjectorRefTokenKey = tokenKey(Injector);\nconst INJECTORRefTokenKey = tokenKey(INJECTOR);\n\nexport function directiveDef(\n    checkIndex: number, flags: NodeFlags, matchedQueries: null|[string | number, QueryValueType][],\n    childCount: number, ctor: any, deps: ([DepFlags, any]|any)[],\n    props?: null|{[name: string]: [number, string]},\n    outputs?: null|{[name: string]: string}): NodeDef {\n  const bindings: BindingDef[] = [];\n  if (props) {\n    for (let prop in props) {\n      const [bindingIndex, nonMinifiedName] = props[prop];\n      bindings[bindingIndex] = {\n        flags: BindingFlags.TypeProperty,\n        name: prop,\n        nonMinifiedName,\n        ns: null,\n        securityContext: null,\n        suffix: null\n      };\n    }\n  }\n  const outputDefs: OutputDef[] = [];\n  if (outputs) {\n    for (let propName in outputs) {\n      outputDefs.push(\n          {type: OutputType.DirectiveOutput, propName, target: null, eventName: outputs[propName]});\n    }\n  }\n  flags |= NodeFlags.TypeDirective;\n  return _def(\n      checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n}\n\nexport function pipeDef(flags: NodeFlags, ctor: any, deps: ([DepFlags, any]|any)[]): NodeDef {\n  flags |= NodeFlags.TypePipe;\n  return _def(-1, flags, null, 0, ctor, ctor, deps);\n}\n\nexport function providerDef(\n    flags: NodeFlags, matchedQueries: null|[string | number, QueryValueType][], token: any,\n    value: any, deps: ([DepFlags, any]|any)[]): NodeDef {\n  return _def(-1, flags, matchedQueries, 0, token, value, deps);\n}\n\nexport function _def(\n    checkIndex: number, flags: NodeFlags, matchedQueriesDsl: [string|number, QueryValueType][]|null,\n    childCount: number, token: any, value: any, deps: ([DepFlags, any]|any)[],\n    bindings?: BindingDef[], outputs?: OutputDef[]): NodeDef {\n  const {matchedQueries, references, matchedQueryIds} = splitMatchedQueriesDsl(matchedQueriesDsl);\n  if (!outputs) {\n    outputs = [];\n  }\n  if (!bindings) {\n    bindings = [];\n  }\n  // Need to resolve forwardRefs as e.g. for `useValue` we\n  // lowered the expression and then stopped evaluating it,\n  // i.e. also didn't unwrap it.\n  value = resolveForwardRef(value);\n\n  const depDefs = splitDepsDsl(deps, stringify(token));\n\n  return {\n    // will bet set by the view definition\n    nodeIndex: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    checkIndex,\n    flags,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0,\n    matchedQueries,\n    matchedQueryIds,\n    references,\n    ngContentIndex: -1,\n    childCount,\n    bindings,\n    bindingFlags: calcBindingFlags(bindings),\n    outputs,\n    element: null,\n    provider: {token, value, deps: depDefs},\n    text: null,\n    query: null,\n    ngContent: null\n  };\n}\n\nexport function createProviderInstance(view: ViewData, def: NodeDef): any {\n  return _createProviderInstance(view, def);\n}\n\nexport function createPipeInstance(view: ViewData, def: NodeDef): any {\n  // deps are looked up from component.\n  let compView = view;\n  while (compView.parent && !isComponentView(compView)) {\n    compView = compView.parent;\n  }\n  // pipes can see the private services of the component\n  const allowPrivateServices = true;\n  // pipes are always eager and classes!\n  return createClass(\n      compView.parent!, viewParentEl(compView)!, allowPrivateServices, def.provider!.value,\n      def.provider!.deps);\n}\n\nexport function createDirectiveInstance(view: ViewData, def: NodeDef): any {\n  // components can see other private services, other directives can't.\n  const allowPrivateServices = (def.flags & NodeFlags.Component) > 0;\n  // directives are always eager and classes!\n  const instance =\n      createClass(view, def.parent!, allowPrivateServices, def.provider!.value, def.provider!.deps);\n  if (def.outputs.length) {\n    for (let i = 0; i < def.outputs.length; i++) {\n      const output = def.outputs[i];\n      const outputObservable = instance[output.propName!];\n      if (isObservable(outputObservable)) {\n        const subscription = outputObservable.subscribe(\n            eventHandlerClosure(view, def.parent!.nodeIndex, output.eventName));\n        view.disposables![def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n      } else {\n        throw new Error(\n            `@Output ${output.propName} not initialized in '${instance.constructor.name}'.`);\n      }\n    }\n  }\n  return instance;\n}\n\nfunction eventHandlerClosure(view: ViewData, index: number, eventName: string) {\n  return (event: any) => dispatchEvent(view, index, eventName, event);\n}\n\nexport function checkAndUpdateDirectiveInline(\n    view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any,\n    v7: any, v8: any, v9: any): boolean {\n  const providerData = asProviderData(view, def.nodeIndex);\n  const directive = providerData.instance;\n  let changed = false;\n  let changes: SimpleChanges = undefined!;\n  const bindLen = def.bindings.length;\n  if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 0, v0, changes);\n  }\n  if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 1, v1, changes);\n  }\n  if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 2, v2, changes);\n  }\n  if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 3, v3, changes);\n  }\n  if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 4, v4, changes);\n  }\n  if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 5, v5, changes);\n  }\n  if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 6, v6, changes);\n  }\n  if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 7, v7, changes);\n  }\n  if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 8, v8, changes);\n  }\n  if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 9, v9, changes);\n  }\n  if (changes) {\n    directive.ngOnChanges(changes);\n  }\n  if ((def.flags & NodeFlags.OnInit) &&\n      shouldCallLifecycleInitHook(view, ViewState.InitState_CallingOnInit, def.nodeIndex)) {\n    directive.ngOnInit();\n  }\n  if (def.flags & NodeFlags.DoCheck) {\n    directive.ngDoCheck();\n  }\n  return changed;\n}\n\nexport function checkAndUpdateDirectiveDynamic(\n    view: ViewData, def: NodeDef, values: any[]): boolean {\n  const providerData = asProviderData(view, def.nodeIndex);\n  const directive = providerData.instance;\n  let changed = false;\n  let changes: SimpleChanges = undefined!;\n  for (let i = 0; i < values.length; i++) {\n    if (checkBinding(view, def, i, values[i])) {\n      changed = true;\n      changes = updateProp(view, providerData, def, i, values[i], changes);\n    }\n  }\n  if (changes) {\n    directive.ngOnChanges(changes);\n  }\n  if ((def.flags & NodeFlags.OnInit) &&\n      shouldCallLifecycleInitHook(view, ViewState.InitState_CallingOnInit, def.nodeIndex)) {\n    directive.ngOnInit();\n  }\n  if (def.flags & NodeFlags.DoCheck) {\n    directive.ngDoCheck();\n  }\n  return changed;\n}\n\nfunction _createProviderInstance(view: ViewData, def: NodeDef): any {\n  // private services can see other private services\n  const allowPrivateServices = (def.flags & NodeFlags.PrivateProvider) > 0;\n  const providerDef = def.provider;\n  switch (def.flags & NodeFlags.Types) {\n    case NodeFlags.TypeClassProvider:\n      return createClass(\n          view, def.parent!, allowPrivateServices, providerDef!.value, providerDef!.deps);\n    case NodeFlags.TypeFactoryProvider:\n      return callFactory(\n          view, def.parent!, allowPrivateServices, providerDef!.value, providerDef!.deps);\n    case NodeFlags.TypeUseExistingProvider:\n      return resolveDep(view, def.parent!, allowPrivateServices, providerDef!.deps[0]);\n    case NodeFlags.TypeValueProvider:\n      return providerDef!.value;\n  }\n}\n\nfunction createClass(\n    view: ViewData, elDef: NodeDef, allowPrivateServices: boolean, ctor: any, deps: DepDef[]): any {\n  const len = deps.length;\n  switch (len) {\n    case 0:\n      return new ctor();\n    case 1:\n      return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n    case 2:\n      return new ctor(\n          resolveDep(view, elDef, allowPrivateServices, deps[0]),\n          resolveDep(view, elDef, allowPrivateServices, deps[1]));\n    case 3:\n      return new ctor(\n          resolveDep(view, elDef, allowPrivateServices, deps[0]),\n          resolveDep(view, elDef, allowPrivateServices, deps[1]),\n          resolveDep(view, elDef, allowPrivateServices, deps[2]));\n    default:\n      const depValues = [];\n      for (let i = 0; i < len; i++) {\n        depValues.push(resolveDep(view, elDef, allowPrivateServices, deps[i]));\n      }\n      return new ctor(...depValues);\n  }\n}\n\nfunction callFactory(\n    view: ViewData, elDef: NodeDef, allowPrivateServices: boolean, factory: any,\n    deps: DepDef[]): any {\n  const len = deps.length;\n  switch (len) {\n    case 0:\n      return factory();\n    case 1:\n      return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n    case 2:\n      return factory(\n          resolveDep(view, elDef, allowPrivateServices, deps[0]),\n          resolveDep(view, elDef, allowPrivateServices, deps[1]));\n    case 3:\n      return factory(\n          resolveDep(view, elDef, allowPrivateServices, deps[0]),\n          resolveDep(view, elDef, allowPrivateServices, deps[1]),\n          resolveDep(view, elDef, allowPrivateServices, deps[2]));\n    default:\n      const depValues = [];\n      for (let i = 0; i < len; i++) {\n        depValues.push(resolveDep(view, elDef, allowPrivateServices, deps[i]));\n      }\n      return factory(...depValues);\n  }\n}\n\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\nexport const NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n\nexport function resolveDep(\n    view: ViewData, elDef: NodeDef, allowPrivateServices: boolean, depDef: DepDef,\n    notFoundValue: any = Injector.THROW_IF_NOT_FOUND): any {\n  if (depDef.flags & DepFlags.Value) {\n    return depDef.token;\n  }\n  const startView = view;\n  if (depDef.flags & DepFlags.Optional) {\n    notFoundValue = null;\n  }\n  const tokenKey = depDef.tokenKey;\n\n  if (tokenKey === ChangeDetectorRefTokenKey) {\n    // directives on the same element as a component should be able to control the change detector\n    // of that component as well.\n    allowPrivateServices = !!(elDef && elDef.element!.componentView);\n  }\n\n  if (elDef && (depDef.flags & DepFlags.SkipSelf)) {\n    allowPrivateServices = false;\n    elDef = elDef.parent!;\n  }\n\n  let searchView: ViewData|null = view;\n  while (searchView) {\n    if (elDef) {\n      switch (tokenKey) {\n        case Renderer2TokenKey: {\n          const compView = findCompView(searchView, elDef, allowPrivateServices);\n          return compView.renderer;\n        }\n        case ElementRefTokenKey:\n          return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n        case ViewContainerRefTokenKey:\n          return asElementData(searchView, elDef.nodeIndex).viewContainer;\n        case TemplateRefTokenKey: {\n          if (elDef.element!.template) {\n            return asElementData(searchView, elDef.nodeIndex).template;\n          }\n          break;\n        }\n        case ChangeDetectorRefTokenKey: {\n          let cdView = findCompView(searchView, elDef, allowPrivateServices);\n          return createChangeDetectorRef(cdView);\n        }\n        case InjectorRefTokenKey:\n        case INJECTORRefTokenKey:\n          return createInjector(searchView, elDef);\n        default:\n          const providerDef =\n              (allowPrivateServices ? elDef.element!.allProviders :\n                                      elDef.element!.publicProviders)![tokenKey];\n          if (providerDef) {\n            let providerData = asProviderData(searchView, providerDef.nodeIndex);\n            if (!providerData) {\n              providerData = {instance: _createProviderInstance(searchView, providerDef)};\n              searchView.nodes[providerDef.nodeIndex] = providerData as any;\n            }\n            return providerData.instance;\n          }\n      }\n    }\n\n    allowPrivateServices = isComponentView(searchView);\n    elDef = viewParentEl(searchView)!;\n    searchView = searchView.parent!;\n\n    if (depDef.flags & DepFlags.Self) {\n      searchView = null;\n    }\n  }\n\n  const value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n\n  if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n      notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n    // Return the value from the root element injector when\n    // - it provides it\n    //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n    // - the module injector should not be checked\n    //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n    return value;\n  }\n\n  return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n}\n\nfunction findCompView(view: ViewData, elDef: NodeDef, allowPrivateServices: boolean) {\n  let compView: ViewData;\n  if (allowPrivateServices) {\n    compView = asElementData(view, elDef.nodeIndex).componentView;\n  } else {\n    compView = view;\n    while (compView.parent && !isComponentView(compView)) {\n      compView = compView.parent;\n    }\n  }\n  return compView;\n}\n\nfunction updateProp(\n    view: ViewData, providerData: ProviderData, def: NodeDef, bindingIdx: number, value: any,\n    changes: SimpleChanges): SimpleChanges {\n  if (def.flags & NodeFlags.Component) {\n    const compView = asElementData(view, def.parent!.nodeIndex).componentView;\n    if (compView.def.flags & ViewFlags.OnPush) {\n      compView.state |= ViewState.ChecksEnabled;\n    }\n  }\n  const binding = def.bindings[bindingIdx];\n  const propName = binding.name!;\n  // Note: This is still safe with Closure Compiler as\n  // the user passed in the property name as an object has to `providerDef`,\n  // so Closure Compiler will have renamed the property correctly already.\n  providerData.instance[propName] = value;\n  if (def.flags & NodeFlags.OnChanges) {\n    changes = changes || {};\n    const oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n    const binding = def.bindings[bindingIdx];\n    changes[binding.nonMinifiedName!] =\n        new SimpleChange(oldValue, value, (view.state & ViewState.FirstCheck) !== 0);\n  }\n  view.oldValues[def.bindingIndex + bindingIdx] = value;\n  return changes;\n}\n\n// This function calls the ngAfterContentCheck, ngAfterContentInit,\n// ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node\n// flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are\n// called during a pre-order traversal of the view tree (that is calling the\n// parent hooks before the child hooks) these events are sent in using a\n// post-order traversal of the tree (children before parents). This changes the\n// meaning of initIndex in the view state. For ngOnInit, initIndex tracks the\n// expected nodeIndex which a ngOnInit should be called. When sending\n// ngAfterContentInit and ngAfterViewInit it is the expected count of\n// ngAfterContentInit or ngAfterViewInit methods that have been called. This\n// ensure that despite being called recursively or after picking up after an\n// exception, the ngAfterContentInit or ngAfterViewInit will be called on the\n// correct nodes. Consider for example, the following (where E is an element\n// and D is a directive)\n//  Tree:       pre-order index  post-order index\n//    E1        0                6\n//      E2      1                1\n//       D3     2                0\n//      E4      3                5\n//       E5     4                4\n//        E6    5                2\n//        E7    6                3\n// As can be seen, the post-order index has an unclear relationship to the\n// pre-order index (postOrderIndex === preOrderIndex - parentCount +\n// childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit\n// are stable (will be the same for the same view regardless of exceptions or\n// recursion) we just need to count them which will roughly correspond to the\n// post-order index (it skips elements and directives that do not have\n// lifecycle hooks).\n//\n// For example, if an exception is raised in the E6.onAfterViewInit() the\n// initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to\n// initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will\n// not have their ngAfterViewInit() called but, starting with E7, the rest of\n// the view will begin getting ngAfterViewInit() called until a check and\n// pass is complete.\n//\n// This algorthim also handles recursion. Consider if E4's ngAfterViewInit()\n// indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected\n// initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.\n// D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.\n// When the recursion returns the initIndex will be 7 so E1 is skipped as it\n// has already been called in the recursively called checkAnUpdateView().\nexport function callLifecycleHooksChildrenFirst(view: ViewData, lifecycles: NodeFlags) {\n  if (!(view.def.nodeFlags & lifecycles)) {\n    return;\n  }\n  const nodes = view.def.nodes;\n  let initIndex = 0;\n  for (let i = 0; i < nodes.length; i++) {\n    const nodeDef = nodes[i];\n    let parent = nodeDef.parent;\n    if (!parent && nodeDef.flags & lifecycles) {\n      // matching root node (e.g. a pipe)\n      callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n    }\n    if ((nodeDef.childFlags & lifecycles) === 0) {\n      // no child matches one of the lifecycles\n      i += nodeDef.childCount;\n    }\n    while (parent && (parent.flags & NodeFlags.TypeElement) &&\n           i === parent.nodeIndex + parent.childCount) {\n      // last child of an element\n      if (parent.directChildFlags & lifecycles) {\n        initIndex = callElementProvidersLifecycles(view, parent, lifecycles, initIndex);\n      }\n      parent = parent.parent;\n    }\n  }\n}\n\nfunction callElementProvidersLifecycles(\n    view: ViewData, elDef: NodeDef, lifecycles: NodeFlags, initIndex: number): number {\n  for (let i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n    const nodeDef = view.def.nodes[i];\n    if (nodeDef.flags & lifecycles) {\n      callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n    }\n    // only visit direct children\n    i += nodeDef.childCount;\n  }\n  return initIndex;\n}\n\nfunction callProviderLifecycles(\n    view: ViewData, index: number, lifecycles: NodeFlags, initIndex: number) {\n  const providerData = asProviderData(view, index);\n  if (!providerData) {\n    return;\n  }\n  const provider = providerData.instance;\n  if (!provider) {\n    return;\n  }\n  Services.setCurrentNode(view, index);\n  if (lifecycles & NodeFlags.AfterContentInit &&\n      shouldCallLifecycleInitHook(view, ViewState.InitState_CallingAfterContentInit, initIndex)) {\n    provider.ngAfterContentInit();\n  }\n  if (lifecycles & NodeFlags.AfterContentChecked) {\n    provider.ngAfterContentChecked();\n  }\n  if (lifecycles & NodeFlags.AfterViewInit &&\n      shouldCallLifecycleInitHook(view, ViewState.InitState_CallingAfterViewInit, initIndex)) {\n    provider.ngAfterViewInit();\n  }\n  if (lifecycles & NodeFlags.AfterViewChecked) {\n    provider.ngAfterViewChecked();\n  }\n  if (lifecycles & NodeFlags.OnDestroy) {\n    provider.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef as ViewEngine_ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {InjectionToken} from '../di/injection_token';\nimport {Injector} from '../di/injector';\nimport {InjectFlags} from '../di/interface/injector';\nimport {AbstractType, Type} from '../interface/type';\nimport {ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef} from '../linker/component_factory';\nimport {ComponentFactoryResolver as viewEngine_ComponentFactoryResolver} from '../linker/component_factory_resolver';\nimport {createElementRef, ElementRef as viewEngine_ElementRef} from '../linker/element_ref';\nimport {NgModuleRef as viewEngine_NgModuleRef} from '../linker/ng_module_factory';\nimport {RendererFactory2} from '../render/api';\nimport {Sanitizer} from '../sanitization/sanitizer';\nimport {VERSION} from '../version';\nimport {NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR} from '../view/provider';\nimport {assertComponentType} from './assert';\nimport {createRootComponent, createRootComponentView, createRootContext, LifecycleHooksFeature} from './component';\nimport {getComponentDef} from './definition';\nimport {NodeInjector} from './di';\nimport {createLView, createTView, locateHostElement, renderView} from './instructions/shared';\nimport {ComponentDef} from './interfaces/definition';\nimport {TContainerNode, TElementContainerNode, TElementNode, TNode} from './interfaces/node';\nimport {domRendererFactory3, RendererFactory3} from './interfaces/renderer';\nimport {RNode} from './interfaces/renderer_dom';\nimport {HEADER_OFFSET, LView, LViewFlags, TViewType} from './interfaces/view';\nimport {MATH_ML_NAMESPACE, SVG_NAMESPACE} from './namespaces';\nimport {createElementNode, writeDirectClass} from './node_manipulation';\nimport {extractAttrsAndClassesFromSelector, stringifyCSSSelectorList} from './node_selector_matcher';\nimport {enterView, leaveView} from './state';\nimport {setUpAttributes} from './util/attrs_utils';\nimport {defaultScheduler} from './util/misc_utils';\nimport {getTNode} from './util/view_utils';\nimport {RootViewRef, ViewRef} from './view_ref';\n\nexport class ComponentFactoryResolver extends viewEngine_ComponentFactoryResolver {\n  /**\n   * @param ngModule The NgModuleRef to which all resolved factories are bound.\n   */\n  constructor(private ngModule?: viewEngine_NgModuleRef<any>) {\n    super();\n  }\n\n  resolveComponentFactory<T>(component: Type<T>): viewEngine_ComponentFactory<T> {\n    ngDevMode && assertComponentType(component);\n    const componentDef = getComponentDef(component)!;\n    return new ComponentFactory(componentDef, this.ngModule);\n  }\n}\n\nfunction toRefArray(map: {[key: string]: string}): {propName: string; templateName: string;}[] {\n  const array: {propName: string; templateName: string;}[] = [];\n  for (let nonMinified in map) {\n    if (map.hasOwnProperty(nonMinified)) {\n      const minified = map[nonMinified];\n      array.push({propName: minified, templateName: nonMinified});\n    }\n  }\n  return array;\n}\n\nfunction getNamespace(elementName: string): string|null {\n  const name = elementName.toLowerCase();\n  return name === 'svg' ? SVG_NAMESPACE : (name === 'math' ? MATH_ML_NAMESPACE : null);\n}\n\n/**\n * A change detection scheduler token for {@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.\n */\nexport const SCHEDULER = new InjectionToken<((fn: () => void) => void)>('SCHEDULER_TOKEN', {\n  providedIn: 'root',\n  factory: () => defaultScheduler,\n});\n\nfunction createChainedInjector(rootViewInjector: Injector, moduleInjector: Injector): Injector {\n  return {\n    get: <T>(\n        token: Type<T>|AbstractType<T>|InjectionToken<T>, notFoundValue?: T,\n        flags?: InjectFlags): T => {\n      const value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as T, flags);\n\n      if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n          notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n      }\n\n      return moduleInjector.get(token, notFoundValue, flags);\n    }\n  };\n}\n\n/**\n * Render3 implementation of {@link viewEngine_ComponentFactory}.\n */\nexport class ComponentFactory<T> extends viewEngine_ComponentFactory<T> {\n  selector: string;\n  componentType: Type<any>;\n  ngContentSelectors: string[];\n  isBoundToModule: boolean;\n\n  get inputs(): {propName: string; templateName: string;}[] {\n    return toRefArray(this.componentDef.inputs);\n  }\n\n  get outputs(): {propName: string; templateName: string;}[] {\n    return toRefArray(this.componentDef.outputs);\n  }\n\n  /**\n   * @param componentDef The component definition.\n   * @param ngModule The NgModuleRef to which the factory is bound.\n   */\n  constructor(\n      private componentDef: ComponentDef<any>, private ngModule?: viewEngine_NgModuleRef<any>) {\n    super();\n    this.componentType = componentDef.type;\n    this.selector = stringifyCSSSelectorList(componentDef.selectors);\n    this.ngContentSelectors =\n        componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];\n    this.isBoundToModule = !!ngModule;\n  }\n\n  create(\n      injector: Injector, projectableNodes?: any[][]|undefined, rootSelectorOrNode?: any,\n      ngModule?: viewEngine_NgModuleRef<any>|undefined): viewEngine_ComponentRef<T> {\n    ngModule = ngModule || this.ngModule;\n\n    const rootViewInjector =\n        ngModule ? createChainedInjector(injector, ngModule.injector) : injector;\n\n    const rendererFactory =\n        rootViewInjector.get(RendererFactory2, domRendererFactory3) as RendererFactory3;\n    const sanitizer = rootViewInjector.get(Sanitizer, null);\n\n    const hostRenderer = rendererFactory.createRenderer(null, this.componentDef);\n    // Determine a tag name used for creating host elements when this component is created\n    // dynamically. Default to 'div' if this component did not specify any tag name in its selector.\n    const elementName = this.componentDef.selectors[0][0] as string || 'div';\n    const hostRNode = rootSelectorOrNode ?\n        locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation) :\n        createElementNode(\n            rendererFactory.createRenderer(null, this.componentDef), elementName,\n            getNamespace(elementName));\n\n    const rootFlags = this.componentDef.onPush ? LViewFlags.Dirty | LViewFlags.IsRoot :\n                                                 LViewFlags.CheckAlways | LViewFlags.IsRoot;\n    const rootContext = createRootContext();\n\n    // Create the root view. Uses empty TView and ContentTemplate.\n    const rootTView = createTView(TViewType.Root, null, null, 1, 0, null, null, null, null, null);\n    const rootLView = createLView(\n        null, rootTView, rootContext, rootFlags, null, null, rendererFactory, hostRenderer,\n        sanitizer, rootViewInjector);\n\n    // rootView is the parent when bootstrapping\n    // TODO(misko): it looks like we are entering view here but we don't really need to as\n    // `renderView` does that. However as the code is written it is needed because\n    // `createRootComponentView` and `createRootComponent` both read global state. Fixing those\n    // issues would allow us to drop this.\n    enterView(rootLView);\n\n    let component: T;\n    let tElementNode: TElementNode;\n\n    try {\n      const componentView = createRootComponentView(\n          hostRNode, this.componentDef, rootLView, rendererFactory, hostRenderer);\n      if (hostRNode) {\n        if (rootSelectorOrNode) {\n          setUpAttributes(hostRenderer, hostRNode, ['ng-version', VERSION.full]);\n        } else {\n          // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`\n          // is not defined), also apply attributes and classes extracted from component selector.\n          // Extract attributes and classes from the first selector only to match VE behavior.\n          const {attrs, classes} =\n              extractAttrsAndClassesFromSelector(this.componentDef.selectors[0]);\n          if (attrs) {\n            setUpAttributes(hostRenderer, hostRNode, attrs);\n          }\n          if (classes && classes.length > 0) {\n            writeDirectClass(hostRenderer, hostRNode, classes.join(' '));\n          }\n        }\n      }\n\n      tElementNode = getTNode(rootTView, HEADER_OFFSET) as TElementNode;\n\n      if (projectableNodes !== undefined) {\n        const projection: (TNode|RNode[]|null)[] = tElementNode.projection = [];\n        for (let i = 0; i < this.ngContentSelectors.length; i++) {\n          const nodesforSlot = projectableNodes[i];\n          // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n          // case). Here we do normalize passed data structure to be an array of arrays to avoid\n          // complex checks down the line.\n          // We also normalize the length of the passed in projectable nodes (to match the number of\n          // <ng-container> slots defined by a component).\n          projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);\n        }\n      }\n\n      // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n      // executed here?\n      // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n      component = createRootComponent(\n          componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);\n\n      renderView(rootTView, rootLView, null);\n    } finally {\n      leaveView();\n    }\n\n    return new ComponentRef(\n        this.componentType, component, createElementRef(tElementNode, rootLView), rootLView,\n        tElementNode);\n  }\n}\n\nconst componentFactoryResolver: ComponentFactoryResolver = new ComponentFactoryResolver();\n\n/**\n * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n * ComponentFactoryResolver\n * already exists, retrieves the existing ComponentFactoryResolver.\n *\n * @returns The ComponentFactoryResolver instance to use\n */\nexport function injectComponentFactoryResolver(): viewEngine_ComponentFactoryResolver {\n  return componentFactoryResolver;\n}\n\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nexport class ComponentRef<T> extends viewEngine_ComponentRef<T> {\n  instance: T;\n  hostView: ViewRef<T>;\n  changeDetectorRef: ViewEngine_ChangeDetectorRef;\n  componentType: Type<T>;\n\n  constructor(\n      componentType: Type<T>, instance: T, public location: viewEngine_ElementRef,\n      private _rootLView: LView,\n      private _tNode: TElementNode|TContainerNode|TElementContainerNode) {\n    super();\n    this.instance = instance;\n    this.hostView = this.changeDetectorRef = new RootViewRef<T>(_rootLView);\n    this.componentType = componentType;\n  }\n\n  get injector(): Injector {\n    return new NodeInjector(this._tNode, this._rootLView);\n  }\n\n  destroy(): void {\n    this.hostView.destroy();\n  }\n\n  onDestroy(callback: () => void): void {\n    this.hostView.onDestroy(callback);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Type} from '../interface/type';\nimport {NgModuleType} from '../metadata/ng_module_def';\nimport {autoRegisterModuleById, getNgModuleDef} from '../render3/definition';\nimport {maybeUnwrapFn} from '../render3/util/misc_utils';\nimport {stringify} from '../util/stringify';\n\nimport {NgModuleFactory} from './ng_module_factory';\n\n\n/**\n * Map of module-id to the corresponding NgModule.\n * - In pre Ivy we track NgModuleFactory,\n * - In post Ivy we track the NgModuleType\n */\nconst modules = new Map<string, NgModuleFactory<any>|NgModuleType>();\n\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * @publicApi\n */\nexport function registerModuleFactory(id: string, factory: NgModuleFactory<any>) {\n  const existing = modules.get(id) as NgModuleFactory<any>;\n  assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);\n  modules.set(id, factory);\n}\n\nfunction assertSameOrNotExisting(id: string, type: Type<any>|null, incoming: Type<any>): void {\n  if (type && type !== incoming) {\n    throw new Error(\n        `Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n  }\n}\n\nexport function registerNgModuleType(ngModuleType: NgModuleType): void {\n  const visited = new Set<NgModuleType>();\n  recurse(ngModuleType);\n  function recurse(ngModuleType: NgModuleType): void {\n    // The imports array of an NgModule must refer to other NgModules,\n    // so an error is thrown if no module definition is available.\n    const def = getNgModuleDef(ngModuleType, /* throwNotFound */ true);\n    const id = def.id;\n    if (id !== null) {\n      const existing = modules.get(id) as NgModuleType | null;\n      assertSameOrNotExisting(id, existing, ngModuleType);\n      modules.set(id, ngModuleType);\n    }\n\n    const imports = maybeUnwrapFn(def.imports) as NgModuleType[];\n    for (const i of imports) {\n      if (!visited.has(i)) {\n        visited.add(i);\n        recurse(i);\n      }\n    }\n  }\n}\n\nexport function clearModulesForTest(): void {\n  modules.clear();\n}\n\nexport function getRegisteredNgModuleType(id: string) {\n  return modules.get(id) || autoRegisterModuleById[id];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {INJECTOR} from '../di/injector_token';\nimport {InjectFlags} from '../di/interface/injector';\nimport {createInjectorWithoutInjectorInstances, R3Injector} from '../di/r3_injector';\nimport {Type} from '../interface/type';\nimport {ComponentFactoryResolver as viewEngine_ComponentFactoryResolver} from '../linker/component_factory_resolver';\nimport {InternalNgModuleRef, NgModuleFactory as viewEngine_NgModuleFactory, NgModuleRef as viewEngine_NgModuleRef} from '../linker/ng_module_factory';\nimport {registerNgModuleType} from '../linker/ng_module_factory_registration';\nimport {NgModuleType} from '../metadata/ng_module_def';\nimport {assertDefined} from '../util/assert';\nimport {stringify} from '../util/stringify';\n\nimport {ComponentFactoryResolver} from './component_ref';\nimport {getNgLocaleIdDef, getNgModuleDef} from './definition';\nimport {setLocaleId} from './i18n/i18n_locale_id';\nimport {maybeUnwrapFn} from './util/misc_utils';\n\nexport class NgModuleRef<T> extends viewEngine_NgModuleRef<T> implements InternalNgModuleRef<T> {\n  // tslint:disable-next-line:require-internal-with-underscore\n  _bootstrapComponents: Type<any>[] = [];\n  // tslint:disable-next-line:require-internal-with-underscore\n  _r3Injector: R3Injector;\n  injector: Injector = this;\n  instance: T;\n  destroyCbs: (() => void)[]|null = [];\n\n  // When bootstrapping a module we have a dependency graph that looks like this:\n  // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the\n  // module being resolved tries to inject the ComponentFactoryResolver, it'll create a\n  // circular dependency which will result in a runtime error, because the injector doesn't\n  // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves\n  // and providing it, rather than letting the injector resolve it.\n  readonly componentFactoryResolver: ComponentFactoryResolver = new ComponentFactoryResolver(this);\n\n  constructor(ngModuleType: Type<T>, public _parent: Injector|null) {\n    super();\n    const ngModuleDef = getNgModuleDef(ngModuleType);\n    ngDevMode &&\n        assertDefined(\n            ngModuleDef,\n            `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n\n    const ngLocaleIdDef = getNgLocaleIdDef(ngModuleType);\n    ngLocaleIdDef && setLocaleId(ngLocaleIdDef);\n    this._bootstrapComponents = maybeUnwrapFn(ngModuleDef!.bootstrap);\n    this._r3Injector = createInjectorWithoutInjectorInstances(\n                           ngModuleType, _parent,\n                           [\n                             {provide: viewEngine_NgModuleRef, useValue: this}, {\n                               provide: viewEngine_ComponentFactoryResolver,\n                               useValue: this.componentFactoryResolver\n                             }\n                           ],\n                           stringify(ngModuleType)) as R3Injector;\n\n    // We need to resolve the injector types separately from the injector creation, because\n    // the module might be trying to use this ref in its contructor for DI which will cause a\n    // circular error that will eventually error out, because the injector isn't created yet.\n    this._r3Injector._resolveInjectorDefTypes();\n    this.instance = this.get(ngModuleType);\n  }\n\n  get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND,\n      injectFlags: InjectFlags = InjectFlags.Default): any {\n    if (token === Injector || token === viewEngine_NgModuleRef || token === INJECTOR) {\n      return this;\n    }\n    return this._r3Injector.get(token, notFoundValue, injectFlags);\n  }\n\n  destroy(): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    const injector = this._r3Injector;\n    !injector.destroyed && injector.destroy();\n    this.destroyCbs!.forEach(fn => fn());\n    this.destroyCbs = null;\n  }\n  onDestroy(callback: () => void): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs!.push(callback);\n  }\n}\n\nexport class NgModuleFactory<T> extends viewEngine_NgModuleFactory<T> {\n  constructor(public moduleType: Type<T>) {\n    super();\n\n    const ngModuleDef = getNgModuleDef(moduleType);\n    if (ngModuleDef !== null) {\n      // Register the NgModule with Angular's module registry. The location (and hence timing) of\n      // this call is critical to ensure this works correctly (modules get registered when expected)\n      // without bloating bundles (modules are registered when otherwise not referenced).\n      //\n      // In View Engine, registration occurs in the .ngfactory.js file as a side effect. This has\n      // several practical consequences:\n      //\n      // - If an .ngfactory file is not imported from, the module won't be registered (and can be\n      //   tree shaken).\n      // - If an .ngfactory file is imported from, the module will be registered even if an instance\n      //   is not actually created (via `create` below).\n      // - Since an .ngfactory file in View Engine references the .ngfactory files of the NgModule's\n      //   imports,\n      //\n      // In Ivy, things are a bit different. .ngfactory files still exist for compatibility, but are\n      // not a required API to use - there are other ways to obtain an NgModuleFactory for a given\n      // NgModule. Thus, relying on a side effect in the .ngfactory file is not sufficient. Instead,\n      // the side effect of registration is added here, in the constructor of NgModuleFactory,\n      // ensuring no matter how a factory is created, the module is registered correctly.\n      //\n      // An alternative would be to include the registration side effect inline following the actual\n      // NgModule definition. This also has the correct timing, but breaks tree-shaking - modules\n      // will be registered and retained even if they're otherwise never referenced.\n      registerNgModuleType(moduleType as NgModuleType);\n    }\n  }\n\n  create(parentInjector: Injector|null): viewEngine_NgModuleRef<T> {\n    return new NgModuleRef(this.moduleType, parentInjector);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {WrappedValue} from '../change_detection/change_detection_util';\nimport {PipeTransform} from '../change_detection/pipe_transform';\nimport {setInjectImplementation} from '../di/inject_switch';\nimport {getFactoryDef} from './definition_factory';\nimport {setIncludeViewProviders} from './di';\nimport {RuntimeError, RuntimeErrorCode} from './error_code';\nimport {store, ɵɵdirectiveInject} from './instructions/all';\nimport {PipeDef, PipeDefList} from './interfaces/definition';\nimport {HEADER_OFFSET, LView, TVIEW} from './interfaces/view';\nimport {pureFunction1Internal, pureFunction2Internal, pureFunction3Internal, pureFunction4Internal, pureFunctionVInternal} from './pure_function';\nimport {getBindingIndex, getBindingRoot, getLView, getTView} from './state';\nimport {NO_CHANGE} from './tokens';\nimport {load} from './util/view_utils';\n\n\n\n/**\n * Create a pipe.\n *\n * @param index Pipe index where the pipe will be stored.\n * @param pipeName The name of the pipe\n * @returns T the instance of the pipe.\n *\n * @codeGenApi\n */\nexport function ɵɵpipe(index: number, pipeName: string): any {\n  const tView = getTView();\n  let pipeDef: PipeDef<any>;\n  const adjustedIndex = index + HEADER_OFFSET;\n\n  if (tView.firstCreatePass) {\n    pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\n    tView.data[adjustedIndex] = pipeDef;\n    if (pipeDef.onDestroy) {\n      (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n    }\n  } else {\n    pipeDef = tView.data[adjustedIndex] as PipeDef<any>;\n  }\n\n  const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));\n  const previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);\n  try {\n    // DI for pipes is supposed to behave like directives when placed on a component\n    // host node, which means that we have to disable access to `viewProviders`.\n    const previousIncludeViewProviders = setIncludeViewProviders(false);\n    const pipeInstance = pipeFactory();\n    setIncludeViewProviders(previousIncludeViewProviders);\n    store(tView, getLView(), adjustedIndex, pipeInstance);\n    return pipeInstance;\n  } finally {\n    // we have to restore the injector implementation in finally, just in case the creation of the\n    // pipe throws an error.\n    setInjectImplementation(previousInjectImplementation);\n  }\n}\n\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param name Name of pipe to resolve\n * @param registry Full list of available pipes\n * @returns Matching PipeDef\n */\nfunction getPipeDef(name: string, registry: PipeDefList|null): PipeDef<any> {\n  if (registry) {\n    for (let i = registry.length - 1; i >= 0; i--) {\n      const pipeDef = registry[i];\n      if (name === pipeDef.name) {\n        return pipeDef;\n      }\n    }\n  }\n  throw new RuntimeError(RuntimeErrorCode.PIPE_NOT_FOUND, `The pipe '${name}' could not be found!`);\n}\n\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBind1(index: number, slotOffset: number, v1: any): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return unwrapValue(\n      lView,\n      isPure(lView, adjustedIndex) ?\n          pureFunction1Internal(\n              lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, pipeInstance) :\n          pipeInstance.transform(v1));\n}\n\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBind2(index: number, slotOffset: number, v1: any, v2: any): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return unwrapValue(\n      lView,\n      isPure(lView, adjustedIndex) ?\n          pureFunction2Internal(\n              lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n          pipeInstance.transform(v1, v2));\n}\n\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 4rd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBind3(index: number, slotOffset: number, v1: any, v2: any, v3: any): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return unwrapValue(\n      lView,\n      isPure(lView, adjustedIndex) ? pureFunction3Internal(\n                                         lView, getBindingRoot(), slotOffset,\n                                         pipeInstance.transform, v1, v2, v3, pipeInstance) :\n                                     pipeInstance.transform(v1, v2, v3));\n}\n\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 3rd argument to {@link PipeTransform#transform}.\n * @param v4 4th argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBind4(\n    index: number, slotOffset: number, v1: any, v2: any, v3: any, v4: any): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return unwrapValue(\n      lView,\n      isPure(lView, adjustedIndex) ? pureFunction4Internal(\n                                         lView, getBindingRoot(), slotOffset,\n                                         pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n                                     pipeInstance.transform(v1, v2, v3, v4));\n}\n\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBindV(index: number, slotOffset: number, values: [any, ...any[]]): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return unwrapValue(\n      lView,\n      isPure(lView, adjustedIndex) ?\n          pureFunctionVInternal(\n              lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) :\n          pipeInstance.transform.apply(pipeInstance, values));\n}\n\nfunction isPure(lView: LView, index: number): boolean {\n  return (<PipeDef<any>>lView[TVIEW].data[index]).pure;\n}\n\n/**\n * Unwrap the output of a pipe transformation.\n * In order to trick change detection into considering that the new value is always different from\n * the old one, the old value is overwritten by NO_CHANGE.\n *\n * @param newValue the pipe transformation output.\n */\nfunction unwrapValue(lView: LView, newValue: any): any {\n  if (WrappedValue.isWrapped(newValue)) {\n    newValue = WrappedValue.unwrap(newValue);\n    // The NO_CHANGE value needs to be written at the index where the impacted binding value is\n    // stored\n    const bindingToInvalidateIdx = getBindingIndex();\n    lView[bindingToInvalidateIdx] = NO_CHANGE;\n  }\n  return newValue;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertIndexInRange} from '../util/assert';\nimport {bindingUpdated, bindingUpdated2, bindingUpdated3, bindingUpdated4, getBinding, updateBinding} from './bindings';\nimport {LView} from './interfaces/view';\nimport {getBindingRoot, getLView} from './state';\nimport {NO_CHANGE} from './tokens';\n\n\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns a value\n * @param thisArg Optional calling context of pureFn\n * @returns value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction0<T>(slotOffset: number, pureFn: () => T, thisArg?: any): T {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  return lView[bindingIndex] === NO_CHANGE ?\n      updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n      getBinding(lView, bindingIndex);\n}\n\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction1(\n    slotOffset: number, pureFn: (v: any) => any, exp: any, thisArg?: any): any {\n  return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction2(\n    slotOffset: number, pureFn: (v1: any, v2: any) => any, exp1: any, exp2: any,\n    thisArg?: any): any {\n  return pureFunction2Internal(\n      getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction3(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any) => any, exp1: any, exp2: any, exp3: any,\n    thisArg?: any): any {\n  return pureFunction3Internal(\n      getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction4(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any) => any, exp1: any, exp2: any,\n    exp3: any, exp4: any, thisArg?: any): any {\n  return pureFunction4Internal(\n      getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction5(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any) => any, exp1: any,\n    exp2: any, exp3: any, exp4: any, exp5: any, thisArg?: any): any {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?\n      updateBinding(\n          lView, bindingIndex + 5,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5)) :\n      getBinding(lView, bindingIndex + 5);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction6(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any) => any,\n    exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, thisArg?: any): any {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?\n      updateBinding(\n          lView, bindingIndex + 6,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n      getBinding(lView, bindingIndex + 6);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction7(\n    slotOffset: number,\n    pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any) => any, exp1: any,\n    exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, thisArg?: any): any {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?\n      updateBinding(\n          lView, bindingIndex + 7,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n      getBinding(lView, bindingIndex + 7);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction8(\n    slotOffset: number,\n    pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any) => any,\n    exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, exp8: any,\n    thisArg?: any): any {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n      updateBinding(\n          lView, bindingIndex + 8,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n      getBinding(lView, bindingIndex + 8);\n}\n\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunctionV(\n    slotOffset: number, pureFn: (...v: any[]) => any, exps: any[], thisArg?: any): any {\n  return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);\n}\n\n/**\n * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized\n * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first\n * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE\n * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert\n * it to `undefined`.\n */\nfunction getPureFunctionReturnValue(lView: LView, returnValueIndex: number) {\n  ngDevMode && assertIndexInRange(lView, returnValueIndex);\n  const lastReturnValue = lView[returnValueIndex];\n  return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;\n}\n\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction1Internal(\n    lView: LView, bindingRoot: number, slotOffset: number, pureFn: (v: any) => any, exp: any,\n    thisArg?: any): any {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated(lView, bindingIndex, exp) ?\n      updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n      getPureFunctionReturnValue(lView, bindingIndex + 1);\n}\n\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction2Internal(\n    lView: LView, bindingRoot: number, slotOffset: number, pureFn: (v1: any, v2: any) => any,\n    exp1: any, exp2: any, thisArg?: any): any {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?\n      updateBinding(\n          lView, bindingIndex + 2,\n          thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n      getPureFunctionReturnValue(lView, bindingIndex + 2);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction3Internal(\n    lView: LView, bindingRoot: number, slotOffset: number,\n    pureFn: (v1: any, v2: any, v3: any) => any, exp1: any, exp2: any, exp3: any,\n    thisArg?: any): any {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?\n      updateBinding(\n          lView, bindingIndex + 3,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n      getPureFunctionReturnValue(lView, bindingIndex + 3);\n}\n\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n */\nexport function pureFunction4Internal(\n    lView: LView, bindingRoot: number, slotOffset: number,\n    pureFn: (v1: any, v2: any, v3: any, v4: any) => any, exp1: any, exp2: any, exp3: any, exp4: any,\n    thisArg?: any): any {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?\n      updateBinding(\n          lView, bindingIndex + 4,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n      getPureFunctionReturnValue(lView, bindingIndex + 4);\n}\n\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunctionVInternal(\n    lView: LView, bindingRoot: number, slotOffset: number, pureFn: (...v: any[]) => any,\n    exps: any[], thisArg?: any): any {\n  let bindingIndex = bindingRoot + slotOffset;\n  let different = false;\n  for (let i = 0; i < exps.length; i++) {\n    bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n  }\n  return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :\n                     getPureFunctionReturnValue(lView, bindingIndex);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/// <reference types=\"rxjs\" />\n\nimport {Subject, Subscription} from 'rxjs';\n\n/**\n * Use in components with the `@Output` directive to emit custom events\n * synchronously or asynchronously, and register handlers for those events\n * by subscribing to an instance.\n *\n * @usageNotes\n *\n * Extends\n * [RxJS `Subject`](https://rxjs.dev/api/index/class/Subject)\n * for Angular by adding the `emit()` method.\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```html\n * @Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   @Output() open: EventEmitter<any> = new EventEmitter();\n *   @Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```html\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * @see [Observables in Angular](guide/observables-in-angular)\n * @publicApi\n */\nexport interface EventEmitter<T> extends Subject<T> {\n  /**\n   * @internal\n   */\n  __isAsync: boolean;\n\n  /**\n   * Creates an instance of this class that can\n   * deliver events synchronously or asynchronously.\n   *\n   * @param [isAsync=false] When true, deliver events asynchronously.\n   *\n   */\n  new(isAsync?: boolean): EventEmitter<T>;\n\n  /**\n   * Emits an event containing a given value.\n   * @param value The value to emit.\n   */\n  emit(value?: T): void;\n\n  /**\n   * Registers handlers for events emitted by this instance.\n   * @param next When supplied, a custom handler for emitted events.\n   * @param error When supplied, a custom handler for an error notification from this emitter.\n   * @param complete When supplied, a custom handler for a completion notification from this\n   *     emitter.\n   */\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void):\n      Subscription;\n  /**\n   * Registers handlers for events emitted by this instance.\n   * @param observerOrNext When supplied, a custom handler for emitted events, or an observer\n   *     object.\n   * @param error When supplied, a custom handler for an error notification from this emitter.\n   * @param complete When supplied, a custom handler for a completion notification from this\n   *     emitter.\n   */\n  subscribe(observerOrNext?: any, error?: any, complete?: any): Subscription;\n}\n\nclass EventEmitter_ extends Subject<any> {\n  __isAsync: boolean;  // tslint:disable-line\n\n  constructor(isAsync: boolean = false) {\n    super();\n    this.__isAsync = isAsync;\n  }\n\n  emit(value?: any) {\n    super.next(value);\n  }\n\n  subscribe(observerOrNext?: any, error?: any, complete?: any): Subscription {\n    let schedulerFn: (t: any) => any;\n    let errorFn = (err: any): any => null;\n    let completeFn = (): any => null;\n\n    if (observerOrNext && typeof observerOrNext === 'object') {\n      schedulerFn = this.__isAsync ? (value: any) => {\n        setTimeout(() => observerOrNext.next(value));\n      } : (value: any) => {\n        observerOrNext.next(value);\n      };\n\n      if (observerOrNext.error) {\n        errorFn = this.__isAsync ? (err) => {\n          setTimeout(() => observerOrNext.error(err));\n        } : (err) => {\n          observerOrNext.error(err);\n        };\n      }\n\n      if (observerOrNext.complete) {\n        completeFn = this.__isAsync ? () => {\n          setTimeout(() => observerOrNext.complete());\n        } : () => {\n          observerOrNext.complete();\n        };\n      }\n    } else {\n      schedulerFn = this.__isAsync ? (value: any) => {\n        setTimeout(() => observerOrNext(value));\n      } : (value: any) => {\n        observerOrNext(value);\n      };\n\n      if (error) {\n        errorFn = this.__isAsync ? (err) => {\n          setTimeout(() => error(err));\n        } : (err) => {\n          error(err);\n        };\n      }\n\n      if (complete) {\n        completeFn = this.__isAsync ? () => {\n          setTimeout(() => complete());\n        } : () => {\n          complete();\n        };\n      }\n    }\n\n    const sink = super.subscribe(schedulerFn, errorFn, completeFn);\n\n    if (observerOrNext instanceof Subscription) {\n      observerOrNext.add(sink);\n    }\n\n    return sink;\n  }\n}\n\n/**\n * @publicApi\n */\nexport const EventEmitter: {\n  new (isAsync?: boolean): EventEmitter<any>; new<T>(isAsync?: boolean): EventEmitter<T>;\n  readonly prototype: EventEmitter<any>;\n} = EventEmitter_ as any;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {EventEmitter} from '../event_emitter';\nimport {arrayEquals, flatten} from '../util/array_utils';\nimport {getSymbolIterator} from '../util/symbol';\n\nfunction symbolIterator<T>(this: QueryList<T>): Iterator<T> {\n  return ((this as any as {_results: Array<T>})._results as any)[getSymbolIterator()]();\n}\n\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @publicApi\n */\nexport class QueryList<T> implements Iterable<T> {\n  public readonly dirty = true;\n  private _results: Array<T> = [];\n  private _changesDetected: boolean = false;\n  private _changes: EventEmitter<QueryList<T>>|null = null;\n\n  readonly length: number = 0;\n  readonly first: T = undefined!;\n  readonly last: T = undefined!;\n\n  /**\n   * Returns `Observable` of `QueryList` notifying the subscriber of changes.\n   */\n  get changes(): Observable<any> {\n    return this._changes || (this._changes = new EventEmitter());\n  }\n\n  /**\n   * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change\n   *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in\n   *     the same result) This is set to `false` for backwards compatibility but will be changed to\n   *     true in v12.\n   */\n  constructor(private _emitDistinctChangesOnly: boolean = false) {\n    // This function should be declared on the prototype, but doing so there will cause the class\n    // declaration to have side-effects and become not tree-shakable. For this reason we do it in\n    // the constructor.\n    // [getSymbolIterator()](): Iterator<T> { ... }\n    const symbol = getSymbolIterator();\n    const proto = QueryList.prototype as any;\n    if (!proto[symbol]) proto[symbol] = symbolIterator;\n  }\n\n  /**\n   * Returns the QueryList entry at `index`.\n   */\n  get(index: number): T|undefined {\n    return this._results[index];\n  }\n\n  /**\n   * See\n   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n   */\n  map<U>(fn: (item: T, index: number, array: T[]) => U): U[] {\n    return this._results.map(fn);\n  }\n\n  /**\n   * See\n   * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n   */\n  filter(fn: (item: T, index: number, array: T[]) => boolean): T[] {\n    return this._results.filter(fn);\n  }\n\n  /**\n   * See\n   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n   */\n  find(fn: (item: T, index: number, array: T[]) => boolean): T|undefined {\n    return this._results.find(fn);\n  }\n\n  /**\n   * See\n   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n   */\n  reduce<U>(fn: (prevValue: U, curValue: T, curIndex: number, array: T[]) => U, init: U): U {\n    return this._results.reduce(fn, init);\n  }\n\n  /**\n   * See\n   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n   */\n  forEach(fn: (item: T, index: number, array: T[]) => void): void {\n    this._results.forEach(fn);\n  }\n\n  /**\n   * See\n   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n   */\n  some(fn: (value: T, index: number, array: T[]) => boolean): boolean {\n    return this._results.some(fn);\n  }\n\n  /**\n   * Returns a copy of the internal results list as an Array.\n   */\n  toArray(): T[] {\n    return this._results.slice();\n  }\n\n  toString(): string {\n    return this._results.toString();\n  }\n\n  /**\n   * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n   * on change detection, it will not notify of changes to the queries, unless a new change\n   * occurs.\n   *\n   * @param resultsTree The query results to store\n   * @param identityAccessor Optional function for extracting stable object identity from a value\n   *    in the array. This function is executed for each element of the query result list while\n   *    comparing current query list with the new one (provided as a first argument of the `reset`\n   *    function) to detect if the lists are different. If the function is not provided, elements\n   *    are compared as is (without any pre-processing).\n   */\n  reset(resultsTree: Array<T|any[]>, identityAccessor?: (value: T) => unknown): void {\n    // Cast to `QueryListInternal` so that we can mutate fields which are readonly for the usage of\n    // QueryList (but not for QueryList itself.)\n    const self = this as QueryListInternal<T>;\n    (self as {dirty: boolean}).dirty = false;\n    const newResultFlat = flatten(resultsTree);\n    if (this._changesDetected = !arrayEquals(self._results, newResultFlat, identityAccessor)) {\n      self._results = newResultFlat;\n      self.length = newResultFlat.length;\n      self.last = newResultFlat[this.length - 1];\n      self.first = newResultFlat[0];\n    }\n  }\n\n  /**\n   * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n   */\n  notifyOnChanges(): void {\n    if (this._changes && (this._changesDetected || !this._emitDistinctChangesOnly))\n      this._changes.emit(this);\n  }\n\n  /** internal */\n  setDirty() {\n    (this as {dirty: boolean}).dirty = true;\n  }\n\n  /** internal */\n  destroy(): void {\n    (this.changes as EventEmitter<any>).complete();\n    (this.changes as EventEmitter<any>).unsubscribe();\n  }\n\n  // The implementation of `Symbol.iterator` should be declared here, but this would cause\n  // tree-shaking issues with `QueryList. So instead, it's added in the constructor (see comments\n  // there) and this declaration is left here to ensure that TypeScript considers QueryList to\n  // implement the Iterable interface. This is required for template type-checking of NgFor loops\n  // over QueryLists to work correctly, since QueryList must be assignable to NgIterable.\n  [Symbol.iterator]!: () => Iterator<T>;\n}\n\n/**\n * Internal set of APIs used by the framework. (not to be made public)\n */\ninterface QueryListInternal<T> extends QueryList<T> {\n  reset(a: any[]): void;\n  notifyOnChanges(): void;\n  length: number;\n  last: T;\n  first: T;\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// We are temporarily importing the existing viewEngine_from core so we can be sure we are\n// correctly implementing its interfaces for backwards compatibility.\n\nimport {InjectionToken} from '../di/injection_token';\nimport {Type} from '../interface/type';\nimport {createElementRef, ElementRef as ViewEngine_ElementRef, unwrapElementRef} from '../linker/element_ref';\nimport {QueryList} from '../linker/query_list';\nimport {createTemplateRef, TemplateRef as ViewEngine_TemplateRef} from '../linker/template_ref';\nimport {createContainerRef, ViewContainerRef} from '../linker/view_container_ref';\nimport {assertDefined, assertIndexInRange, assertNumber, throwError} from '../util/assert';\nimport {stringify} from '../util/stringify';\nimport {assertFirstCreatePass, assertLContainer} from './assert';\nimport {getNodeInjectable, locateDirectiveOrProvider} from './di';\nimport {storeCleanupWithContext} from './instructions/shared';\nimport {CONTAINER_HEADER_OFFSET, LContainer, MOVED_VIEWS} from './interfaces/container';\nimport {unusedValueExportToPlacateAjd as unused1} from './interfaces/definition';\nimport {unusedValueExportToPlacateAjd as unused2} from './interfaces/injector';\nimport {TContainerNode, TElementContainerNode, TElementNode, TNode, TNodeType, unusedValueExportToPlacateAjd as unused3} from './interfaces/node';\nimport {LQueries, LQuery, QueryFlags, TQueries, TQuery, TQueryMetadata, unusedValueExportToPlacateAjd as unused4} from './interfaces/query';\nimport {DECLARATION_LCONTAINER, LView, PARENT, QUERIES, TVIEW, TView} from './interfaces/view';\nimport {assertTNodeType} from './node_assert';\nimport {getCurrentQueryIndex, getCurrentTNode, getLView, getTView, setCurrentQueryIndex} from './state';\nimport {isCreationMode} from './util/view_utils';\n\nconst unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4;\n\nclass LQuery_<T> implements LQuery<T> {\n  matches: (T|null)[]|null = null;\n  constructor(public queryList: QueryList<T>) {}\n  clone(): LQuery<T> {\n    return new LQuery_(this.queryList);\n  }\n  setDirty(): void {\n    this.queryList.setDirty();\n  }\n}\n\nclass LQueries_ implements LQueries {\n  constructor(public queries: LQuery<any>[] = []) {}\n\n  createEmbeddedView(tView: TView): LQueries|null {\n    const tQueries = tView.queries;\n    if (tQueries !== null) {\n      const noOfInheritedQueries =\n          tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;\n      const viewLQueries: LQuery<any>[] = [];\n\n      // An embedded view has queries propagated from a declaration view at the beginning of the\n      // TQueries collection and up until a first content query declared in the embedded view. Only\n      // propagated LQueries are created at this point (LQuery corresponding to declared content\n      // queries will be instantiated from the content query instructions for each directive).\n      for (let i = 0; i < noOfInheritedQueries; i++) {\n        const tQuery = tQueries.getByIndex(i);\n        const parentLQuery = this.queries[tQuery.indexInDeclarationView];\n        viewLQueries.push(parentLQuery.clone());\n      }\n\n      return new LQueries_(viewLQueries);\n    }\n\n    return null;\n  }\n\n  insertView(tView: TView): void {\n    this.dirtyQueriesWithMatches(tView);\n  }\n\n  detachView(tView: TView): void {\n    this.dirtyQueriesWithMatches(tView);\n  }\n\n  private dirtyQueriesWithMatches(tView: TView) {\n    for (let i = 0; i < this.queries.length; i++) {\n      if (getTQuery(tView, i).matches !== null) {\n        this.queries[i].setDirty();\n      }\n    }\n  }\n}\n\nclass TQueryMetadata_ implements TQueryMetadata {\n  constructor(\n      public predicate: Type<any>|InjectionToken<unknown>|string[], public flags: QueryFlags,\n      public read: any = null) {}\n}\n\nclass TQueries_ implements TQueries {\n  constructor(private queries: TQuery[] = []) {}\n\n  elementStart(tView: TView, tNode: TNode): void {\n    ngDevMode &&\n        assertFirstCreatePass(\n            tView, 'Queries should collect results on the first template pass only');\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementStart(tView, tNode);\n    }\n  }\n  elementEnd(tNode: TNode): void {\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementEnd(tNode);\n    }\n  }\n  embeddedTView(tNode: TNode): TQueries|null {\n    let queriesForTemplateRef: TQuery[]|null = null;\n\n    for (let i = 0; i < this.length; i++) {\n      const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;\n      const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);\n\n      if (tqueryClone) {\n        tqueryClone.indexInDeclarationView = i;\n        if (queriesForTemplateRef !== null) {\n          queriesForTemplateRef.push(tqueryClone);\n        } else {\n          queriesForTemplateRef = [tqueryClone];\n        }\n      }\n    }\n\n    return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;\n  }\n\n  template(tView: TView, tNode: TNode): void {\n    ngDevMode &&\n        assertFirstCreatePass(\n            tView, 'Queries should collect results on the first template pass only');\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].template(tView, tNode);\n    }\n  }\n\n  getByIndex(index: number): TQuery {\n    ngDevMode && assertIndexInRange(this.queries, index);\n    return this.queries[index];\n  }\n\n  get length(): number {\n    return this.queries.length;\n  }\n\n  track(tquery: TQuery): void {\n    this.queries.push(tquery);\n  }\n}\n\nclass TQuery_ implements TQuery {\n  matches: number[]|null = null;\n  indexInDeclarationView = -1;\n  crossesNgTemplate = false;\n\n  /**\n   * A node index on which a query was declared (-1 for view queries and ones inherited from the\n   * declaration template). We use this index (alongside with _appliesToNextNode flag) to know\n   * when to apply content queries to elements in a template.\n   */\n  private _declarationNodeIndex: number;\n\n  /**\n   * A flag indicating if a given query still applies to nodes it is crossing. We use this flag\n   * (alongside with _declarationNodeIndex) to know when to stop applying content queries to\n   * elements in a template.\n   */\n  private _appliesToNextNode = true;\n\n  constructor(public metadata: TQueryMetadata, nodeIndex: number = -1) {\n    this._declarationNodeIndex = nodeIndex;\n  }\n\n  elementStart(tView: TView, tNode: TNode): void {\n    if (this.isApplyingToNode(tNode)) {\n      this.matchTNode(tView, tNode);\n    }\n  }\n\n  elementEnd(tNode: TNode): void {\n    if (this._declarationNodeIndex === tNode.index) {\n      this._appliesToNextNode = false;\n    }\n  }\n\n  template(tView: TView, tNode: TNode): void {\n    this.elementStart(tView, tNode);\n  }\n\n  embeddedTView(tNode: TNode, childQueryIndex: number): TQuery|null {\n    if (this.isApplyingToNode(tNode)) {\n      this.crossesNgTemplate = true;\n      // A marker indicating a `<ng-template>` element (a placeholder for query results from\n      // embedded views created based on this `<ng-template>`).\n      this.addMatch(-tNode.index, childQueryIndex);\n      return new TQuery_(this.metadata);\n    }\n    return null;\n  }\n\n  private isApplyingToNode(tNode: TNode): boolean {\n    if (this._appliesToNextNode &&\n        (this.metadata.flags & QueryFlags.descendants) !== QueryFlags.descendants) {\n      const declarationNodeIdx = this._declarationNodeIndex;\n      let parent = tNode.parent;\n      // Determine if a given TNode is a \"direct\" child of a node on which a content query was\n      // declared (only direct children of query's host node can match with the descendants: false\n      // option). There are 3 main use-case / conditions to consider here:\n      // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query\n      // host node;\n      // - <needs-target><ng-template [ngIf]=\"true\"><i #target></i></ng-template></needs-target>:\n      // here <i #target> parent node is null;\n      // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need\n      // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse\n      // up past the query's host node!).\n      while (parent !== null && (parent.type & TNodeType.ElementContainer) &&\n             parent.index !== declarationNodeIdx) {\n        parent = parent.parent;\n      }\n      return declarationNodeIdx === (parent !== null ? parent.index : -1);\n    }\n    return this._appliesToNextNode;\n  }\n\n  private matchTNode(tView: TView, tNode: TNode): void {\n    const predicate = this.metadata.predicate;\n    if (Array.isArray(predicate)) {\n      for (let i = 0; i < predicate.length; i++) {\n        const name = predicate[i];\n        this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));\n        // Also try matching the name to a provider since strings can be used as DI tokens too.\n        this.matchTNodeWithReadOption(\n            tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));\n      }\n    } else {\n      if ((predicate as any) === ViewEngine_TemplateRef) {\n        if (tNode.type & TNodeType.Container) {\n          this.matchTNodeWithReadOption(tView, tNode, -1);\n        }\n      } else {\n        this.matchTNodeWithReadOption(\n            tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));\n      }\n    }\n  }\n\n  private matchTNodeWithReadOption(tView: TView, tNode: TNode, nodeMatchIdx: number|null): void {\n    if (nodeMatchIdx !== null) {\n      const read = this.metadata.read;\n      if (read !== null) {\n        if (read === ViewEngine_ElementRef || read === ViewContainerRef ||\n            read === ViewEngine_TemplateRef && (tNode.type & TNodeType.Container)) {\n          this.addMatch(tNode.index, -2);\n        } else {\n          const directiveOrProviderIdx =\n              locateDirectiveOrProvider(tNode, tView, read, false, false);\n          if (directiveOrProviderIdx !== null) {\n            this.addMatch(tNode.index, directiveOrProviderIdx);\n          }\n        }\n      } else {\n        this.addMatch(tNode.index, nodeMatchIdx);\n      }\n    }\n  }\n\n  private addMatch(tNodeIdx: number, matchIdx: number) {\n    if (this.matches === null) {\n      this.matches = [tNodeIdx, matchIdx];\n    } else {\n      this.matches.push(tNodeIdx, matchIdx);\n    }\n  }\n}\n\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param tNode static data of a node to check\n * @param selector selector to match\n * @returns directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode: TNode, selector: string): number|null {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    for (let i = 0; i < localNames.length; i += 2) {\n      if (localNames[i] === selector) {\n        return localNames[i + 1] as number;\n      }\n    }\n  }\n  return null;\n}\n\n\nfunction createResultByTNodeType(tNode: TNode, currentView: LView): any {\n  if (tNode.type & (TNodeType.AnyRNode | TNodeType.ElementContainer)) {\n    return createElementRef(tNode, currentView);\n  } else if (tNode.type & TNodeType.Container) {\n    return createTemplateRef(tNode, currentView);\n  }\n  return null;\n}\n\n\nfunction createResultForNode(lView: LView, tNode: TNode, matchingIdx: number, read: any): any {\n  if (matchingIdx === -1) {\n    // if read token and / or strategy is not specified, detect it using appropriate tNode type\n    return createResultByTNodeType(tNode, lView);\n  } else if (matchingIdx === -2) {\n    // read a special token from a node injector\n    return createSpecialToken(lView, tNode, read);\n  } else {\n    // read a token\n    return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode as TElementNode);\n  }\n}\n\nfunction createSpecialToken(lView: LView, tNode: TNode, read: any): any {\n  if (read === ViewEngine_ElementRef) {\n    return createElementRef(tNode, lView);\n  } else if (read === ViewEngine_TemplateRef) {\n    return createTemplateRef(tNode, lView);\n  } else if (read === ViewContainerRef) {\n    ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode | TNodeType.AnyContainer);\n    return createContainerRef(\n        tNode as TElementNode | TContainerNode | TElementContainerNode, lView);\n  } else {\n    ngDevMode &&\n        throwError(\n            `Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${\n                stringify(read)}.`);\n  }\n}\n\n/**\n * A helper function that creates query results for a given view. This function is meant to do the\n * processing once and only once for a given view instance (a set of results for a given view\n * doesn't change).\n */\nfunction materializeViewResults<T>(\n    tView: TView, lView: LView, tQuery: TQuery, queryIndex: number): (T|null)[] {\n  const lQuery = lView[QUERIES]!.queries![queryIndex];\n  if (lQuery.matches === null) {\n    const tViewData = tView.data;\n    const tQueryMatches = tQuery.matches!;\n    const result: T|null[] = [];\n    for (let i = 0; i < tQueryMatches.length; i += 2) {\n      const matchedNodeIdx = tQueryMatches[i];\n      if (matchedNodeIdx < 0) {\n        // we at the <ng-template> marker which might have results in views created based on this\n        // <ng-template> - those results will be in separate views though, so here we just leave\n        // null as a placeholder\n        result.push(null);\n      } else {\n        ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);\n        const tNode = tViewData[matchedNodeIdx] as TNode;\n        result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));\n      }\n    }\n    lQuery.matches = result;\n  }\n\n  return lQuery.matches;\n}\n\n/**\n * A helper function that collects (already materialized) query results from a tree of views,\n * starting with a provided LView.\n */\nfunction collectQueryResults<T>(tView: TView, lView: LView, queryIndex: number, result: T[]): T[] {\n  const tQuery = tView.queries!.getByIndex(queryIndex);\n  const tQueryMatches = tQuery.matches;\n  if (tQueryMatches !== null) {\n    const lViewResults = materializeViewResults<T>(tView, lView, tQuery, queryIndex);\n\n    for (let i = 0; i < tQueryMatches.length; i += 2) {\n      const tNodeIdx = tQueryMatches[i];\n      if (tNodeIdx > 0) {\n        result.push(lViewResults[i / 2] as T);\n      } else {\n        const childQueryIndex = tQueryMatches[i + 1];\n\n        const declarationLContainer = lView[-tNodeIdx] as LContainer;\n        ngDevMode && assertLContainer(declarationLContainer);\n\n        // collect matches for views inserted in this container\n        for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {\n          const embeddedLView = declarationLContainer[i];\n          if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n\n        // collect matches for views created from this declaration container and inserted into\n        // different containers\n        if (declarationLContainer[MOVED_VIEWS] !== null) {\n          const embeddedLViews = declarationLContainer[MOVED_VIEWS]!;\n          for (let i = 0; i < embeddedLViews.length; i++) {\n            const embeddedLView = embeddedLViews[i];\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n *\n * @returns `true` if a query got dirty during change detection or if this is a static query\n * resolving in creation mode, `false` otherwise.\n *\n * @codeGenApi\n */\nexport function ɵɵqueryRefresh(queryList: QueryList<any>): boolean {\n  const lView = getLView();\n  const tView = getTView();\n  const queryIndex = getCurrentQueryIndex();\n\n  setCurrentQueryIndex(queryIndex + 1);\n\n  const tQuery = getTQuery(tView, queryIndex);\n  if (queryList.dirty &&\n      (isCreationMode(lView) ===\n       ((tQuery.metadata.flags & QueryFlags.isStatic) === QueryFlags.isStatic))) {\n    if (tQuery.matches === null) {\n      queryList.reset([]);\n    } else {\n      const result = tQuery.crossesNgTemplate ?\n          collectQueryResults(tView, lView, queryIndex, []) :\n          materializeViewResults(tView, lView, tQuery, queryIndex);\n      queryList.reset(result, unwrapElementRef);\n      queryList.notifyOnChanges();\n    }\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Creates new QueryList, stores the reference in LView and returns QueryList.\n *\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nexport function ɵɵviewQuery<T>(\n    predicate: Type<any>|InjectionToken<unknown>|string[], flags: QueryFlags, read?: any): void {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);\n    if ((flags & QueryFlags.isStatic) === QueryFlags.isStatic) {\n      tView.staticViewQueries = true;\n    }\n  }\n  createLQuery<T>(tView, getLView(), flags);\n}\n\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * @param directiveIndex Current directive index\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n * @returns QueryList<T>\n *\n * @codeGenApi\n */\nexport function ɵɵcontentQuery<T>(\n    directiveIndex: number, predicate: Type<any>|InjectionToken<unknown>|string[],\n    flags: QueryFlags, read?: any): void {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const tNode = getCurrentTNode()!;\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);\n    saveContentQueryAndDirectiveIndex(tView, directiveIndex);\n    if ((flags & QueryFlags.isStatic) === QueryFlags.isStatic) {\n      tView.staticContentQueries = true;\n    }\n  }\n\n  createLQuery<T>(tView, getLView(), flags);\n}\n\n/**\n * Loads a QueryList corresponding to the current view or content query.\n *\n * @codeGenApi\n */\nexport function ɵɵloadQuery<T>(): QueryList<T> {\n  return loadQueryInternal<T>(getLView(), getCurrentQueryIndex());\n}\n\nfunction loadQueryInternal<T>(lView: LView, queryIndex: number): QueryList<T> {\n  ngDevMode &&\n      assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');\n  ngDevMode && assertIndexInRange(lView[QUERIES]!.queries, queryIndex);\n  return lView[QUERIES]!.queries[queryIndex].queryList;\n}\n\nfunction createLQuery<T>(tView: TView, lView: LView, flags: QueryFlags) {\n  const queryList = new QueryList<T>(\n      (flags & QueryFlags.emitDistinctChangesOnly) === QueryFlags.emitDistinctChangesOnly);\n  storeCleanupWithContext(tView, lView, queryList, queryList.destroy);\n\n  if (lView[QUERIES] === null) lView[QUERIES] = new LQueries_();\n  lView[QUERIES]!.queries.push(new LQuery_(queryList));\n}\n\nfunction createTQuery(tView: TView, metadata: TQueryMetadata, nodeIndex: number): void {\n  if (tView.queries === null) tView.queries = new TQueries_();\n  tView.queries.track(new TQuery_(metadata, nodeIndex));\n}\n\nfunction saveContentQueryAndDirectiveIndex(tView: TView, directiveIndex: number) {\n  const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n  const lastSavedDirectiveIndex =\n      tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;\n  if (directiveIndex !== lastSavedDirectiveIndex) {\n    tViewContentQueries.push(tView.queries!.length - 1, directiveIndex);\n  }\n}\n\nfunction getTQuery(tView: TView, index: number): TQuery {\n  ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');\n  return tView.queries!.getByIndex(index);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectorRef, injectChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {InjectFlags} from '../di/interface/injector';\nimport {createTemplateRef, TemplateRef} from '../linker/template_ref';\nimport {throwProviderNotFoundError} from './errors_di';\nimport {TNode} from './interfaces/node';\nimport {LView} from './interfaces/view';\n\n\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n *\n * @codeGenApi\n */\nexport function ɵɵtemplateRefExtractor(tNode: TNode, lView: LView): TemplateRef<any>|null {\n  return createTemplateRef(tNode, lView);\n}\n\n\n/**\n * Returns the appropriate `ChangeDetectorRef` for a pipe.\n *\n * @codeGenApi\n */\nexport function ɵɵinjectPipeChangeDetectorRef(flags = InjectFlags.Default): ChangeDetectorRef|null {\n  const value = injectChangeDetectorRef(true);\n  if (value == null && !(flags & InjectFlags.Optional)) {\n    throwProviderNotFoundError('ChangeDetectorRef');\n  } else {\n    return value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectorType, ɵɵdefineInjector} from '../di/interface/defs';\nimport {Provider} from '../di/interface/provider';\nimport {convertInjectableProviderToFactory} from '../di/util';\nimport {Type} from '../interface/type';\nimport {SchemaMetadata} from '../metadata/schema';\nimport {compileNgModule as render3CompileNgModule} from '../render3/jit/module';\nimport {makeDecorator, TypeDecorator} from '../util/decorators';\nimport {NgModuleDef} from './ng_module_def';\n\n\n/**\n * @publicApi\n */\nexport type ɵɵNgModuleDefWithMeta<T, Declarations, Imports, Exports> = NgModuleDef<T>;\n\n\n/**\n * A wrapper around an NgModule that associates it with [providers](guide/glossary#provider\n * \"Definition\"). Usage without a generic type is deprecated.\n *\n * @see [Deprecations](guide/deprecations#modulewithproviders-type-without-a-generic)\n *\n * @publicApi\n */\nexport interface ModuleWithProviders<T> {\n  ngModule: Type<T>;\n  providers?: Provider[];\n}\n\n\n/**\n * Type of the NgModule decorator / constructor function.\n *\n * @publicApi\n */\nexport interface NgModuleDecorator {\n  /**\n   * Decorator that marks a class as an NgModule and supplies configuration metadata.\n   */\n  (obj?: NgModule): TypeDecorator;\n  new(obj?: NgModule): NgModule;\n}\n\n/**\n * Type of the NgModule metadata.\n *\n * @publicApi\n */\nexport interface NgModule {\n  /**\n   * The set of injectable objects that are available in the injector\n   * of this module.\n   *\n   * @see [Dependency Injection guide](guide/dependency-injection)\n   * @see [NgModule guide](guide/providers)\n   *\n   * @usageNotes\n   *\n   * Dependencies whose providers are listed here become available for injection\n   * into any component, directive, pipe or service that is a child of this injector.\n   * The NgModule used for bootstrapping uses the root injector, and can provide dependencies\n   * to any part of the app.\n   *\n   * A lazy-loaded module has its own injector, typically a child of the app root injector.\n   * Lazy-loaded services are scoped to the lazy-loaded module's injector.\n   * If a lazy-loaded module also provides the `UserService`, any component created\n   * within that module's context (such as by router navigation) gets the local instance\n   * of the service, not the instance in the root injector.\n   * Components in external modules continue to receive the instance provided by their injectors.\n   *\n   * ### Example\n   *\n   * The following example defines a class that is injected in\n   * the HelloWorld NgModule:\n   *\n   * ```\n   * class Greeter {\n   *    greet(name:string) {\n   *      return 'Hello ' + name + '!';\n   *    }\n   * }\n   *\n   * @NgModule({\n   *   providers: [\n   *     Greeter\n   *   ]\n   * })\n   * class HelloWorld {\n   *   greeter:Greeter;\n   *\n   *   constructor(greeter:Greeter) {\n   *     this.greeter = greeter;\n   *   }\n   * }\n   * ```\n   */\n  providers?: Provider[];\n\n  /**\n   * The set of components, directives, and pipes ([declarables](guide/glossary#declarable))\n   * that belong to this module.\n   *\n   * @usageNotes\n   *\n   * The set of selectors that are available to a template include those declared here, and\n   * those that are exported from imported NgModules.\n   *\n   * Declarables must belong to exactly one module.\n   * The compiler emits an error if you try to declare the same class in more than one module.\n   * Be careful not to declare a class that is imported from another module.\n   *\n   * ### Example\n   *\n   * The following example allows the CommonModule to use the `NgFor`\n   * directive.\n   *\n   * ```javascript\n   * @NgModule({\n   *   declarations: [NgFor]\n   * })\n   * class CommonModule {\n   * }\n   * ```\n   */\n  declarations?: Array<Type<any>|any[]>;\n\n  /**\n   * The set of NgModules whose exported [declarables](guide/glossary#declarable)\n   * are available to templates in this module.\n   *\n   * @usageNotes\n   *\n   * A template can use exported declarables from any\n   * imported module, including those from modules that are imported indirectly\n   * and re-exported.\n   * For example, `ModuleA` imports `ModuleB`, and also exports\n   * it, which makes the declarables from `ModuleB` available\n   * wherever `ModuleA` is imported.\n   *\n   * ### Example\n   *\n   * The following example allows MainModule to use anything exported by\n   * `CommonModule`:\n   *\n   * ```javascript\n   * @NgModule({\n   *   imports: [CommonModule]\n   * })\n   * class MainModule {\n   * }\n   * ```\n   *\n   */\n  imports?: Array<Type<any>|ModuleWithProviders<{}>|any[]>;\n\n  /**\n   * The set of components, directives, and pipes declared in this\n   * NgModule that can be used in the template of any component that is part of an\n   * NgModule that imports this NgModule. Exported declarations are the module's public API.\n   *\n   * A declarable belongs to one and only one NgModule.\n   * A module can list another module among its exports, in which case all of that module's\n   * public declaration are exported.\n   *\n   * @usageNotes\n   *\n   * Declarations are private by default.\n   * If this ModuleA does not export UserComponent, then only the components within this\n   * ModuleA can use UserComponent.\n   *\n   * ModuleA can import ModuleB and also export it, making exports from ModuleB\n   * available to an NgModule that imports ModuleA.\n   *\n   * ### Example\n   *\n   * The following example exports the `NgFor` directive from CommonModule.\n   *\n   * ```javascript\n   * @NgModule({\n   *   exports: [NgFor]\n   * })\n   * class CommonModule {\n   * }\n   * ```\n   */\n  exports?: Array<Type<any>|any[]>;\n\n  /**\n   * The set of components to compile when this NgModule is defined,\n   * so that they can be dynamically loaded into the view.\n   *\n   * For each component listed here, Angular creates a `ComponentFactory`\n   * and stores it in the `ComponentFactoryResolver`.\n   *\n   * Angular automatically adds components in the module's bootstrap\n   * and route definitions into the `entryComponents` list. Use this\n   * option to add components that are bootstrapped\n   * using one of the imperative techniques, such as `ViewContainerRef.createComponent()`.\n   *\n   * @see [Entry Components](guide/entry-components)\n   * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.\n   */\n  entryComponents?: Array<Type<any>|any[]>;\n\n  /**\n   * The set of components that are bootstrapped when\n   * this module is bootstrapped. The components listed here\n   * are automatically added to `entryComponents`.\n   */\n  bootstrap?: Array<Type<any>|any[]>;\n\n  /**\n   * The set of schemas that declare elements to be allowed in the NgModule.\n   * Elements and properties that are neither Angular components nor directives\n   * must be declared in a schema.\n   *\n   * Allowed value are `NO_ERRORS_SCHEMA` and `CUSTOM_ELEMENTS_SCHEMA`.\n   *\n   * @security When using one of `NO_ERRORS_SCHEMA` or `CUSTOM_ELEMENTS_SCHEMA`\n   * you must ensure that allowed elements and properties securely escape inputs.\n   */\n  schemas?: Array<SchemaMetadata|any[]>;\n\n  /**\n   * A name or path that uniquely identifies this NgModule in `getModuleFactory`.\n   * If left `undefined`, the NgModule is not registered with\n   * `getModuleFactory`.\n   */\n  id?: string;\n\n  /**\n   * When present, this module is ignored by the AOT compiler.\n   * It remains in distributed code, and the JIT compiler attempts to compile it\n   * at run time, in the browser.\n   * To ensure the correct behavior, the app must import `@angular/compiler`.\n   */\n  jit?: true;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport const NgModule: NgModuleDecorator = makeDecorator(\n    'NgModule', (ngModule: NgModule) => ngModule, undefined, undefined,\n    /**\n     * Decorator that marks the following class as an NgModule, and supplies\n     * configuration metadata for it.\n     *\n     * * The `declarations` and `entryComponents` options configure the compiler\n     * with information about what belongs to the NgModule.\n     * * The `providers` options configures the NgModule's injector to provide\n     * dependencies the NgModule members.\n     * * The `imports` and `exports` options bring in members from other modules, and make\n     * this module's members available to others.\n     */\n    (type: Type<any>, meta: NgModule) => SWITCH_COMPILE_NGMODULE(type, meta));\n\n\nfunction preR3NgModuleCompile(moduleType: Type<any>, metadata?: NgModule): void {\n  let imports = (metadata && metadata.imports) || [];\n  if (metadata && metadata.exports) {\n    imports = [...imports, metadata.exports];\n  }\n\n  (moduleType as InjectorType<any>).ɵinj = ɵɵdefineInjector({\n    factory: convertInjectableProviderToFactory(moduleType, {useClass: moduleType}),\n    providers: metadata && metadata.providers,\n    imports: imports,\n  });\n}\n\n\nexport const SWITCH_COMPILE_NGMODULE__POST_R3__ = render3CompileNgModule;\nconst SWITCH_COMPILE_NGMODULE__PRE_R3__ = preR3NgModuleCompile;\nconst SWITCH_COMPILE_NGMODULE: typeof render3CompileNgModule = SWITCH_COMPILE_NGMODULE__PRE_R3__;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken, Optional} from './di';\nimport {isPromise} from './util/lang';\nimport {noop} from './util/noop';\n\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that you can use to provide\n * one or more initialization functions.\n *\n * The provided functions are injected at application startup and executed during\n * app initialization. If any of these functions returns a Promise, initialization\n * does not complete until the Promise is resolved.\n *\n * You can, for example, create a factory function that loads language data\n * or an external configuration, and provide that function to the `APP_INITIALIZER` token.\n * The function is executed during the application bootstrap process,\n * and the needed data is available on startup.\n *\n * @see `ApplicationInitStatus`\n *\n * @publicApi\n */\nexport const APP_INITIALIZER = new InjectionToken<Array<() => void>>('Application Initializer');\n\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER} functions.\n *\n * @publicApi\n */\n@Injectable()\nexport class ApplicationInitStatus {\n  private resolve = noop;\n  private reject = noop;\n  private initialized = false;\n  public readonly donePromise: Promise<any>;\n  public readonly done = false;\n\n  constructor(@Inject(APP_INITIALIZER) @Optional() private appInits: (() => any)[]) {\n    this.donePromise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n\n  /** @internal */\n  runInitializers() {\n    if (this.initialized) {\n      return;\n    }\n\n    const asyncInitPromises: Promise<any>[] = [];\n\n    const complete = () => {\n      (this as {done: boolean}).done = true;\n      this.resolve();\n    };\n\n    if (this.appInits) {\n      for (let i = 0; i < this.appInits.length; i++) {\n        const initResult = this.appInits[i]();\n        if (isPromise(initResult)) {\n          asyncInitPromises.push(initResult);\n        }\n      }\n    }\n\n    Promise.all(asyncInitPromises)\n        .then(() => {\n          complete();\n        })\n        .catch(e => {\n          this.reject(e);\n        });\n\n    if (asyncInitPromises.length === 0) {\n      complete();\n    }\n    this.initialized = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from './di';\nimport {ComponentRef} from './linker/component_factory';\n\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") representing a unique string ID, used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * BY default, the value is randomly generated and assigned to the application by Angular.\n * To provide a custom ID value, use a DI provider <!-- TODO: provider --> to configure\n * the root {@link Injector} that uses this token.\n *\n * @publicApi\n */\nexport const APP_ID = new InjectionToken<string>('AppId');\n\nexport function _appIdRandomProviderFactory() {\n  return `${_randomChar()}${_randomChar()}${_randomChar()}`;\n}\n\n/**\n * Providers that generate a random `APP_ID_TOKEN`.\n * @publicApi\n */\nexport const APP_ID_RANDOM_PROVIDER = {\n  provide: APP_ID,\n  useFactory: _appIdRandomProviderFactory,\n  deps: <any[]>[],\n};\n\nfunction _randomChar(): string {\n  return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n\n/**\n * A function that is executed when a platform is initialized.\n * @publicApi\n */\nexport const PLATFORM_INITIALIZER = new InjectionToken<Array<() => void>>('Platform Initializer');\n\n/**\n * A token that indicates an opaque platform ID.\n * @publicApi\n */\nexport const PLATFORM_ID = new InjectionToken<Object>('Platform ID');\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that provides a set of callbacks to\n * be called for every component that is bootstrapped.\n *\n * Each callback must take a `ComponentRef` instance and return nothing.\n *\n * `(componentRef: ComponentRef) => void`\n *\n * @publicApi\n */\nexport const APP_BOOTSTRAP_LISTENER =\n    new InjectionToken<Array<(compRef: ComponentRef<any>) => void>>('appBootstrapListener');\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates the root directory of\n * the application\n * @publicApi\n */\nexport const PACKAGE_ROOT_URL = new InjectionToken<string>('Application Packages Root URL');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from './di';\n\n@Injectable()\nexport class Console {\n  log(message: string): void {\n    // tslint:disable-next-line:no-console\n    console.log(message);\n  }\n  // Note: for reporting errors use `DOM.logError()` as it is platform specific\n  warn(message: string): void {\n    // tslint:disable-next-line:no-console\n    console.warn(message);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '../di/injection_token';\n\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const LOCALE_ID = new InjectionToken<string>('LocaleId');\n\n/**\n * Provide this token to set the default currency code your application uses for\n * CurrencyPipe when there is no currency code passed into it. This is only used by\n * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.\n *\n * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n *\n * <div class=\"alert is-helpful\">\n *\n * **Deprecation notice:**\n *\n * The default currency code is currently always `USD` but this is deprecated from v9.\n *\n * **In v10 the default currency code will be taken from the current locale.**\n *\n * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in\n * your application `NgModule`:\n *\n * ```ts\n * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}\n * ```\n *\n * </div>\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const DEFAULT_CURRENCY_CODE = new InjectionToken<string>('DefaultCurrencyCode');\n\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const TRANSLATIONS = new InjectionToken<string>('Translations');\n\n/**\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const TRANSLATIONS_FORMAT = new InjectionToken<string>('TranslationsFormat');\n\n/**\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\n * that the compiler should use in case of missing translations:\n * - Error: throw if you have missing translations.\n * - Warning (default): show a warning in the console and/or shell.\n * - Ignore: do nothing.\n *\n * See the [i18n guide](guide/i18n#missing-translation) for more information.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * import { MissingTranslationStrategy } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   missingTranslation: MissingTranslationStrategy.Error\n * });\n * ```\n *\n * @publicApi\n */\nexport enum MissingTranslationStrategy {\n  Error = 0,\n  Warning = 1,\n  Ignore = 2,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '../di/injectable';\nimport {InjectionToken} from '../di/injection_token';\nimport {StaticProvider} from '../di/interface/provider';\nimport {MissingTranslationStrategy} from '../i18n/tokens';\nimport {Type} from '../interface/type';\nimport {ViewEncapsulation} from '../metadata/view';\nimport {ComponentFactory as ComponentFactoryR3} from '../render3/component_ref';\nimport {getComponentDef, getNgModuleDef} from '../render3/definition';\nimport {NgModuleFactory as NgModuleFactoryR3} from '../render3/ng_module_ref';\nimport {maybeUnwrapFn} from '../render3/util/misc_utils';\n\nimport {ComponentFactory} from './component_factory';\nimport {NgModuleFactory} from './ng_module_factory';\n\n\n\n/**\n * Combination of NgModuleFactory and ComponentFactories.\n *\n * @publicApi\n */\nexport class ModuleWithComponentFactories<T> {\n  constructor(\n      public ngModuleFactory: NgModuleFactory<T>,\n      public componentFactories: ComponentFactory<any>[]) {}\n}\n\n\nfunction _throwError() {\n  throw new Error(`Runtime compiler is not loaded`);\n}\n\nconst Compiler_compileModuleSync__PRE_R3__: <T>(moduleType: Type<T>) => NgModuleFactory<T> =\n    _throwError as any;\nexport const Compiler_compileModuleSync__POST_R3__: <T>(moduleType: Type<T>) =>\n    NgModuleFactory<T> = function<T>(moduleType: Type<T>): NgModuleFactory<T> {\n  return new NgModuleFactoryR3(moduleType);\n};\nconst Compiler_compileModuleSync = Compiler_compileModuleSync__PRE_R3__;\n\nconst Compiler_compileModuleAsync__PRE_R3__: <T>(moduleType: Type<T>) =>\n    Promise<NgModuleFactory<T>> = _throwError as any;\nexport const Compiler_compileModuleAsync__POST_R3__: <T>(moduleType: Type<T>) =>\n    Promise<NgModuleFactory<T>> = function<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n  return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));\n};\nconst Compiler_compileModuleAsync = Compiler_compileModuleAsync__PRE_R3__;\n\nconst Compiler_compileModuleAndAllComponentsSync__PRE_R3__: <T>(moduleType: Type<T>) =>\n    ModuleWithComponentFactories<T> = _throwError as any;\nexport const Compiler_compileModuleAndAllComponentsSync__POST_R3__: <T>(moduleType: Type<T>) =>\n    ModuleWithComponentFactories<T> = function<T>(moduleType: Type<T>):\n        ModuleWithComponentFactories<T> {\n  const ngModuleFactory = Compiler_compileModuleSync__POST_R3__(moduleType);\n  const moduleDef = getNgModuleDef(moduleType)!;\n  const componentFactories =\n      maybeUnwrapFn(moduleDef.declarations)\n          .reduce((factories: ComponentFactory<any>[], declaration: Type<any>) => {\n            const componentDef = getComponentDef(declaration);\n            componentDef && factories.push(new ComponentFactoryR3(componentDef));\n            return factories;\n          }, [] as ComponentFactory<any>[]);\n  return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n};\nconst Compiler_compileModuleAndAllComponentsSync =\n    Compiler_compileModuleAndAllComponentsSync__PRE_R3__;\n\nconst Compiler_compileModuleAndAllComponentsAsync__PRE_R3__: <T>(moduleType: Type<T>) =>\n    Promise<ModuleWithComponentFactories<T>> = _throwError as any;\nexport const Compiler_compileModuleAndAllComponentsAsync__POST_R3__: <T>(moduleType: Type<T>) =>\n    Promise<ModuleWithComponentFactories<T>> = function<T>(moduleType: Type<T>):\n        Promise<ModuleWithComponentFactories<T>> {\n  return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));\n};\nconst Compiler_compileModuleAndAllComponentsAsync =\n    Compiler_compileModuleAndAllComponentsAsync__PRE_R3__;\n\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * @publicApi\n */\n@Injectable()\nexport class Compiler {\n  /**\n   * Compiles the given NgModule and all of its components. All templates of the components listed\n   * in `entryComponents` have to be inlined.\n   */\n  compileModuleSync: <T>(moduleType: Type<T>) => NgModuleFactory<T> = Compiler_compileModuleSync;\n\n  /**\n   * Compiles the given NgModule and all of its components\n   */\n  compileModuleAsync:\n      <T>(moduleType: Type<T>) => Promise<NgModuleFactory<T>> = Compiler_compileModuleAsync;\n\n  /**\n   * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsSync: <T>(moduleType: Type<T>) => ModuleWithComponentFactories<T> =\n      Compiler_compileModuleAndAllComponentsSync;\n\n  /**\n   * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsAsync: <T>(moduleType: Type<T>) =>\n      Promise<ModuleWithComponentFactories<T>> = Compiler_compileModuleAndAllComponentsAsync;\n\n  /**\n   * Clears all caches.\n   */\n  clearCache(): void {}\n\n  /**\n   * Clears the cache for the given component/ngModule.\n   */\n  clearCacheFor(type: Type<any>) {}\n\n  /**\n   * Returns the id for a given NgModule, if one is defined and known to the compiler.\n   */\n  getModuleId(moduleType: Type<any>): string|undefined {\n    return undefined;\n  }\n}\n\n/**\n * Options for creating a compiler\n *\n * @publicApi\n */\nexport type CompilerOptions = {\n  useJit?: boolean,\n  defaultEncapsulation?: ViewEncapsulation,\n  providers?: StaticProvider[],\n  missingTranslation?: MissingTranslationStrategy,\n  preserveWhitespaces?: boolean,\n};\n\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @publicApi\n */\nexport const COMPILER_OPTIONS = new InjectionToken<CompilerOptions[]>('compilerOptions');\n\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n */\nexport abstract class CompilerFactory {\n  abstract createCompiler(options?: CompilerOptions[]): Compiler;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst promise: Promise<any> = (() => Promise.resolve(0))();\n\ndeclare const Zone: any;\n\nexport function scheduleMicroTask(fn: Function) {\n  if (typeof Zone === 'undefined') {\n    // use promise to schedule microTask instead of use Zone\n    promise.then(() => {\n      fn && fn.apply(null, null);\n    });\n  } else {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter} from '../event_emitter';\nimport {global} from '../util/global';\nimport {noop} from '../util/noop';\nimport {getNativeRequestAnimationFrame} from '../util/raf';\n\n\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '@angular/core';\n * import {NgIf} from '@angular/common';\n *\n * @Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class NgZone {\n  readonly hasPendingMacrotasks: boolean = false;\n  readonly hasPendingMicrotasks: boolean = false;\n\n  /**\n   * Whether there are no outstanding microtasks or macrotasks.\n   */\n  readonly isStable: boolean = true;\n\n  /**\n   * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n   */\n  readonly onUnstable: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies when there is no more microtasks enqueued in the current VM Turn.\n   * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n   * For this reason this event can fire multiple times per VM Turn.\n   */\n  readonly onMicrotaskEmpty: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n   * implies we are about to relinquish VM turn.\n   * This event gets called just once.\n   */\n  readonly onStable: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies that an error has been delivered.\n   */\n  readonly onError: EventEmitter<any> = new EventEmitter(false);\n\n\n  constructor({\n    enableLongStackTrace = false,\n    shouldCoalesceEventChangeDetection = false,\n    shouldCoalesceRunChangeDetection = false\n  }) {\n    if (typeof Zone == 'undefined') {\n      throw new Error(`In this configuration Angular requires Zone.js`);\n    }\n\n    Zone.assertZonePatched();\n    const self = this as any as NgZonePrivate;\n    self._nesting = 0;\n\n    self._outer = self._inner = Zone.current;\n\n    if ((Zone as any)['TaskTrackingZoneSpec']) {\n      self._inner = self._inner.fork(new ((Zone as any)['TaskTrackingZoneSpec'] as any));\n    }\n\n    if (enableLongStackTrace && (Zone as any)['longStackTraceZoneSpec']) {\n      self._inner = self._inner.fork((Zone as any)['longStackTraceZoneSpec']);\n    }\n    // if shouldCoalesceRunChangeDetection is true, all tasks including event tasks will be\n    // coalesced, so shouldCoalesceEventChangeDetection option is not necessary and can be skipped.\n    self.shouldCoalesceEventChangeDetection =\n        !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;\n    self.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;\n    self.lastRequestAnimationFrameId = -1;\n    self.nativeRequestAnimationFrame = getNativeRequestAnimationFrame().nativeRequestAnimationFrame;\n    forkInnerZoneWithAngularBehavior(self);\n  }\n\n  static isInAngularZone(): boolean {\n    return Zone.current.get('isAngularZone') === true;\n  }\n\n  static assertInAngularZone(): void {\n    if (!NgZone.isInAngularZone()) {\n      throw new Error('Expected to be in Angular Zone, but it is not!');\n    }\n  }\n\n  static assertNotInAngularZone(): void {\n    if (NgZone.isInAngularZone()) {\n      throw new Error('Expected to not be in Angular Zone, but it is!');\n    }\n  }\n\n  /**\n   * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n   * the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  run<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T {\n    return (this as any as NgZonePrivate)._inner.run(fn, applyThis, applyArgs);\n  }\n\n  /**\n   * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n   * returned by the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  runTask<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[], name?: string): T {\n    const zone = (this as any as NgZonePrivate)._inner;\n    const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n    try {\n      return zone.runTask(task, applyThis, applyArgs);\n    } finally {\n      zone.cancelTask(task);\n    }\n  }\n\n  /**\n   * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n   * rethrown.\n   */\n  runGuarded<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T {\n    return (this as any as NgZonePrivate)._inner.runGuarded(fn, applyThis, applyArgs);\n  }\n\n  /**\n   * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n   * the function.\n   *\n   * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n   * work that\n   * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * outside of the Angular zone.\n   *\n   * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n   */\n  runOutsideAngular<T>(fn: (...args: any[]) => T): T {\n    return (this as any as NgZonePrivate)._outer.run(fn);\n  }\n}\n\nconst EMPTY_PAYLOAD = {};\n\ninterface NgZonePrivate extends NgZone {\n  _outer: Zone;\n  _inner: Zone;\n  _nesting: number;\n  _hasPendingMicrotasks: boolean;\n\n  hasPendingMacrotasks: boolean;\n  hasPendingMicrotasks: boolean;\n  lastRequestAnimationFrameId: number;\n  isStable: boolean;\n  /**\n   * Optionally specify coalescing event change detections or not.\n   * Consider the following case.\n   *\n   * <div (click)=\"doSomething()\">\n   *   <button (click)=\"doSomethingElse()\"></button>\n   * </div>\n   *\n   * When button is clicked, because of the event bubbling, both\n   * event handlers will be called and 2 change detections will be\n   * triggered. We can coalesce such kind of events to trigger\n   * change detection only once.\n   *\n   * By default, this option will be false. So the events will not be\n   * coalesced and the change detection will be triggered multiple times.\n   * And if this option be set to true, the change detection will be\n   * triggered async by scheduling it in an animation frame. So in the case above,\n   * the change detection will only be trigged once.\n   */\n  shouldCoalesceEventChangeDetection: boolean;\n  /**\n   * Optionally specify if `NgZone#run()` method invocations should be coalesced\n   * into a single change detection.\n   *\n   * Consider the following case.\n   *\n   * for (let i = 0; i < 10; i ++) {\n   *   ngZone.run(() => {\n   *     // do something\n   *   });\n   * }\n   *\n   * This case triggers the change detection multiple times.\n   * With ngZoneRunCoalescing options, all change detections in an event loops trigger only once.\n   * In addition, the change detection executes in requestAnimation.\n   *\n   */\n  shouldCoalesceRunChangeDetection: boolean;\n\n  nativeRequestAnimationFrame: (callback: FrameRequestCallback) => number;\n\n  // Cache a  \"fake\" top eventTask so you don't need to schedule a new task every\n  // time you run a `checkStable`.\n  fakeTopEventTask: Task;\n}\n\nfunction checkStable(zone: NgZonePrivate) {\n  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n    try {\n      zone._nesting++;\n      zone.onMicrotaskEmpty.emit(null);\n    } finally {\n      zone._nesting--;\n      if (!zone.hasPendingMicrotasks) {\n        try {\n          zone.runOutsideAngular(() => zone.onStable.emit(null));\n        } finally {\n          zone.isStable = true;\n        }\n      }\n    }\n  }\n}\n\nfunction delayChangeDetectionForEvents(zone: NgZonePrivate) {\n  if (zone.lastRequestAnimationFrameId !== -1) {\n    return;\n  }\n  zone.lastRequestAnimationFrameId = zone.nativeRequestAnimationFrame.call(global, () => {\n    // This is a work around for https://github.com/angular/angular/issues/36839.\n    // The core issue is that when event coalescing is enabled it is possible for microtasks\n    // to get flushed too early (As is the case with `Promise.then`) between the\n    // coalescing eventTasks.\n    //\n    // To workaround this we schedule a \"fake\" eventTask before we process the\n    // coalescing eventTasks. The benefit of this is that the \"fake\" container eventTask\n    //  will prevent the microtasks queue from getting drained in between the coalescing\n    // eventTask execution.\n    if (!zone.fakeTopEventTask) {\n      zone.fakeTopEventTask = Zone.root.scheduleEventTask('fakeTopEventTask', () => {\n        zone.lastRequestAnimationFrameId = -1;\n        updateMicroTaskStatus(zone);\n        checkStable(zone);\n      }, undefined, () => {}, () => {});\n    }\n    zone.fakeTopEventTask.invoke();\n  });\n  updateMicroTaskStatus(zone);\n}\n\nfunction forkInnerZoneWithAngularBehavior(zone: NgZonePrivate) {\n  const delayChangeDetectionForEventsDelegate = () => {\n    delayChangeDetectionForEvents(zone);\n  };\n  zone._inner = zone._inner.fork({\n    name: 'angular',\n    properties: <any>{'isAngularZone': true},\n    onInvokeTask:\n        (delegate: ZoneDelegate, current: Zone, target: Zone, task: Task, applyThis: any,\n         applyArgs: any): any => {\n          try {\n            onEnter(zone);\n            return delegate.invokeTask(target, task, applyThis, applyArgs);\n          } finally {\n            if ((zone.shouldCoalesceEventChangeDetection && task.type === 'eventTask') ||\n                zone.shouldCoalesceRunChangeDetection) {\n              delayChangeDetectionForEventsDelegate();\n            }\n            onLeave(zone);\n          }\n        },\n\n    onInvoke:\n        (delegate: ZoneDelegate, current: Zone, target: Zone, callback: Function, applyThis: any,\n         applyArgs?: any[], source?: string): any => {\n          try {\n            onEnter(zone);\n            return delegate.invoke(target, callback, applyThis, applyArgs, source);\n          } finally {\n            if (zone.shouldCoalesceRunChangeDetection) {\n              delayChangeDetectionForEventsDelegate();\n            }\n            onLeave(zone);\n          }\n        },\n\n    onHasTask:\n        (delegate: ZoneDelegate, current: Zone, target: Zone, hasTaskState: HasTaskState) => {\n          delegate.hasTask(target, hasTaskState);\n          if (current === target) {\n            // We are only interested in hasTask events which originate from our zone\n            // (A child hasTask event is not interesting to us)\n            if (hasTaskState.change == 'microTask') {\n              zone._hasPendingMicrotasks = hasTaskState.microTask;\n              updateMicroTaskStatus(zone);\n              checkStable(zone);\n            } else if (hasTaskState.change == 'macroTask') {\n              zone.hasPendingMacrotasks = hasTaskState.macroTask;\n            }\n          }\n        },\n\n    onHandleError: (delegate: ZoneDelegate, current: Zone, target: Zone, error: any): boolean => {\n      delegate.handleError(target, error);\n      zone.runOutsideAngular(() => zone.onError.emit(error));\n      return false;\n    }\n  });\n}\n\nfunction updateMicroTaskStatus(zone: NgZonePrivate) {\n  if (zone._hasPendingMicrotasks ||\n      ((zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) &&\n       zone.lastRequestAnimationFrameId !== -1)) {\n    zone.hasPendingMicrotasks = true;\n  } else {\n    zone.hasPendingMicrotasks = false;\n  }\n}\n\nfunction onEnter(zone: NgZonePrivate) {\n  zone._nesting++;\n  if (zone.isStable) {\n    zone.isStable = false;\n    zone.onUnstable.emit(null);\n  }\n}\n\nfunction onLeave(zone: NgZonePrivate) {\n  zone._nesting--;\n  checkStable(zone);\n}\n\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nexport class NoopNgZone implements NgZone {\n  readonly hasPendingMicrotasks: boolean = false;\n  readonly hasPendingMacrotasks: boolean = false;\n  readonly isStable: boolean = true;\n  readonly onUnstable: EventEmitter<any> = new EventEmitter();\n  readonly onMicrotaskEmpty: EventEmitter<any> = new EventEmitter();\n  readonly onStable: EventEmitter<any> = new EventEmitter();\n  readonly onError: EventEmitter<any> = new EventEmitter();\n\n  run<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any): T {\n    return fn.apply(applyThis, applyArgs);\n  }\n\n  runGuarded<T>(fn: (...args: any[]) => any, applyThis?: any, applyArgs?: any): T {\n    return fn.apply(applyThis, applyArgs);\n  }\n\n  runOutsideAngular<T>(fn: (...args: any[]) => T): T {\n    return fn();\n  }\n\n  runTask<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any, name?: string): T {\n    return fn.apply(applyThis, applyArgs);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {global} from './global';\n\nexport function getNativeRequestAnimationFrame() {\n  let nativeRequestAnimationFrame: (callback: FrameRequestCallback) => number =\n      global['requestAnimationFrame'];\n  let nativeCancelAnimationFrame: (handle: number) => void = global['cancelAnimationFrame'];\n  if (typeof Zone !== 'undefined' && nativeRequestAnimationFrame && nativeCancelAnimationFrame) {\n    // use unpatched version of requestAnimationFrame(native delegate) if possible\n    // to avoid another Change detection\n    const unpatchedRequestAnimationFrame =\n        (nativeRequestAnimationFrame as any)[(Zone as any).__symbol__('OriginalDelegate')];\n    if (unpatchedRequestAnimationFrame) {\n      nativeRequestAnimationFrame = unpatchedRequestAnimationFrame;\n    }\n    const unpatchedCancelAnimationFrame =\n        (nativeCancelAnimationFrame as any)[(Zone as any).__symbol__('OriginalDelegate')];\n    if (unpatchedCancelAnimationFrame) {\n      nativeCancelAnimationFrame = unpatchedCancelAnimationFrame;\n    }\n  }\n  return {nativeRequestAnimationFrame, nativeCancelAnimationFrame};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '../di';\nimport {scheduleMicroTask} from '../util/microtask';\nimport {NgZone} from '../zone/ng_zone';\n\n/**\n * Testability API.\n * `declare` keyword causes tsickle to generate externs, so these methods are\n * not renamed by Closure Compiler.\n * @publicApi\n */\nexport declare interface PublicTestability {\n  isStable(): boolean;\n  whenStable(callback: Function, timeout?: number, updateCallback?: Function): void;\n  findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\n\n// Angular internal, not intended for public API.\nexport interface PendingMacrotask {\n  source: string;\n  creationLocation: Error;\n  runCount?: number;\n  data?: TaskData;\n}\n\nexport interface TaskData {\n  target?: XMLHttpRequest;\n  delay?: number;\n  isPeriodic?: boolean;\n}\n\n// Angular internal, not intended for public API.\nexport type DoneCallback = (didWork: boolean, tasks?: PendingMacrotask[]) => void;\nexport type UpdateCallback = (tasks: PendingMacrotask[]) => boolean;\n\ninterface WaitCallback {\n  // Needs to be 'any' - setTimeout returns a number according to ES6, but\n  // on NodeJS it returns a Timer.\n  timeoutId: any;\n  doneCb: DoneCallback;\n  updateCb?: UpdateCallback;\n}\n\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * @publicApi\n */\n@Injectable()\nexport class Testability implements PublicTestability {\n  private _pendingCount: number = 0;\n  private _isZoneStable: boolean = true;\n  /**\n   * Whether any work was done since the last 'whenStable' callback. This is\n   * useful to detect if this could have potentially destabilized another\n   * component while it is stabilizing.\n   * @internal\n   */\n  private _didWork: boolean = false;\n  private _callbacks: WaitCallback[] = [];\n\n  private taskTrackingZone: {macroTasks: Task[]}|null = null;\n\n  constructor(private _ngZone: NgZone) {\n    this._watchAngularEvents();\n    _ngZone.run(() => {\n      this.taskTrackingZone =\n          typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n    });\n  }\n\n  private _watchAngularEvents(): void {\n    this._ngZone.onUnstable.subscribe({\n      next: () => {\n        this._didWork = true;\n        this._isZoneStable = false;\n      }\n    });\n\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.subscribe({\n        next: () => {\n          NgZone.assertNotInAngularZone();\n          scheduleMicroTask(() => {\n            this._isZoneStable = true;\n            this._runCallbacksIfReady();\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Increases the number of pending request\n   * @deprecated pending requests are now tracked with zones.\n   */\n  increasePendingRequestCount(): number {\n    this._pendingCount += 1;\n    this._didWork = true;\n    return this._pendingCount;\n  }\n\n  /**\n   * Decreases the number of pending request\n   * @deprecated pending requests are now tracked with zones\n   */\n  decreasePendingRequestCount(): number {\n    this._pendingCount -= 1;\n    if (this._pendingCount < 0) {\n      throw new Error('pending async requests below zero');\n    }\n    this._runCallbacksIfReady();\n    return this._pendingCount;\n  }\n\n  /**\n   * Whether an associated application is stable\n   */\n  isStable(): boolean {\n    return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n  }\n\n  private _runCallbacksIfReady(): void {\n    if (this.isStable()) {\n      // Schedules the call backs in a new frame so that it is always async.\n      scheduleMicroTask(() => {\n        while (this._callbacks.length !== 0) {\n          let cb = this._callbacks.pop()!;\n          clearTimeout(cb.timeoutId);\n          cb.doneCb(this._didWork);\n        }\n        this._didWork = false;\n      });\n    } else {\n      // Still not stable, send updates.\n      let pending = this.getPendingTasks();\n      this._callbacks = this._callbacks.filter((cb) => {\n        if (cb.updateCb && cb.updateCb(pending)) {\n          clearTimeout(cb.timeoutId);\n          return false;\n        }\n\n        return true;\n      });\n\n      this._didWork = true;\n    }\n  }\n\n  private getPendingTasks(): PendingMacrotask[] {\n    if (!this.taskTrackingZone) {\n      return [];\n    }\n\n    // Copy the tasks data so that we don't leak tasks.\n    return this.taskTrackingZone.macroTasks.map((t: Task) => {\n      return {\n        source: t.source,\n        // From TaskTrackingZone:\n        // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n        creationLocation: (t as any).creationLocation as Error,\n        data: t.data\n      };\n    });\n  }\n\n  private addCallback(cb: DoneCallback, timeout?: number, updateCb?: UpdateCallback) {\n    let timeoutId: any = -1;\n    if (timeout && timeout > 0) {\n      timeoutId = setTimeout(() => {\n        this._callbacks = this._callbacks.filter((cb) => cb.timeoutId !== timeoutId);\n        cb(this._didWork, this.getPendingTasks());\n      }, timeout);\n    }\n    this._callbacks.push(<WaitCallback>{doneCb: cb, timeoutId: timeoutId, updateCb: updateCb});\n  }\n\n  /**\n   * Wait for the application to be stable with a timeout. If the timeout is reached before that\n   * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n   *\n   * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n   *    whichever comes first.\n   * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n   *    specified, whenStable() will wait forever.\n   * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n   *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n   *    and no further updates will be issued.\n   */\n  whenStable(doneCb: Function, timeout?: number, updateCb?: Function): void {\n    if (updateCb && !this.taskTrackingZone) {\n      throw new Error(\n          'Task tracking zone is required when passing an update callback to ' +\n          'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n    }\n    // These arguments are 'Function' above to keep the public API simple.\n    this.addCallback(doneCb as DoneCallback, timeout, updateCb as UpdateCallback);\n    this._runCallbacksIfReady();\n  }\n\n  /**\n   * Get the number of pending requests\n   * @deprecated pending requests are now tracked with zones\n   */\n  getPendingRequestCount(): number {\n    return this._pendingCount;\n  }\n\n  /**\n   * Find providers by name\n   * @param using The root element to search from\n   * @param provider The name of binding variable\n   * @param exactMatch Whether using exactMatch\n   */\n  findProviders(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\n}\n\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @publicApi\n */\n@Injectable()\nexport class TestabilityRegistry {\n  /** @internal */\n  _applications = new Map<any, Testability>();\n\n  constructor() {\n    _testabilityGetter.addToWindow(this);\n  }\n\n  /**\n   * Registers an application with a testability hook so that it can be tracked\n   * @param token token of application, root element\n   * @param testability Testability hook\n   */\n  registerApplication(token: any, testability: Testability) {\n    this._applications.set(token, testability);\n  }\n\n  /**\n   * Unregisters an application.\n   * @param token token of application, root element\n   */\n  unregisterApplication(token: any) {\n    this._applications.delete(token);\n  }\n\n  /**\n   * Unregisters all applications\n   */\n  unregisterAllApplications() {\n    this._applications.clear();\n  }\n\n  /**\n   * Get a testability hook associated with the application\n   * @param elem root element\n   */\n  getTestability(elem: any): Testability|null {\n    return this._applications.get(elem) || null;\n  }\n\n  /**\n   * Get all registered testabilities\n   */\n  getAllTestabilities(): Testability[] {\n    return Array.from(this._applications.values());\n  }\n\n  /**\n   * Get all registered applications(root elements)\n   */\n  getAllRootElements(): any[] {\n    return Array.from(this._applications.keys());\n  }\n\n  /**\n   * Find testability of a node in the Tree\n   * @param elem node\n   * @param findInAncestors whether finding testability in ancestors if testability was not found in\n   * current node\n   */\n  findTestabilityInTree(elem: Node, findInAncestors: boolean = true): Testability|null {\n    return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n  }\n}\n\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * @publicApi\n */\nexport interface GetTestability {\n  addToWindow(registry: TestabilityRegistry): void;\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null;\n}\n\nclass _NoopGetTestability implements GetTestability {\n  addToWindow(registry: TestabilityRegistry): void {}\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    return null;\n  }\n}\n\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @publicApi\n */\nexport function setTestabilityGetter(getter: GetTestability): void {\n  _testabilityGetter = getter;\n}\n\nlet _testabilityGetter: GetTestability = new _NoopGetTestability();\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport './util/ng_jit_mode';\n\nimport {merge, Observable, Observer, Subscription} from 'rxjs';\nimport {share} from 'rxjs/operators';\n\nimport {ApplicationInitStatus} from './application_init';\nimport {APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER} from './application_tokens';\nimport {getCompilerFacade} from './compiler/compiler_facade';\nimport {Console} from './console';\nimport {Injectable} from './di/injectable';\nimport {InjectionToken} from './di/injection_token';\nimport {Injector} from './di/injector';\nimport {StaticProvider} from './di/interface/provider';\nimport {INJECTOR_SCOPE} from './di/scope';\nimport {ErrorHandler} from './error_handler';\nimport {DEFAULT_LOCALE_ID} from './i18n/localization';\nimport {LOCALE_ID} from './i18n/tokens';\nimport {Type} from './interface/type';\nimport {ivyEnabled} from './ivy_switch';\nimport {COMPILER_OPTIONS, CompilerFactory, CompilerOptions} from './linker/compiler';\nimport {ComponentFactory, ComponentRef} from './linker/component_factory';\nimport {ComponentFactoryBoundToModule, ComponentFactoryResolver} from './linker/component_factory_resolver';\nimport {InternalNgModuleRef, NgModuleFactory, NgModuleRef} from './linker/ng_module_factory';\nimport {InternalViewRef, ViewRef} from './linker/view_ref';\nimport {isComponentResourceResolutionQueueEmpty, resolveComponentResources} from './metadata/resource_loading';\nimport {assertNgModuleType} from './render3/assert';\nimport {ComponentFactory as R3ComponentFactory} from './render3/component_ref';\nimport {setLocaleId} from './render3/i18n/i18n_locale_id';\nimport {setJitOptions} from './render3/jit/jit_options';\nimport {NgModuleFactory as R3NgModuleFactory} from './render3/ng_module_ref';\nimport {publishDefaultGlobalUtils as _publishDefaultGlobalUtils} from './render3/util/global_utils';\nimport {Testability, TestabilityRegistry} from './testability/testability';\nimport {isDevMode} from './util/is_dev_mode';\nimport {isPromise} from './util/lang';\nimport {scheduleMicroTask} from './util/microtask';\nimport {stringify} from './util/stringify';\nimport {NgZone, NoopNgZone} from './zone/ng_zone';\n\nlet _platform: PlatformRef;\n\nlet compileNgModuleFactory:\n    <M>(injector: Injector, options: CompilerOptions, moduleType: Type<M>) =>\n        Promise<NgModuleFactory<M>> = compileNgModuleFactory__PRE_R3__;\n\nfunction compileNgModuleFactory__PRE_R3__<M>(\n    injector: Injector, options: CompilerOptions,\n    moduleType: Type<M>): Promise<NgModuleFactory<M>> {\n  const compilerFactory: CompilerFactory = injector.get(CompilerFactory);\n  const compiler = compilerFactory.createCompiler([options]);\n  return compiler.compileModuleAsync(moduleType);\n}\n\nexport function compileNgModuleFactory__POST_R3__<M>(\n    injector: Injector, options: CompilerOptions,\n    moduleType: Type<M>): Promise<NgModuleFactory<M>> {\n  ngDevMode && assertNgModuleType(moduleType);\n\n  const moduleFactory = new R3NgModuleFactory(moduleType);\n\n  // All of the logic below is irrelevant for AOT-compiled code.\n  if (typeof ngJitMode !== 'undefined' && !ngJitMode) {\n    return Promise.resolve(moduleFactory);\n  }\n\n  const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);\n\n  // Configure the compiler to use the provided options. This call may fail when multiple modules\n  // are bootstrapped with incompatible options, as a component can only be compiled according to\n  // a single set of options.\n  setJitOptions({\n    defaultEncapsulation: _lastDefined(compilerOptions.map(opts => opts.defaultEncapsulation)),\n    preserveWhitespaces: _lastDefined(compilerOptions.map(opts => opts.preserveWhitespaces)),\n  });\n\n  if (isComponentResourceResolutionQueueEmpty()) {\n    return Promise.resolve(moduleFactory);\n  }\n\n  const compilerProviders = _mergeArrays(compilerOptions.map(o => o.providers!));\n\n  // In case there are no compiler providers, we just return the module factory as\n  // there won't be any resource loader. This can happen with Ivy, because AOT compiled\n  // modules can be still passed through \"bootstrapModule\". In that case we shouldn't\n  // unnecessarily require the JIT compiler.\n  if (compilerProviders.length === 0) {\n    return Promise.resolve(moduleFactory);\n  }\n\n  const compiler = getCompilerFacade();\n  const compilerInjector = Injector.create({providers: compilerProviders});\n  const resourceLoader = compilerInjector.get(compiler.ResourceLoader);\n  // The resource loader can also return a string while the \"resolveComponentResources\"\n  // always expects a promise. Therefore we need to wrap the returned value in a promise.\n  return resolveComponentResources(url => Promise.resolve(resourceLoader.get(url)))\n      .then(() => moduleFactory);\n}\n\n// the `window.ng` global utilities are only available in non-VE versions of\n// Angular. The function switch below will make sure that the code is not\n// included into Angular when PRE mode is active.\nexport function publishDefaultGlobalUtils__PRE_R3__() {}\nexport function publishDefaultGlobalUtils__POST_R3__() {\n  ngDevMode && _publishDefaultGlobalUtils();\n}\n\nlet publishDefaultGlobalUtils: () => any = publishDefaultGlobalUtils__PRE_R3__;\n\nlet isBoundToModule: <C>(cf: ComponentFactory<C>) => boolean = isBoundToModule__PRE_R3__;\n\nexport function isBoundToModule__PRE_R3__<C>(cf: ComponentFactory<C>): boolean {\n  return cf instanceof ComponentFactoryBoundToModule;\n}\n\nexport function isBoundToModule__POST_R3__<C>(cf: ComponentFactory<C>): boolean {\n  return (cf as R3ComponentFactory<C>).isBoundToModule;\n}\n\nexport const ALLOW_MULTIPLE_PLATFORMS = new InjectionToken<boolean>('AllowMultipleToken');\n\n\n\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @publicApi\n */\nexport class NgProbeToken {\n  constructor(public name: string, public token: any) {}\n}\n\n/**\n * Creates a platform.\n * Platforms must be created on launch using this function.\n *\n * @publicApi\n */\nexport function createPlatform(injector: Injector): PlatformRef {\n  if (_platform && !_platform.destroyed &&\n      !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n    throw new Error(\n        'There can be only one platform. Destroy the previous one to create a new one.');\n  }\n  publishDefaultGlobalUtils();\n  _platform = injector.get(PlatformRef);\n  const inits = injector.get(PLATFORM_INITIALIZER, null);\n  if (inits) inits.forEach((init: any) => init());\n  return _platform;\n}\n\n/**\n * Creates a factory for a platform. Can be used to provide or override `Providers` specific to\n * your application's runtime needs, such as `PLATFORM_INITIALIZER` and `PLATFORM_ID`.\n * @param parentPlatformFactory Another platform factory to modify. Allows you to compose factories\n * to build up configurations that might be required by different libraries or parts of the\n * application.\n * @param name Identifies the new platform factory.\n * @param providers A set of dependency providers for platforms created with the new factory.\n *\n * @publicApi\n */\nexport function createPlatformFactory(\n    parentPlatformFactory: ((extraProviders?: StaticProvider[]) => PlatformRef)|null, name: string,\n    providers: StaticProvider[] = []): (extraProviders?: StaticProvider[]) => PlatformRef {\n  const desc = `Platform: ${name}`;\n  const marker = new InjectionToken(desc);\n  return (extraProviders: StaticProvider[] = []) => {\n    let platform = getPlatform();\n    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n      if (parentPlatformFactory) {\n        parentPlatformFactory(\n            providers.concat(extraProviders).concat({provide: marker, useValue: true}));\n      } else {\n        const injectedProviders: StaticProvider[] =\n            providers.concat(extraProviders).concat({provide: marker, useValue: true}, {\n              provide: INJECTOR_SCOPE,\n              useValue: 'platform'\n            });\n        createPlatform(Injector.create({providers: injectedProviders, name: desc}));\n      }\n    }\n    return assertPlatform(marker);\n  };\n}\n\n/**\n * Checks that there is currently a platform that contains the given token as a provider.\n *\n * @publicApi\n */\nexport function assertPlatform(requiredToken: any): PlatformRef {\n  const platform = getPlatform();\n\n  if (!platform) {\n    throw new Error('No platform exists!');\n  }\n\n  if (!platform.injector.get(requiredToken, null)) {\n    throw new Error(\n        'A platform with a different configuration has been created. Please destroy it first.');\n  }\n\n  return platform;\n}\n\n/**\n * Destroys the current Angular platform and all Angular applications on the page.\n * Destroys all modules and listeners registered with the platform.\n *\n * @publicApi\n */\nexport function destroyPlatform(): void {\n  if (_platform && !_platform.destroyed) {\n    _platform.destroy();\n  }\n}\n\n/**\n * Returns the current platform.\n *\n * @publicApi\n */\nexport function getPlatform(): PlatformRef|null {\n  return _platform && !_platform.destroyed ? _platform : null;\n}\n\n/**\n * Provides additional options to the bootstraping process.\n *\n *\n */\nexport interface BootstrapOptions {\n  /**\n   * Optionally specify which `NgZone` should be used.\n   *\n   * - Provide your own `NgZone` instance.\n   * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n   * - `noop` - Use `NoopNgZone` which does nothing.\n   */\n  ngZone?: NgZone|'zone.js'|'noop';\n\n  /**\n   * Optionally specify coalescing event change detections or not.\n   * Consider the following case.\n   *\n   * <div (click)=\"doSomething()\">\n   *   <button (click)=\"doSomethingElse()\"></button>\n   * </div>\n   *\n   * When button is clicked, because of the event bubbling, both\n   * event handlers will be called and 2 change detections will be\n   * triggered. We can colesce such kind of events to only trigger\n   * change detection only once.\n   *\n   * By default, this option will be false. So the events will not be\n   * coalesced and the change detection will be triggered multiple times.\n   * And if this option be set to true, the change detection will be\n   * triggered async by scheduling a animation frame. So in the case above,\n   * the change detection will only be triggered once.\n   */\n  ngZoneEventCoalescing?: boolean;\n\n  /**\n   * Optionally specify if `NgZone#run()` method invocations should be coalesced\n   * into a single change detection.\n   *\n   * Consider the following case.\n   *\n   * for (let i = 0; i < 10; i ++) {\n   *   ngZone.run(() => {\n   *     // do something\n   *   });\n   * }\n   *\n   * This case triggers the change detection multiple times.\n   * With ngZoneRunCoalescing options, all change detections in an event loop trigger only once.\n   * In addition, the change detection executes in requestAnimation.\n   *\n   */\n  ngZoneRunCoalescing?: boolean;\n}\n\n/**\n * The Angular platform is the entry point for Angular on a web page.\n * Each page has exactly one platform. Services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n * A page's platform is initialized implicitly when a platform is created using a platform\n * factory such as `PlatformBrowser`, or explicitly by calling the `createPlatform()` function.\n *\n * @publicApi\n */\n@Injectable()\nexport class PlatformRef {\n  private _modules: NgModuleRef<any>[] = [];\n  private _destroyListeners: Function[] = [];\n  private _destroyed: boolean = false;\n\n  /** @internal */\n  constructor(private _injector: Injector) {}\n\n  /**\n   * Creates an instance of an `@NgModule` for the given platform for offline compilation.\n   *\n   * @usageNotes\n   *\n   * The following example creates the NgModule for a browser platform.\n   *\n   * ```typescript\n   * my_module.ts:\n   *\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * main.ts:\n   * import {MyModuleNgFactory} from './my_module.ngfactory';\n   * import {platformBrowser} from '@angular/platform-browser';\n   *\n   * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n   * ```\n   */\n  bootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>, options?: BootstrapOptions):\n      Promise<NgModuleRef<M>> {\n    // Note: We need to create the NgZone _before_ we instantiate the module,\n    // as instantiating the module creates some providers eagerly.\n    // So we create a mini parent injector that just contains the new NgZone and\n    // pass that as parent to the NgModuleFactory.\n    const ngZoneOption = options ? options.ngZone : undefined;\n    const ngZoneEventCoalescing = (options && options.ngZoneEventCoalescing) || false;\n    const ngZoneRunCoalescing = (options && options.ngZoneRunCoalescing) || false;\n    const ngZone = getNgZone(ngZoneOption, {ngZoneEventCoalescing, ngZoneRunCoalescing});\n    const providers: StaticProvider[] = [{provide: NgZone, useValue: ngZone}];\n    // Note: Create ngZoneInjector within ngZone.run so that all of the instantiated services are\n    // created within the Angular zone\n    // Do not try to replace ngZone.run with ApplicationRef#run because ApplicationRef would then be\n    // created outside of the Angular zone.\n    return ngZone.run(() => {\n      const ngZoneInjector = Injector.create(\n          {providers: providers, parent: this.injector, name: moduleFactory.moduleType.name});\n      const moduleRef = <InternalNgModuleRef<M>>moduleFactory.create(ngZoneInjector);\n      const exceptionHandler: ErrorHandler|null = moduleRef.injector.get(ErrorHandler, null);\n      if (!exceptionHandler) {\n        throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n      }\n      ngZone!.runOutsideAngular(() => {\n        const subscription = ngZone!.onError.subscribe({\n          next: (error: any) => {\n            exceptionHandler.handleError(error);\n          }\n        });\n        moduleRef.onDestroy(() => {\n          remove(this._modules, moduleRef);\n          subscription.unsubscribe();\n        });\n      });\n      return _callAndReportToErrorHandler(exceptionHandler, ngZone!, () => {\n        const initStatus: ApplicationInitStatus = moduleRef.injector.get(ApplicationInitStatus);\n        initStatus.runInitializers();\n        return initStatus.donePromise.then(() => {\n          if (ivyEnabled) {\n            // If the `LOCALE_ID` provider is defined at bootstrap then we set the value for ivy\n            const localeId = moduleRef.injector.get(LOCALE_ID, DEFAULT_LOCALE_ID);\n            setLocaleId(localeId || DEFAULT_LOCALE_ID);\n          }\n          this._moduleDoBootstrap(moduleRef);\n          return moduleRef;\n        });\n      });\n    });\n  }\n\n  /**\n   * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n   *\n   * @usageNotes\n   * ### Simple Example\n   *\n   * ```typescript\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n   * ```\n   *\n   */\n  bootstrapModule<M>(\n      moduleType: Type<M>,\n      compilerOptions: (CompilerOptions&BootstrapOptions)|\n      Array<CompilerOptions&BootstrapOptions> = []): Promise<NgModuleRef<M>> {\n    const options = optionsReducer({}, compilerOptions);\n    return compileNgModuleFactory(this.injector, options, moduleType)\n        .then(moduleFactory => this.bootstrapModuleFactory(moduleFactory, options));\n  }\n\n  private _moduleDoBootstrap(moduleRef: InternalNgModuleRef<any>): void {\n    const appRef = moduleRef.injector.get(ApplicationRef) as ApplicationRef;\n    if (moduleRef._bootstrapComponents.length > 0) {\n      moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));\n    } else if (moduleRef.instance.ngDoBootstrap) {\n      moduleRef.instance.ngDoBootstrap(appRef);\n    } else {\n      throw new Error(\n          `The module ${\n              stringify(\n                  moduleRef.instance\n                      .constructor)} was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n          `Please define one of these.`);\n    }\n    this._modules.push(moduleRef);\n  }\n\n  /**\n   * Registers a listener to be called when the platform is destroyed.\n   */\n  onDestroy(callback: () => void): void {\n    this._destroyListeners.push(callback);\n  }\n\n  /**\n   * Retrieves the platform {@link Injector}, which is the parent injector for\n   * every Angular application on the page and provides singleton providers.\n   */\n  get injector(): Injector {\n    return this._injector;\n  }\n\n  /**\n   * Destroys the current Angular platform and all Angular applications on the page.\n   * Destroys all modules and listeners registered with the platform.\n   */\n  destroy() {\n    if (this._destroyed) {\n      throw new Error('The platform has already been destroyed!');\n    }\n    this._modules.slice().forEach(module => module.destroy());\n    this._destroyListeners.forEach(listener => listener());\n    this._destroyed = true;\n  }\n\n  get destroyed() {\n    return this._destroyed;\n  }\n}\n\nfunction getNgZone(\n    ngZoneOption: NgZone|'zone.js'|'noop'|undefined,\n    extra?: {ngZoneEventCoalescing: boolean, ngZoneRunCoalescing: boolean}): NgZone {\n  let ngZone: NgZone;\n\n  if (ngZoneOption === 'noop') {\n    ngZone = new NoopNgZone();\n  } else {\n    ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) || new NgZone({\n               enableLongStackTrace: isDevMode(),\n               shouldCoalesceEventChangeDetection: !!extra?.ngZoneEventCoalescing,\n               shouldCoalesceRunChangeDetection: !!extra?.ngZoneRunCoalescing\n             });\n  }\n  return ngZone;\n}\n\nfunction _callAndReportToErrorHandler(\n    errorHandler: ErrorHandler, ngZone: NgZone, callback: () => any): any {\n  try {\n    const result = callback();\n    if (isPromise(result)) {\n      return result.catch((e: any) => {\n        ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n        // rethrow as the exception handler might not do it\n        throw e;\n      });\n    }\n\n    return result;\n  } catch (e) {\n    ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n    // rethrow as the exception handler might not do it\n    throw e;\n  }\n}\n\nfunction optionsReducer<T extends Object>(dst: any, objs: T|T[]): T {\n  if (Array.isArray(objs)) {\n    dst = objs.reduce(optionsReducer, dst);\n  } else {\n    dst = {...dst, ...(objs as any)};\n  }\n  return dst;\n}\n\n/**\n * A reference to an Angular application running on a page.\n *\n * @usageNotes\n *\n * {@a is-stable-examples}\n * ### isStable examples and caveats\n *\n * Note two important points about `isStable`, demonstrated in the examples below:\n * - the application will never be stable if you start any kind\n * of recurrent asynchronous task when the application starts\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n * or using RxJS operators like `interval`);\n * - the `isStable` Observable runs outside of the Angular zone.\n *\n * Let's imagine that you start a recurrent task\n * (here incrementing a counter, using RxJS `interval`),\n * and at the same time subscribe to `isStable`.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *      filter(stable => stable)\n *   ).subscribe(() => console.log('App is stable now');\n *   interval(1000).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, `isStable` will never emit `true`,\n * and the trace \"App is stable now\" will never get logged.\n *\n * If you want to execute something when the app is stable,\n * you have to wait for the application to be stable\n * before starting your polling process.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     tap(stable => console.log('App is stable now')),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, the trace \"App is stable now\" will be logged\n * and then the counter starts incrementing every second.\n *\n * Note also that this Observable runs outside of the Angular zone,\n * which means that the code in the subscription\n * to this Observable will not trigger the change detection.\n *\n * Let's imagine that instead of logging the counter value,\n * you update a field of your component\n * and display it in its template.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => this.value = counter);\n * }\n * ```\n * As the `isStable` Observable runs outside the zone,\n * the `value` field will be updated properly,\n * but the template will not be refreshed!\n *\n * You'll have to manually trigger the change detection to update the template.\n *\n * ```\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => {\n *     this.value = counter;\n *     cd.detectChanges();\n *   });\n * }\n * ```\n *\n * Or make the subscription callback run inside the zone.\n *\n * ```\n * constructor(appRef: ApplicationRef, zone: NgZone) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => zone.run(() => this.value = counter));\n * }\n * ```\n *\n * @publicApi\n */\n@Injectable()\nexport class ApplicationRef {\n  /** @internal */\n  private _bootstrapListeners: ((compRef: ComponentRef<any>) => void)[] = [];\n  private _views: InternalViewRef[] = [];\n  private _runningTick: boolean = false;\n  private _stable = true;\n  private _onMicrotaskEmptySubscription: Subscription;\n\n  /**\n   * Get a list of component types registered to this application.\n   * This list is populated even before the component is created.\n   */\n  public readonly componentTypes: Type<any>[] = [];\n\n  /**\n   * Get a list of components registered to this application.\n   */\n  public readonly components: ComponentRef<any>[] = [];\n\n  /**\n   * Returns an Observable that indicates when the application is stable or unstable.\n   *\n   * @see  [Usage notes](#is-stable-examples) for examples and caveats when using this API.\n   */\n  // TODO(issue/24571): remove '!'.\n  public readonly isStable!: Observable<boolean>;\n\n  /** @internal */\n  constructor(\n      private _zone: NgZone, private _injector: Injector, private _exceptionHandler: ErrorHandler,\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _initStatus: ApplicationInitStatus) {\n    this._onMicrotaskEmptySubscription = this._zone.onMicrotaskEmpty.subscribe({\n      next: () => {\n        this._zone.run(() => {\n          this.tick();\n        });\n      }\n    });\n\n    const isCurrentlyStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks &&\n          !this._zone.hasPendingMicrotasks;\n      this._zone.runOutsideAngular(() => {\n        observer.next(this._stable);\n        observer.complete();\n      });\n    });\n\n    const isStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      // Create the subscription to onStable outside the Angular Zone so that\n      // the callback is run outside the Angular Zone.\n      let stableSub: Subscription;\n      this._zone.runOutsideAngular(() => {\n        stableSub = this._zone.onStable.subscribe(() => {\n          NgZone.assertNotInAngularZone();\n\n          // Check whether there are no pending macro/micro tasks in the next tick\n          // to allow for NgZone to update the state.\n          scheduleMicroTask(() => {\n            if (!this._stable && !this._zone.hasPendingMacrotasks &&\n                !this._zone.hasPendingMicrotasks) {\n              this._stable = true;\n              observer.next(true);\n            }\n          });\n        });\n      });\n\n      const unstableSub: Subscription = this._zone.onUnstable.subscribe(() => {\n        NgZone.assertInAngularZone();\n        if (this._stable) {\n          this._stable = false;\n          this._zone.runOutsideAngular(() => {\n            observer.next(false);\n          });\n        }\n      });\n\n      return () => {\n        stableSub.unsubscribe();\n        unstableSub.unsubscribe();\n      };\n    });\n\n    (this as {isStable: Observable<boolean>}).isStable =\n        merge(isCurrentlyStable, isStable.pipe(share()));\n  }\n\n  /**\n   * Bootstrap a new component at the root level of the application.\n   *\n   * @usageNotes\n   * ### Bootstrap process\n   *\n   * When bootstrapping a new root component into an application, Angular mounts the\n   * specified application component onto DOM elements identified by the componentType's\n   * selector and kicks off automatic change detection to finish initializing the component.\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * componentType's selector.\n   *\n   * ### Example\n   * {@example core/ts/platform/platform.ts region='longform'}\n   */\n  bootstrap<C>(componentOrFactory: ComponentFactory<C>|Type<C>, rootSelectorOrNode?: string|any):\n      ComponentRef<C> {\n    if (!this._initStatus.done) {\n      throw new Error(\n          'Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n    }\n    let componentFactory: ComponentFactory<C>;\n    if (componentOrFactory instanceof ComponentFactory) {\n      componentFactory = componentOrFactory;\n    } else {\n      componentFactory =\n          this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)!;\n    }\n    this.componentTypes.push(componentFactory.componentType);\n\n    // Create a factory associated with the current module if it's not bound to some other\n    const ngModule =\n        isBoundToModule(componentFactory) ? undefined : this._injector.get(NgModuleRef);\n    const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n    const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n    const nativeElement = compRef.location.nativeElement;\n    const testability = compRef.injector.get(Testability, null);\n    const testabilityRegistry = testability && compRef.injector.get(TestabilityRegistry);\n    if (testability && testabilityRegistry) {\n      testabilityRegistry.registerApplication(nativeElement, testability);\n    }\n\n    compRef.onDestroy(() => {\n      this.detachView(compRef.hostView);\n      remove(this.components, compRef);\n      if (testabilityRegistry) {\n        testabilityRegistry.unregisterApplication(nativeElement);\n      }\n    });\n\n    this._loadComponent(compRef);\n    // Note that we have still left the `isDevMode()` condition in order to avoid\n    // creating a breaking change for projects that still use the View Engine.\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && isDevMode()) {\n      const _console = this._injector.get(Console);\n      _console.log(\n          `Angular is running in development mode. Call enableProdMode() to enable production mode.`);\n    }\n    return compRef;\n  }\n\n  /**\n   * Invoke this method to explicitly process change detection and its side-effects.\n   *\n   * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n   * further changes are detected. If additional changes are picked up during this second cycle,\n   * bindings in the app have side-effects that cannot be resolved in a single change detection\n   * pass.\n   * In this case, Angular throws an error, since an Angular application can only have one change\n   * detection pass during which all change detection must complete.\n   */\n  tick(): void {\n    if (this._runningTick) {\n      throw new Error('ApplicationRef.tick is called recursively');\n    }\n\n    try {\n      this._runningTick = true;\n      for (let view of this._views) {\n        view.detectChanges();\n      }\n      // Note that we have still left the `isDevMode()` condition in order to avoid\n      // creating a breaking change for projects that still use the View Engine.\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && isDevMode()) {\n        for (let view of this._views) {\n          view.checkNoChanges();\n        }\n      }\n    } catch (e) {\n      // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n      this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));\n    } finally {\n      this._runningTick = false;\n    }\n  }\n\n  /**\n   * Attaches a view so that it will be dirty checked.\n   * The view will be automatically detached when it is destroyed.\n   * This will throw if the view is already attached to a ViewContainer.\n   */\n  attachView(viewRef: ViewRef): void {\n    const view = (viewRef as InternalViewRef);\n    this._views.push(view);\n    view.attachToAppRef(this);\n  }\n\n  /**\n   * Detaches a view from dirty checking again.\n   */\n  detachView(viewRef: ViewRef): void {\n    const view = (viewRef as InternalViewRef);\n    remove(this._views, view);\n    view.detachFromAppRef();\n  }\n\n  private _loadComponent(componentRef: ComponentRef<any>): void {\n    this.attachView(componentRef.hostView);\n    this.tick();\n    this.components.push(componentRef);\n    // Get the listeners lazily to prevent DI cycles.\n    const listeners =\n        this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n    listeners.forEach((listener) => listener(componentRef));\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._views.slice().forEach((view) => view.destroy());\n    this._onMicrotaskEmptySubscription.unsubscribe();\n  }\n\n  /**\n   * Returns the number of attached views.\n   */\n  get viewCount() {\n    return this._views.length;\n  }\n}\n\nfunction remove<T>(list: T[], el: T): void {\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n\nfunction _lastDefined<T>(args: T[]): T|undefined {\n  for (let i = args.length - 1; i >= 0; i--) {\n    if (args[i] !== undefined) {\n      return args[i];\n    }\n  }\n  return undefined;\n}\n\nfunction _mergeArrays(parts: any[][]): any[] {\n  const result: any[] = [];\n  parts.forEach((part) => part && result.push(...part));\n  return result;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {global} from './global';\n\n/**\n * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.\n *\n * For more information on how to run and debug tests with either Ivy or View Engine (legacy),\n * please see [BAZEL.md](./docs/BAZEL.md).\n */\n\nlet _devMode: boolean = true;\nlet _runModeLocked: boolean = false;\n\n\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * @publicApi\n */\nexport function isDevMode(): boolean {\n  _runModeLocked = true;\n  return _devMode;\n}\n\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * @publicApi\n */\nexport function enableProdMode(): void {\n  if (_runModeLocked) {\n    throw new Error('Cannot enable prod mode after platform setup.');\n  }\n\n  // The below check is there so when ngDevMode is set via terser\n  // `global['ngDevMode'] = false;` is also dropped.\n  if (typeof ngDevMode === undefined || !!ngDevMode) {\n    global['ngDevMode'] = false;\n  }\n\n  _devMode = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getLocalePluralCase} from './locale_data_api';\n\nconst pluralMapping = ['zero', 'one', 'two', 'few', 'many'];\n\n/**\n * Returns the plural case based on the locale\n */\nexport function getPluralCase(value: string, locale: string): string {\n  const plural = getLocalePluralCase(locale)(parseInt(value, 10));\n  const result = pluralMapping[plural];\n  return (result !== undefined) ? result : 'other';\n}\n\n/**\n * The locale id that the application is using by default (for translations and ICU expressions).\n */\nexport const DEFAULT_LOCALE_ID = 'en-US';\n\n/**\n * USD currency code that the application uses by default for CurrencyPipe when no\n * DEFAULT_CURRENCY_CODE is provided.\n */\nexport const USD_CURRENCY_CODE = 'USD';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModuleType} from '../metadata/ng_module_def';\nimport {NgModuleFactory as R3NgModuleFactory} from '../render3/ng_module_ref';\n\nimport {NgModuleFactory} from './ng_module_factory';\nimport {getRegisteredNgModuleType} from './ng_module_factory_registration';\n\n\n/**\n * Used to load ng module factories.\n *\n * @publicApi\n * @deprecated the `string` form of `loadChildren` is deprecated, and `NgModuleFactoryLoader` is\n * part of its implementation. See `LoadChildren` for more details.\n */\nexport abstract class NgModuleFactoryLoader {\n  abstract load(path: string): Promise<NgModuleFactory<any>>;\n}\n\nexport function getModuleFactory__PRE_R3__(id: string): NgModuleFactory<any> {\n  const factory = getRegisteredNgModuleType(id) as NgModuleFactory<any>| null;\n  if (!factory) throw noModuleError(id);\n  return factory;\n}\n\nexport function getModuleFactory__POST_R3__(id: string): NgModuleFactory<any> {\n  const type = getRegisteredNgModuleType(id) as NgModuleType | null;\n  if (!type) throw noModuleError(id);\n  return new R3NgModuleFactory(type);\n}\n\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * @publicApi\n */\nexport const getModuleFactory: (id: string) => NgModuleFactory<any> = getModuleFactory__PRE_R3__;\n\nfunction noModuleError(\n    id: string,\n    ): Error {\n  return new Error(`No module with ID ${id} loaded`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional} from '../di';\nimport {ivyEnabled} from '../ivy_switch';\n\nimport {Compiler} from './compiler';\nimport {NgModuleFactory} from './ng_module_factory';\nimport {NgModuleFactoryLoader} from './ng_module_factory_loader';\n\nconst _SEPARATOR = '#';\n\nconst FACTORY_CLASS_SUFFIX = 'NgFactory';\ndeclare var System: any;\n\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * @publicApi\n * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoaderConfig`\n * is part of its implementation. See `LoadChildren` for more details.\n */\nexport abstract class SystemJsNgModuleLoaderConfig {\n  /**\n   * Prefix to add when computing the name of the factory module for a given module name.\n   */\n  // TODO(issue/24571): remove '!'.\n  factoryPathPrefix!: string;\n\n  /**\n   * Suffix to add when computing the name of the factory module for a given module name.\n   */\n  // TODO(issue/24571): remove '!'.\n  factoryPathSuffix!: string;\n}\n\nconst DEFAULT_CONFIG: SystemJsNgModuleLoaderConfig = {\n  factoryPathPrefix: '',\n  factoryPathSuffix: '.ngfactory',\n};\n\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * @publicApi\n * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoader` is\n * part of its implementation. See `LoadChildren` for more details.\n */\n@Injectable()\nexport class SystemJsNgModuleLoader implements NgModuleFactoryLoader {\n  private _config: SystemJsNgModuleLoaderConfig;\n\n  constructor(private _compiler: Compiler, @Optional() config?: SystemJsNgModuleLoaderConfig) {\n    this._config = config || DEFAULT_CONFIG;\n  }\n\n  load(path: string): Promise<NgModuleFactory<any>> {\n    const legacyOfflineMode = !ivyEnabled && this._compiler instanceof Compiler;\n    return legacyOfflineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n  }\n\n  private loadAndCompile(path: string): Promise<NgModuleFactory<any>> {\n    let [module, exportName] = path.split(_SEPARATOR);\n    if (exportName === undefined) {\n      exportName = 'default';\n    }\n\n    return System.import(module)\n        .then((module: any) => module[exportName])\n        .then((type: any) => checkNotEmpty(type, module, exportName))\n        .then((type: any) => this._compiler.compileModuleAsync(type));\n  }\n\n  private loadFactory(path: string): Promise<NgModuleFactory<any>> {\n    let [module, exportName] = path.split(_SEPARATOR);\n    let factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n    if (exportName === undefined) {\n      exportName = 'default';\n      factoryClassSuffix = '';\n    }\n\n    return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n        .then((module: any) => module[exportName + factoryClassSuffix])\n        .then((factory: any) => checkNotEmpty(factory, module, exportName));\n  }\n}\n\nfunction checkNotEmpty(value: any, modulePath: string, exportName: string): any {\n  if (!value) {\n    throw new Error(`Cannot find '${exportName}' in '${modulePath}'`);\n  }\n  return value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {assertTNodeForLView} from '../render3/assert';\nimport {CONTAINER_HEADER_OFFSET, LContainer, NATIVE} from '../render3/interfaces/container';\nimport {TElementNode, TNode, TNodeFlags, TNodeType} from '../render3/interfaces/node';\nimport {isComponentHost, isLContainer} from '../render3/interfaces/type_checks';\nimport {DECLARATION_COMPONENT_VIEW, LView, PARENT, T_HOST, TData, TVIEW} from '../render3/interfaces/view';\nimport {getComponent, getContext, getInjectionTokens, getInjector, getListeners, getLocalRefs, getOwningComponent, loadLContext} from '../render3/util/discovery_utils';\nimport {INTERPOLATION_DELIMITER} from '../render3/util/misc_utils';\nimport {renderStringify} from '../render3/util/stringify_utils';\nimport {getComponentLViewByIndex, getNativeByTNodeOrNull} from '../render3/util/view_utils';\nimport {assertDomNode} from '../util/assert';\nimport {DebugContext} from '../view/types';\n\n\n/**\n * @publicApi\n */\nexport class DebugEventListener {\n  constructor(public name: string, public callback: Function) {}\n}\n\n/**\n * @publicApi\n */\nexport interface DebugNode {\n  readonly listeners: DebugEventListener[];\n  readonly parent: DebugElement|null;\n  readonly nativeNode: any;\n  readonly injector: Injector;\n  readonly componentInstance: any;\n  readonly context: any;\n  readonly references: {[key: string]: any};\n  readonly providerTokens: any[];\n}\nexport class DebugNode__PRE_R3__ {\n  readonly listeners: DebugEventListener[] = [];\n  readonly parent: DebugElement|null = null;\n  readonly nativeNode: any;\n  private readonly _debugContext: DebugContext;\n\n  constructor(nativeNode: any, parent: DebugNode|null, _debugContext: DebugContext) {\n    this._debugContext = _debugContext;\n    this.nativeNode = nativeNode;\n    if (parent && parent instanceof DebugElement__PRE_R3__) {\n      parent.addChild(this);\n    }\n  }\n\n  get injector(): Injector {\n    return this._debugContext.injector;\n  }\n\n  get componentInstance(): any {\n    return this._debugContext.component;\n  }\n\n  get context(): any {\n    return this._debugContext.context;\n  }\n\n  get references(): {[key: string]: any} {\n    return this._debugContext.references;\n  }\n\n  get providerTokens(): any[] {\n    return this._debugContext.providerTokens;\n  }\n}\n\n/**\n * @publicApi\n */\nexport interface DebugElement extends DebugNode {\n  readonly name: string;\n  readonly properties: {[key: string]: any};\n  readonly attributes: {[key: string]: string|null};\n  readonly classes: {[key: string]: boolean};\n  readonly styles: {[key: string]: string|null};\n  readonly childNodes: DebugNode[];\n  readonly nativeElement: any;\n  readonly children: DebugElement[];\n\n  query(predicate: Predicate<DebugElement>): DebugElement;\n  queryAll(predicate: Predicate<DebugElement>): DebugElement[];\n  queryAllNodes(predicate: Predicate<DebugNode>): DebugNode[];\n  triggerEventHandler(eventName: string, eventObj: any): void;\n}\nexport class DebugElement__PRE_R3__ extends DebugNode__PRE_R3__ implements DebugElement {\n  readonly name!: string;\n  readonly properties: {[key: string]: any} = {};\n  readonly attributes: {[key: string]: string|null} = {};\n  readonly classes: {[key: string]: boolean} = {};\n  readonly styles: {[key: string]: string|null} = {};\n  readonly childNodes: DebugNode[] = [];\n  readonly nativeElement: any;\n\n  constructor(nativeNode: any, parent: any, _debugContext: DebugContext) {\n    super(nativeNode, parent, _debugContext);\n    this.nativeElement = nativeNode;\n  }\n\n  addChild(child: DebugNode) {\n    if (child) {\n      this.childNodes.push(child);\n      (child as {parent: DebugNode}).parent = this;\n    }\n  }\n\n  removeChild(child: DebugNode) {\n    const childIndex = this.childNodes.indexOf(child);\n    if (childIndex !== -1) {\n      (child as {parent: DebugNode | null}).parent = null;\n      this.childNodes.splice(childIndex, 1);\n    }\n  }\n\n  insertChildrenAfter(child: DebugNode, newChildren: DebugNode[]) {\n    const siblingIndex = this.childNodes.indexOf(child);\n    if (siblingIndex !== -1) {\n      this.childNodes.splice(siblingIndex + 1, 0, ...newChildren);\n      newChildren.forEach(c => {\n        if (c.parent) {\n          (c.parent as DebugElement__PRE_R3__).removeChild(c);\n        }\n        (child as {parent: DebugNode}).parent = this;\n      });\n    }\n  }\n\n  insertBefore(refChild: DebugNode, newChild: DebugNode): void {\n    const refIndex = this.childNodes.indexOf(refChild);\n    if (refIndex === -1) {\n      this.addChild(newChild);\n    } else {\n      if (newChild.parent) {\n        (newChild.parent as DebugElement__PRE_R3__).removeChild(newChild);\n      }\n      (newChild as {parent: DebugNode}).parent = this;\n      this.childNodes.splice(refIndex, 0, newChild);\n    }\n  }\n\n  query(predicate: Predicate<DebugElement>): DebugElement {\n    const results = this.queryAll(predicate);\n    return results[0] || null;\n  }\n\n  queryAll(predicate: Predicate<DebugElement>): DebugElement[] {\n    const matches: DebugElement[] = [];\n    _queryElementChildren(this, predicate, matches);\n    return matches;\n  }\n\n  queryAllNodes(predicate: Predicate<DebugNode>): DebugNode[] {\n    const matches: DebugNode[] = [];\n    _queryNodeChildren(this, predicate, matches);\n    return matches;\n  }\n\n  get children(): DebugElement[] {\n    return this.childNodes  //\n               .filter((node) => node instanceof DebugElement__PRE_R3__) as DebugElement[];\n  }\n\n  triggerEventHandler(eventName: string, eventObj: any) {\n    this.listeners.forEach((listener) => {\n      if (listener.name == eventName) {\n        listener.callback(eventObj);\n      }\n    });\n  }\n}\n\n/**\n * @publicApi\n */\nexport function asNativeElements(debugEls: DebugElement[]): any {\n  return debugEls.map((el) => el.nativeElement);\n}\n\nfunction _queryElementChildren(\n    element: DebugElement, predicate: Predicate<DebugElement>, matches: DebugElement[]) {\n  element.childNodes.forEach(node => {\n    if (node instanceof DebugElement__PRE_R3__) {\n      if (predicate(node)) {\n        matches.push(node);\n      }\n      _queryElementChildren(node, predicate, matches);\n    }\n  });\n}\n\nfunction _queryNodeChildren(\n    parentNode: DebugNode, predicate: Predicate<DebugNode>, matches: DebugNode[]) {\n  if (parentNode instanceof DebugElement__PRE_R3__) {\n    parentNode.childNodes.forEach(node => {\n      if (predicate(node)) {\n        matches.push(node);\n      }\n      if (node instanceof DebugElement__PRE_R3__) {\n        _queryNodeChildren(node, predicate, matches);\n      }\n    });\n  }\n}\n\nclass DebugNode__POST_R3__ implements DebugNode {\n  readonly nativeNode: Node;\n\n  constructor(nativeNode: Node) {\n    this.nativeNode = nativeNode;\n  }\n\n  get parent(): DebugElement|null {\n    const parent = this.nativeNode.parentNode as Element;\n    return parent ? new DebugElement__POST_R3__(parent) : null;\n  }\n\n  get injector(): Injector {\n    return getInjector(this.nativeNode);\n  }\n\n  get componentInstance(): any {\n    const nativeElement = this.nativeNode;\n    return nativeElement &&\n        (getComponent(nativeElement as Element) || getOwningComponent(nativeElement));\n  }\n  get context(): any {\n    return getComponent(this.nativeNode as Element) || getContext(this.nativeNode as Element);\n  }\n\n  get listeners(): DebugEventListener[] {\n    return getListeners(this.nativeNode as Element).filter(listener => listener.type === 'dom');\n  }\n\n  get references(): {[key: string]: any;} {\n    return getLocalRefs(this.nativeNode);\n  }\n\n  get providerTokens(): any[] {\n    return getInjectionTokens(this.nativeNode as Element);\n  }\n}\n\nclass DebugElement__POST_R3__ extends DebugNode__POST_R3__ implements DebugElement {\n  constructor(nativeNode: Element) {\n    ngDevMode && assertDomNode(nativeNode);\n    super(nativeNode);\n  }\n\n  get nativeElement(): Element|null {\n    return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode as Element : null;\n  }\n\n  get name(): string {\n    try {\n      const context = loadLContext(this.nativeNode)!;\n      const lView = context.lView;\n      const tData = lView[TVIEW].data;\n      const tNode = tData[context.nodeIndex] as TNode;\n      return tNode.value!;\n    } catch (e) {\n      return this.nativeNode.nodeName;\n    }\n  }\n\n  /**\n   *  Gets a map of property names to property values for an element.\n   *\n   *  This map includes:\n   *  - Regular property bindings (e.g. `[id]=\"id\"`)\n   *  - Host property bindings (e.g. `host: { '[id]': \"id\" }`)\n   *  - Interpolated property bindings (e.g. `id=\"{{ value }}\")\n   *\n   *  It does not include:\n   *  - input property bindings (e.g. `[myCustomInput]=\"value\"`)\n   *  - attribute bindings (e.g. `[attr.role]=\"menu\"`)\n   */\n  get properties(): {[key: string]: any;} {\n    const context = loadLContext(this.nativeNode, false);\n    if (context == null) {\n      return {};\n    }\n\n    const lView = context.lView;\n    const tData = lView[TVIEW].data;\n    const tNode = tData[context.nodeIndex] as TNode;\n\n    const properties: {[key: string]: string} = {};\n    // Collect properties from the DOM.\n    copyDomProperties(this.nativeElement, properties);\n    // Collect properties from the bindings. This is needed for animation renderer which has\n    // synthetic properties which don't get reflected into the DOM.\n    collectPropertyBindings(properties, tNode, lView, tData);\n    return properties;\n  }\n\n  get attributes(): {[key: string]: string|null;} {\n    const attributes: {[key: string]: string|null;} = {};\n    const element = this.nativeElement;\n\n    if (!element) {\n      return attributes;\n    }\n\n    const context = loadLContext(element, false);\n    if (context == null) {\n      return {};\n    }\n\n    const lView = context.lView;\n    const tNodeAttrs = (lView[TVIEW].data[context.nodeIndex] as TNode).attrs;\n    const lowercaseTNodeAttrs: string[] = [];\n\n    // For debug nodes we take the element's attribute directly from the DOM since it allows us\n    // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones\n    // that are set through `Renderer2`). The problem is that the browser will lowercase all names,\n    // however since we have the attributes already on the TNode, we can preserve the case by going\n    // through them once, adding them to the `attributes` map and putting their lower-cased name\n    // into an array. Afterwards when we're going through the native DOM attributes, we can check\n    // whether we haven't run into an attribute already through the TNode.\n    if (tNodeAttrs) {\n      let i = 0;\n      while (i < tNodeAttrs.length) {\n        const attrName = tNodeAttrs[i];\n\n        // Stop as soon as we hit a marker. We only care about the regular attributes. Everything\n        // else will be handled below when we read the final attributes off the DOM.\n        if (typeof attrName !== 'string') break;\n\n        const attrValue = tNodeAttrs[i + 1];\n        attributes[attrName] = attrValue as string;\n        lowercaseTNodeAttrs.push(attrName.toLowerCase());\n\n        i += 2;\n      }\n    }\n\n    const eAttrs = element.attributes;\n    for (let i = 0; i < eAttrs.length; i++) {\n      const attr = eAttrs[i];\n      const lowercaseName = attr.name.toLowerCase();\n\n      // Make sure that we don't assign the same attribute both in its\n      // case-sensitive form and the lower-cased one from the browser.\n      if (lowercaseTNodeAttrs.indexOf(lowercaseName) === -1) {\n        // Save the lowercase name to align the behavior between browsers.\n        // IE preserves the case, while all other browser convert it to lower case.\n        attributes[lowercaseName] = attr.value;\n      }\n    }\n\n    return attributes;\n  }\n\n  get styles(): {[key: string]: string|null} {\n    if (this.nativeElement && (this.nativeElement as HTMLElement).style) {\n      return (this.nativeElement as HTMLElement).style as {[key: string]: any};\n    }\n    return {};\n  }\n\n  get classes(): {[key: string]: boolean;} {\n    const result: {[key: string]: boolean;} = {};\n    const element = this.nativeElement as HTMLElement | SVGElement;\n\n    // SVG elements return an `SVGAnimatedString` instead of a plain string for the `className`.\n    const className = element.className as string | SVGAnimatedString;\n    const classes = className && typeof className !== 'string' ? className.baseVal.split(' ') :\n                                                                 className.split(' ');\n\n    classes.forEach((value: string) => result[value] = true);\n\n    return result;\n  }\n\n  get childNodes(): DebugNode[] {\n    const childNodes = this.nativeNode.childNodes;\n    const children: DebugNode[] = [];\n    for (let i = 0; i < childNodes.length; i++) {\n      const element = childNodes[i];\n      children.push(getDebugNode__POST_R3__(element));\n    }\n    return children;\n  }\n\n  get children(): DebugElement[] {\n    const nativeElement = this.nativeElement;\n    if (!nativeElement) return [];\n    const childNodes = nativeElement.children;\n    const children: DebugElement[] = [];\n    for (let i = 0; i < childNodes.length; i++) {\n      const element = childNodes[i];\n      children.push(getDebugNode__POST_R3__(element));\n    }\n    return children;\n  }\n\n  query(predicate: Predicate<DebugElement>): DebugElement {\n    const results = this.queryAll(predicate);\n    return results[0] || null;\n  }\n\n  queryAll(predicate: Predicate<DebugElement>): DebugElement[] {\n    const matches: DebugElement[] = [];\n    _queryAllR3(this, predicate, matches, true);\n    return matches;\n  }\n\n  queryAllNodes(predicate: Predicate<DebugNode>): DebugNode[] {\n    const matches: DebugNode[] = [];\n    _queryAllR3(this, predicate, matches, false);\n    return matches;\n  }\n\n  triggerEventHandler(eventName: string, eventObj: any): void {\n    const node = this.nativeNode as any;\n    const invokedListeners: Function[] = [];\n\n    this.listeners.forEach(listener => {\n      if (listener.name === eventName) {\n        const callback = listener.callback;\n        callback.call(node, eventObj);\n        invokedListeners.push(callback);\n      }\n    });\n\n    // We need to check whether `eventListeners` exists, because it's something\n    // that Zone.js only adds to `EventTarget` in browser environments.\n    if (typeof node.eventListeners === 'function') {\n      // Note that in Ivy we wrap event listeners with a call to `event.preventDefault` in some\n      // cases. We use '__ngUnwrap__' as a special token that gives us access to the actual event\n      // listener.\n      node.eventListeners(eventName).forEach((listener: Function) => {\n        // In order to ensure that we can detect the special __ngUnwrap__ token described above, we\n        // use `toString` on the listener and see if it contains the token. We use this approach to\n        // ensure that it still worked with compiled code since it cannot remove or rename string\n        // literals. We also considered using a special function name (i.e. if(listener.name ===\n        // special)) but that was more cumbersome and we were also concerned the compiled code could\n        // strip the name, turning the condition in to (\"\" === \"\") and always returning true.\n        if (listener.toString().indexOf('__ngUnwrap__') !== -1) {\n          const unwrappedListener = listener('__ngUnwrap__');\n          return invokedListeners.indexOf(unwrappedListener) === -1 &&\n              unwrappedListener.call(node, eventObj);\n        }\n      });\n    }\n  }\n}\n\nfunction copyDomProperties(element: Element|null, properties: {[name: string]: string}): void {\n  if (element) {\n    // Skip own properties (as those are patched)\n    let obj = Object.getPrototypeOf(element);\n    const NodePrototype: any = Node.prototype;\n    while (obj !== null && obj !== NodePrototype) {\n      const descriptors = Object.getOwnPropertyDescriptors(obj);\n      for (let key in descriptors) {\n        if (!key.startsWith('__') && !key.startsWith('on')) {\n          // don't include properties starting with `__` and `on`.\n          // `__` are patched values which should not be included.\n          // `on` are listeners which also should not be included.\n          const value = (element as any)[key];\n          if (isPrimitiveValue(value)) {\n            properties[key] = value;\n          }\n        }\n      }\n      obj = Object.getPrototypeOf(obj);\n    }\n  }\n}\n\nfunction isPrimitiveValue(value: any): boolean {\n  return typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number' ||\n      value === null;\n}\n\n/**\n * Walk the TNode tree to find matches for the predicate.\n *\n * @param parentElement the element from which the walk is started\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n */\nfunction _queryAllR3(\n    parentElement: DebugElement, predicate: Predicate<DebugElement>, matches: DebugElement[],\n    elementsOnly: true): void;\nfunction _queryAllR3(\n    parentElement: DebugElement, predicate: Predicate<DebugNode>, matches: DebugNode[],\n    elementsOnly: false): void;\nfunction _queryAllR3(\n    parentElement: DebugElement, predicate: Predicate<DebugElement>|Predicate<DebugNode>,\n    matches: DebugElement[]|DebugNode[], elementsOnly: boolean) {\n  const context = loadLContext(parentElement.nativeNode, false);\n  if (context !== null) {\n    const parentTNode = context.lView[TVIEW].data[context.nodeIndex] as TNode;\n    _queryNodeChildrenR3(\n        parentTNode, context.lView, predicate, matches, elementsOnly, parentElement.nativeNode);\n  } else {\n    // If the context is null, then `parentElement` was either created with Renderer2 or native DOM\n    // APIs.\n    _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);\n  }\n}\n\n/**\n * Recursively match the current TNode against the predicate, and goes on with the next ones.\n *\n * @param tNode the current TNode\n * @param lView the LView of this TNode\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _queryNodeChildrenR3(\n    tNode: TNode, lView: LView, predicate: Predicate<DebugElement>|Predicate<DebugNode>,\n    matches: DebugElement[]|DebugNode[], elementsOnly: boolean, rootNativeNode: any) {\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  const nativeNode = getNativeByTNodeOrNull(tNode, lView);\n  // For each type of TNode, specific logic is executed.\n  if (tNode.type & (TNodeType.AnyRNode | TNodeType.ElementContainer)) {\n    // Case 1: the TNode is an element\n    // The native node has to be checked.\n    _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n    if (isComponentHost(tNode)) {\n      // If the element is the host of a component, then all nodes in its view have to be processed.\n      // Note: the component's content (tNode.child) will be processed from the insertion points.\n      const componentView = getComponentLViewByIndex(tNode.index, lView);\n      if (componentView && componentView[TVIEW].firstChild) {\n        _queryNodeChildrenR3(\n            componentView[TVIEW].firstChild!, componentView, predicate, matches, elementsOnly,\n            rootNativeNode);\n      }\n    } else {\n      if (tNode.child) {\n        // Otherwise, its children have to be processed.\n        _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n      }\n\n      // We also have to query the DOM directly in order to catch elements inserted through\n      // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple\n      // times. ViewEngine could do it more efficiently, because all the insertions go through\n      // Renderer2, however that's not the case in Ivy. This approach is being used because:\n      // 1. Matching the ViewEngine behavior would mean potentially introducing a depedency\n      //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.\n      // 2. We would have to make `Renderer3` \"know\" about debug nodes.\n      // 3. It allows us to capture nodes that were inserted directly via the DOM.\n      nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);\n    }\n    // In all cases, if a dynamic container exists for this node, each view inside it has to be\n    // processed.\n    const nodeOrContainer = lView[tNode.index];\n    if (isLContainer(nodeOrContainer)) {\n      _queryNodeChildrenInContainerR3(\n          nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  } else if (tNode.type & TNodeType.Container) {\n    // Case 2: the TNode is a container\n    // The native node has to be checked.\n    const lContainer = lView[tNode.index];\n    _addQueryMatchR3(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);\n    // Each view inside the container has to be processed.\n    _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode);\n  } else if (tNode.type & TNodeType.Projection) {\n    // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).\n    // The nodes projected at this location all need to be processed.\n    const componentView = lView![DECLARATION_COMPONENT_VIEW];\n    const componentHost = componentView[T_HOST] as TElementNode;\n    const head: TNode|null =\n        (componentHost.projection as (TNode | null)[])[tNode.projection as number];\n\n    if (Array.isArray(head)) {\n      for (let nativeNode of head) {\n        _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n      }\n    } else if (head) {\n      const nextLView = componentView[PARENT]! as LView;\n      const nextTNode = nextLView[TVIEW].data[head.index] as TNode;\n      _queryNodeChildrenR3(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  } else if (tNode.child) {\n    // Case 4: the TNode is a view.\n    _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n  }\n\n  // We don't want to go to the next sibling of the root node.\n  if (rootNativeNode !== nativeNode) {\n    // To determine the next node to be processed, we need to use the next or the projectionNext\n    // link, depending on whether the current node has been projected.\n    const nextTNode = (tNode.flags & TNodeFlags.isProjected) ? tNode.projectionNext : tNode.next;\n    if (nextTNode) {\n      _queryNodeChildrenR3(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  }\n}\n\n/**\n * Process all TNodes in a given container.\n *\n * @param lContainer the container to be processed\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _queryNodeChildrenInContainerR3(\n    lContainer: LContainer, predicate: Predicate<DebugElement>|Predicate<DebugNode>,\n    matches: DebugElement[]|DebugNode[], elementsOnly: boolean, rootNativeNode: any) {\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const childView = lContainer[i] as LView;\n    const firstChild = childView[TVIEW].firstChild;\n    if (firstChild) {\n      _queryNodeChildrenR3(firstChild, childView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  }\n}\n\n/**\n * Match the current native node against the predicate.\n *\n * @param nativeNode the current native node\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _addQueryMatchR3(\n    nativeNode: any, predicate: Predicate<DebugElement>|Predicate<DebugNode>,\n    matches: DebugElement[]|DebugNode[], elementsOnly: boolean, rootNativeNode: any) {\n  if (rootNativeNode !== nativeNode) {\n    const debugNode = getDebugNode(nativeNode);\n    if (!debugNode) {\n      return;\n    }\n    // Type of the \"predicate and \"matches\" array are set based on the value of\n    // the \"elementsOnly\" parameter. TypeScript is not able to properly infer these\n    // types with generics, so we manually cast the parameters accordingly.\n    if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) &&\n        matches.indexOf(debugNode) === -1) {\n      matches.push(debugNode);\n    } else if (\n        !elementsOnly && (predicate as Predicate<DebugNode>)(debugNode) &&\n        (matches as DebugNode[]).indexOf(debugNode) === -1) {\n      (matches as DebugNode[]).push(debugNode);\n    }\n  }\n}\n\n/**\n * Match all the descendants of a DOM node against a predicate.\n *\n * @param nativeNode the current native node\n * @param predicate the predicate to match\n * @param matches the list where matches are stored\n * @param elementsOnly whether only elements should be searched\n */\nfunction _queryNativeNodeDescendants(\n    parentNode: any, predicate: Predicate<DebugElement>|Predicate<DebugNode>,\n    matches: DebugElement[]|DebugNode[], elementsOnly: boolean) {\n  const nodes = parentNode.childNodes;\n  const length = nodes.length;\n\n  for (let i = 0; i < length; i++) {\n    const node = nodes[i];\n    const debugNode = getDebugNode(node);\n\n    if (debugNode) {\n      if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) &&\n          matches.indexOf(debugNode) === -1) {\n        matches.push(debugNode);\n      } else if (\n          !elementsOnly && (predicate as Predicate<DebugNode>)(debugNode) &&\n          (matches as DebugNode[]).indexOf(debugNode) === -1) {\n        (matches as DebugNode[]).push(debugNode);\n      }\n\n      _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);\n    }\n  }\n}\n\n/**\n * Iterates through the property bindings for a given node and generates\n * a map of property names to values. This map only contains property bindings\n * defined in templates, not in host bindings.\n */\nfunction collectPropertyBindings(\n    properties: {[key: string]: string}, tNode: TNode, lView: LView, tData: TData): void {\n  let bindingIndexes = tNode.propertyBindings;\n\n  if (bindingIndexes !== null) {\n    for (let i = 0; i < bindingIndexes.length; i++) {\n      const bindingIndex = bindingIndexes[i];\n      const propMetadata = tData[bindingIndex] as string;\n      const metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);\n      const propertyName = metadataParts[0];\n      if (metadataParts.length > 1) {\n        let value = metadataParts[1];\n        for (let j = 1; j < metadataParts.length - 1; j++) {\n          value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];\n        }\n        properties[propertyName] = value;\n      } else {\n        properties[propertyName] = lView[bindingIndex];\n      }\n    }\n  }\n}\n\n\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\nconst _nativeNodeToDebugNode = new Map<any, DebugNode>();\n\nfunction getDebugNode__PRE_R3__(nativeNode: any): DebugNode|null {\n  return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\n\nconst NG_DEBUG_PROPERTY = '__ng_debug__';\n\nexport function getDebugNode__POST_R3__(nativeNode: Element): DebugElement__POST_R3__;\nexport function getDebugNode__POST_R3__(nativeNode: Node): DebugNode__POST_R3__;\nexport function getDebugNode__POST_R3__(nativeNode: null): null;\nexport function getDebugNode__POST_R3__(nativeNode: any): DebugNode|null {\n  if (nativeNode instanceof Node) {\n    if (!(nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY))) {\n      (nativeNode as any)[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ?\n          new DebugElement__POST_R3__(nativeNode as Element) :\n          new DebugNode__POST_R3__(nativeNode);\n    }\n    return (nativeNode as any)[NG_DEBUG_PROPERTY];\n  }\n  return null;\n}\n\n/**\n * @publicApi\n */\nexport const getDebugNode: (nativeNode: any) => DebugNode | null = getDebugNode__PRE_R3__;\n\n\nexport function getDebugNodeR2__PRE_R3__(nativeNode: any): DebugNode|null {\n  return getDebugNode__PRE_R3__(nativeNode);\n}\n\nexport function getDebugNodeR2__POST_R3__(_nativeNode: any): DebugNode|null {\n  return null;\n}\n\nexport const getDebugNodeR2: (nativeNode: any) => DebugNode | null = getDebugNodeR2__PRE_R3__;\n\n\nexport function getAllDebugNodes(): DebugNode[] {\n  return Array.from(_nativeNodeToDebugNode.values());\n}\n\nexport function indexDebugNode(node: DebugNode) {\n  _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\n\nexport function removeDebugNodeFromIndex(node: DebugNode) {\n  _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n *\n * @publicApi\n */\nexport interface Predicate<T> {\n  (value: T): boolean;\n}\n\n/**\n * @publicApi\n */\nexport const DebugNode: {new (...args: any[]): DebugNode} = DebugNode__PRE_R3__;\n\n/**\n * @publicApi\n */\nexport const DebugElement: {new (...args: any[]): DebugElement} = DebugElement__PRE_R3__;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {createPlatformFactory, PlatformRef} from './application_ref';\nimport {PLATFORM_ID} from './application_tokens';\nimport {Console} from './console';\nimport {Injector, StaticProvider} from './di';\nimport {TestabilityRegistry} from './testability/testability';\n\nconst _CORE_PLATFORM_PROVIDERS: StaticProvider[] = [\n  // Set a default platform name for platforms that don't set it explicitly.\n  {provide: PLATFORM_ID, useValue: 'unknown'},\n  {provide: PlatformRef, deps: [Injector]},\n  {provide: TestabilityRegistry, deps: []},\n  {provide: Console, deps: []},\n];\n\n/**\n * This platform has to be included in any other platform\n *\n * @publicApi\n */\nexport const platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_INITIALIZER, ApplicationInitStatus} from './application_init';\nimport {ApplicationRef} from './application_ref';\nimport {APP_ID_RANDOM_PROVIDER} from './application_tokens';\nimport {defaultIterableDiffers, defaultKeyValueDiffers, IterableDiffers, KeyValueDiffers} from './change_detection/change_detection';\nimport {Injector, StaticProvider} from './di';\nimport {Inject, Optional, SkipSelf} from './di/metadata';\nimport {ErrorHandler} from './error_handler';\nimport {DEFAULT_LOCALE_ID, USD_CURRENCY_CODE} from './i18n/localization';\nimport {DEFAULT_CURRENCY_CODE, LOCALE_ID} from './i18n/tokens';\nimport {ivyEnabled} from './ivy_switch';\nimport {ComponentFactoryResolver} from './linker';\nimport {Compiler} from './linker/compiler';\nimport {NgModule} from './metadata';\nimport {SCHEDULER} from './render3/component_ref';\nimport {setLocaleId} from './render3/i18n/i18n_locale_id';\nimport {NgZone} from './zone';\n\ndeclare const $localize: {locale?: string};\n\nexport function _iterableDiffersFactory() {\n  return defaultIterableDiffers;\n}\n\nexport function _keyValueDiffersFactory() {\n  return defaultKeyValueDiffers;\n}\n\nexport function _localeFactory(locale?: string): string {\n  locale = locale || getGlobalLocale();\n  if (ivyEnabled) {\n    setLocaleId(locale);\n  }\n  return locale;\n}\n\n/**\n * Work out the locale from the potential global properties.\n *\n * * Closure Compiler: use `goog.LOCALE`.\n * * Ivy enabled: use `$localize.locale`\n */\nexport function getGlobalLocale(): string {\n  if (typeof ngI18nClosureMode !== 'undefined' && ngI18nClosureMode &&\n      typeof goog !== 'undefined' && goog.LOCALE !== 'en') {\n    // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.\n    // * In order to preserve backwards compatibility, we use Angular default value over\n    //   Closure Compiler's one.\n    return goog.LOCALE;\n  } else {\n    // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE\n    // COMPILE-TIME INLINER.\n    //\n    // * During compile time inlining of translations the expression will be replaced\n    //   with a string literal that is the current locale. Other forms of this expression are not\n    //   guaranteed to be replaced.\n    //\n    // * During runtime translation evaluation, the developer is required to set `$localize.locale`\n    //   if required, or just to provide their own `LOCALE_ID` provider.\n    return (ivyEnabled && typeof $localize !== 'undefined' && $localize.locale) ||\n        DEFAULT_LOCALE_ID;\n  }\n}\n\n/**\n * A built-in [dependency injection token](guide/glossary#di-token)\n * that is used to configure the root injector for bootstrapping.\n */\nexport const APPLICATION_MODULE_PROVIDERS: StaticProvider[] = [\n  {\n    provide: ApplicationRef,\n    useClass: ApplicationRef,\n    deps: [NgZone, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n  },\n  {provide: SCHEDULER, deps: [NgZone], useFactory: zoneSchedulerFactory},\n  {\n    provide: ApplicationInitStatus,\n    useClass: ApplicationInitStatus,\n    deps: [[new Optional(), APP_INITIALIZER]]\n  },\n  {provide: Compiler, useClass: Compiler, deps: []},\n  APP_ID_RANDOM_PROVIDER,\n  {provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: []},\n  {provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: []},\n  {\n    provide: LOCALE_ID,\n    useFactory: _localeFactory,\n    deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n  },\n  {provide: DEFAULT_CURRENCY_CODE, useValue: USD_CURRENCY_CODE},\n];\n\n/**\n * Schedule work at next available slot.\n *\n * In Ivy this is just `requestAnimationFrame`. For compatibility reasons when bootstrapped\n * using `platformRef.bootstrap` we need to use `NgZone.onStable` as the scheduling mechanism.\n * This overrides the scheduling mechanism in Ivy to `NgZone.onStable`.\n *\n * @param ngZone NgZone to use for scheduling.\n */\nexport function zoneSchedulerFactory(ngZone: NgZone): (fn: () => void) => void {\n  let queue: (() => void)[] = [];\n  ngZone.onStable.subscribe(() => {\n    while (queue.length) {\n      queue.pop()!();\n    }\n  });\n  return function(fn: () => void) {\n    queue.push(fn);\n  };\n}\n\n/**\n * Configures the root injector for an app with\n * providers of `@angular/core` dependencies that `ApplicationRef` needs\n * to bootstrap components.\n *\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * @publicApi\n */\n@NgModule({providers: APPLICATION_MODULE_PROVIDERS})\nexport class ApplicationModule {\n  // Inject ApplicationRef to make it eager...\n  constructor(appRef: ApplicationRef) {}\n}\n","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, public outerValue: T, public outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Subscriber } from '../Subscriber';\nimport { subscribeTo } from './subscribeTo';\nimport { Observable } from '../Observable';\n\nexport function subscribeToResult<T, R>(\n  outerSubscriber: OuterSubscriber<T, R>,\n  result: any,\n  outerValue: undefined,\n  outerIndex: undefined,\n  innerSubscriber: InnerSubscriber<T, R>\n): Subscription | undefined;\n\nexport function subscribeToResult<T, R>(\n  outerSubscriber: OuterSubscriber<T, R>,\n  result: any,\n  outerValue?: T,\n  outerIndex?: number\n): Subscription | undefined;\n\nexport function subscribeToResult<T, R>(\n  outerSubscriber: OuterSubscriber<T, R>,\n  result: any,\n  outerValue?: T,\n  outerIndex?: number,\n  innerSubscriber: Subscriber<R> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex)\n): Subscription | undefined {\n  if (innerSubscriber.closed) {\n    return undefined;\n  }\n  if (result instanceof Observable) {\n    return result.subscribe(innerSubscriber);\n  }\n  return subscribeTo(result)(innerSubscriber) as Subscription;\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\nimport { isScheduler  } from '../util/isScheduler';\nimport { isArray  } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Operator } from '../Operator';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\n\nconst NONE = {};\n\n/* tslint:disable:max-line-length */\n\n// If called with a single array, it \"auto-spreads\" the array, with result selector\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, R>(sources: [O1], resultSelector: (v1: ObservedValueOf<O1>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, R>(sources: [O1, O2], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, R>(sources: [O1, O2, O3], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, R>(sources: [O1, O2, O3, O4], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, R>(sources: [O1, O2, O3, O4, O5], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>, R>(sources: [O1, O2, O3, O4, O5, O6], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O extends ObservableInput<any>, R>(sources: O[], resultSelector: (...args: ObservedValueOf<O>[]) => R, scheduler?: SchedulerLike): Observable<R>;\n\n// standard call, but with a result selector\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, R>(v1: O1, resultSelector: (v1: ObservedValueOf<O1>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, R>(v1: O1, v2: O2, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R, scheduler?: SchedulerLike): Observable<R>;\n\n// With a scheduler (deprecated)\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O1 extends ObservableInput<any>>(sources: [O1], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>]>;\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(sources: [O1, O2], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(sources: [O1, O2, O3], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(sources: [O1, O2, O3, O4], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5, O6], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O extends ObservableInput<any>>(sources: O[], scheduler: SchedulerLike): Observable<ObservedValueOf<O>[]>;\n\n// Best case\nexport function combineLatest<O1 extends ObservableInput<any>>(sources: [O1]): Observable<[ObservedValueOf<O1>]>;\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(sources: [O1, O2]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(sources: [O1, O2, O3]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(sources: [O1, O2, O3, O4]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5, O6]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;\nexport function combineLatest<O extends ObservableInput<any>>(sources: O[]): Observable<ObservedValueOf<O>[]>;\n\n// Standard calls\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\nexport function combineLatest<O1 extends ObservableInput<any>>(v1: O1, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>]>;\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(v1: O1, v2: O2, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;\n\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\nexport function combineLatest<O extends ObservableInput<any>>(...observables: O[]): Observable<any[]>;\n\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\nexport function combineLatest<O extends ObservableInput<any>, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O extends ObservableInput<any>, R>(array: O[], resultSelector: (...values: ObservedValueOf<O>[]) => R, scheduler?: SchedulerLike): Observable<R>;\n\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O extends ObservableInput<any>>(...observables: Array<O | SchedulerLike>): Observable<any[]>;\n\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O extends ObservableInput<any>, R>(...observables: Array<O | ((...values: ObservedValueOf<O>[]) => R) | SchedulerLike>): Observable<R>;\n\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | SchedulerLike>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * ![](combineLatest.png)\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all these values but the last\n * will be lost. On the other hand, if some Observable does not emit a value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n * ## Examples\n * ### Combine two timer Observables\n * ```ts\n * import { combineLatest, timer } from 'rxjs';\n *\n * const firstTimer = timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n * ```\n *\n * ### Combine an array of Observables\n * ```ts\n * import { combineLatest, of } from 'rxjs';\n * import { delay, starWith } from 'rxjs/operators';\n *\n * const observables = [1, 5, 10].map(\n *   n => of(n).pipe(\n *     delay(n * 1000),   // emit 0 and then emit n after n seconds\n *     startWith(0),\n *   )\n * );\n * const combined = combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n * ```\n *\n *\n * ### Use project function to dynamically calculate the Body-Mass Index\n * ```ts\n * import { combineLatest, of } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * const weight = of(70, 72, 76, 79, 75);\n * const height = of(1.76, 1.77, 1.78);\n * const bmi = combineLatest(weight, height).pipe(\n *   map(([w, h]) => w / (h * h)),\n * );\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n * ```\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest<O extends ObservableInput<any>, R>(\n  ...observables: (O | ((...values: ObservedValueOf<O>[]) => R) | SchedulerLike)[]\n): Observable<R> {\n  let resultSelector: ((...values: Array<any>) => R) | undefined =  undefined;\n  let scheduler: SchedulerLike|undefined = undefined;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = observables.pop() as SchedulerLike;\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    resultSelector = observables.pop() as (...values: Array<any>) => R;\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = observables[0] as any;\n  }\n\n  return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private resultSelector?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond?: number;\n\n  constructor(destination: Subscriber<R>, private resultSelector?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(NONE);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete!();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, undefined, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete!();\n    }\n  }\n\n  notifyNext(_outerValue: T, innerValue: R,\n             outerIndex: number): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === NONE ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.resultSelector) {\n        this._tryResultSelector(values);\n      } else {\n        this.destination.next!(values.slice());\n      }\n    }\n  }\n\n  private _tryResultSelector(values: any[]) {\n    let result: any;\n    try {\n      result = this.resultSelector!.apply(this, values);\n    } catch (err) {\n      this.destination.error!(err);\n      return;\n    }\n    this.destination.next!(result);\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport function scheduleArray<T>(input: ArrayLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    let i = 0;\n    sub.add(scheduler.schedule(function () {\n      if (i === input.length) {\n        subscriber.complete();\n        return;\n      }\n      subscriber.next(input[i++]);\n      if (!subscriber.closed) {\n        sub.add(this.schedule());\n      }\n    }));\n    return sub;\n  });\n}\n","/** Symbol.observable addition */\n/* Note: This will add Symbol.observable globally for all TypeScript users,\n  however, we are no longer polyfilling Symbol.observable */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol;\n  }\n}\n\n/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const observable = (() => typeof Symbol === 'function' && Symbol.observable || '@@observable')();\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: R;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\nexport const subscribeToArray = <T>(array: ArrayLike<T>) => (subscriber: Subscriber<T>) => {\n  for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n    subscriber.next(array[i]);\n  }\n  subscriber.complete();\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nlet _DOM: DomAdapter = null!;\n\nexport function getDOM(): DomAdapter {\n  return _DOM;\n}\n\nexport function setDOM(adapter: DomAdapter) {\n  _DOM = adapter;\n}\n\nexport function setRootDomAdapter(adapter: DomAdapter) {\n  if (!_DOM) {\n    _DOM = adapter;\n  }\n}\n\n/* tslint:disable:requireParameterType */\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class DomAdapter {\n  // Needs Domino-friendly test utility\n  abstract getProperty(el: Element, name: string): any;\n  abstract dispatchEvent(el: any, evt: any): any;\n\n  // Used by router\n  abstract log(error: any): any;\n  abstract logGroup(error: any): any;\n  abstract logGroupEnd(): any;\n\n  // Used by Meta\n  abstract remove(el: any): Node;\n  abstract createElement(tagName: any, doc?: any): HTMLElement;\n  abstract createHtmlDocument(): HTMLDocument;\n  abstract getDefaultDocument(): Document;\n\n  // Used by By.css\n  abstract isElementNode(node: any): boolean;\n\n  // Used by Testability\n  abstract isShadowRoot(node: any): boolean;\n\n  // Used by KeyEventsPlugin\n  abstract onAndCancel(el: any, evt: any, listener: any): Function;\n  abstract supportsDOMEvents(): boolean;\n\n  // Used by PlatformLocation and ServerEventManagerPlugin\n  abstract getGlobalEventTarget(doc: Document, target: string): any;\n\n  // Used by PlatformLocation\n  abstract getHistory(): History;\n  abstract getLocation():\n      any; /** This is the ambient Location definition, NOT Location from @angular/common.  */\n  abstract getBaseHref(doc: Document): string|null;\n  abstract resetBaseElement(): void;\n\n  // TODO: remove dependency in DefaultValueAccessor\n  abstract getUserAgent(): string;\n\n  // Used by AngularProfiler\n  abstract performanceNow(): number;\n\n  // Used by CookieXSRFStrategy\n  abstract supportsCookies(): boolean;\n  abstract getCookie(name: string): string|null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application in a Web Worker).\n *\n * @publicApi\n */\nexport const DOCUMENT = new InjectionToken<Document>('DocumentToken');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken, ɵɵinject} from '@angular/core';\nimport {getDOM} from '../dom_adapter';\nimport {DOCUMENT} from '../dom_tokens';\n\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n *\n * `PlatformLocation` encapsulates all calls to DOM APIs, which allows the Router to be\n * platform-agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that Angular supports. For example, `@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `@angular/platform-server` provides\n * one suitable for use with server-side rendering.\n *\n * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}\n * when they need to interact with the DOM APIs like pushState, popState, etc.\n *\n * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly\n * by the {@link Router} in order to navigate between routes. Since all interactions between {@link\n * Router} /\n * {@link Location} / {@link LocationStrategy} and DOM APIs flow through the `PlatformLocation`\n * class, they are all platform-agnostic.\n *\n * @publicApi\n */\n@Injectable({\n  providedIn: 'platform',\n  // See #23917\n  useFactory: useBrowserPlatformLocation\n})\nexport abstract class PlatformLocation {\n  abstract getBaseHrefFromDOM(): string;\n  abstract getState(): unknown;\n  abstract onPopState(fn: LocationChangeListener): void;\n  abstract onHashChange(fn: LocationChangeListener): void;\n\n  abstract get href(): string;\n  abstract get protocol(): string;\n  abstract get hostname(): string;\n  abstract get port(): string;\n  abstract get pathname(): string;\n  abstract get search(): string;\n  abstract get hash(): string;\n\n  abstract replaceState(state: any, title: string, url: string): void;\n\n  abstract pushState(state: any, title: string, url: string): void;\n\n  abstract forward(): void;\n\n  abstract back(): void;\n}\n\nexport function useBrowserPlatformLocation() {\n  return ɵɵinject(BrowserPlatformLocation);\n}\n\n/**\n * @description\n * Indicates when a location is initialized.\n *\n * @publicApi\n */\nexport const LOCATION_INITIALIZED = new InjectionToken<Promise<any>>('Location Initialized');\n\n/**\n * @description\n * A serializable version of the event from `onPopState` or `onHashChange`\n *\n * @publicApi\n */\nexport interface LocationChangeEvent {\n  type: string;\n  state: any;\n}\n\n/**\n * @publicApi\n */\nexport interface LocationChangeListener {\n  (event: LocationChangeEvent): any;\n}\n\n\n\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n */\n@Injectable({\n  providedIn: 'platform',\n  // See #23917\n  useFactory: createBrowserPlatformLocation,\n})\nexport class BrowserPlatformLocation extends PlatformLocation {\n  public readonly location!: Location;\n  private _history!: History;\n\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n    this._init();\n  }\n\n  // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it\n  /** @internal */\n  _init() {\n    (this as {location: Location}).location = getDOM().getLocation();\n    this._history = getDOM().getHistory();\n  }\n\n  getBaseHrefFromDOM(): string {\n    return getDOM().getBaseHref(this._doc)!;\n  }\n\n  onPopState(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n  }\n\n  onHashChange(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n  }\n\n  get href(): string {\n    return this.location.href;\n  }\n  get protocol(): string {\n    return this.location.protocol;\n  }\n  get hostname(): string {\n    return this.location.hostname;\n  }\n  get port(): string {\n    return this.location.port;\n  }\n  get pathname(): string {\n    return this.location.pathname;\n  }\n  get search(): string {\n    return this.location.search;\n  }\n  get hash(): string {\n    return this.location.hash;\n  }\n  set pathname(newPath: string) {\n    this.location.pathname = newPath;\n  }\n\n  pushState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.pushState(state, title, url);\n    } else {\n      this.location.hash = url;\n    }\n  }\n\n  replaceState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.replaceState(state, title, url);\n    } else {\n      this.location.hash = url;\n    }\n  }\n\n  forward(): void {\n    this._history.forward();\n  }\n\n  back(): void {\n    this._history.back();\n  }\n\n  getState(): unknown {\n    return this._history.state;\n  }\n}\n\nexport function supportsState(): boolean {\n  return !!window.history.pushState;\n}\nexport function createBrowserPlatformLocation() {\n  return new BrowserPlatformLocation(ɵɵinject(DOCUMENT));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * Joins two parts of a URL with a slash if needed.\n *\n * @param start  URL string\n * @param end    URL string\n *\n *\n * @returns The joined URL string.\n */\nexport function joinWithSlash(start: string, end: string): string {\n  if (start.length == 0) {\n    return end;\n  }\n  if (end.length == 0) {\n    return start;\n  }\n  let slashes = 0;\n  if (start.endsWith('/')) {\n    slashes++;\n  }\n  if (end.startsWith('/')) {\n    slashes++;\n  }\n  if (slashes == 2) {\n    return start + end.substring(1);\n  }\n  if (slashes == 1) {\n    return start + end;\n  }\n  return start + '/' + end;\n}\n\n/**\n * Removes a trailing slash from a URL string if needed.\n * Looks for the first occurrence of either `#`, `?`, or the end of the\n * line as `/` characters and removes the trailing slash if one exists.\n *\n * @param url URL string.\n *\n * @returns The URL string, modified if needed.\n */\nexport function stripTrailingSlash(url: string): string {\n  const match = url.match(/#|\\?|$/);\n  const pathEndIdx = match && match.index || url.length;\n  const droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);\n  return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);\n}\n\n/**\n * Normalizes URL parameters by prepending with `?` if needed.\n *\n * @param  params String of URL parameters.\n *\n * @returns The normalized URL parameters string.\n */\nexport function normalizeQueryParams(params: string): string {\n  return params && params[0] !== '?' ? '?' + params : params;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken, Optional, ɵɵinject} from '@angular/core';\nimport {DOCUMENT} from '../dom_tokens';\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\nimport {joinWithSlash, normalizeQueryParams} from './util';\n\n/**\n * Enables the `Location` service to read route state from the browser's URL.\n * Angular provides two strategies:\n * `HashLocationStrategy` and `PathLocationStrategy`.\n *\n * Applications should use the `Router` or `Location` services to\n * interact with application route state.\n *\n * For instance, `HashLocationStrategy` produces URLs like\n * <code class=\"no-auto-link\">http://example.com#/foo</code>,\n * and `PathLocationStrategy` produces\n * <code class=\"no-auto-link\">http://example.com/foo</code> as an equivalent URL.\n *\n * See these two classes for more.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: provideLocationStrategy})\nexport abstract class LocationStrategy {\n  abstract path(includeHash?: boolean): string;\n  abstract prepareExternalUrl(internal: string): string;\n  abstract pushState(state: any, title: string, url: string, queryParams: string): void;\n  abstract replaceState(state: any, title: string, url: string, queryParams: string): void;\n  abstract forward(): void;\n  abstract back(): void;\n  abstract onPopState(fn: LocationChangeListener): void;\n  abstract getBaseHref(): string;\n}\n\nexport function provideLocationStrategy(platformLocation: PlatformLocation) {\n  // See #23917\n  const location = ɵɵinject(DOCUMENT).location;\n  return new PathLocationStrategy(\n      ɵɵinject(PlatformLocation as any), location && location.origin || '');\n}\n\n\n/**\n * A predefined [DI token](guide/glossary#di-token) for the base href\n * to be used with the `PathLocationStrategy`.\n * The base href is the URL prefix that should be preserved when generating\n * and recognizing URLs.\n *\n * @usageNotes\n *\n * The following example shows how to use this token to configure the root app injector\n * with a base href value, so that the DI framework can supply the dependency anywhere in the app.\n *\n * ```typescript\n * import {Component, NgModule} from '@angular/core';\n * import {APP_BASE_HREF} from '@angular/common';\n *\n * @NgModule({\n *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n * })\n * class AppModule {}\n * ```\n *\n * @publicApi\n */\nexport const APP_BASE_HREF = new InjectionToken<string>('appBaseHref');\n\n/**\n * @description\n * A {@link LocationStrategy} used to configure the {@link Location} service to\n * represent its state in the\n * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\n * browser's URL.\n *\n * If you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}\n * or add a `<base href>` element to the document.\n *\n * For instance, if you provide an `APP_BASE_HREF` of `'/my/app/'` and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`. To ensure all relative URIs resolve correctly,\n * the `<base href>` and/or `APP_BASE_HREF` should end with a `/`.\n *\n * Similarly, if you add `<base href='/my/app/'/>` to the document and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n *\n * Note that when using `PathLocationStrategy`, neither the query nor\n * the fragment in the `<base href>` will be preserved, as outlined\n * by the [RFC](https://tools.ietf.org/html/rfc3986#section-5.2.2).\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n * @publicApi\n */\n@Injectable()\nexport class PathLocationStrategy extends LocationStrategy {\n  private _baseHref: string;\n\n  constructor(\n      private _platformLocation: PlatformLocation,\n      @Optional() @Inject(APP_BASE_HREF) href?: string) {\n    super();\n\n    if (href == null) {\n      href = this._platformLocation.getBaseHrefFromDOM();\n    }\n\n    if (href == null) {\n      throw new Error(\n          `No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.`);\n    }\n\n    this._baseHref = href;\n  }\n\n  onPopState(fn: LocationChangeListener): void {\n    this._platformLocation.onPopState(fn);\n    this._platformLocation.onHashChange(fn);\n  }\n\n  getBaseHref(): string {\n    return this._baseHref;\n  }\n\n  prepareExternalUrl(internal: string): string {\n    return joinWithSlash(this._baseHref, internal);\n  }\n\n  path(includeHash: boolean = false): string {\n    const pathname =\n        this._platformLocation.pathname + normalizeQueryParams(this._platformLocation.search);\n    const hash = this._platformLocation.hash;\n    return hash && includeHash ? `${pathname}${hash}` : pathname;\n  }\n\n  pushState(state: any, title: string, url: string, queryParams: string) {\n    const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));\n    this._platformLocation.pushState(state, title, externalUrl);\n  }\n\n  replaceState(state: any, title: string, url: string, queryParams: string) {\n    const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));\n    this._platformLocation.replaceState(state, title, externalUrl);\n  }\n\n  forward(): void {\n    this._platformLocation.forward();\n  }\n\n  back(): void {\n    this._platformLocation.back();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {APP_BASE_HREF, LocationStrategy} from './location_strategy';\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\nimport {joinWithSlash, normalizeQueryParams} from './util';\n\n\n\n/**\n * @description\n * A {@link LocationStrategy} used to configure the {@link Location} service to\n * represent its state in the\n * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n * of the browser's URL.\n *\n * For instance, if you call `location.go('/foo')`, the browser's URL will become\n * `example.com#/foo`.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n *\n * @publicApi\n */\n@Injectable()\nexport class HashLocationStrategy extends LocationStrategy {\n  private _baseHref: string = '';\n  constructor(\n      private _platformLocation: PlatformLocation,\n      @Optional() @Inject(APP_BASE_HREF) _baseHref?: string) {\n    super();\n    if (_baseHref != null) {\n      this._baseHref = _baseHref;\n    }\n  }\n\n  onPopState(fn: LocationChangeListener): void {\n    this._platformLocation.onPopState(fn);\n    this._platformLocation.onHashChange(fn);\n  }\n\n  getBaseHref(): string {\n    return this._baseHref;\n  }\n\n  path(includeHash: boolean = false): string {\n    // the hash value is always prefixed with a `#`\n    // and if it is empty then it will stay empty\n    let path = this._platformLocation.hash;\n    if (path == null) path = '#';\n\n    return path.length > 0 ? path.substring(1) : path;\n  }\n\n  prepareExternalUrl(internal: string): string {\n    const url = joinWithSlash(this._baseHref, internal);\n    return url.length > 0 ? ('#' + url) : url;\n  }\n\n  pushState(state: any, title: string, path: string, queryParams: string) {\n    let url: string|null = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.pushState(state, title, url);\n  }\n\n  replaceState(state: any, title: string, path: string, queryParams: string) {\n    let url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.replaceState(state, title, url);\n  }\n\n  forward(): void {\n    this._platformLocation.forward();\n  }\n\n  back(): void {\n    this._platformLocation.back();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Injectable, ɵɵinject} from '@angular/core';\nimport {SubscriptionLike} from 'rxjs';\nimport {LocationStrategy} from './location_strategy';\nimport {PlatformLocation} from './platform_location';\nimport {joinWithSlash, normalizeQueryParams, stripTrailingSlash} from './util';\n\n/** @publicApi */\nexport interface PopStateEvent {\n  pop?: boolean;\n  state?: any;\n  type?: string;\n  url?: string;\n}\n\n/**\n * @description\n *\n * A service that applications can use to interact with a browser's URL.\n *\n * Depending on the `LocationStrategy` used, `Location` persists\n * to the URL's path or the URL's hash segment.\n *\n * @usageNotes\n *\n * It's better to use the `Router#navigate` service to trigger route changes. Use\n * `Location` only if you need to interact with or create normalized URLs outside of\n * routing.\n *\n * `Location` is responsible for normalizing the URL against the application's base href.\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n * trailing slash:\n * - `/my/app/user/123` is normalized\n * - `my/app/user/123` **is not** normalized\n * - `/my/app/user/123/` **is not** normalized\n *\n * ### Example\n *\n * <code-example path='common/location/ts/path_location_component.ts'\n * region='LocationComponent'></code-example>\n *\n * @publicApi\n */\n@Injectable({\n  providedIn: 'root',\n  // See #23917\n  useFactory: createLocation,\n})\nexport class Location {\n  /** @internal */\n  _subject: EventEmitter<any> = new EventEmitter();\n  /** @internal */\n  _baseHref: string;\n  /** @internal */\n  _platformStrategy: LocationStrategy;\n  /** @internal */\n  _platformLocation: PlatformLocation;\n  /** @internal */\n  _urlChangeListeners: ((url: string, state: unknown) => void)[] = [];\n  /** @internal */\n  _urlChangeSubscription?: SubscriptionLike;\n\n  constructor(platformStrategy: LocationStrategy, platformLocation: PlatformLocation) {\n    this._platformStrategy = platformStrategy;\n    const browserBaseHref = this._platformStrategy.getBaseHref();\n    this._platformLocation = platformLocation;\n    this._baseHref = stripTrailingSlash(_stripIndexHtml(browserBaseHref));\n    this._platformStrategy.onPopState((ev) => {\n      this._subject.emit({\n        'url': this.path(true),\n        'pop': true,\n        'state': ev.state,\n        'type': ev.type,\n      });\n    });\n  }\n\n  /**\n   * Normalizes the URL path for this location.\n   *\n   * @param includeHash True to include an anchor fragment in the path.\n   *\n   * @returns The normalized URL path.\n   */\n  // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is\n  // removed.\n  path(includeHash: boolean = false): string {\n    return this.normalize(this._platformStrategy.path(includeHash));\n  }\n\n  /**\n   * Reports the current state of the location history.\n   * @returns The current value of the `history.state` object.\n   */\n  getState(): unknown {\n    return this._platformLocation.getState();\n  }\n\n  /**\n   * Normalizes the given path and compares to the current normalized path.\n   *\n   * @param path The given URL path.\n   * @param query Query parameters.\n   *\n   * @returns True if the given URL path is equal to the current normalized path, false\n   * otherwise.\n   */\n  isCurrentPathEqualTo(path: string, query: string = ''): boolean {\n    return this.path() == this.normalize(path + normalizeQueryParams(query));\n  }\n\n  /**\n   * Normalizes a URL path by stripping any trailing slashes.\n   *\n   * @param url String representing a URL.\n   *\n   * @returns The normalized URL string.\n   */\n  normalize(url: string): string {\n    return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));\n  }\n\n  /**\n   * Normalizes an external URL path.\n   * If the given URL doesn't begin with a leading slash (`'/'`), adds one\n   * before normalizing. Adds a hash if `HashLocationStrategy` is\n   * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n   *\n   * @param url String representing a URL.\n   *\n   * @returns  A normalized platform-specific URL.\n   */\n  prepareExternalUrl(url: string): string {\n    if (url && url[0] !== '/') {\n      url = '/' + url;\n    }\n    return this._platformStrategy.prepareExternalUrl(url);\n  }\n\n  // TODO: rename this method to pushState\n  /**\n   * Changes the browser's URL to a normalized version of a given URL, and pushes a\n   * new item onto the platform's history.\n   *\n   * @param path  URL path to normalize.\n   * @param query Query parameters.\n   * @param state Location history state.\n   *\n   */\n  go(path: string, query: string = '', state: any = null): void {\n    this._platformStrategy.pushState(state, '', path, query);\n    this._notifyUrlChangeListeners(\n        this.prepareExternalUrl(path + normalizeQueryParams(query)), state);\n  }\n\n  /**\n   * Changes the browser's URL to a normalized version of the given URL, and replaces\n   * the top item on the platform's history stack.\n   *\n   * @param path  URL path to normalize.\n   * @param query Query parameters.\n   * @param state Location history state.\n   */\n  replaceState(path: string, query: string = '', state: any = null): void {\n    this._platformStrategy.replaceState(state, '', path, query);\n    this._notifyUrlChangeListeners(\n        this.prepareExternalUrl(path + normalizeQueryParams(query)), state);\n  }\n\n  /**\n   * Navigates forward in the platform's history.\n   */\n  forward(): void {\n    this._platformStrategy.forward();\n  }\n\n  /**\n   * Navigates back in the platform's history.\n   */\n  back(): void {\n    this._platformStrategy.back();\n  }\n\n  /**\n   * Registers a URL change listener. Use to catch updates performed by the Angular\n   * framework that are not detectible through \"popstate\" or \"hashchange\" events.\n   *\n   * @param fn The change handler function, which take a URL and a location history state.\n   */\n  onUrlChange(fn: (url: string, state: unknown) => void) {\n    this._urlChangeListeners.push(fn);\n\n    if (!this._urlChangeSubscription) {\n      this._urlChangeSubscription = this.subscribe(v => {\n        this._notifyUrlChangeListeners(v.url, v.state);\n      });\n    }\n  }\n\n  /** @internal */\n  _notifyUrlChangeListeners(url: string = '', state: unknown) {\n    this._urlChangeListeners.forEach(fn => fn(url, state));\n  }\n\n  /**\n   * Subscribes to the platform's `popState` events.\n   *\n   * @param value Event that is triggered when the state history changes.\n   * @param exception The exception to throw.\n   *\n   * @returns Subscribed events.\n   */\n  subscribe(\n      onNext: (value: PopStateEvent) => void, onThrow?: ((exception: any) => void)|null,\n      onReturn?: (() => void)|null): SubscriptionLike {\n    return this._subject.subscribe({next: onNext, error: onThrow, complete: onReturn});\n  }\n\n  /**\n   * Normalizes URL parameters by prepending with `?` if needed.\n   *\n   * @param  params String of URL parameters.\n   *\n   * @returns The normalized URL parameters string.\n   */\n  public static normalizeQueryParams: (params: string) => string = normalizeQueryParams;\n\n  /**\n   * Joins two parts of a URL with a slash if needed.\n   *\n   * @param start  URL string\n   * @param end    URL string\n   *\n   *\n   * @returns The joined URL string.\n   */\n  public static joinWithSlash: (start: string, end: string) => string = joinWithSlash;\n\n  /**\n   * Removes a trailing slash from a URL string if needed.\n   * Looks for the first occurrence of either `#`, `?`, or the end of the\n   * line as `/` characters and removes the trailing slash if one exists.\n   *\n   * @param url URL string.\n   *\n   * @returns The URL string, modified if needed.\n   */\n  public static stripTrailingSlash: (url: string) => string = stripTrailingSlash;\n}\n\nexport function createLocation() {\n  return new Location(ɵɵinject(LocationStrategy as any), ɵɵinject(PlatformLocation as any));\n}\n\nfunction _stripBaseHref(baseHref: string, url: string): string {\n  return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;\n}\n\nfunction _stripIndexHtml(url: string): string {\n  return url.replace(/\\/index.html$/, '');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵCurrencyIndex, ɵExtraLocaleDataIndex, ɵfindLocaleData, ɵgetLocaleCurrencyCode, ɵgetLocalePluralCase, ɵLocaleDataIndex} from '@angular/core';\n\nimport {CURRENCIES_EN, CurrenciesSymbols} from './currencies';\n\n\n/**\n * Format styles that can be used to represent numbers.\n * @see `getLocaleNumberFormat()`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport enum NumberFormatStyle {\n  Decimal,\n  Percent,\n  Currency,\n  Scientific\n}\n\n/**\n * Plurality cases used for translating plurals to different languages.\n *\n * @see `NgPlural`\n * @see `NgPluralCase`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport enum Plural {\n  Zero = 0,\n  One = 1,\n  Two = 2,\n  Few = 3,\n  Many = 4,\n  Other = 5,\n}\n\n/**\n * Context-dependant translation forms for strings.\n * Typically the standalone version is for the nominative form of the word,\n * and the format version is used for the genitive case.\n * @see [CLDR website](http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles)\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport enum FormStyle {\n  Format,\n  Standalone\n}\n\n/**\n * String widths available for translations.\n * The specific character widths are locale-specific.\n * Examples are given for the word \"Sunday\" in English.\n *\n * @publicApi\n */\nexport enum TranslationWidth {\n  /** 1 character for `en-US`. For example: 'S' */\n  Narrow,\n  /** 3 characters for `en-US`. For example: 'Sun' */\n  Abbreviated,\n  /** Full length for `en-US`. For example: \"Sunday\" */\n  Wide,\n  /** 2 characters for `en-US`, For example: \"Su\" */\n  Short\n}\n\n/**\n * String widths available for date-time formats.\n * The specific character widths are locale-specific.\n * Examples are given for `en-US`.\n *\n * @see `getLocaleDateFormat()`\n * @see `getLocaleTimeFormat()``\n * @see `getLocaleDateTimeFormat()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n * @publicApi\n */\nexport enum FormatWidth {\n  /**\n   * For `en-US`, 'M/d/yy, h:mm a'`\n   * (Example: `6/15/15, 9:03 AM`)\n   */\n  Short,\n  /**\n   * For `en-US`, `'MMM d, y, h:mm:ss a'`\n   * (Example: `Jun 15, 2015, 9:03:01 AM`)\n   */\n  Medium,\n  /**\n   * For `en-US`, `'MMMM d, y, h:mm:ss a z'`\n   * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)\n   */\n  Long,\n  /**\n   * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`\n   * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)\n   */\n  Full\n}\n\n/**\n * Symbols that can be used to replace placeholders in number patterns.\n * Examples are based on `en-US` values.\n *\n * @see `getLocaleNumberSymbol()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport enum NumberSymbol {\n  /**\n   * Decimal separator.\n   * For `en-US`, the dot character.\n   * Example : 2,345`.`67\n   */\n  Decimal,\n  /**\n   * Grouping separator, typically for thousands.\n   * For `en-US`, the comma character.\n   * Example: 2`,`345.67\n   */\n  Group,\n  /**\n   * List-item separator.\n   * Example: \"one, two, and three\"\n   */\n  List,\n  /**\n   * Sign for percentage (out of 100).\n   * Example: 23.4%\n   */\n  PercentSign,\n  /**\n   * Sign for positive numbers.\n   * Example: +23\n   */\n  PlusSign,\n  /**\n   * Sign for negative numbers.\n   * Example: -23\n   */\n  MinusSign,\n  /**\n   * Computer notation for exponential value (n times a power of 10).\n   * Example: 1.2E3\n   */\n  Exponential,\n  /**\n   * Human-readable format of exponential.\n   * Example: 1.2x103\n   */\n  SuperscriptingExponent,\n  /**\n   * Sign for permille (out of 1000).\n   * Example: 23.4‰\n   */\n  PerMille,\n  /**\n   * Infinity, can be used with plus and minus.\n   * Example: ∞, +∞, -∞\n   */\n  Infinity,\n  /**\n   * Not a number.\n   * Example: NaN\n   */\n  NaN,\n  /**\n   * Symbol used between time units.\n   * Example: 10:52\n   */\n  TimeSeparator,\n  /**\n   * Decimal separator for currency values (fallback to `Decimal`).\n   * Example: $2,345.67\n   */\n  CurrencyDecimal,\n  /**\n   * Group separator for currency values (fallback to `Group`).\n   * Example: $2,345.67\n   */\n  CurrencyGroup\n}\n\n/**\n * The value for each day of the week, based on the `en-US` locale\n *\n * @publicApi\n */\nexport enum WeekDay {\n  Sunday = 0,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday\n}\n\n/**\n * Retrieves the locale ID from the currently loaded locale.\n * The loaded locale could be, for example, a global one rather than a regional one.\n * @param locale A locale code, such as `fr-FR`.\n * @returns The locale code. For example, `fr`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleId(locale: string): string {\n  return ɵfindLocaleData(locale)[ɵLocaleDataIndex.LocaleId];\n}\n\n/**\n * Retrieves day period strings for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized period strings. For example, `[AM, PM]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleDayPeriods(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): Readonly<[string, string]> {\n  const data = ɵfindLocaleData(locale);\n  const amPmData = <[string, string][][]>[\n    data[ɵLocaleDataIndex.DayPeriodsFormat], data[ɵLocaleDataIndex.DayPeriodsStandalone]\n  ];\n  const amPm = getLastDefinedValue(amPmData, formStyle);\n  return getLastDefinedValue(amPm, width);\n}\n\n/**\n * Retrieves days of the week for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleDayNames(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): ReadonlyArray<string> {\n  const data = ɵfindLocaleData(locale);\n  const daysData =\n      <string[][][]>[data[ɵLocaleDataIndex.DaysFormat], data[ɵLocaleDataIndex.DaysStandalone]];\n  const days = getLastDefinedValue(daysData, formStyle);\n  return getLastDefinedValue(days, width);\n}\n\n/**\n * Retrieves months of the year for the given locale, using the Gregorian calendar.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns An array of localized name strings.\n * For example,  `[January, February, ...]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleMonthNames(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): ReadonlyArray<string> {\n  const data = ɵfindLocaleData(locale);\n  const monthsData =\n      <string[][][]>[data[ɵLocaleDataIndex.MonthsFormat], data[ɵLocaleDataIndex.MonthsStandalone]];\n  const months = getLastDefinedValue(monthsData, formStyle);\n  return getLastDefinedValue(months, width);\n}\n\n/**\n * Retrieves Gregorian-calendar eras for the given locale.\n * @param locale A locale code for the locale format rules to use.\n * @param width The required character width.\n\n * @returns An array of localized era strings.\n * For example, `[AD, BC]` for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleEraNames(\n    locale: string, width: TranslationWidth): Readonly<[string, string]> {\n  const data = ɵfindLocaleData(locale);\n  const erasData = <[string, string][]>data[ɵLocaleDataIndex.Eras];\n  return getLastDefinedValue(erasData, width);\n}\n\n/**\n * Retrieves the first day of the week for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns A day index number, using the 0-based week-day index for `en-US`\n * (Sunday = 0, Monday = 1, ...).\n * For example, for `fr-FR`, returns 1 to indicate that the first day is Monday.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleFirstDayOfWeek(locale: string): WeekDay {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.FirstDayOfWeek];\n}\n\n/**\n * Range of week days that are considered the week-end for the given locale.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The range of day values, `[startDay, endDay]`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleWeekEndRange(locale: string): [WeekDay, WeekDay] {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.WeekendRange];\n}\n\n/**\n * Retrieves a localized date-value formating string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formating string.\n * @see `FormatWidth`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleDateFormat(locale: string, width: FormatWidth): string {\n  const data = ɵfindLocaleData(locale);\n  return getLastDefinedValue(data[ɵLocaleDataIndex.DateFormat], width);\n}\n\n/**\n * Retrieves a localized time-value formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see `FormatWidth`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n\n * @publicApi\n */\nexport function getLocaleTimeFormat(locale: string, width: FormatWidth): string {\n  const data = ɵfindLocaleData(locale);\n  return getLastDefinedValue(data[ɵLocaleDataIndex.TimeFormat], width);\n}\n\n/**\n * Retrieves a localized date-time formatting string.\n *\n * @param locale A locale code for the locale format rules to use.\n * @param width The format type.\n * @returns The localized formatting string.\n * @see `FormatWidth`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleDateTimeFormat(locale: string, width: FormatWidth): string {\n  const data = ɵfindLocaleData(locale);\n  const dateTimeFormatData = <string[]>data[ɵLocaleDataIndex.DateTimeFormat];\n  return getLastDefinedValue(dateTimeFormatData, width);\n}\n\n/**\n * Retrieves a localized number symbol that can be used to replace placeholders in number formats.\n * @param locale The locale code.\n * @param symbol The symbol to localize.\n * @returns The character for the localized symbol.\n * @see `NumberSymbol`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleNumberSymbol(locale: string, symbol: NumberSymbol): string {\n  const data = ɵfindLocaleData(locale);\n  const res = data[ɵLocaleDataIndex.NumberSymbols][symbol];\n  if (typeof res === 'undefined') {\n    if (symbol === NumberSymbol.CurrencyDecimal) {\n      return data[ɵLocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];\n    } else if (symbol === NumberSymbol.CurrencyGroup) {\n      return data[ɵLocaleDataIndex.NumberSymbols][NumberSymbol.Group];\n    }\n  }\n  return res;\n}\n\n/**\n * Retrieves a number format for a given locale.\n *\n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\n * when used to format the number 12345.678 could result in \"12'345,678\". That would happen if the\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\n *\n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders\n * that stand for the decimal separator, and so on, and are NOT real characters.\n * You must NOT \"translate\" the placeholders. For example, don't change `.` to `,` even though in\n * your language the decimal point is written with a comma. The symbols should be replaced by the\n * local equivalents, using the appropriate `NumberSymbol` for your language.\n *\n * Here are the special characters used in number patterns:\n *\n * | Symbol | Meaning |\n * |--------|---------|\n * | . | Replaced automatically by the character used for the decimal point. |\n * | , | Replaced by the \"grouping\" (thousands) separator. |\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\n * | # | Replaced by a digit (or nothing if there aren't enough). |\n * | ¤ | Replaced by a currency symbol, such as $ or USD. |\n * | % | Marks a percent format. The % symbol may change position, but must be retained. |\n * | E | Marks a scientific format. The E symbol may change position, but must be retained. |\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n *\n * @param locale A locale code for the locale format rules to use.\n * @param type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)\n * @returns The localized format string.\n * @see `NumberFormatStyle`\n * @see [CLDR website](http://cldr.unicode.org/translation/number-patterns)\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleNumberFormat(locale: string, type: NumberFormatStyle): string {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.NumberFormats][type];\n}\n\n/**\n * Retrieves the symbol used to represent the currency for the main country\n * corresponding to a given locale. For example, '$' for `en-US`.\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The localized symbol character,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleCurrencySymbol(locale: string): string|null {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.CurrencySymbol] || null;\n}\n\n/**\n * Retrieves the name of the currency for the main country corresponding\n * to a given locale. For example, 'US Dollar' for `en-US`.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency name,\n * or `null` if the main country cannot be determined.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleCurrencyName(locale: string): string|null {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.CurrencyName] || null;\n}\n\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n * @publicApi\n */\nexport function getLocaleCurrencyCode(locale: string): string|null {\n  return ɵgetLocaleCurrencyCode(locale);\n}\n\n/**\n * Retrieves the currency values for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The currency values.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n */\nfunction getLocaleCurrencies(locale: string): {[code: string]: CurrenciesSymbols} {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.Currencies];\n}\n\n/**\n * @alias core/ɵgetLocalePluralCase\n * @publicApi\n */\nexport const getLocalePluralCase: (locale: string) => ((value: number) => Plural) =\n    ɵgetLocalePluralCase;\n\nfunction checkFullData(data: any) {\n  if (!data[ɵLocaleDataIndex.ExtraData]) {\n    throw new Error(`Missing extra locale data for the locale \"${\n        data[ɵLocaleDataIndex\n                 .LocaleId]}\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more.`);\n  }\n}\n\n/**\n * Retrieves locale-specific rules used to determine which day period to use\n * when more than one period is defined for a locale.\n *\n * There is a rule for each defined day period. The\n * first rule is applied to the first day period and so on.\n * Fall back to AM/PM when no rules are available.\n *\n * A rule can specify a period as time range, or as a single time value.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes).\n *\n * @param locale A locale code for the locale format rules to use.\n * @returns The rules for the locale, a single time value or array of *from-time, to-time*,\n * or null if no periods are available.\n *\n * @see `getLocaleExtraDayPeriods()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleExtraDayPeriodRules(locale: string): (Time|[Time, Time])[] {\n  const data = ɵfindLocaleData(locale);\n  checkFullData(data);\n  const rules = data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodsRules] || [];\n  return rules.map((rule: string|[string, string]) => {\n    if (typeof rule === 'string') {\n      return extractTime(rule);\n    }\n    return [extractTime(rule[0]), extractTime(rule[1])];\n  });\n}\n\n/**\n * Retrieves locale-specific day periods, which indicate roughly how a day is broken up\n * in different languages.\n * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes).\n *\n * @param locale A locale code for the locale format rules to use.\n * @param formStyle The required grammatical form.\n * @param width The required character width.\n * @returns The translated day-period strings.\n * @see `getLocaleExtraDayPeriodRules()`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getLocaleExtraDayPeriods(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): string[] {\n  const data = ɵfindLocaleData(locale);\n  checkFullData(data);\n  const dayPeriodsData = <string[][][]>[\n    data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodFormats],\n    data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodStandalone]\n  ];\n  const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\n  return getLastDefinedValue(dayPeriods, width) || [];\n}\n\n/**\n * Retrieves the writing direction of a specified locale\n * @param locale A locale code for the locale format rules to use.\n * @publicApi\n * @returns 'rtl' or 'ltr'\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n */\nexport function getLocaleDirection(locale: string): 'ltr'|'rtl' {\n  const data = ɵfindLocaleData(locale);\n  return data[ɵLocaleDataIndex.Directionality];\n}\n\n/**\n * Retrieves the first value that is defined in an array, going backwards from an index position.\n *\n * To avoid repeating the same data (as when the \"format\" and \"standalone\" forms are the same)\n * add the first value to the locale data arrays, and add other values only if they are different.\n *\n * @param data The data array to retrieve from.\n * @param index A 0-based index into the array to start from.\n * @returns The value immediately before the given index position.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nfunction getLastDefinedValue<T>(data: T[], index: number): T {\n  for (let i = index; i > -1; i--) {\n    if (typeof data[i] !== 'undefined') {\n      return data[i];\n    }\n  }\n  throw new Error('Locale data API: locale data undefined');\n}\n\n/**\n * Represents a time value with hours and minutes.\n *\n * @publicApi\n */\nexport type Time = {\n  hours: number,\n  minutes: number\n};\n\n/**\n * Extracts the hours and minutes from a string like \"15:45\"\n */\nfunction extractTime(time: string): Time {\n  const [h, m] = time.split(':');\n  return {hours: +h, minutes: +m};\n}\n\n\n\n/**\n * Retrieves the currency symbol for a given currency code.\n *\n * For example, for the default `en-US` locale, the code `USD` can\n * be represented by the narrow symbol `$` or the wide symbol `US$`.\n *\n * @param code The currency code.\n * @param format The format, `wide` or `narrow`.\n * @param locale A locale code for the locale format rules to use.\n *\n * @returns The symbol, or the currency code if no symbol is available.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getCurrencySymbol(code: string, format: 'wide'|'narrow', locale = 'en'): string {\n  const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];\n  const symbolNarrow = currency[ɵCurrencyIndex.SymbolNarrow];\n\n  if (format === 'narrow' && typeof symbolNarrow === 'string') {\n    return symbolNarrow;\n  }\n\n  return currency[ɵCurrencyIndex.Symbol] || code;\n}\n\n// Most currencies have cents, that's why the default is 2\nconst DEFAULT_NB_OF_CURRENCY_DIGITS = 2;\n\n/**\n * Reports the number of decimal digits for a given currency.\n * The value depends upon the presence of cents in that particular currency.\n *\n * @param code The currency code.\n * @returns The number of decimal digits, typically 0 or 2.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * @publicApi\n */\nexport function getNumberOfCurrencyDigits(code: string): number {\n  let digits;\n  const currency = CURRENCIES_EN[code];\n  if (currency) {\n    digits = currency[ɵCurrencyIndex.NbOfDigits];\n  }\n  return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, LOCALE_ID} from '@angular/core';\n\nimport {getLocalePluralCase, Plural} from './locale_data_api';\n\n\n/**\n * @publicApi\n */\nexport abstract class NgLocalization {\n  abstract getPluralCategory(value: any, locale?: string): string;\n}\n\n\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n */\nexport function getPluralCategory(\n    value: number, cases: string[], ngLocalization: NgLocalization, locale?: string): string {\n  let key = `=${value}`;\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  key = ngLocalization.getPluralCategory(value, locale);\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  if (cases.indexOf('other') > -1) {\n    return 'other';\n  }\n\n  throw new Error(`No plural message found for value \"${value}\"`);\n}\n\n/**\n * Returns the plural case based on the locale\n *\n * @publicApi\n */\n@Injectable()\nexport class NgLocaleLocalization extends NgLocalization {\n  constructor(@Inject(LOCALE_ID) protected locale: string) {\n    super();\n  }\n\n  getPluralCategory(value: any, locale?: string): string {\n    const plural = getLocalePluralCase(locale || this.locale)(value);\n\n    switch (plural) {\n      case Plural.Zero:\n        return 'zero';\n      case Plural.One:\n        return 'one';\n      case Plural.Two:\n        return 'two';\n      case Plural.Few:\n        return 'few';\n      case Plural.Many:\n        return 'many';\n      default:\n        return 'other';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function parseCookieValue(cookieStr: string, name: string): string|null {\n  name = encodeURIComponent(name);\n  for (const cookie of cookieStr.split(';')) {\n    const eqIndex = cookie.indexOf('=');\n    const [cookieName, cookieValue]: string[] =\n        eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\n    if (cookieName.trim() === name) {\n      return decodeURIComponent(cookieValue);\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, DoCheck, ElementRef, Input, IterableChanges, IterableDiffer, IterableDiffers, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer2, ɵisListLikeIterable as isListLikeIterable, ɵstringify as stringify} from '@angular/core';\n\ntype NgClassSupportedTypes = string[]|Set<string>|{[klass: string]: any}|null|undefined;\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n *     <some-element [ngClass]=\"'first second'\">...</some-element>\n *\n *     <some-element [ngClass]=\"['first', 'second']\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n *\n *     <some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n *\n * @description\n *\n * Adds and removes CSS classes on an HTML element.\n *\n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n *\n * @publicApi\n */\n@Directive({selector: '[ngClass]'})\nexport class NgClass implements DoCheck {\n  private _iterableDiffer: IterableDiffer<string>|null = null;\n  private _keyValueDiffer: KeyValueDiffer<string, any>|null = null;\n  private _initialClasses: string[] = [];\n  private _rawClass: NgClassSupportedTypes = null;\n\n  constructor(\n      private _iterableDiffers: IterableDiffers, private _keyValueDiffers: KeyValueDiffers,\n      private _ngEl: ElementRef, private _renderer: Renderer2) {}\n\n\n  @Input('class')\n  set klass(value: string) {\n    this._removeClasses(this._initialClasses);\n    this._initialClasses = typeof value === 'string' ? value.split(/\\s+/) : [];\n    this._applyClasses(this._initialClasses);\n    this._applyClasses(this._rawClass);\n  }\n\n  @Input('ngClass')\n  set ngClass(value: string|string[]|Set<string>|{[klass: string]: any}) {\n    this._removeClasses(this._rawClass);\n    this._applyClasses(this._initialClasses);\n\n    this._iterableDiffer = null;\n    this._keyValueDiffer = null;\n\n    this._rawClass = typeof value === 'string' ? value.split(/\\s+/) : value;\n\n    if (this._rawClass) {\n      if (isListLikeIterable(this._rawClass)) {\n        this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();\n      } else {\n        this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();\n      }\n    }\n  }\n\n  ngDoCheck() {\n    if (this._iterableDiffer) {\n      const iterableChanges = this._iterableDiffer.diff(this._rawClass as string[]);\n      if (iterableChanges) {\n        this._applyIterableChanges(iterableChanges);\n      }\n    } else if (this._keyValueDiffer) {\n      const keyValueChanges = this._keyValueDiffer.diff(this._rawClass as {[k: string]: any});\n      if (keyValueChanges) {\n        this._applyKeyValueChanges(keyValueChanges);\n      }\n    }\n  }\n\n  private _applyKeyValueChanges(changes: KeyValueChanges<string, any>): void {\n    changes.forEachAddedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachRemovedItem((record) => {\n      if (record.previousValue) {\n        this._toggleClass(record.key, false);\n      }\n    });\n  }\n\n  private _applyIterableChanges(changes: IterableChanges<string>): void {\n    changes.forEachAddedItem((record) => {\n      if (typeof record.item === 'string') {\n        this._toggleClass(record.item, true);\n      } else {\n        throw new Error(`NgClass can only toggle CSS classes expressed as strings, got ${\n            stringify(record.item)}`);\n      }\n    });\n\n    changes.forEachRemovedItem((record) => this._toggleClass(record.item, false));\n  }\n\n  /**\n   * Applies a collection of CSS classes to the DOM element.\n   *\n   * For argument of type Set and Array CSS class names contained in those collections are always\n   * added.\n   * For argument of type Map CSS class name in the map's key is toggled based on the value (added\n   * for truthy and removed for falsy).\n   */\n  private _applyClasses(rawClassVal: NgClassSupportedTypes) {\n    if (rawClassVal) {\n      if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n        (<any>rawClassVal).forEach((klass: string) => this._toggleClass(klass, true));\n      } else {\n        Object.keys(rawClassVal).forEach(klass => this._toggleClass(klass, !!rawClassVal[klass]));\n      }\n    }\n  }\n\n  /**\n   * Removes a collection of CSS classes from the DOM element. This is mostly useful for cleanup\n   * purposes.\n   */\n  private _removeClasses(rawClassVal: NgClassSupportedTypes) {\n    if (rawClassVal) {\n      if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n        (<any>rawClassVal).forEach((klass: string) => this._toggleClass(klass, false));\n      } else {\n        Object.keys(rawClassVal).forEach(klass => this._toggleClass(klass, false));\n      }\n    }\n  }\n\n  private _toggleClass(klass: string, enabled: boolean): void {\n    klass = klass.trim();\n    if (klass) {\n      klass.split(/\\s+/g).forEach(klass => {\n        if (enabled) {\n          this._renderer.addClass(this._ngEl.nativeElement, klass);\n        } else {\n          this._renderer.removeClass(this._ngEl.nativeElement, klass);\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, EmbeddedViewRef, Input, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDiffers, NgIterable, TemplateRef, TrackByFunction, ViewContainerRef} from '@angular/core';\n\n/**\n * @publicApi\n */\nexport class NgForOfContext<T, U extends NgIterable<T> = NgIterable<T>> {\n  constructor(public $implicit: T, public ngForOf: U, public index: number, public count: number) {}\n\n  get first(): boolean {\n    return this.index === 0;\n  }\n\n  get last(): boolean {\n    return this.index === this.count - 1;\n  }\n\n  get even(): boolean {\n    return this.index % 2 === 0;\n  }\n\n  get odd(): boolean {\n    return !this.even;\n  }\n}\n\n/**\n * A [structural directive](guide/structural-directives) that renders\n * a template for each item in a collection.\n * The directive is placed on an element, which becomes the parent\n * of the cloned templates.\n *\n * The `ngForOf` directive is generally used in the\n * [shorthand form](guide/structural-directives#the-asterisk--prefix) `*ngFor`.\n * In this form, the template to be rendered for each iteration is the content\n * of an anchor element containing the directive.\n *\n * The following example shows the shorthand syntax with some options,\n * contained in an `<li>` element.\n *\n * ```\n * <li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>\n * ```\n *\n * The shorthand form expands into a long form that uses the `ngForOf` selector\n * on an `<ng-template>` element.\n * The content of the `<ng-template>` element is the `<li>` element that held the\n * short-form directive.\n *\n * Here is the expanded version of the short-form example.\n *\n * ```\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n *\n * Angular automatically expands the shorthand syntax as it compiles the template.\n * The context for each embedded view is logically merged to the current component\n * context according to its lexical position.\n *\n * When using the shorthand syntax, Angular allows only [one structural directive\n * on an element](guide/structural-directives#one-structural-directive-per-host-element).\n * If you want to iterate conditionally, for example,\n * put the `*ngIf` on a container element that wraps the `*ngFor` element.\n * For futher discussion, see\n * [Structural Directives](guide/structural-directives#one-per-element).\n *\n * @usageNotes\n *\n * ### Local variables\n *\n * `NgForOf` provides exported values that can be aliased to local variables.\n * For example:\n *\n *  ```\n * <li *ngFor=\"let user of users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n *\n * The following exported values can be aliased to local variables:\n *\n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `count: number`: The length of the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n *\n * ### Change propagation\n *\n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n *\n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n *\n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls that are present, such as `<input>` elements that accept user input. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n * For more on animations, see [Transitions and Triggers](guide/transition-and-triggers).\n *\n * The identities of elements in the iterator can change while the data does not.\n * This can happen, for example, if the iterator is produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response produces objects with\n * different identities, and Angular must tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted).\n *\n * To avoid this expensive operation, you can customize the default tracking algorithm.\n * by supplying the `trackBy` option to `NgForOf`.\n * `trackBy` takes a function that has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n *\n * @see [Structural Directives](guide/structural-directives)\n * @ngModule CommonModule\n * @publicApi\n */\n@Directive({selector: '[ngFor][ngForOf]'})\nexport class NgForOf<T, U extends NgIterable<T> = NgIterable<T>> implements DoCheck {\n  /**\n   * The value of the iterable expression, which can be used as a\n   * [template input variable](guide/structural-directives#template-input-variable).\n   */\n  @Input()\n  set ngForOf(ngForOf: U&NgIterable<T>|undefined|null) {\n    this._ngForOf = ngForOf;\n    this._ngForOfDirty = true;\n  }\n  /**\n   * A function that defines how to track changes for items in the iterable.\n   *\n   * When items are added, moved, or removed in the iterable,\n   * the directive must re-render the appropriate DOM nodes.\n   * To minimize churn in the DOM, only nodes that have changed\n   * are re-rendered.\n   *\n   * By default, the change detector assumes that\n   * the object instance identifies the node in the iterable.\n   * When this function is supplied, the directive uses\n   * the result of calling this function to identify the item node,\n   * rather than the identity of the object itself.\n   *\n   * The function receives two inputs,\n   * the iteration index and the associated node data.\n   */\n  @Input()\n  set ngForTrackBy(fn: TrackByFunction<T>) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n      // TODO(vicb): use a log service once there is a public one available\n      if (<any>console && <any>console.warn) {\n        console.warn(\n            `trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\n            `See https://angular.io/api/common/NgForOf#change-propagation for more information.`);\n      }\n    }\n    this._trackByFn = fn;\n  }\n\n  get ngForTrackBy(): TrackByFunction<T> {\n    return this._trackByFn;\n  }\n\n  private _ngForOf: U|undefined|null = null;\n  private _ngForOfDirty: boolean = true;\n  private _differ: IterableDiffer<T>|null = null;\n  // TODO(issue/24571): remove '!'.\n  private _trackByFn!: TrackByFunction<T>;\n\n  constructor(\n      private _viewContainer: ViewContainerRef,\n      private _template: TemplateRef<NgForOfContext<T, U>>, private _differs: IterableDiffers) {}\n\n  /**\n   * A reference to the template that is stamped out for each item in the iterable.\n   * @see [template reference variable](guide/template-reference-variables)\n   */\n  @Input()\n  set ngForTemplate(value: TemplateRef<NgForOfContext<T, U>>) {\n    // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n    // The current type is too restrictive; a template that just uses index, for example,\n    // should be acceptable.\n    if (value) {\n      this._template = value;\n    }\n  }\n\n  /**\n   * Applies the changes when needed.\n   */\n  ngDoCheck(): void {\n    if (this._ngForOfDirty) {\n      this._ngForOfDirty = false;\n      // React on ngForOf changes only once all inputs have been initialized\n      const value = this._ngForOf;\n      if (!this._differ && value) {\n        try {\n          this._differ = this._differs.find(value).create(this.ngForTrackBy);\n        } catch {\n          throw new Error(`Cannot find a differ supporting object '${value}' of type '${\n              getTypeName(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\n        }\n      }\n    }\n    if (this._differ) {\n      const changes = this._differ.diff(this._ngForOf);\n      if (changes) this._applyChanges(changes);\n    }\n  }\n\n  private _applyChanges(changes: IterableChanges<T>) {\n    const insertTuples: RecordViewTuple<T, U>[] = [];\n    changes.forEachOperation(\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number|null,\n         currentIndex: number|null) => {\n          if (item.previousIndex == null) {\n            // NgForOf is never \"null\" or \"undefined\" here because the differ detected\n            // that a new item needs to be inserted from the iterable. This implies that\n            // there is an iterable value for \"_ngForOf\".\n            const view = this._viewContainer.createEmbeddedView(\n                this._template, new NgForOfContext<T, U>(null!, this._ngForOf!, -1, -1),\n                currentIndex === null ? undefined : currentIndex);\n            const tuple = new RecordViewTuple<T, U>(item, view);\n            insertTuples.push(tuple);\n          } else if (currentIndex == null) {\n            this._viewContainer.remove(\n                adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex);\n          } else if (adjustedPreviousIndex !== null) {\n            const view = this._viewContainer.get(adjustedPreviousIndex)!;\n            this._viewContainer.move(view, currentIndex);\n            const tuple = new RecordViewTuple(item, <EmbeddedViewRef<NgForOfContext<T, U>>>view);\n            insertTuples.push(tuple);\n          }\n        });\n\n    for (let i = 0; i < insertTuples.length; i++) {\n      this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n    }\n\n    for (let i = 0, ilen = this._viewContainer.length; i < ilen; i++) {\n      const viewRef = <EmbeddedViewRef<NgForOfContext<T, U>>>this._viewContainer.get(i);\n      viewRef.context.index = i;\n      viewRef.context.count = ilen;\n      viewRef.context.ngForOf = this._ngForOf!;\n    }\n\n    changes.forEachIdentityChange((record: any) => {\n      const viewRef =\n          <EmbeddedViewRef<NgForOfContext<T, U>>>this._viewContainer.get(record.currentIndex);\n      viewRef.context.$implicit = record.item;\n    });\n  }\n\n  private _perViewChange(\n      view: EmbeddedViewRef<NgForOfContext<T, U>>, record: IterableChangeRecord<any>) {\n    view.context.$implicit = record.item;\n  }\n\n  /**\n   * Asserts the correct type of the context for the template that `NgForOf` will render.\n   *\n   * The presence of this method is a signal to the Ivy template type-check compiler that the\n   * `NgForOf` structural directive renders its template with a specific context type.\n   */\n  static ngTemplateContextGuard<T, U extends NgIterable<T>>(dir: NgForOf<T, U>, ctx: any):\n      ctx is NgForOfContext<T, U> {\n    return true;\n  }\n}\n\nclass RecordViewTuple<T, U extends NgIterable<T>> {\n  constructor(public record: any, public view: EmbeddedViewRef<NgForOfContext<T, U>>) {}\n}\n\nfunction getTypeName(type: any): string {\n  return type['name'] || typeof type;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef, ɵstringify as stringify} from '@angular/core';\n\n\n/**\n * A structural directive that conditionally includes a template based on the value of\n * an expression coerced to Boolean.\n * When the expression evaluates to true, Angular renders the template\n * provided in a `then` clause, and when  false or null,\n * Angular renders the template provided in an optional `else` clause. The default\n * template for the `else` clause is blank.\n *\n * A [shorthand form](guide/structural-directives#the-asterisk--prefix) of the directive,\n * `*ngIf=\"condition\"`, is generally used, provided\n * as an attribute of the anchor element for the inserted template.\n * Angular expands this into a more explicit version, in which the anchor element\n * is contained in an `<ng-template>` element.\n *\n * Simple form with shorthand syntax:\n *\n * ```\n * <div *ngIf=\"condition\">Content to render when condition is true.</div>\n * ```\n *\n * Simple form with expanded syntax:\n *\n * ```\n * <ng-template [ngIf]=\"condition\"><div>Content to render when condition is\n * true.</div></ng-template>\n * ```\n *\n * Form with an \"else\" block:\n *\n * ```\n * <div *ngIf=\"condition; else elseBlock\">Content to render when condition is true.</div>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Shorthand form with \"then\" and \"else\" blocks:\n *\n * ```\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>Content to render when condition is true.</ng-template>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Form with storing the value locally:\n *\n * ```\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>Content to render when value is null.</ng-template>\n * ```\n *\n * @usageNotes\n *\n * The `*ngIf` directive is most commonly used to conditionally show an inline template,\n * as seen in the following  example.\n * The default `else` template is blank.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfSimple'}\n *\n * ### Showing an alternative template using `else`\n *\n * To display a template when `expression` evaluates to false, use an `else` template\n * binding as shown in the following example.\n * The `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.\n * The template can be defined anywhere in the component view, but is typically placed right after\n * `ngIf` for readability.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfElse'}\n *\n * ### Using an external `then` template\n *\n * In the previous example, the then-clause template is specified inline, as the content of the\n * tag that contains the `ngIf` directive. You can also specify a template that is defined\n * externally, by referencing a labeled `<ng-template>` element. When you do this, you can\n * change which template to use at runtime, as shown in the following example.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n *\n * ### Storing a conditional result in a variable\n *\n * You might want to show a set of properties from the same object. If you are waiting\n * for asynchronous data, the object can be undefined.\n * In this case, you can use `ngIf` and store the result of the condition in a local\n * variable as shown in the following example.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfAs'}\n *\n * This code uses only one `AsyncPipe`, so only one subscription is created.\n * The conditional statement stores the result of `userStream|async` in the local variable `user`.\n * You can then bind the local `user` repeatedly.\n *\n * The conditional displays the data only if `userStream` returns a value,\n * so you don't need to use the\n * safe-navigation-operator (`?.`)\n * to guard against null values when accessing properties.\n * You can display an alternative template while waiting for the data.\n *\n * ### Shorthand syntax\n *\n * The shorthand syntax `*ngIf` expands into two separate template specifications\n * for the \"then\" and \"else\" clauses. For example, consider the following shorthand statement,\n * that is meant to show a loading page while waiting for data to be loaded.\n *\n * ```\n * <div class=\"hero-list\" *ngIf=\"heroes else loading\">\n *  ...\n * </div>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * You can see that the \"else\" clause references the `<ng-template>`\n * with the `#loading` label, and the template for the \"then\" clause\n * is provided as the content of the anchor element.\n *\n * However, when Angular expands the shorthand syntax, it creates\n * another `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.\n * The anchor element containing the template for the \"then\" clause becomes\n * the content of this unlabeled `<ng-template>` tag.\n *\n * ```\n * <ng-template [ngIf]=\"heroes\" [ngIfElse]=\"loading\">\n *  <div class=\"hero-list\">\n *   ...\n *  </div>\n * </ng-template>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * The presence of the implicit template object has implications for the nesting of\n * structural directives. For more on this subject, see\n * [Structural Directives](https://angular.io/guide/structural-directives#one-per-element).\n *\n * @ngModule CommonModule\n * @publicApi\n */\n@Directive({selector: '[ngIf]'})\nexport class NgIf<T = unknown> {\n  private _context: NgIfContext<T> = new NgIfContext<T>();\n  private _thenTemplateRef: TemplateRef<NgIfContext<T>>|null = null;\n  private _elseTemplateRef: TemplateRef<NgIfContext<T>>|null = null;\n  private _thenViewRef: EmbeddedViewRef<NgIfContext<T>>|null = null;\n  private _elseViewRef: EmbeddedViewRef<NgIfContext<T>>|null = null;\n\n  constructor(private _viewContainer: ViewContainerRef, templateRef: TemplateRef<NgIfContext<T>>) {\n    this._thenTemplateRef = templateRef;\n  }\n\n  /**\n   * The Boolean expression to evaluate as the condition for showing a template.\n   */\n  @Input()\n  set ngIf(condition: T) {\n    this._context.$implicit = this._context.ngIf = condition;\n    this._updateView();\n  }\n\n  /**\n   * A template to show if the condition expression evaluates to true.\n   */\n  @Input()\n  set ngIfThen(templateRef: TemplateRef<NgIfContext<T>>|null) {\n    assertTemplate('ngIfThen', templateRef);\n    this._thenTemplateRef = templateRef;\n    this._thenViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n\n  /**\n   * A template to show if the condition expression evaluates to false.\n   */\n  @Input()\n  set ngIfElse(templateRef: TemplateRef<NgIfContext<T>>|null) {\n    assertTemplate('ngIfElse', templateRef);\n    this._elseTemplateRef = templateRef;\n    this._elseViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n\n  private _updateView() {\n    if (this._context.$implicit) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        this._elseViewRef = null;\n        if (this._thenTemplateRef) {\n          this._thenViewRef =\n              this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n        }\n      }\n    } else {\n      if (!this._elseViewRef) {\n        this._viewContainer.clear();\n        this._thenViewRef = null;\n        if (this._elseTemplateRef) {\n          this._elseViewRef =\n              this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n        }\n      }\n    }\n  }\n\n  /** @internal */\n  public static ngIfUseIfTypeGuard: void;\n\n  /**\n   * Assert the correct type of the expression bound to the `ngIf` input within the template.\n   *\n   * The presence of this static field is a signal to the Ivy template type check compiler that\n   * when the `NgIf` structural directive renders its template, the type of the expression bound\n   * to `ngIf` should be narrowed in some way. For `NgIf`, the binding expression itself is used to\n   * narrow its type, which allows the strictNullChecks feature of TypeScript to work with `NgIf`.\n   */\n  static ngTemplateGuard_ngIf: 'binding';\n\n  /**\n   * Asserts the correct type of the context for the template that `NgIf` will render.\n   *\n   * The presence of this method is a signal to the Ivy template type-check compiler that the\n   * `NgIf` structural directive renders its template with a specific context type.\n   */\n  static ngTemplateContextGuard<T>(dir: NgIf<T>, ctx: any):\n      ctx is NgIfContext<Exclude<T, false|0|''|null|undefined>> {\n    return true;\n  }\n}\n\n/**\n * @publicApi\n */\nexport class NgIfContext<T = unknown> {\n  public $implicit: T = null!;\n  public ngIf: T = null!;\n}\n\nfunction assertTemplate(property: string, templateRef: TemplateRef<any>|null): void {\n  const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);\n  if (!isTemplateRefOrNull) {\n    throw new Error(`${property} must be a TemplateRef, but received '${stringify(templateRef)}'.`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, EventEmitter, OnDestroy, Pipe, PipeTransform, ɵisPromise, ɵisSubscribable} from '@angular/core';\nimport {Subscribable, Unsubscribable} from 'rxjs';\n\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\ninterface SubscriptionStrategy {\n  createSubscription(async: Subscribable<any>|Promise<any>, updateLatestValue: any): Unsubscribable\n      |Promise<any>;\n  dispose(subscription: Unsubscribable|Promise<any>): void;\n  onDestroy(subscription: Unsubscribable|Promise<any>): void;\n}\n\nclass SubscribableStrategy implements SubscriptionStrategy {\n  createSubscription(async: Subscribable<any>, updateLatestValue: any): Unsubscribable {\n    return async.subscribe({\n      next: updateLatestValue,\n      error: (e: any) => {\n        throw e;\n      }\n    });\n  }\n\n  dispose(subscription: Unsubscribable): void {\n    subscription.unsubscribe();\n  }\n\n  onDestroy(subscription: Unsubscribable): void {\n    subscription.unsubscribe();\n  }\n}\n\nclass PromiseStrategy implements SubscriptionStrategy {\n  createSubscription(async: Promise<any>, updateLatestValue: (v: any) => any): Promise<any> {\n    return async.then(updateLatestValue, e => {\n      throw e;\n    });\n  }\n\n  dispose(subscription: Promise<any>): void {}\n\n  onDestroy(subscription: Promise<any>): void {}\n}\n\nconst _promiseStrategy = new PromiseStrategy();\nconst _subscribableStrategy = new SubscribableStrategy();\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Unwraps a value from an asynchronous primitive.\n *\n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks.\n *\n * @usageNotes\n *\n * ### Examples\n *\n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n *\n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n *\n * @publicApi\n */\n@Pipe({name: 'async', pure: false})\nexport class AsyncPipe implements OnDestroy, PipeTransform {\n  private _latestValue: any = null;\n\n  private _subscription: Unsubscribable|Promise<any>|null = null;\n  private _obj: Subscribable<any>|Promise<any>|EventEmitter<any>|null = null;\n  private _strategy: SubscriptionStrategy = null!;\n\n  constructor(private _ref: ChangeDetectorRef) {}\n\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._dispose();\n    }\n  }\n\n  transform<T>(obj: Subscribable<T>|Promise<T>): T|null;\n  transform<T>(obj: null|undefined): null;\n  transform<T>(obj: Subscribable<T>|Promise<T>|null|undefined): T|null;\n  transform<T>(obj: Subscribable<T>|Promise<T>|null|undefined): T|null {\n    if (!this._obj) {\n      if (obj) {\n        this._subscribe(obj);\n      }\n      return this._latestValue;\n    }\n\n    if (obj !== this._obj) {\n      this._dispose();\n      return this.transform(obj);\n    }\n\n    return this._latestValue;\n  }\n\n  private _subscribe(obj: Subscribable<any>|Promise<any>|EventEmitter<any>): void {\n    this._obj = obj;\n    this._strategy = this._selectStrategy(obj);\n    this._subscription = this._strategy.createSubscription(\n        obj, (value: Object) => this._updateLatestValue(obj, value));\n  }\n\n  private _selectStrategy(obj: Subscribable<any>|Promise<any>|EventEmitter<any>): any {\n    if (ɵisPromise(obj)) {\n      return _promiseStrategy;\n    }\n\n    if (ɵisSubscribable(obj)) {\n      return _subscribableStrategy;\n    }\n\n    throw invalidPipeArgumentError(AsyncPipe, obj);\n  }\n\n  private _dispose(): void {\n    this._strategy.dispose(this._subscription!);\n    this._latestValue = null;\n    this._subscription = null;\n    this._obj = null;\n  }\n\n  private _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      this._ref.markForCheck();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type, ɵstringify as stringify} from '@angular/core';\n\nexport function invalidPipeArgumentError(type: Type<any>, value: Object) {\n  return Error(`InvalidPipeArgument: '${value}' for pipe '${stringify(type)}'`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {COMMON_DIRECTIVES} from './directives/index';\nimport {NgLocaleLocalization, NgLocalization} from './i18n/localization';\nimport {COMMON_PIPES} from './pipes/index';\n\n\n// Note: This does not contain the location providers,\n// as they need some platform specific implementations to work.\n/**\n * Exports all the basic Angular directives and pipes,\n * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * * The `providers` options configure the NgModule's injector to provide\n * localization dependencies to members.\n * * The `exports` options make the declared directives and pipes available for import\n * by other NgModules.\n *\n * @publicApi\n */\n@NgModule({\n  declarations: [COMMON_DIRECTIVES, COMMON_PIPES],\n  exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n  providers: [\n    {provide: NgLocalization, useClass: NgLocaleLocalization},\n  ],\n})\nexport class CommonModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const PLATFORM_BROWSER_ID = 'browser';\nexport const PLATFORM_SERVER_ID = 'server';\nexport const PLATFORM_WORKER_APP_ID = 'browserWorkerApp';\nexport const PLATFORM_WORKER_UI_ID = 'browserWorkerUi';\n\n/**\n * Returns whether a platform id represents a browser platform.\n * @publicApi\n */\nexport function isPlatformBrowser(platformId: Object): boolean {\n  return platformId === PLATFORM_BROWSER_ID;\n}\n\n/**\n * Returns whether a platform id represents a server platform.\n * @publicApi\n */\nexport function isPlatformServer(platformId: Object): boolean {\n  return platformId === PLATFORM_SERVER_ID;\n}\n\n/**\n * Returns whether a platform id represents a web worker app platform.\n * @publicApi\n */\nexport function isPlatformWorkerApp(platformId: Object): boolean {\n  return platformId === PLATFORM_WORKER_APP_ID;\n}\n\n/**\n * Returns whether a platform id represents a web worker UI platform.\n * @publicApi\n */\nexport function isPlatformWorkerUi(platformId: Object): boolean {\n  return platformId === PLATFORM_WORKER_UI_ID;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵɵdefineInjectable, ɵɵinject} from '@angular/core';\n\nimport {DOCUMENT} from './dom_tokens';\n\n\n\n/**\n * Defines a scroll position manager. Implemented by `BrowserViewportScroller`.\n *\n * @publicApi\n */\nexport abstract class ViewportScroller {\n  // De-sugared tree-shakable injection\n  // See #23917\n  /** @nocollapse */\n  static ɵprov = ɵɵdefineInjectable({\n    token: ViewportScroller,\n    providedIn: 'root',\n    factory: () => new BrowserViewportScroller(ɵɵinject(DOCUMENT), window)\n  });\n\n  /**\n   * Configures the top offset used when scrolling to an anchor.\n   * @param offset A position in screen coordinates (a tuple with x and y values)\n   * or a function that returns the top offset position.\n   *\n   */\n  abstract setOffset(offset: [number, number]|(() => [number, number])): void;\n\n  /**\n   * Retrieves the current scroll position.\n   * @returns A position in screen coordinates (a tuple with x and y values).\n   */\n  abstract getScrollPosition(): [number, number];\n\n  /**\n   * Scrolls to a specified position.\n   * @param position A position in screen coordinates (a tuple with x and y values).\n   */\n  abstract scrollToPosition(position: [number, number]): void;\n\n  /**\n   * Scrolls to an anchor element.\n   * @param anchor The ID of the anchor element.\n   */\n  abstract scrollToAnchor(anchor: string): void;\n\n  /**\n   * Disables automatic scroll restoration provided by the browser.\n   * See also [window.history.scrollRestoration\n   * info](https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration).\n   */\n  abstract setHistoryScrollRestoration(scrollRestoration: 'auto'|'manual'): void;\n}\n\n/**\n * Manages the scroll position for a browser window.\n */\nexport class BrowserViewportScroller implements ViewportScroller {\n  private offset: () => [number, number] = () => [0, 0];\n\n  constructor(private document: Document, private window: Window) {}\n\n  /**\n   * Configures the top offset used when scrolling to an anchor.\n   * @param offset A position in screen coordinates (a tuple with x and y values)\n   * or a function that returns the top offset position.\n   *\n   */\n  setOffset(offset: [number, number]|(() => [number, number])): void {\n    if (Array.isArray(offset)) {\n      this.offset = () => offset;\n    } else {\n      this.offset = offset;\n    }\n  }\n\n  /**\n   * Retrieves the current scroll position.\n   * @returns The position in screen coordinates.\n   */\n  getScrollPosition(): [number, number] {\n    if (this.supportsScrolling()) {\n      return [this.window.pageXOffset, this.window.pageYOffset];\n    } else {\n      return [0, 0];\n    }\n  }\n\n  /**\n   * Sets the scroll position.\n   * @param position The new position in screen coordinates.\n   */\n  scrollToPosition(position: [number, number]): void {\n    if (this.supportsScrolling()) {\n      this.window.scrollTo(position[0], position[1]);\n    }\n  }\n\n  /**\n   * Scrolls to an element and attempts to focus the element.\n   *\n   * Note that the function name here is misleading in that the target string may be an ID for a\n   * non-anchor element.\n   *\n   * @param target The ID of an element or name of the anchor.\n   *\n   * @see https://html.spec.whatwg.org/#the-indicated-part-of-the-document\n   * @see https://html.spec.whatwg.org/#scroll-to-fragid\n   */\n  scrollToAnchor(target: string): void {\n    if (!this.supportsScrolling()) {\n      return;\n    }\n    // TODO(atscott): The correct behavior for `getElementsByName` would be to also verify that the\n    // element is an anchor. However, this could be considered a breaking change and should be\n    // done in a major version.\n    const elSelected: HTMLElement|undefined =\n        this.document.getElementById(target) ?? this.document.getElementsByName(target)[0];\n    if (elSelected === undefined) {\n      return;\n    }\n\n    this.scrollToElement(elSelected);\n    // After scrolling to the element, the spec dictates that we follow the focus steps for the\n    // target. Rather than following the robust steps, simply attempt focus.\n    this.attemptFocus(elSelected);\n  }\n\n  /**\n   * Disables automatic scroll restoration provided by the browser.\n   */\n  setHistoryScrollRestoration(scrollRestoration: 'auto'|'manual'): void {\n    if (this.supportScrollRestoration()) {\n      const history = this.window.history;\n      if (history && history.scrollRestoration) {\n        history.scrollRestoration = scrollRestoration;\n      }\n    }\n  }\n\n  /**\n   * Scrolls to an element using the native offset and the specified offset set on this scroller.\n   *\n   * The offset can be used when we know that there is a floating header and scrolling naively to an\n   * element (ex: `scrollIntoView`) leaves the element hidden behind the floating header.\n   */\n  private scrollToElement(el: HTMLElement): void {\n    const rect = el.getBoundingClientRect();\n    const left = rect.left + this.window.pageXOffset;\n    const top = rect.top + this.window.pageYOffset;\n    const offset = this.offset();\n    this.window.scrollTo(left - offset[0], top - offset[1]);\n  }\n\n  /**\n   * Calls `focus` on the `focusTarget` and returns `true` if the element was focused successfully.\n   *\n   * If `false`, further steps may be necessary to determine a valid substitute to be focused\n   * instead.\n   *\n   * @see https://html.spec.whatwg.org/#get-the-focusable-area\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus\n   * @see https://html.spec.whatwg.org/#focusable-area\n   */\n  private attemptFocus(focusTarget: HTMLElement): boolean {\n    focusTarget.focus();\n    return this.document.activeElement === focusTarget;\n  }\n\n  /**\n   * We only support scroll restoration when we can get a hold of window.\n   * This means that we do not support this behavior when running in a web worker.\n   *\n   * Lifting this restriction right now would require more changes in the dom adapter.\n   * Since webworkers aren't widely used, we will lift it once RouterScroller is\n   * battle-tested.\n   */\n  private supportScrollRestoration(): boolean {\n    try {\n      if (!this.supportsScrolling()) {\n        return false;\n      }\n      // The `scrollRestoration` property could be on the `history` instance or its prototype.\n      const scrollRestorationDescriptor = getScrollRestorationProperty(this.window.history) ||\n          getScrollRestorationProperty(Object.getPrototypeOf(this.window.history));\n      // We can write to the `scrollRestoration` property if it is a writable data field or it has a\n      // setter function.\n      return !!scrollRestorationDescriptor &&\n          !!(scrollRestorationDescriptor.writable || scrollRestorationDescriptor.set);\n    } catch {\n      return false;\n    }\n  }\n\n  private supportsScrolling(): boolean {\n    try {\n      return !!this.window && !!this.window.scrollTo && 'pageXOffset' in this.window;\n    } catch {\n      return false;\n    }\n  }\n}\n\nfunction getScrollRestorationProperty(obj: any): PropertyDescriptor|undefined {\n  return Object.getOwnPropertyDescriptor(obj, 'scrollRestoration');\n}\n\n/**\n * Provides an empty implementation of the viewport scroller.\n */\nexport class NullViewportScroller implements ViewportScroller {\n  /**\n   * Empty implementation\n   */\n  setOffset(offset: [number, number]|(() => [number, number])): void {}\n\n  /**\n   * Empty implementation\n   */\n  getScrollPosition(): [number, number] {\n    return [0, 0];\n  }\n\n  /**\n   * Empty implementation\n   */\n  scrollToPosition(position: [number, number]): void {}\n\n  /**\n   * Empty implementation\n   */\n  scrollToAnchor(anchor: string): void {}\n\n  /**\n   * Empty implementation\n   */\n  setHistoryScrollRestoration(scrollRestoration: 'auto'|'manual'): void {}\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n * Emit only click events whose target was a DIV element\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { filter } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => ev.target.tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parentOrParents: Subscription | Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (this as any)._ctorUnsubscribe = true;\n      (this as any)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parentOrParents, _ctorUnsubscribe, _unsubscribe, _subscriptions } = (this as any);\n\n    this.closed = true;\n    this._parentOrParents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    if (_parentOrParents instanceof Subscription) {\n      _parentOrParents.remove(this);\n    } else if (_parentOrParents !== null) {\n      for (let index = 0; index < _parentOrParents.length; ++index) {\n        const parent = _parentOrParents[index];\n        parent.remove(this);\n      }\n    }\n\n    if (isFunction(_unsubscribe)) {\n      // It's only possible to null _unsubscribe - to release the reference to\n      // any teardown function passed in the constructor - if the property was\n      // actually assigned in the constructor, as there are some classes that\n      // are derived from Subscriber (which derives from Subscription) that\n      // implement an _unsubscribe method as a mechanism for obtaining\n      // unsubscription notifications and some of those subscribers are\n      // recycled. Also, in some of those subscribers, _unsubscribe switches\n      // from a prototype method to an instance property - see notifyNext in\n      // RetryWhenSubscriber.\n      if (_ctorUnsubscribe) {\n        (this as any)._unsubscribe = undefined;\n      }\n      try {\n        _unsubscribe.call(this);\n      } catch (e) {\n        errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n      let index = -1;\n      let len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          try {\n            sub.unsubscribe();\n          } catch (e) {\n            errors = errors || [];\n            if (e instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n            } else {\n              errors.push(e);\n            }\n          }\n        }\n      }\n    }\n\n    if (errors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription. Can also be used to add a child subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * When a parent subscription is unsubscribed, any child subscriptions that were added to it are also unsubscribed.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    let subscription = (<Subscription>teardown);\n\n    if (!teardown) {\n      return Subscription.EMPTY;\n    }\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void)>teardown);\n      case 'object':\n        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          // This also covers the case where `subscription` is `Subscription.EMPTY`, which is always in `closed` state.\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (!(subscription instanceof Subscription)) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default: {\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n      }\n    }\n\n    // Add `this` as parent of `subscription` if that's not already the case.\n    let { _parentOrParents } = subscription;\n    if (_parentOrParents === null) {\n      // If we don't have a parent, then set `subscription._parents` to\n      // the `this`, which is the common case that we optimize for.\n      subscription._parentOrParents = this;\n    } else if (_parentOrParents instanceof Subscription) {\n      if (_parentOrParents === this) {\n        // The `subscription` already has `this` as a parent.\n        return subscription;\n      }\n      // If there's already one parent, but not multiple, allocate an\n      // Array to store the rest of the parent Subscriptions.\n      subscription._parentOrParents = [_parentOrParents, this];\n    } else if (_parentOrParents.indexOf(this) === -1) {\n      // Only add `this` to the _parentOrParents list if it's not already there.\n      _parentOrParents.push(this);\n    } else {\n      // The `subscription` already has `this` as a parent.\n      return subscription;\n    }\n\n    // Optimize for the common case when adding the first subscription.\n    const subscriptions = this._subscriptions;\n    if (subscriptions === null) {\n      this._subscriptions = [subscription];\n    } else {\n      subscriptions.push(subscription);\n    }\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  new(errors: any[]): UnsubscriptionError;\n}\n\nconst UnsubscriptionErrorImpl = (() => {\n  function UnsubscriptionErrorImpl(this: any, errors: any[]) {\n    Error.call(this);\n    this.message = errors ?\n      `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n    return this;\n  }\n\n  UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\n\n  return UnsubscriptionErrorImpl;\n})();\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = UnsubscriptionErrorImpl as any;","export interface EmptyError extends Error {\n}\n\nexport interface EmptyErrorCtor {\n  new(): EmptyError;\n}\n\nconst EmptyErrorImpl = (() => {\n  function EmptyErrorImpl(this: any) {\n    Error.call(this);\n    this.message = 'no elements in sequence';\n    this.name = 'EmptyError';\n    return this;\n  }\n\n  EmptyErrorImpl.prototype = Object.create(Error.prototype);\n\n  return EmptyErrorImpl;\n})();\n\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport const EmptyError: EmptyErrorCtor = EmptyErrorImpl as any;","import { Observable } from '../Observable';\nimport { SubscribableOrPromise, ObservedValueOf, ObservableInput } from '../types';\nimport { from } from './from'; // lol\nimport { empty } from './empty';\n\n/**\n * Creates an Observable that, on subscribe, calls an Observable factory to\n * make an Observable for each new Observer.\n *\n * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n * is subscribed.\n * </span>\n *\n * ![](defer.png)\n *\n * `defer` allows you to create the Observable only when the Observer\n * subscribes, and create a fresh Observable for each Observer. It waits until\n * an Observer subscribes to it, and then it generates an Observable,\n * typically with an Observable factory function. It does this afresh for each\n * subscriber, so although each subscriber may think it is subscribing to the\n * same Observable, in fact each subscriber gets its own individual\n * Observable.\n *\n * ## Example\n * ### Subscribe to either an Observable of clicks or an Observable of interval, at random\n * ```ts\n * import { defer, fromEvent, interval } from 'rxjs';\n *\n * const clicksOrInterval = defer(function () {\n *   return Math.random() > 0.5\n *     ? fromEvent(document, 'click')\n *     : interval(1000);\n * });\n * clicksOrInterval.subscribe(x => console.log(x));\n *\n * // Results in the following behavior:\n * // If the result of Math.random() is greater than 0.5 it will listen\n * // for clicks anywhere on the \"document\"; when document is clicked it\n * // will log a MouseEvent object to the console. If the result is less\n * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n * ```\n *\n * @see {@link Observable}\n *\n * @param {function(): SubscribableOrPromise} observableFactory The Observable\n * factory function to invoke for each Observer that subscribes to the output\n * Observable. May also return a Promise, which will be converted on the fly\n * to an Observable.\n * @return {Observable} An Observable whose Observers' subscriptions trigger\n * an invocation of the given Observable factory function.\n * @static true\n * @name defer\n * @owner Observable\n */\nexport function defer<R extends ObservableInput<any> | void>(observableFactory: () => R): Observable<ObservedValueOf<R>> {\n  return new Observable<ObservedValueOf<R>>(subscriber => {\n    let input: R | void;\n    try {\n      input = observableFactory();\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n    const source = input ? from(input as ObservableInput<ObservedValueOf<R>>) : empty();\n    return source.subscribe(subscriber);\n  });\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed: R): OperatorFunction<T, R>;\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * ![](scan.png)\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * ## Example\n * Count the number of click events\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { scan, mapTo } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const ones = clicks.pipe(mapTo(1));\n * const seed = 0;\n * const count = ones.pipe(scan((acc, one) => acc + one, seed));\n * count.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * ![](takeLast.png)\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * ## Example\n * Take the last 3 values of an Observable with many values\n * ```ts\n * import { range } from 'rxjs';\n * import { takeLast } from 'rxjs/operators';\n *\n * const many = range(1, 100);\n * const lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { EmptyError } from '../util/EmptyError';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic, MonoTypeOperatorFunction } from '../types';\n\n/**\n * If the source observable completes without emitting a value, it will emit\n * an error. The error will be created at that time by the optional\n * `errorFactory` argument, otherwise, the error will be {@link EmptyError}.\n *\n * ![](throwIfEmpty.png)\n *\n * ## Example\n * ```ts\n * import { fromEvent, timer } from 'rxjs';\n * import { throwIfEmpty, takeUntil } from 'rxjs/operators';\n *\n * const click$ = fromEvent(document, 'click');\n *\n * click$.pipe(\n *   takeUntil(timer(1000)),\n *   throwIfEmpty(\n *     () => new Error('the document was not clicked within 1 second')\n *   ),\n * )\n * .subscribe({\n *   next() { console.log('The button was clicked'); },\n *   error(err) { console.error(err); }\n * });\n * ```\n *\n * @param errorFactory A factory function called to produce the\n * error to be thrown when the source observable completes without emitting a\n * value.\n */\nexport function throwIfEmpty <T>(errorFactory: (() => any) = defaultErrorFactory): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    return source.lift(new ThrowIfEmptyOperator(errorFactory));\n  };\n}\n\nclass ThrowIfEmptyOperator<T> implements Operator<T, T> {\n  constructor(private errorFactory: () => any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));\n  }\n}\n\nclass ThrowIfEmptySubscriber<T> extends Subscriber<T> {\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>, private errorFactory: () => any) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.hasValue = true;\n    this.destination.next(value);\n  }\n\n  protected _complete() {\n    if (!this.hasValue) {\n      let err: any;\n      try {\n        err = this.errorFactory();\n      } catch (e) {\n        err = e;\n      }\n      this.destination.error(err);\n    } else {\n        return this.destination.complete();\n    }\n  }\n}\n\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * ![](defaultIfEmpty.png)\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * ## Example\n * If no clicks happen in 5 seconds, then emit \"no clicks\"\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { defaultIfEmpty, takeUntil } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksBeforeFive = clicks.pipe(takeUntil(interval(5000)));\n * const result = clicksBeforeFive.pipe(defaultIfEmpty('no clicks'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction } from '../../internal/types';\nimport { filter } from './filter';\nimport { take } from './take';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { identity } from '../util/identity';\n\n/* tslint:disable:max-line-length */\nexport function first<T, D = T>(\n  predicate?: null,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;\nexport function first<T, S extends T>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue?: S\n): OperatorFunction<T, S>;\nexport function first<T, D = T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * ![](first.png)\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a deprecated `resultSelector` function to produce the output\n * value from the input value, and a `defaultValue` to emit in case the source\n * completes before it is able to emit a valid value. Throws an error if\n * `defaultValue` was not provided and a matching element is not found.\n *\n * ## Examples\n * Emit only the first click that happens on the DOM\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { first } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(first());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Emits the first click that happens on a DIV\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { first } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(first(ev => ev.target.tagName === 'DIV'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, D>(\n  predicate?: ((value: T, index: number, source: Observable<T>) => boolean) | null,\n  defaultValue?: D\n): OperatorFunction<T, T | D> {\n  const hasDefaultValue = arguments.length >= 2;\n  return (source: Observable<T>) => source.pipe(\n    predicate ? filter((v, i) => predicate(v, i, source)) : identity,\n    take(1),\n    hasDefaultValue ? defaultIfEmpty<T | D>(defaultValue) : throwIfEmpty(() => new EmptyError()),\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Route} from './config';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from './router_state';\n\n/**\n * Identifies the call or event that triggered a navigation.\n *\n * * 'imperative': Triggered by `router.navigateByUrl()` or `router.navigate()`.\n * * 'popstate' : Triggered by a `popstate` event.\n * * 'hashchange'-: Triggered by a `hashchange` event.\n *\n * @publicApi\n */\nexport type NavigationTrigger = 'imperative'|'popstate'|'hashchange';\n\n/**\n * Base for events the router goes through, as opposed to events tied to a specific\n * route. Fired one time for any given navigation.\n *\n * The following code shows how a class subscribes to router events.\n *\n * ```ts\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.pipe(\n *        filter((e: Event): e is RouterEvent => e instanceof RouterEvent)\n *     ).subscribe((e: RouterEvent) => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n *\n * @see `Event`\n * @see [Router events summary](guide/router#router-events)\n * @publicApi\n */\nexport class RouterEvent {\n  constructor(\n      /** A unique ID that the router assigns to every router navigation. */\n      public id: number,\n      /** The URL that is the destination for this navigation. */\n      public url: string) {}\n}\n\n/**\n * An event triggered when a navigation starts.\n *\n * @publicApi\n */\nexport class NavigationStart extends RouterEvent {\n  /**\n   * Identifies the call or event that triggered the navigation.\n   * An `imperative` trigger is a call to `router.navigateByUrl()` or `router.navigate()`.\n   *\n   * @see `NavigationEnd`\n   * @see `NavigationCancel`\n   * @see `NavigationError`\n   */\n  navigationTrigger?: 'imperative'|'popstate'|'hashchange';\n\n  /**\n   * The navigation state that was previously supplied to the `pushState` call,\n   * when the navigation is triggered by a `popstate` event. Otherwise null.\n   *\n   * The state object is defined by `NavigationExtras`, and contains any\n   * developer-defined state value, as well as a unique ID that\n   * the router assigns to every router transition/navigation.\n   *\n   * From the perspective of the router, the router never \"goes back\".\n   * When the user clicks on the back button in the browser,\n   * a new navigation ID is created.\n   *\n   * Use the ID in this previous-state object to differentiate between a newly created\n   * state and one returned to by a `popstate` event, so that you can restore some\n   * remembered state, such as scroll position.\n   *\n   */\n  restoredState?: {[k: string]: any, navigationId: number}|null;\n\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      navigationTrigger: 'imperative'|'popstate'|'hashchange' = 'imperative',\n      /** @docsNotRequired */\n      restoredState: {[k: string]: any, navigationId: number}|null = null) {\n    super(id, url);\n    this.navigationTrigger = navigationTrigger;\n    this.restoredState = restoredState;\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return `NavigationStart(id: ${this.id}, url: '${this.url}')`;\n  }\n}\n\n/**\n * An event triggered when a navigation ends successfully.\n *\n * @see `NavigationStart`\n * @see `NavigationCancel`\n * @see `NavigationError`\n *\n * @publicApi\n */\nexport class NavigationEnd extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${\n        this.urlAfterRedirects}')`;\n  }\n}\n\n/**\n * An event triggered when a navigation is canceled, directly or indirectly.\n * This can happen when a route guard\n * returns `false` or initiates a redirect by returning a `UrlTree`.\n *\n * @see `NavigationStart`\n * @see `NavigationEnd`\n * @see `NavigationError`\n *\n * @publicApi\n */\nexport class NavigationCancel extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public reason: string) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;\n  }\n}\n\n/**\n * An event triggered when a navigation fails due to an unexpected error.\n *\n * @see `NavigationStart`\n * @see `NavigationEnd`\n * @see `NavigationCancel`\n *\n * @publicApi\n */\nexport class NavigationError extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public error: any) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n  }\n}\n\n/**\n * An event triggered when routes are recognized.\n *\n * @publicApi\n */\nexport class RoutesRecognized extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${\n        this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered at the start of the Guard phase of routing.\n *\n * @see `GuardsCheckEnd`\n *\n * @publicApi\n */\nexport class GuardsCheckStart extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  toString(): string {\n    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${\n        this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered at the end of the Guard phase of routing.\n *\n * @see `GuardsCheckStart`\n *\n * @publicApi\n */\nexport class GuardsCheckEnd extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot,\n      /** @docsNotRequired */\n      public shouldActivate: boolean) {\n    super(id, url);\n  }\n\n  toString(): string {\n    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${\n        this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\n  }\n}\n\n/**\n * An event triggered at the start of the Resolve phase of routing.\n *\n * Runs in the \"resolve\" phase whether or not there is anything to resolve.\n * In future, may change to only run when there are things to be resolved.\n *\n * @see `ResolveEnd`\n *\n * @publicApi\n */\nexport class ResolveStart extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  toString(): string {\n    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${\n        this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered at the end of the Resolve phase of routing.\n * @see `ResolveStart`.\n *\n * @publicApi\n */\nexport class ResolveEnd extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  toString(): string {\n    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${\n        this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered before lazy loading a route configuration.\n *\n * @see `RouteConfigLoadEnd`\n *\n * @publicApi\n */\nexport class RouteConfigLoadStart {\n  constructor(\n      /** @docsNotRequired */\n      public route: Route) {}\n  toString(): string {\n    return `RouteConfigLoadStart(path: ${this.route.path})`;\n  }\n}\n\n/**\n * An event triggered when a route has been lazy loaded.\n *\n * @see `RouteConfigLoadStart`\n *\n * @publicApi\n */\nexport class RouteConfigLoadEnd {\n  constructor(\n      /** @docsNotRequired */\n      public route: Route) {}\n  toString(): string {\n    return `RouteConfigLoadEnd(path: ${this.route.path})`;\n  }\n}\n\n/**\n * An event triggered at the start of the child-activation\n * part of the Resolve phase of routing.\n * @see  `ChildActivationEnd`\n * @see `ResolveStart`\n *\n * @publicApi\n */\nexport class ChildActivationStart {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationStart(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered at the end of the child-activation part\n * of the Resolve phase of routing.\n * @see `ChildActivationStart`\n * @see `ResolveStart`\n * @publicApi\n */\nexport class ChildActivationEnd {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationEnd(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered at the start of the activation part\n * of the Resolve phase of routing.\n * @see `ActivationEnd`\n * @see `ResolveStart`\n *\n * @publicApi\n */\nexport class ActivationStart {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationStart(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered at the end of the activation part\n * of the Resolve phase of routing.\n * @see `ActivationStart`\n * @see `ResolveStart`\n *\n * @publicApi\n */\nexport class ActivationEnd {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationEnd(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered by scrolling.\n *\n * @publicApi\n */\nexport class Scroll {\n  constructor(\n      /** @docsNotRequired */\n      readonly routerEvent: NavigationEnd,\n\n      /** @docsNotRequired */\n      readonly position: [number, number]|null,\n\n      /** @docsNotRequired */\n      readonly anchor: string|null) {}\n\n  toString(): string {\n    const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;\n    return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;\n  }\n}\n\n/**\n * Router events that allow you to track the lifecycle of the router.\n *\n * The events occur in the following sequence:\n *\n * * [NavigationStart](api/router/NavigationStart): Navigation starts.\n * * [RouteConfigLoadStart](api/router/RouteConfigLoadStart): Before\n * the router [lazy loads](/guide/router#lazy-loading) a route configuration.\n * * [RouteConfigLoadEnd](api/router/RouteConfigLoadEnd): After a route has been lazy loaded.\n * * [RoutesRecognized](api/router/RoutesRecognized): When the router parses the URL\n * and the routes are recognized.\n * * [GuardsCheckStart](api/router/GuardsCheckStart): When the router begins the *guards*\n * phase of routing.\n * * [ChildActivationStart](api/router/ChildActivationStart): When the router\n * begins activating a route's children.\n * * [ActivationStart](api/router/ActivationStart): When the router begins activating a route.\n * * [GuardsCheckEnd](api/router/GuardsCheckEnd): When the router finishes the *guards*\n * phase of routing successfully.\n * * [ResolveStart](api/router/ResolveStart): When the router begins the *resolve*\n * phase of routing.\n * * [ResolveEnd](api/router/ResolveEnd): When the router finishes the *resolve*\n * phase of routing successfuly.\n * * [ChildActivationEnd](api/router/ChildActivationEnd): When the router finishes\n * activating a route's children.\n * * [ActivationEnd](api/router/ActivationEnd): When the router finishes activating a route.\n * * [NavigationEnd](api/router/NavigationEnd): When navigation ends successfully.\n * * [NavigationCancel](api/router/NavigationCancel): When navigation is canceled.\n * * [NavigationError](api/router/NavigationError): When navigation fails\n * due to an unexpected error.\n * * [Scroll](api/router/Scroll): When the user scrolls.\n *\n * @publicApi\n */\nexport type Event = RouterEvent|RouteConfigLoadStart|RouteConfigLoadEnd|ChildActivationStart|\n    ChildActivationEnd|ActivationStart|ActivationEnd|Scroll;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Route, UrlMatchResult} from './config';\nimport {UrlSegment, UrlSegmentGroup} from './url_tree';\n\n\n/**\n * The primary routing outlet.\n *\n * @publicApi\n */\nexport const PRIMARY_OUTLET = 'primary';\n\n/**\n * A collection of matrix and query URL parameters.\n * @see `convertToParamMap()`\n * @see `ParamMap`\n *\n * @publicApi\n */\nexport type Params = {\n  [key: string]: any;\n};\n\n/**\n * A map that provides access to the required and optional parameters\n * specific to a route.\n * The map supports retrieving a single value with `get()`\n * or multiple values with `getAll()`.\n *\n * @see [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n *\n * @publicApi\n */\nexport interface ParamMap {\n  /**\n   * Reports whether the map contains a given parameter.\n   * @param name The parameter name.\n   * @returns True if the map contains the given parameter, false otherwise.\n   */\n  has(name: string): boolean;\n  /**\n   * Retrieves a single value for a parameter.\n   * @param name The parameter name.\n   * @return The parameter's single value,\n   * or the first value if the parameter has multiple values,\n   * or `null` when there is no such parameter.\n   */\n  get(name: string): string|null;\n  /**\n   * Retrieves multiple values for a parameter.\n   * @param name The parameter name.\n   * @return An array containing one or more values,\n   * or an empty array if there is no such parameter.\n   *\n   */\n  getAll(name: string): string[];\n\n  /** Names of the parameters in the map. */\n  readonly keys: string[];\n}\n\nclass ParamsAsMap implements ParamMap {\n  private params: Params;\n\n  constructor(params: Params) {\n    this.params = params || {};\n  }\n\n  has(name: string): boolean {\n    return Object.prototype.hasOwnProperty.call(this.params, name);\n  }\n\n  get(name: string): string|null {\n    if (this.has(name)) {\n      const v = this.params[name];\n      return Array.isArray(v) ? v[0] : v;\n    }\n\n    return null;\n  }\n\n  getAll(name: string): string[] {\n    if (this.has(name)) {\n      const v = this.params[name];\n      return Array.isArray(v) ? v : [v];\n    }\n\n    return [];\n  }\n\n  get keys(): string[] {\n    return Object.keys(this.params);\n  }\n}\n\n/**\n * Converts a `Params` instance to a `ParamMap`.\n * @param params The instance to convert.\n * @returns The new map instance.\n *\n * @publicApi\n */\nexport function convertToParamMap(params: Params): ParamMap {\n  return new ParamsAsMap(params);\n}\n\nconst NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\n\nexport function navigationCancelingError(message: string) {\n  const error = Error('NavigationCancelingError: ' + message);\n  (error as any)[NAVIGATION_CANCELING_ERROR] = true;\n  return error;\n}\n\nexport function isNavigationCancelingError(error: Error) {\n  return error && (error as any)[NAVIGATION_CANCELING_ERROR];\n}\n\n// Matches the route configuration (`route`) against the actual URL (`segments`).\nexport function defaultUrlMatcher(\n    segments: UrlSegment[], segmentGroup: UrlSegmentGroup, route: Route): UrlMatchResult|null {\n  const parts = route.path!.split('/');\n\n  if (parts.length > segments.length) {\n    // The actual URL is shorter than the config, no match\n    return null;\n  }\n\n  if (route.pathMatch === 'full' &&\n      (segmentGroup.hasChildren() || parts.length < segments.length)) {\n    // The config is longer than the actual URL but we are looking for a full match, return null\n    return null;\n  }\n\n  const posParams: {[key: string]: UrlSegment} = {};\n\n  // Check each config part against the actual URL\n  for (let index = 0; index < parts.length; index++) {\n    const part = parts[index];\n    const segment = segments[index];\n    const isParameter = part.startsWith(':');\n    if (isParameter) {\n      posParams[part.substring(1)] = segment;\n    } else if (part !== segment.path) {\n      // The actual URL part does not match the config, no match\n      return null;\n    }\n  }\n\n  return {consumed: segments.slice(0, parts.length), posParams};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵisObservable as isObservable, ɵisPromise as isPromise} from '@angular/core';\nimport {from, Observable, of} from 'rxjs';\n\nimport {Params} from '../shared';\n\nexport function shallowEqualArrays(a: any[], b: any[]): boolean {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; ++i) {\n    if (!shallowEqual(a[i], b[i])) return false;\n  }\n  return true;\n}\n\nexport function shallowEqual(a: Params, b: Params): boolean {\n  // While `undefined` should never be possible, it would sometimes be the case in IE 11\n  // and pre-chromium Edge. The check below accounts for this edge case.\n  const k1 = a ? Object.keys(a) : undefined;\n  const k2 = b ? Object.keys(b) : undefined;\n  if (!k1 || !k2 || k1.length != k2.length) {\n    return false;\n  }\n  let key: string;\n  for (let i = 0; i < k1.length; i++) {\n    key = k1[i];\n    if (!equalArraysOrString(a[key], b[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Test equality for arrays of strings or a string.\n */\nexport function equalArraysOrString(a: string|string[], b: string|string[]) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) return false;\n    const aSorted = [...a].sort();\n    const bSorted = [...b].sort();\n    return aSorted.every((val, index) => bSorted[index] === val);\n  } else {\n    return a === b;\n  }\n}\n\n/**\n * Flattens single-level nested arrays.\n */\nexport function flatten<T>(arr: T[][]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\n/**\n * Return the last element of an array.\n */\nexport function last<T>(a: T[]): T|null {\n  return a.length > 0 ? a[a.length - 1] : null;\n}\n\n/**\n * Verifys all booleans in an array are `true`.\n */\nexport function and(bools: boolean[]): boolean {\n  return !bools.some(v => !v);\n}\n\nexport function forEach<K, V>(map: {[key: string]: V}, callback: (v: V, k: string) => void): void {\n  for (const prop in map) {\n    if (map.hasOwnProperty(prop)) {\n      callback(map[prop], prop);\n    }\n  }\n}\n\nexport function wrapIntoObservable<T>(value: T|Promise<T>|Observable<T>): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    // Use `Promise.resolve()` to wrap promise-like instances.\n    // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\n    // change detection.\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {convertToParamMap, ParamMap, Params, PRIMARY_OUTLET} from './shared';\nimport {equalArraysOrString, forEach, shallowEqual} from './utils/collection';\n\nexport function createEmptyUrlTree() {\n  return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n}\n\nexport function containsTree(container: UrlTree, containee: UrlTree, exact: boolean): boolean {\n  if (exact) {\n    return equalQueryParams(container.queryParams, containee.queryParams) &&\n        equalSegmentGroups(container.root, containee.root);\n  }\n\n  return containsQueryParams(container.queryParams, containee.queryParams) &&\n      containsSegmentGroup(container.root, containee.root);\n}\n\nfunction equalQueryParams(container: Params, containee: Params): boolean {\n  // TODO: This does not handle array params correctly.\n  return shallowEqual(container, containee);\n}\n\nfunction equalSegmentGroups(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n  if (!equalPath(container.segments, containee.segments)) return false;\n  if (container.numberOfChildren !== containee.numberOfChildren) return false;\n  for (const c in containee.children) {\n    if (!container.children[c]) return false;\n    if (!equalSegmentGroups(container.children[c], containee.children[c])) return false;\n  }\n  return true;\n}\n\nfunction containsQueryParams(container: Params, containee: Params): boolean {\n  return Object.keys(containee).length <= Object.keys(container).length &&\n      Object.keys(containee).every(key => equalArraysOrString(container[key], containee[key]));\n}\n\nfunction containsSegmentGroup(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n  return containsSegmentGroupHelper(container, containee, containee.segments);\n}\n\nfunction containsSegmentGroupHelper(\n    container: UrlSegmentGroup, containee: UrlSegmentGroup, containeePaths: UrlSegment[]): boolean {\n  if (container.segments.length > containeePaths.length) {\n    const current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    return true;\n\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    for (const c in containee.children) {\n      if (!container.children[c]) return false;\n      if (!containsSegmentGroup(container.children[c], containee.children[c])) return false;\n    }\n    return true;\n\n  } else {\n    const current = containeePaths.slice(0, container.segments.length);\n    const next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n  }\n}\n\n/**\n * @description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class UrlTree {\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _queryParamMap!: ParamMap;\n\n  /** @internal */\n  constructor(\n      /** The root segment group of the URL tree */\n      public root: UrlSegmentGroup,\n      /** The query params of the URL */\n      public queryParams: Params,\n      /** The fragment of the URL */\n      public fragment: string|null) {}\n\n  get queryParamMap(): ParamMap {\n    if (!this._queryParamMap) {\n      this._queryParamMap = convertToParamMap(this.queryParams);\n    }\n    return this._queryParamMap;\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return DEFAULT_SERIALIZER.serialize(this);\n  }\n}\n\n/**\n * @description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n * @publicApi\n */\nexport class UrlSegmentGroup {\n  /** @internal */\n  _sourceSegment?: UrlSegmentGroup;\n  /** @internal */\n  _segmentIndexShift?: number;\n  /** The parent node in the url tree */\n  parent: UrlSegmentGroup|null = null;\n\n  constructor(\n      /** The URL segments of this group. See `UrlSegment` for more information */\n      public segments: UrlSegment[],\n      /** The list of children of this group */\n      public children: {[key: string]: UrlSegmentGroup}) {\n    forEach(children, (v: any, k: any) => v.parent = this);\n  }\n\n  /** Whether the segment has child segments */\n  hasChildren(): boolean {\n    return this.numberOfChildren > 0;\n  }\n\n  /** Number of child segments */\n  get numberOfChildren(): number {\n    return Object.keys(this.children).length;\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return serializePaths(this);\n  }\n}\n\n\n/**\n * @description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class UrlSegment {\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _parameterMap!: ParamMap;\n\n  constructor(\n      /** The path part of a URL segment */\n      public path: string,\n\n      /** The matrix parameters associated with a segment */\n      public parameters: {[name: string]: string}) {}\n\n  get parameterMap() {\n    if (!this._parameterMap) {\n      this._parameterMap = convertToParamMap(this.parameters);\n    }\n    return this._parameterMap;\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return serializePath(this);\n  }\n}\n\nexport function equalSegments(as: UrlSegment[], bs: UrlSegment[]): boolean {\n  return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));\n}\n\nexport function equalPath(as: UrlSegment[], bs: UrlSegment[]): boolean {\n  if (as.length !== bs.length) return false;\n  return as.every((a, i) => a.path === bs[i].path);\n}\n\nexport function mapChildrenIntoArray<T>(\n    segment: UrlSegmentGroup, fn: (v: UrlSegmentGroup, k: string) => T[]): T[] {\n  let res: T[] = [];\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet === PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet !== PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  return res;\n}\n\n\n/**\n * @description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n * @publicApi\n */\nexport abstract class UrlSerializer {\n  /** Parse a url into a `UrlTree` */\n  abstract parse(url: string): UrlTree;\n\n  /** Converts a `UrlTree` into a url */\n  abstract serialize(tree: UrlTree): string;\n}\n\n/**\n * @description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * @publicApi\n */\nexport class DefaultUrlSerializer implements UrlSerializer {\n  /** Parses a url into a `UrlTree` */\n  parse(url: string): UrlTree {\n    const p = new UrlParser(url);\n    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n  }\n\n  /** Converts a `UrlTree` into a url */\n  serialize(tree: UrlTree): string {\n    const segment = `/${serializeSegment(tree.root, true)}`;\n    const query = serializeQueryParams(tree.queryParams);\n    const fragment =\n        typeof tree.fragment === `string` ? `#${encodeUriFragment(tree.fragment!)}` : '';\n\n    return `${segment}${query}${fragment}`;\n  }\n}\n\nconst DEFAULT_SERIALIZER = new DefaultUrlSerializer();\n\nexport function serializePaths(segment: UrlSegmentGroup): string {\n  return segment.segments.map(p => serializePath(p)).join('/');\n}\n\nfunction serializeSegment(segment: UrlSegmentGroup, root: boolean): string {\n  if (!segment.hasChildren()) {\n    return serializePaths(segment);\n  }\n\n  if (root) {\n    const primary = segment.children[PRIMARY_OUTLET] ?\n        serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n        '';\n    const children: string[] = [];\n\n    forEach(segment.children, (v: UrlSegmentGroup, k: string) => {\n      if (k !== PRIMARY_OUTLET) {\n        children.push(`${k}:${serializeSegment(v, false)}`);\n      }\n    });\n\n    return children.length > 0 ? `${primary}(${children.join('//')})` : primary;\n\n  } else {\n    const children = mapChildrenIntoArray(segment, (v: UrlSegmentGroup, k: string) => {\n      if (k === PRIMARY_OUTLET) {\n        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n      }\n\n      return [`${k}:${serializeSegment(v, false)}`];\n    });\n\n    // use no parenthesis if the only child is a primary outlet route\n    if (Object.keys(segment.children).length === 1 && segment.children[PRIMARY_OUTLET] != null) {\n      return `${serializePaths(segment)}/${children[0]}`;\n    }\n\n    return `${serializePaths(segment)}/(${children.join('//')})`;\n  }\n}\n\n/**\n * Encodes a URI string with the default encoding. This function will only ever be called from\n * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need\n * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't\n * have to be encoded per https://url.spec.whatwg.org.\n */\nfunction encodeUriString(s: string): string {\n  return encodeURIComponent(s)\n      .replace(/%40/g, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/g, '$')\n      .replace(/%2C/gi, ',');\n}\n\n/**\n * This function should be used to encode both keys and values in a query string key/value. In\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport function encodeUriQuery(s: string): string {\n  return encodeUriString(s).replace(/%3B/gi, ';');\n}\n\n/**\n * This function should be used to encode a URL fragment. In the following URL, you need to call\n * encodeUriFragment on \"f\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport function encodeUriFragment(s: string): string {\n  return encodeURI(s);\n}\n\n/**\n * This function should be run on any URI segment as well as the key and value in a key/value\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\n * \"mk\", and \"mv\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport function encodeUriSegment(s: string): string {\n  return encodeUriString(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\n\nexport function decode(s: string): string {\n  return decodeURIComponent(s);\n}\n\n// Query keys/values should have the \"+\" replaced first, as \"+\" in a query string is \" \".\n// decodeURIComponent function will not decode \"+\" as a space.\nexport function decodeQuery(s: string): string {\n  return decode(s.replace(/\\+/g, '%20'));\n}\n\nexport function serializePath(path: UrlSegment): string {\n  return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;\n}\n\nfunction serializeMatrixParams(params: {[key: string]: string}): string {\n  return Object.keys(params)\n      .map(key => `;${encodeUriSegment(key)}=${encodeUriSegment(params[key])}`)\n      .join('');\n}\n\nfunction serializeQueryParams(params: {[key: string]: any}): string {\n  const strParams: string[] = Object.keys(params).map((name) => {\n    const value = params[name];\n    return Array.isArray(value) ?\n        value.map(v => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join('&') :\n        `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;\n  });\n\n  return strParams.length ? `?${strParams.join('&')}` : '';\n}\n\nconst SEGMENT_RE = /^[^\\/()?;=#]+/;\nfunction matchSegments(str: string): string {\n  const match = str.match(SEGMENT_RE);\n  return match ? match[0] : '';\n}\n\nconst QUERY_PARAM_RE = /^[^=?&#]+/;\n// Return the name of the query param at the start of the string or an empty string\nfunction matchQueryParams(str: string): string {\n  const match = str.match(QUERY_PARAM_RE);\n  return match ? match[0] : '';\n}\n\nconst QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\n// Return the value of the query param at the start of the string or an empty string\nfunction matchUrlQueryParamValue(str: string): string {\n  const match = str.match(QUERY_PARAM_VALUE_RE);\n  return match ? match[0] : '';\n}\n\nclass UrlParser {\n  private remaining: string;\n\n  constructor(private url: string) {\n    this.remaining = url;\n  }\n\n  parseRootSegment(): UrlSegmentGroup {\n    this.consumeOptional('/');\n\n    if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n      return new UrlSegmentGroup([], {});\n    }\n\n    // The root segment group never has segments\n    return new UrlSegmentGroup([], this.parseChildren());\n  }\n\n  parseQueryParams(): Params {\n    const params: Params = {};\n    if (this.consumeOptional('?')) {\n      do {\n        this.parseQueryParam(params);\n      } while (this.consumeOptional('&'));\n    }\n    return params;\n  }\n\n  parseFragment(): string|null {\n    return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;\n  }\n\n  private parseChildren(): {[outlet: string]: UrlSegmentGroup} {\n    if (this.remaining === '') {\n      return {};\n    }\n\n    this.consumeOptional('/');\n\n    const segments: UrlSegment[] = [];\n    if (!this.peekStartsWith('(')) {\n      segments.push(this.parseSegment());\n    }\n\n    while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n      this.capture('/');\n      segments.push(this.parseSegment());\n    }\n\n    let children: {[outlet: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('/(')) {\n      this.capture('/');\n      children = this.parseParens(true);\n    }\n\n    let res: {[outlet: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('(')) {\n      res = this.parseParens(false);\n    }\n\n    if (segments.length > 0 || Object.keys(children).length > 0) {\n      res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n    }\n\n    return res;\n  }\n\n  // parse a segment with its matrix parameters\n  // ie `name;k1=v1;k2`\n  private parseSegment(): UrlSegment {\n    const path = matchSegments(this.remaining);\n    if (path === '' && this.peekStartsWith(';')) {\n      throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);\n    }\n\n    this.capture(path);\n    return new UrlSegment(decode(path), this.parseMatrixParams());\n  }\n\n  private parseMatrixParams(): {[key: string]: string} {\n    const params: {[key: string]: string} = {};\n    while (this.consumeOptional(';')) {\n      this.parseParam(params);\n    }\n    return params;\n  }\n\n  private parseParam(params: {[key: string]: string}): void {\n    const key = matchSegments(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let value: any = '';\n    if (this.consumeOptional('=')) {\n      const valueMatch = matchSegments(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    params[decode(key)] = decode(value);\n  }\n\n  // Parse a single query parameter `name[=value]`\n  private parseQueryParam(params: Params): void {\n    const key = matchQueryParams(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let value: any = '';\n    if (this.consumeOptional('=')) {\n      const valueMatch = matchUrlQueryParamValue(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    const decodedKey = decodeQuery(key);\n    const decodedVal = decodeQuery(value);\n\n    if (params.hasOwnProperty(decodedKey)) {\n      // Append to existing values\n      let currentVal = params[decodedKey];\n      if (!Array.isArray(currentVal)) {\n        currentVal = [currentVal];\n        params[decodedKey] = currentVal;\n      }\n      currentVal.push(decodedVal);\n    } else {\n      // Create a new value\n      params[decodedKey] = decodedVal;\n    }\n  }\n\n  // parse `(a/b//outlet_name:c/d)`\n  private parseParens(allowPrimary: boolean): {[outlet: string]: UrlSegmentGroup} {\n    const segments: {[key: string]: UrlSegmentGroup} = {};\n    this.capture('(');\n\n    while (!this.consumeOptional(')') && this.remaining.length > 0) {\n      const path = matchSegments(this.remaining);\n\n      const next = this.remaining[path.length];\n\n      // if is is not one of these characters, then the segment was unescaped\n      // or the group was not closed\n      if (next !== '/' && next !== ')' && next !== ';') {\n        throw new Error(`Cannot parse url '${this.url}'`);\n      }\n\n      let outletName: string = undefined!;\n      if (path.indexOf(':') > -1) {\n        outletName = path.substr(0, path.indexOf(':'));\n        this.capture(outletName);\n        this.capture(':');\n      } else if (allowPrimary) {\n        outletName = PRIMARY_OUTLET;\n      }\n\n      const children = this.parseChildren();\n      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                                                                  new UrlSegmentGroup([], children);\n      this.consumeOptional('//');\n    }\n\n    return segments;\n  }\n\n  private peekStartsWith(str: string): boolean {\n    return this.remaining.startsWith(str);\n  }\n\n  // Consumes the prefix when it is present and returns whether it has been consumed\n  private consumeOptional(str: string): boolean {\n    if (this.peekStartsWith(str)) {\n      this.remaining = this.remaining.substring(str.length);\n      return true;\n    }\n    return false;\n  }\n\n  private capture(str: string): void {\n    if (!this.consumeOptional(str)) {\n      throw new Error(`Expected \"${str}\".`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport class Tree<T> {\n  /** @internal */\n  _root: TreeNode<T>;\n\n  constructor(root: TreeNode<T>) {\n    this._root = root;\n  }\n\n  get root(): T {\n    return this._root.value;\n  }\n\n  /**\n   * @internal\n   */\n  parent(t: T): T|null {\n    const p = this.pathFromRoot(t);\n    return p.length > 1 ? p[p.length - 2] : null;\n  }\n\n  /**\n   * @internal\n   */\n  children(t: T): T[] {\n    const n = findNode(t, this._root);\n    return n ? n.children.map(t => t.value) : [];\n  }\n\n  /**\n   * @internal\n   */\n  firstChild(t: T): T|null {\n    const n = findNode(t, this._root);\n    return n && n.children.length > 0 ? n.children[0].value : null;\n  }\n\n  /**\n   * @internal\n   */\n  siblings(t: T): T[] {\n    const p = findPath(t, this._root);\n    if (p.length < 2) return [];\n\n    const c = p[p.length - 2].children.map(c => c.value);\n    return c.filter(cc => cc !== t);\n  }\n\n  /**\n   * @internal\n   */\n  pathFromRoot(t: T): T[] {\n    return findPath(t, this._root).map(s => s.value);\n  }\n}\n\n\n// DFS for the node matching the value\nfunction findNode<T>(value: T, node: TreeNode<T>): TreeNode<T>|null {\n  if (value === node.value) return node;\n\n  for (const child of node.children) {\n    const node = findNode(value, child);\n    if (node) return node;\n  }\n\n  return null;\n}\n\n// Return the path to the node with the given value using DFS\nfunction findPath<T>(value: T, node: TreeNode<T>): TreeNode<T>[] {\n  if (value === node.value) return [node];\n\n  for (const child of node.children) {\n    const path = findPath(value, child);\n    if (path.length) {\n      path.unshift(node);\n      return path;\n    }\n  }\n\n  return [];\n}\n\nexport class TreeNode<T> {\n  constructor(public value: T, public children: TreeNode<T>[]) {}\n\n  toString(): string {\n    return `TreeNode(${this.value})`;\n  }\n}\n\n// Return the list of T indexed by outlet name\nexport function nodeChildrenAsMap<T extends {outlet: string}>(node: TreeNode<T>|null) {\n  const map: {[outlet: string]: TreeNode<T>} = {};\n\n  if (node) {\n    node.children.forEach(child => map[child.value.outlet] = child);\n  }\n\n  return map;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {Data, ResolveData, Route} from './config';\nimport {convertToParamMap, ParamMap, Params, PRIMARY_OUTLET} from './shared';\nimport {equalSegments, UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\nimport {shallowEqual, shallowEqualArrays} from './utils/collection';\nimport {Tree, TreeNode} from './utils/tree';\n\n\n\n/**\n * Represents the state of the router as a tree of activated routes.\n *\n * @usageNotes\n *\n * Every node in the route tree is an `ActivatedRoute` instance\n * that knows about the \"consumed\" URL segments, the extracted parameters,\n * and the resolved data.\n * Use the `ActivatedRoute` properties to traverse the tree from any node.\n *\n * The following fragment shows how a component gets the root node\n * of the current state to establish its own route tree:\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @see `ActivatedRoute`\n * @see [Getting route information](guide/router#getting-route-information)\n *\n * @publicApi\n */\nexport class RouterState extends Tree<ActivatedRoute> {\n  /** @internal */\n  constructor(\n      root: TreeNode<ActivatedRoute>,\n      /** The current snapshot of the router state */\n      public snapshot: RouterStateSnapshot) {\n    super(root);\n    setRouterState(<RouterState>this, root);\n  }\n\n  toString(): string {\n    return this.snapshot.toString();\n  }\n}\n\nexport function createEmptyState(urlTree: UrlTree, rootComponent: Type<any>|null): RouterState {\n  const snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n  const emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  const emptyParams = new BehaviorSubject({});\n  const emptyData = new BehaviorSubject({});\n  const emptyQueryParams = new BehaviorSubject({});\n  const fragment = new BehaviorSubject('');\n  const activated = new ActivatedRoute(\n      emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent,\n      snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode<ActivatedRoute>(activated, []), snapshot);\n}\n\nexport function createEmptyStateSnapshot(\n    urlTree: UrlTree, rootComponent: Type<any>|null): RouterStateSnapshot {\n  const emptyParams = {};\n  const emptyData = {};\n  const emptyQueryParams = {};\n  const fragment = '';\n  const activated = new ActivatedRouteSnapshot(\n      [], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null,\n      urlTree.root, -1, {});\n  return new RouterStateSnapshot('', new TreeNode<ActivatedRouteSnapshot>(activated, []));\n}\n\n/**\n * Provides access to information about a route associated with a component\n * that is loaded in an outlet.\n * Use to traverse the `RouterState` tree and extract information from nodes.\n *\n * The following example shows how to construct a component using information from a\n * currently activated route.\n *\n * {@example router/activated-route/module.ts region=\"activated-route\"\n *     header=\"activated-route.component.ts\"}\n *\n * @see [Getting route information](guide/router#getting-route-information)\n *\n * @publicApi\n */\nexport class ActivatedRoute {\n  /** The current snapshot of this route */\n  snapshot!: ActivatedRouteSnapshot;\n  /** @internal */\n  _futureSnapshot: ActivatedRouteSnapshot;\n  /** @internal */\n  _routerState!: RouterState;\n  /** @internal */\n  _paramMap!: Observable<ParamMap>;\n  /** @internal */\n  _queryParamMap!: Observable<ParamMap>;\n\n  /** @internal */\n  constructor(\n      /** An observable of the URL segments matched by this route. */\n      public url: Observable<UrlSegment[]>,\n      /** An observable of the matrix parameters scoped to this route. */\n      public params: Observable<Params>,\n      /** An observable of the query parameters shared by all the routes. */\n      public queryParams: Observable<Params>,\n      /** An observable of the URL fragment shared by all the routes. */\n      public fragment: Observable<string>,\n      /** An observable of the static and resolved data of this route. */\n      public data: Observable<Data>,\n      /** The outlet name of the route, a constant. */\n      public outlet: string,\n      /** The component of the route, a constant. */\n      // TODO(vsavkin): remove |string\n      public component: Type<any>|string|null, futureSnapshot: ActivatedRouteSnapshot) {\n    this._futureSnapshot = futureSnapshot;\n  }\n\n  /** The configuration used to match this route. */\n  get routeConfig(): Route|null {\n    return this._futureSnapshot.routeConfig;\n  }\n\n  /** The root of the router state. */\n  get root(): ActivatedRoute {\n    return this._routerState.root;\n  }\n\n  /** The parent of this route in the router state tree. */\n  get parent(): ActivatedRoute|null {\n    return this._routerState.parent(this);\n  }\n\n  /** The first child of this route in the router state tree. */\n  get firstChild(): ActivatedRoute|null {\n    return this._routerState.firstChild(this);\n  }\n\n  /** The children of this route in the router state tree. */\n  get children(): ActivatedRoute[] {\n    return this._routerState.children(this);\n  }\n\n  /** The path from the root of the router state tree to this route. */\n  get pathFromRoot(): ActivatedRoute[] {\n    return this._routerState.pathFromRoot(this);\n  }\n\n  /**\n   * An Observable that contains a map of the required and optional parameters\n   * specific to the route.\n   * The map supports retrieving single and multiple values from the same parameter.\n   */\n  get paramMap(): Observable<ParamMap> {\n    if (!this._paramMap) {\n      this._paramMap = this.params.pipe(map((p: Params): ParamMap => convertToParamMap(p)));\n    }\n    return this._paramMap;\n  }\n\n  /**\n   * An Observable that contains a map of the query parameters available to all routes.\n   * The map supports retrieving single and multiple values from the query parameter.\n   */\n  get queryParamMap(): Observable<ParamMap> {\n    if (!this._queryParamMap) {\n      this._queryParamMap =\n          this.queryParams.pipe(map((p: Params): ParamMap => convertToParamMap(p)));\n    }\n    return this._queryParamMap;\n  }\n\n  toString(): string {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n\nexport type ParamsInheritanceStrategy = 'emptyOnly'|'always';\n\n/** @internal */\nexport type Inherited = {\n  params: Params,\n  data: Data,\n  resolve: Data,\n};\n\n/**\n * Returns the inherited params, data, and resolve for a given route.\n * By default, this only inherits values up to the nearest path-less or component-less route.\n * @internal\n */\nexport function inheritedParamsDataResolve(\n    route: ActivatedRouteSnapshot,\n    paramsInheritanceStrategy: ParamsInheritanceStrategy = 'emptyOnly'): Inherited {\n  const pathFromRoot = route.pathFromRoot;\n\n  let inheritingStartingFrom = 0;\n  if (paramsInheritanceStrategy !== 'always') {\n    inheritingStartingFrom = pathFromRoot.length - 1;\n\n    while (inheritingStartingFrom >= 1) {\n      const current = pathFromRoot[inheritingStartingFrom];\n      const parent = pathFromRoot[inheritingStartingFrom - 1];\n      // current route is an empty path => inherits its parent's params and data\n      if (current.routeConfig && current.routeConfig.path === '') {\n        inheritingStartingFrom--;\n\n        // parent is componentless => current route should inherit its params and data\n      } else if (!parent.component) {\n        inheritingStartingFrom--;\n\n      } else {\n        break;\n      }\n    }\n  }\n\n  return flattenInherited(pathFromRoot.slice(inheritingStartingFrom));\n}\n\n/** @internal */\nfunction flattenInherited(pathFromRoot: ActivatedRouteSnapshot[]): Inherited {\n  return pathFromRoot.reduce((res, curr) => {\n    const params = {...res.params, ...curr.params};\n    const data = {...res.data, ...curr.data};\n    const resolve = {...res.resolve, ...curr._resolvedData};\n    return {params, data, resolve};\n  }, <any>{params: {}, data: {}, resolve: {}});\n}\n\n/**\n * @description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * The following example initializes a component with route information extracted\n * from the snapshot of the root node at the time of creation.\n *\n * ```\n * @Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class ActivatedRouteSnapshot {\n  /** The configuration used to match this route **/\n  public readonly routeConfig: Route|null;\n  /** @internal **/\n  _urlSegment: UrlSegmentGroup;\n  /** @internal */\n  _lastPathIndex: number;\n  /** @internal */\n  _resolve: ResolveData;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _resolvedData!: Data;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _routerState!: RouterStateSnapshot;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _paramMap!: ParamMap;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _queryParamMap!: ParamMap;\n\n  /** @internal */\n  constructor(\n      /** The URL segments matched by this route */\n      public url: UrlSegment[],\n      /**\n       *  The matrix parameters scoped to this route.\n       *\n       *  You can compute all params (or data) in the router state or to get params outside\n       *  of an activated component by traversing the `RouterState` tree as in the following\n       *  example:\n       *  ```\n       *  collectRouteParams(router: Router) {\n       *    let params = {};\n       *    let stack: ActivatedRouteSnapshot[] = [router.routerState.snapshot.root];\n       *    while (stack.length > 0) {\n       *      const route = stack.pop()!;\n       *      params = {...params, ...route.params};\n       *      stack.push(...route.children);\n       *    }\n       *    return params;\n       *  }\n       *  ```\n       */\n      public params: Params,\n      /** The query parameters shared by all the routes */\n      public queryParams: Params,\n      /** The URL fragment shared by all the routes */\n      public fragment: string,\n      /** The static and resolved data of this route */\n      public data: Data,\n      /** The outlet name of the route */\n      public outlet: string,\n      /** The component of the route */\n      public component: Type<any>|string|null, routeConfig: Route|null, urlSegment: UrlSegmentGroup,\n      lastPathIndex: number, resolve: ResolveData) {\n    this.routeConfig = routeConfig;\n    this._urlSegment = urlSegment;\n    this._lastPathIndex = lastPathIndex;\n    this._resolve = resolve;\n  }\n\n  /** The root of the router state */\n  get root(): ActivatedRouteSnapshot {\n    return this._routerState.root;\n  }\n\n  /** The parent of this route in the router state tree */\n  get parent(): ActivatedRouteSnapshot|null {\n    return this._routerState.parent(this);\n  }\n\n  /** The first child of this route in the router state tree */\n  get firstChild(): ActivatedRouteSnapshot|null {\n    return this._routerState.firstChild(this);\n  }\n\n  /** The children of this route in the router state tree */\n  get children(): ActivatedRouteSnapshot[] {\n    return this._routerState.children(this);\n  }\n\n  /** The path from the root of the router state tree to this route */\n  get pathFromRoot(): ActivatedRouteSnapshot[] {\n    return this._routerState.pathFromRoot(this);\n  }\n\n  get paramMap(): ParamMap {\n    if (!this._paramMap) {\n      this._paramMap = convertToParamMap(this.params);\n    }\n    return this._paramMap;\n  }\n\n  get queryParamMap(): ParamMap {\n    if (!this._queryParamMap) {\n      this._queryParamMap = convertToParamMap(this.queryParams);\n    }\n    return this._queryParamMap;\n  }\n\n  toString(): string {\n    const url = this.url.map(segment => segment.toString()).join('/');\n    const matched = this.routeConfig ? this.routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * The following example shows how a component is initialized with information\n * from the snapshot of the root node's state at the time of creation.\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n  /** @internal */\n  constructor(\n      /** The url from which this snapshot was created */\n      public url: string, root: TreeNode<ActivatedRouteSnapshot>) {\n    super(root);\n    setRouterState(<RouterStateSnapshot>this, root);\n  }\n\n  toString(): string {\n    return serializeNode(this._root);\n  }\n}\n\nfunction setRouterState<U, T extends {_routerState: U}>(state: U, node: TreeNode<T>): void {\n  node.value._routerState = state;\n  node.children.forEach(c => setRouterState(state, c));\n}\n\nfunction serializeNode(node: TreeNode<ActivatedRouteSnapshot>): string {\n  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(', ')} } ` : '';\n  return `${node.value}${c}`;\n}\n\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n */\nexport function advanceActivatedRoute(route: ActivatedRoute): void {\n  if (route.snapshot) {\n    const currentSnapshot = route.snapshot;\n    const nextSnapshot = route._futureSnapshot;\n    route.snapshot = nextSnapshot;\n    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n      (<any>route.queryParams).next(nextSnapshot.queryParams);\n    }\n    if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n      (<any>route.fragment).next(nextSnapshot.fragment);\n    }\n    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n      (<any>route.params).next(nextSnapshot.params);\n    }\n    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n      (<any>route.url).next(nextSnapshot.url);\n    }\n    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n      (<any>route.data).next(nextSnapshot.data);\n    }\n  } else {\n    route.snapshot = route._futureSnapshot;\n\n    // this is for resolved data\n    (<any>route.data).next(route._futureSnapshot.data);\n  }\n}\n\n\nexport function equalParamsAndUrlSegments(\n    a: ActivatedRouteSnapshot, b: ActivatedRouteSnapshot): boolean {\n  const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n  const parentsMismatch = !a.parent !== !b.parent;\n\n  return equalUrlParams && !parentsMismatch &&\n      (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent!));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BehaviorSubject} from 'rxjs';\n\nimport {DetachedRouteHandleInternal, RouteReuseStrategy} from './route_reuse_strategy';\nimport {ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot} from './router_state';\nimport {TreeNode} from './utils/tree';\n\nexport function createRouterState(\n    routeReuseStrategy: RouteReuseStrategy, curr: RouterStateSnapshot,\n    prevState: RouterState): RouterState {\n  const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n  return new RouterState(root, curr);\n}\n\nfunction createNode(\n    routeReuseStrategy: RouteReuseStrategy, curr: TreeNode<ActivatedRouteSnapshot>,\n    prevState?: TreeNode<ActivatedRoute>): TreeNode<ActivatedRoute> {\n  // reuse an activated route that is currently displayed on the screen\n  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n    const value = prevState.value;\n    value._futureSnapshot = curr.value;\n    const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n    return new TreeNode<ActivatedRoute>(value, children);\n\n    // retrieve an activated route that is used to be displayed, but is not currently displayed\n  } else {\n    const detachedRouteHandle =\n        <DetachedRouteHandleInternal>routeReuseStrategy.retrieve(curr.value);\n    if (detachedRouteHandle) {\n      const tree: TreeNode<ActivatedRoute> = detachedRouteHandle.route;\n      setFutureSnapshotsOfActivatedRoutes(curr, tree);\n      return tree;\n\n    } else {\n      const value = createActivatedRoute(curr.value);\n      const children = curr.children.map(c => createNode(routeReuseStrategy, c));\n      return new TreeNode<ActivatedRoute>(value, children);\n    }\n  }\n}\n\nfunction setFutureSnapshotsOfActivatedRoutes(\n    curr: TreeNode<ActivatedRouteSnapshot>, result: TreeNode<ActivatedRoute>): void {\n  if (curr.value.routeConfig !== result.value.routeConfig) {\n    throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\n  }\n  if (curr.children.length !== result.children.length) {\n    throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\n  }\n  result.value._futureSnapshot = curr.value;\n  for (let i = 0; i < curr.children.length; ++i) {\n    setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\n  }\n}\n\nfunction createOrReuseChildren(\n    routeReuseStrategy: RouteReuseStrategy, curr: TreeNode<ActivatedRouteSnapshot>,\n    prevState: TreeNode<ActivatedRoute>) {\n  return curr.children.map(child => {\n    for (const p of prevState.children) {\n      if (routeReuseStrategy.shouldReuseRoute(child.value, p.value.snapshot)) {\n        return createNode(routeReuseStrategy, child, p);\n      }\n    }\n    return createNode(routeReuseStrategy, child);\n  });\n}\n\nfunction createActivatedRoute(c: ActivatedRouteSnapshot) {\n  return new ActivatedRoute(\n      new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams),\n      new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActivatedRoute} from './router_state';\nimport {Params, PRIMARY_OUTLET} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\nimport {forEach, last, shallowEqual} from './utils/collection';\n\nexport function createUrlTree(\n    route: ActivatedRoute, urlTree: UrlTree, commands: any[], queryParams: Params,\n    fragment: string): UrlTree {\n  if (commands.length === 0) {\n    return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n  }\n\n  const nav = computeNavigation(commands);\n\n  if (nav.toRoot()) {\n    return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n  }\n\n  const startingPosition = findStartingPosition(nav, urlTree, route);\n\n  const segmentGroup = startingPosition.processChildren ?\n      updateSegmentGroupChildren(\n          startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n      updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n  return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n}\n\nfunction isMatrixParams(command: any): boolean {\n  return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n\n/**\n * Determines if a given command has an `outlets` map. When we encounter a command\n * with an outlets k/v map, we need to apply each outlet individually to the existing segment.\n */\nfunction isCommandWithOutlets(command: any): command is {outlets: {[key: string]: any}} {\n  return typeof command === 'object' && command != null && command.outlets;\n}\n\nfunction tree(\n    oldSegmentGroup: UrlSegmentGroup, newSegmentGroup: UrlSegmentGroup, urlTree: UrlTree,\n    queryParams: Params, fragment: string): UrlTree {\n  let qp: any = {};\n  if (queryParams) {\n    forEach(queryParams, (value: any, name: any) => {\n      qp[name] = Array.isArray(value) ? value.map((v: any) => `${v}`) : `${value}`;\n    });\n  }\n\n  if (urlTree.root === oldSegmentGroup) {\n    return new UrlTree(newSegmentGroup, qp, fragment);\n  }\n\n  return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);\n}\n\nfunction replaceSegment(\n    current: UrlSegmentGroup, oldSegment: UrlSegmentGroup,\n    newSegment: UrlSegmentGroup): UrlSegmentGroup {\n  const children: {[key: string]: UrlSegmentGroup} = {};\n  forEach(current.children, (c: UrlSegmentGroup, outletName: string) => {\n    if (c === oldSegment) {\n      children[outletName] = newSegment;\n    } else {\n      children[outletName] = replaceSegment(c, oldSegment, newSegment);\n    }\n  });\n  return new UrlSegmentGroup(current.segments, children);\n}\n\nclass Navigation {\n  constructor(\n      public isAbsolute: boolean, public numberOfDoubleDots: number, public commands: any[]) {\n    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n      throw new Error('Root segment cannot have matrix parameters');\n    }\n\n    const cmdWithOutlet = commands.find(isCommandWithOutlets);\n    if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n      throw new Error('{outlets:{}} has to be the last command');\n    }\n  }\n\n  public toRoot(): boolean {\n    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n  }\n}\n\n/** Transforms commands to a normalized `Navigation` */\nfunction computeNavigation(commands: any[]): Navigation {\n  if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n    return new Navigation(true, 0, commands);\n  }\n\n  let numberOfDoubleDots = 0;\n  let isAbsolute = false;\n\n  const res: any[] = commands.reduce((res, cmd, cmdIdx) => {\n    if (typeof cmd === 'object' && cmd != null) {\n      if (cmd.outlets) {\n        const outlets: {[k: string]: any} = {};\n        forEach(cmd.outlets, (commands: any, name: string) => {\n          outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n        });\n        return [...res, {outlets}];\n      }\n\n      if (cmd.segmentPath) {\n        return [...res, cmd.segmentPath];\n      }\n    }\n\n    if (!(typeof cmd === 'string')) {\n      return [...res, cmd];\n    }\n\n    if (cmdIdx === 0) {\n      cmd.split('/').forEach((urlPart, partIndex) => {\n        if (partIndex == 0 && urlPart === '.') {\n          // skip './a'\n        } else if (partIndex == 0 && urlPart === '') {  //  '/a'\n          isAbsolute = true;\n        } else if (urlPart === '..') {  //  '../a'\n          numberOfDoubleDots++;\n        } else if (urlPart != '') {\n          res.push(urlPart);\n        }\n      });\n\n      return res;\n    }\n\n    return [...res, cmd];\n  }, []);\n\n  return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\n\nclass Position {\n  constructor(\n      public segmentGroup: UrlSegmentGroup, public processChildren: boolean, public index: number) {\n  }\n}\n\nfunction findStartingPosition(nav: Navigation, tree: UrlTree, route: ActivatedRoute): Position {\n  if (nav.isAbsolute) {\n    return new Position(tree.root, true, 0);\n  }\n\n  if (route.snapshot._lastPathIndex === -1) {\n    const segmentGroup = route.snapshot._urlSegment;\n    // Pathless ActivatedRoute has _lastPathIndex === -1 but should not process children\n    // see issue #26224, #13011, #35687\n    // However, if the ActivatedRoute is the root we should process children like above.\n    const processChildren = segmentGroup === tree.root;\n    return new Position(segmentGroup, processChildren, 0);\n  }\n\n  const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n  const index = route.snapshot._lastPathIndex + modifier;\n  return createPositionApplyingDoubleDots(\n      route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n}\n\nfunction createPositionApplyingDoubleDots(\n    group: UrlSegmentGroup, index: number, numberOfDoubleDots: number): Position {\n  let g = group;\n  let ci = index;\n  let dd = numberOfDoubleDots;\n  while (dd > ci) {\n    dd -= ci;\n    g = g.parent!;\n    if (!g) {\n      throw new Error('Invalid number of \\'../\\'');\n    }\n    ci = g.segments.length;\n  }\n  return new Position(g, false, ci - dd);\n}\n\nfunction getOutlets(commands: unknown[]): {[k: string]: unknown[]|string} {\n  if (isCommandWithOutlets(commands[0])) {\n    return commands[0].outlets;\n  }\n\n  return {[PRIMARY_OUTLET]: commands};\n}\n\nfunction updateSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (!segmentGroup) {\n    segmentGroup = new UrlSegmentGroup([], {});\n  }\n  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n  }\n\n  const m = prefixedWith(segmentGroup, startIndex, commands);\n  const slicedCommands = commands.slice(m.commandIndex);\n  if (m.match && m.pathIndex < segmentGroup.segments.length) {\n    const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n    g.children[PRIMARY_OUTLET] =\n        new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n    return updateSegmentGroupChildren(g, 0, slicedCommands);\n  } else if (m.match && slicedCommands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else if (m.match && !segmentGroup.hasChildren()) {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  } else if (m.match) {\n    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n  } else {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  }\n}\n\nfunction updateSegmentGroupChildren(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (commands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else {\n    const outlets = getOutlets(commands);\n    const children: {[key: string]: UrlSegmentGroup} = {};\n\n    forEach(outlets, (commands, outlet) => {\n      if (typeof commands === 'string') {\n        commands = [commands];\n      }\n      if (commands !== null) {\n        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n      }\n    });\n\n    forEach(segmentGroup.children, (child: UrlSegmentGroup, childOutlet: string) => {\n      if (outlets[childOutlet] === undefined) {\n        children[childOutlet] = child;\n      }\n    });\n    return new UrlSegmentGroup(segmentGroup.segments, children);\n  }\n}\n\nfunction prefixedWith(segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]) {\n  let currentCommandIndex = 0;\n  let currentPathIndex = startIndex;\n\n  const noMatch = {match: false, pathIndex: 0, commandIndex: 0};\n  while (currentPathIndex < segmentGroup.segments.length) {\n    if (currentCommandIndex >= commands.length) return noMatch;\n    const path = segmentGroup.segments[currentPathIndex];\n    const command = commands[currentCommandIndex];\n    // Do not try to consume command as part of the prefixing if it has outlets because it can\n    // contain outlets other than the one being processed. Consuming the outlets command would\n    // result in other outlets being ignored.\n    if (isCommandWithOutlets(command)) {\n      break;\n    }\n    const curr = `${command}`;\n    const next =\n        currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n\n    if (currentPathIndex > 0 && curr === undefined) break;\n\n    if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n      if (!compare(curr, next, path)) return noMatch;\n      currentCommandIndex += 2;\n    } else {\n      if (!compare(curr, {}, path)) return noMatch;\n      currentCommandIndex++;\n    }\n    currentPathIndex++;\n  }\n\n  return {match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex};\n}\n\nfunction createNewSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  const paths = segmentGroup.segments.slice(0, startIndex);\n\n  let i = 0;\n  while (i < commands.length) {\n    const command = commands[i];\n    if (isCommandWithOutlets(command)) {\n      const children = createNewSegmentChildren(command.outlets);\n      return new UrlSegmentGroup(paths, children);\n    }\n\n    // if we start with an object literal, we need to reuse the path part from the segment\n    if (i === 0 && isMatrixParams(commands[0])) {\n      const p = segmentGroup.segments[startIndex];\n      paths.push(new UrlSegment(p.path, stringify(commands[0])));\n      i++;\n      continue;\n    }\n\n    const curr = isCommandWithOutlets(command) ? command.outlets[PRIMARY_OUTLET] : `${command}`;\n    const next = (i < commands.length - 1) ? commands[i + 1] : null;\n    if (curr && next && isMatrixParams(next)) {\n      paths.push(new UrlSegment(curr, stringify(next)));\n      i += 2;\n    } else {\n      paths.push(new UrlSegment(curr, {}));\n      i++;\n    }\n  }\n  return new UrlSegmentGroup(paths, {});\n}\n\nfunction createNewSegmentChildren(outlets: {[name: string]: unknown[]|string}):\n    {[outlet: string]: UrlSegmentGroup} {\n  const children: {[outlet: string]: UrlSegmentGroup} = {};\n  forEach(outlets, (commands, outlet) => {\n    if (typeof commands === 'string') {\n      commands = [commands];\n    }\n    if (commands !== null) {\n      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n    }\n  });\n  return children;\n}\n\nfunction stringify(params: {[key: string]: any}): {[key: string]: string} {\n  const res: {[key: string]: string} = {};\n  forEach(params, (v: any, k: string) => res[k] = `${v}`);\n  return res;\n}\n\nfunction compare(path: string, params: {[key: string]: any}, segment: UrlSegment): boolean {\n  return path == segment.path && shallowEqual(params, segment.parameters);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MonoTypeOperatorFunction} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {LoadedRouterConfig} from '../config';\nimport {ActivationEnd, ChildActivationEnd, Event} from '../events';\nimport {DetachedRouteHandleInternal, RouteReuseStrategy} from '../route_reuse_strategy';\nimport {NavigationTransition} from '../router';\nimport {ChildrenOutletContexts} from '../router_outlet_context';\nimport {ActivatedRoute, ActivatedRouteSnapshot, advanceActivatedRoute, RouterState} from '../router_state';\nimport {forEach} from '../utils/collection';\nimport {nodeChildrenAsMap, TreeNode} from '../utils/tree';\n\nexport const activateRoutes =\n    (rootContexts: ChildrenOutletContexts, routeReuseStrategy: RouteReuseStrategy,\n     forwardEvent: (evt: Event) => void): MonoTypeOperatorFunction<NavigationTransition> =>\n        map(t => {\n          new ActivateRoutes(\n              routeReuseStrategy, t.targetRouterState!, t.currentRouterState, forwardEvent)\n              .activate(rootContexts);\n          return t;\n        });\n\nexport class ActivateRoutes {\n  constructor(\n      private routeReuseStrategy: RouteReuseStrategy, private futureState: RouterState,\n      private currState: RouterState, private forwardEvent: (evt: Event) => void) {}\n\n  activate(parentContexts: ChildrenOutletContexts): void {\n    const futureRoot = this.futureState._root;\n    const currRoot = this.currState ? this.currState._root : null;\n\n    this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n    advanceActivatedRoute(this.futureState.root);\n    this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n  }\n\n  // De-activate the child route that are not re-used for the future state\n  private deactivateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>|null,\n      contexts: ChildrenOutletContexts): void {\n    const children: {[outletName: string]: TreeNode<ActivatedRoute>} = nodeChildrenAsMap(currNode);\n\n    // Recurse on the routes active in the future state to de-activate deeper children\n    futureNode.children.forEach(futureChild => {\n      const childOutletName = futureChild.value.outlet;\n      this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n      delete children[childOutletName];\n    });\n\n    // De-activate the routes that will not be re-used\n    forEach(children, (v: TreeNode<ActivatedRoute>, childName: string) => {\n      this.deactivateRouteAndItsChildren(v, contexts);\n    });\n  }\n\n  private deactivateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentContext: ChildrenOutletContexts): void {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n\n    if (future === curr) {\n      // Reusing the node, check to see if the children need to be de-activated\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const context = parentContext.getContext(future.outlet);\n        if (context) {\n          this.deactivateChildRoutes(futureNode, currNode, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.deactivateChildRoutes(futureNode, currNode, parentContext);\n      }\n    } else {\n      if (curr) {\n        // Deactivate the current route which will not be re-used\n        this.deactivateRouteAndItsChildren(currNode, parentContext);\n      }\n    }\n  }\n\n  private deactivateRouteAndItsChildren(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n      this.detachAndStoreRouteSubtree(route, parentContexts);\n    } else {\n      this.deactivateRouteAndOutlet(route, parentContexts);\n    }\n  }\n\n  private detachAndStoreRouteSubtree(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    const context = parentContexts.getContext(route.value.outlet);\n    if (context && context.outlet) {\n      const componentRef = context.outlet.detach();\n      const contexts = context.children.onOutletDeactivated();\n      this.routeReuseStrategy.store(route.value.snapshot, {componentRef, route, contexts});\n    }\n  }\n\n  private deactivateRouteAndOutlet(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    const context = parentContexts.getContext(route.value.outlet);\n    // The context could be `null` if we are on a componentless route but there may still be\n    // children that need deactivating.\n    const contexts = context && route.value.component ? context.children : parentContexts;\n    const children: {[outletName: string]: TreeNode<ActivatedRoute>} = nodeChildrenAsMap(route);\n\n    for (const childOutlet of Object.keys(children)) {\n      this.deactivateRouteAndItsChildren(children[childOutlet], contexts);\n    }\n\n    if (context && context.outlet) {\n      // Destroy the component\n      context.outlet.deactivate();\n      // Destroy the contexts for all the outlets that were in the component\n      context.children.onOutletDeactivated();\n    }\n  }\n\n  private activateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>|null,\n      contexts: ChildrenOutletContexts): void {\n    const children: {[outlet: string]: TreeNode<ActivatedRoute>} = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(c => {\n      this.activateRoutes(c, children[c.value.outlet], contexts);\n      this.forwardEvent(new ActivationEnd(c.value.snapshot));\n    });\n    if (futureNode.children.length) {\n      this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));\n    }\n  }\n\n  private activateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentContexts: ChildrenOutletContexts): void {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n\n    advanceActivatedRoute(future);\n\n    // reusing the node\n    if (future === curr) {\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const context = parentContexts.getOrCreateContext(future.outlet);\n        this.activateChildRoutes(futureNode, currNode, context.children);\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, currNode, parentContexts);\n      }\n    } else {\n      if (future.component) {\n        // if we have a normal route, we need to place the component into the outlet and recurse.\n        const context = parentContexts.getOrCreateContext(future.outlet);\n\n        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n          const stored =\n              (<DetachedRouteHandleInternal>this.routeReuseStrategy.retrieve(future.snapshot));\n          this.routeReuseStrategy.store(future.snapshot, null);\n          context.children.onOutletReAttached(stored.contexts);\n          context.attachRef = stored.componentRef;\n          context.route = stored.route.value;\n          if (context.outlet) {\n            // Attach right away when the outlet has already been instantiated\n            // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n            context.outlet.attach(stored.componentRef, stored.route.value);\n          }\n          advanceActivatedRouteNodeAndItsChildren(stored.route);\n        } else {\n          const config = parentLoadedConfig(future.snapshot);\n          const cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;\n\n          context.attachRef = null;\n          context.route = future;\n          context.resolver = cmpFactoryResolver;\n          if (context.outlet) {\n            // Activate the outlet when it has already been instantiated\n            // Otherwise it will get activated from its `ngOnInit` when instantiated\n            context.outlet.activateWith(future, cmpFactoryResolver);\n          }\n\n          this.activateChildRoutes(futureNode, null, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, null, parentContexts);\n      }\n    }\n  }\n}\n\nfunction advanceActivatedRouteNodeAndItsChildren(node: TreeNode<ActivatedRoute>): void {\n  advanceActivatedRoute(node.value);\n  node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n}\n\nfunction parentLoadedConfig(snapshot: ActivatedRouteSnapshot): LoadedRouterConfig|null {\n  for (let s = snapshot.parent; s; s = s.parent) {\n    const route = s.routeConfig;\n    if (route && route._loadedConfig) return route._loadedConfig;\n    if (route && route.component) return null;\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModuleFactory, NgModuleRef, Type} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {ActivatedRouteSnapshot} from './router_state';\nimport {UrlSegment, UrlSegmentGroup} from './url_tree';\n\n\n/**\n * Represents a route configuration for the Router service.\n * An array of `Route` objects, used in `Router.config` and for nested route configurations\n * in `Route.children`.\n *\n * @see `Route`\n * @see `Router`\n * @see [Router configuration guide](guide/router#configuration)\n * @publicApi\n */\nexport type Routes = Route[];\n\n/**\n * Represents the result of matching URLs with a custom matching function.\n *\n * * `consumed` is an array of the consumed URL segments.\n * * `posParams` is a map of positional parameters.\n *\n * @see `UrlMatcher()`\n * @publicApi\n */\nexport type UrlMatchResult = {\n  consumed: UrlSegment[];\n  posParams?: {[name: string]: UrlSegment};\n};\n\n/**\n * A function for matching a route against URLs. Implement a custom URL matcher\n * for `Route.matcher` when a combination of `path` and `pathMatch`\n * is not expressive enough. Cannot be used together with `path` and `pathMatch`.\n *\n * The function takes the following arguments and returns a `UrlMatchResult` object.\n * * *segments* : An array of URL segments.\n * * *group* : A segment group.\n * * *route* : The route to match against.\n *\n * The following example implementation matches HTML files.\n *\n * ```\n * export function htmlFiles(url: UrlSegment[]) {\n *   return url.length === 1 && url[0].path.endsWith('.html') ? ({consumed: url}) : null;\n * }\n *\n * export const routes = [{ matcher: htmlFiles, component: AnyComponent }];\n * ```\n *\n * @publicApi\n */\nexport type UrlMatcher = (segments: UrlSegment[], group: UrlSegmentGroup, route: Route) =>\n    UrlMatchResult|null;\n\n/**\n *\n * Represents static data associated with a particular route.\n *\n * @see `Route#data`\n *\n * @publicApi\n */\nexport type Data = {\n  [name: string]: any\n};\n\n/**\n *\n * Represents the resolved data associated with a particular route.\n *\n * @see `Route#resolve`.\n *\n * @publicApi\n */\nexport type ResolveData = {\n  [name: string]: any\n};\n\n/**\n *\n * A function that is called to resolve a collection of lazy-loaded routes.\n * Must be an arrow function of the following form:\n * `() => import('...').then(mod => mod.MODULE)`\n *\n * For example:\n *\n * ```\n * [{\n *   path: 'lazy',\n *   loadChildren: () => import('./lazy-route/lazy.module').then(mod => mod.LazyModule),\n * }];\n * ```\n *\n * @see [Route.loadChildren](api/router/Route#loadChildren)\n * @publicApi\n */\nexport type LoadChildrenCallback = () => Type<any>|NgModuleFactory<any>|Observable<Type<any>>|\n    Promise<NgModuleFactory<any>|Type<any>|any>;\n\n/**\n *\n * A function that returns a set of routes to load.\n *\n * The string form of `LoadChildren` is deprecated (see `DeprecatedLoadChildren`). The function\n * form (`LoadChildrenCallback`) should be used instead.\n *\n * @see `loadChildrenCallback`\n * @publicApi\n */\nexport type LoadChildren = LoadChildrenCallback|DeprecatedLoadChildren;\n\n/**\n * A string of the form `path/to/file#exportName` that acts as a URL for a set of routes to load.\n *\n * @see `loadChildrenCallback`\n * @publicApi\n * @deprecated The `string` form of `loadChildren` is deprecated in favor of the\n * `LoadChildrenCallback` function which uses the ES dynamic `import()` expression.\n * This offers a more natural and standards-based mechanism to dynamically\n * load an ES module at runtime.\n */\nexport type DeprecatedLoadChildren = string;\n\n/**\n *\n * How to handle query parameters in a router link.\n * One of:\n * - `merge` : Merge new with current parameters.\n * - `preserve` : Preserve current parameters.\n *\n * @see `UrlCreationOptions#queryParamsHandling`\n * @see `RouterLink`\n * @publicApi\n */\nexport type QueryParamsHandling = 'merge'|'preserve'|'';\n\n/**\n *\n * A policy for when to run guards and resolvers on a route.\n *\n * @see [Route.runGuardsAndResolvers](api/router/Route#runGuardsAndResolvers)\n * @publicApi\n */\nexport type RunGuardsAndResolvers =\n    'pathParamsChange'|'pathParamsOrQueryParamsChange'|'paramsChange'|'paramsOrQueryParamsChange'|\n    'always'|((from: ActivatedRouteSnapshot, to: ActivatedRouteSnapshot) => boolean);\n\n/**\n * A configuration object that defines a single route.\n * A set of routes are collected in a `Routes` array to define a `Router` configuration.\n * The router attempts to match segments of a given URL against each route,\n * using the configuration options defined in this object.\n *\n * Supports static, parameterized, redirect, and wildcard routes, as well as\n * custom route data and resolve methods.\n *\n * For detailed usage information, see the [Routing Guide](guide/router).\n *\n * @usageNotes\n *\n * ### Simple Configuration\n *\n * The following route specifies that when navigating to, for example,\n * `/team/11/user/bob`, the router creates the 'Team' component\n * with the 'User' child component in it.\n *\n * ```\n * [{\n *   path: 'team/:id',\n  *  component: Team,\n *   children: [{\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * ### Multiple Outlets\n *\n * The following route creates sibling components with multiple outlets.\n * When navigating to `/team/11(aux:chat/jim)`, the router creates the 'Team' component next to\n * the 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team\n * }, {\n *   path: 'chat/:user',\n *   component: Chat\n *   outlet: 'aux'\n * }]\n * ```\n *\n * ### Wild Cards\n *\n * The following route uses wild-card notation to specify a component\n * that is always instantiated regardless of where you navigate to.\n *\n * ```\n * [{\n *   path: '**',\n *   component: WildcardComponent\n * }]\n * ```\n *\n * ### Redirects\n *\n * The following route uses the `redirectTo` property to ignore a segment of\n * a given URL when looking for a child path.\n *\n * When navigating to '/team/11/legacy/user/jim', the router changes the URL segment\n * '/team/11/legacy/user/jim' to '/team/11/user/jim', and then instantiates\n * the Team component with the User child component in it.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: 'legacy/user/:name',\n *     redirectTo: 'user/:name'\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * The redirect path can be relative, as shown in this example, or absolute.\n * If we change the `redirectTo` value in the example to the absolute URL segment '/user/:name',\n * the result URL is also absolute, '/user/jim'.\n\n * ### Empty Path\n *\n * Empty-path route configurations can be used to instantiate components that do not 'consume'\n * any URL segments.\n *\n * In the following configuration, when navigating to\n * `/team/11`, the router instantiates the 'AllUsers' component.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: AllUsers\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * Empty-path routes can have children. In the following example, when navigating\n * to `/team/11/user/jim`, the router instantiates the wrapper component with\n * the user component in it.\n *\n * Note that an empty path route inherits its parent's parameters and data.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: WrapperCmp,\n *     children: [{\n *       path: 'user/:name',\n *       component: User\n *     }]\n *   }]\n * }]\n * ```\n *\n * ### Matching Strategy\n *\n * The default path-match strategy is 'prefix', which means that the router\n * checks URL elements from the left to see if the URL matches a specified path.\n * For example, '/team/11/user' matches 'team/:id'.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'prefix', //default\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * You can specify the path-match strategy 'full' to make sure that the path\n * covers the whole unconsumed URL. It is important to do this when redirecting\n * empty-path routes. Otherwise, because an empty path is a prefix of any URL,\n * the router would apply the redirect even when navigating to the redirect destination,\n * creating an endless loop.\n *\n * In the following example, supplying the 'full' `pathMatch` strategy ensures\n * that the router applies the redirect if and only if navigating to '/'.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'full',\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * ### Componentless Routes\n *\n * You can share parameters between sibling components.\n * For example, suppose that two sibling components should go next to each other,\n * and both of them require an ID parameter. You can accomplish this using a route\n * that does not specify a component at the top level.\n *\n * In the following example, 'MainChild' and 'AuxChild' are siblings.\n * When navigating to 'parent/10/(a//aux:b)', the route instantiates\n * the main child and aux child components next to each other.\n * For this to work, the application component must have the primary and aux outlets defined.\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: 'a', component: MainChild },\n *      { path: 'b', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * The router merges the parameters, data, and resolve of the componentless\n * parent into the parameters, data, and resolve of the children.\n *\n * This is especially useful when child components are defined\n * with an empty path string, as in the following example.\n * With this configuration, navigating to '/parent/10' creates\n * the main child and aux components.\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: '', component: MainChild },\n *      { path: '', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * ### Lazy Loading\n *\n * Lazy loading speeds up application load time by splitting the application\n * into multiple bundles and loading them on demand.\n * To use lazy loading, provide the `loadChildren` property in the `Route` object,\n * instead of the `children` property.\n *\n * Given the following example route, the router will lazy load\n * the associated module on demand using the browser native import system.\n *\n * ```\n * [{\n *   path: 'lazy',\n *   loadChildren: () => import('./lazy-route/lazy.module').then(mod => mod.LazyModule),\n * }];\n * ```\n *\n * @publicApi\n */\nexport interface Route {\n  /**\n   * The path to match against. Cannot be used together with a custom `matcher` function.\n   * A URL string that uses router matching notation.\n   * Can be a wild card (`**`) that matches any URL (see Usage Notes below).\n   * Default is \"/\" (the root path).\n   *\n   */\n  path?: string;\n  /**\n   * The path-matching strategy, one of 'prefix' or 'full'.\n   * Default is 'prefix'.\n   *\n   * By default, the router checks URL elements from the left to see if the URL\n   * matches a given  path, and stops when there is a match. For example,\n   * '/team/11/user' matches 'team/:id'.\n   *\n   * The path-match strategy 'full' matches against the entire URL.\n   * It is important to do this when redirecting empty-path routes.\n   * Otherwise, because an empty path is a prefix of any URL,\n   * the router would apply the redirect even when navigating\n   * to the redirect destination, creating an endless loop.\n   *\n   */\n  pathMatch?: string;\n  /**\n   * A custom URL-matching function. Cannot be used together with `path`.\n   */\n  matcher?: UrlMatcher;\n  /**\n   * The component to instantiate when the path matches.\n   * Can be empty if child routes specify components.\n   */\n  component?: Type<any>;\n  /**\n   * A URL to redirect to when the path matches.\n   * Absolute if the URL begins with a slash (/), otherwise relative to the path URL.\n   * When not present, router does not redirect.\n   */\n  redirectTo?: string;\n  /**\n   * Name of a `RouterOutlet` object where the component can be placed\n   * when the path matches.\n   */\n  outlet?: string;\n  /**\n   * An array of dependency-injection tokens used to look up `CanActivate()`\n   * handlers, in order to determine if the current user is allowed to\n   * activate the component. By default, any user can activate.\n   */\n  canActivate?: any[];\n  /**\n   * An array of DI tokens used to look up `CanActivateChild()` handlers,\n   * in order to determine if the current user is allowed to activate\n   * a child of the component. By default, any user can activate a child.\n   */\n  canActivateChild?: any[];\n  /**\n   * An array of DI tokens used to look up `CanDeactivate()`\n   * handlers, in order to determine if the current user is allowed to\n   * deactivate the component. By default, any user can deactivate.\n   *\n   */\n  canDeactivate?: any[];\n  /**\n   * An array of DI tokens used to look up `CanLoad()`\n   * handlers, in order to determine if the current user is allowed to\n   * load the component. By default, any user can load.\n   */\n  canLoad?: any[];\n  /**\n   * Additional developer-defined data provided to the component via\n   * `ActivatedRoute`. By default, no additional data is passed.\n   */\n  data?: Data;\n  /**\n   * A map of DI tokens used to look up data resolvers. See `Resolve`.\n   */\n  resolve?: ResolveData;\n  /**\n   * An array of child `Route` objects that specifies a nested route\n   * configuration.\n   */\n  children?: Routes;\n  /**\n   * An object specifying lazy-loaded child routes.\n   */\n  loadChildren?: LoadChildren;\n  /**\n   * Defines when guards and resolvers will be run. One of\n   * - `paramsOrQueryParamsChange` : Run when query parameters change.\n   * - `always` : Run on every execution.\n   * By default, guards and resolvers run only when the matrix\n   * parameters of the route change.\n   */\n  runGuardsAndResolvers?: RunGuardsAndResolvers;\n  /**\n   * Filled for routes with `loadChildren` once the module has been loaded\n   * @internal\n   */\n  _loadedConfig?: LoadedRouterConfig;\n  /**\n   * Filled for routes with `loadChildren` during load\n   * @internal\n   */\n  _loader$?: Observable<LoadedRouterConfig>;\n}\n\nexport class LoadedRouterConfig {\n  constructor(public routes: Route[], public module: NgModuleRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CanActivate, CanActivateChild, CanDeactivate, CanLoad} from '../interfaces';\nimport {UrlTree} from '../url_tree';\n\n/**\n * Simple function check, but generic so type inference will flow. Example:\n *\n * function product(a: number, b: number) {\n *   return a * b;\n * }\n *\n * if (isFunction<product>(fn)) {\n *   return fn(1, 2);\n * } else {\n *   throw \"Must provide the `product` function\";\n * }\n */\nexport function isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n\nexport function isBoolean(v: any): v is boolean {\n  return typeof v === 'boolean';\n}\n\nexport function isUrlTree(v: any): v is UrlTree {\n  return v instanceof UrlTree;\n}\n\nexport function isCanLoad(guard: any): guard is CanLoad {\n  return guard && isFunction<CanLoad>(guard.canLoad);\n}\n\nexport function isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nexport function isCanActivateChild(guard: any): guard is CanActivateChild {\n  return guard && isFunction<CanActivateChild>(guard.canActivateChild);\n}\n\nexport function isCanDeactivate<T>(guard: any): guard is CanDeactivate<T> {\n  return guard && isFunction<CanDeactivate<T>>(guard.canDeactivate);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {combineLatest, Observable, OperatorFunction} from 'rxjs';\nimport {filter, map, scan, startWith, switchMap, take} from 'rxjs/operators';\n\nimport {UrlTree} from '../url_tree';\nimport {isUrlTree} from '../utils/type_guards';\n\nconst INITIAL_VALUE = Symbol('INITIAL_VALUE');\ndeclare type INTERIM_VALUES = typeof INITIAL_VALUE | boolean | UrlTree;\n\nexport function prioritizedGuardValue():\n    OperatorFunction<Observable<boolean|UrlTree>[], boolean|UrlTree> {\n  return switchMap(obs => {\n    return combineLatest(obs.map(o => o.pipe(take(1), startWith(INITIAL_VALUE as INTERIM_VALUES))))\n               .pipe(\n                   scan(\n                       (acc: INTERIM_VALUES, list: INTERIM_VALUES[]) => {\n                         let isPending = false;\n                         return list.reduce((innerAcc, val, i: number) => {\n                           if (innerAcc !== INITIAL_VALUE) return innerAcc;\n\n                           // Toggle pending flag if any values haven't been set yet\n                           if (val === INITIAL_VALUE) isPending = true;\n\n                           // Any other return values are only valid if we haven't yet hit a pending\n                           // call. This guarantees that in the case of a guard at the bottom of the\n                           // tree that returns a redirect, we will wait for the higher priority\n                           // guard at the top to finish before performing the redirect.\n                           if (!isPending) {\n                             // Early return when we hit a `false` value as that should always\n                             // cancel navigation\n                             if (val === false) return val;\n\n                             if (i === list.length - 1 || isUrlTree(val)) {\n                               return val;\n                             }\n                           }\n\n                           return innerAcc;\n                         }, acc);\n                       },\n                       INITIAL_VALUE),\n                   filter(item => item !== INITIAL_VALUE),\n                   map(item => isUrlTree(item) ? item : item === true),  //\n                   take(1)) as Observable<boolean|UrlTree>;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component} from '@angular/core';\n\n/**\n * This component is used internally within the router to be a placeholder when an empty\n * router-outlet is needed. For example, with a config such as:\n *\n * `{path: 'parent', outlet: 'nav', children: [...]}`\n *\n * In order to render, there needs to be a component on this config, which will default\n * to this `EmptyOutletComponent`.\n */\n@Component({template: `<router-outlet></router-outlet>`})\nexport class ɵEmptyOutletComponent {\n}\n\nexport {ɵEmptyOutletComponent as EmptyOutletComponent};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EmptyOutletComponent} from '../components/empty_outlet';\nimport {Route, Routes} from '../config';\nimport {PRIMARY_OUTLET} from '../shared';\n\nexport function validateConfig(config: Routes, parentPath: string = ''): void {\n  // forEach doesn't iterate undefined values\n  for (let i = 0; i < config.length; i++) {\n    const route: Route = config[i];\n    const fullPath: string = getFullPath(parentPath, route);\n    validateNode(route, fullPath);\n  }\n}\n\nfunction validateNode(route: Route, fullPath: string): void {\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (!route) {\n      throw new Error(`\n      Invalid configuration of route '${fullPath}': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    `);\n    }\n    if (Array.isArray(route)) {\n      throw new Error(`Invalid configuration of route '${fullPath}': Array cannot be specified`);\n    }\n    if (!route.component && !route.children && !route.loadChildren &&\n        (route.outlet && route.outlet !== PRIMARY_OUTLET)) {\n      throw new Error(`Invalid configuration of route '${\n          fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);\n    }\n    if (route.redirectTo && route.children) {\n      throw new Error(`Invalid configuration of route '${\n          fullPath}': redirectTo and children cannot be used together`);\n    }\n    if (route.redirectTo && route.loadChildren) {\n      throw new Error(`Invalid configuration of route '${\n          fullPath}': redirectTo and loadChildren cannot be used together`);\n    }\n    if (route.children && route.loadChildren) {\n      throw new Error(`Invalid configuration of route '${\n          fullPath}': children and loadChildren cannot be used together`);\n    }\n    if (route.redirectTo && route.component) {\n      throw new Error(`Invalid configuration of route '${\n          fullPath}': redirectTo and component cannot be used together`);\n    }\n    if (route.redirectTo && route.canActivate) {\n      throw new Error(\n          `Invalid configuration of route '${\n              fullPath}': redirectTo and canActivate cannot be used together. Redirects happen before activation ` +\n          `so canActivate will never be executed.`);\n    }\n    if (route.path && route.matcher) {\n      throw new Error(\n          `Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);\n    }\n    if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\n      throw new Error(`Invalid configuration of route '${\n          fullPath}'. One of the following must be provided: component, redirectTo, children or loadChildren`);\n    }\n    if (route.path === void 0 && route.matcher === void 0) {\n      throw new Error(`Invalid configuration of route '${\n          fullPath}': routes must have either a path or a matcher specified`);\n    }\n    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n      throw new Error(\n          `Invalid configuration of route '${fullPath}': path cannot start with a slash`);\n    }\n    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n      const exp =\n          `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;\n      throw new Error(`Invalid configuration of route '{path: \"${fullPath}\", redirectTo: \"${\n          route.redirectTo}\"}': please provide 'pathMatch'. ${exp}`);\n    }\n    if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {\n      throw new Error(`Invalid configuration of route '${\n          fullPath}': pathMatch can only be set to 'prefix' or 'full'`);\n    }\n  }\n  if (route.children) {\n    validateConfig(route.children, fullPath);\n  }\n}\n\nfunction getFullPath(parentPath: string, currentRoute: Route): string {\n  if (!currentRoute) {\n    return parentPath;\n  }\n  if (!parentPath && !currentRoute.path) {\n    return '';\n  } else if (parentPath && !currentRoute.path) {\n    return `${parentPath}/`;\n  } else if (!parentPath && currentRoute.path) {\n    return currentRoute.path;\n  } else {\n    return `${parentPath}/${currentRoute.path}`;\n  }\n}\n\n/**\n * Makes a copy of the config and adds any default required properties.\n */\nexport function standardizeConfig(r: Route): Route {\n  const children = r.children && r.children.map(standardizeConfig);\n  const c = children ? {...r, children} : {...r};\n  if (!c.component && (children || c.loadChildren) && (c.outlet && c.outlet !== PRIMARY_OUTLET)) {\n    c.component = EmptyOutletComponent;\n  }\n  return c;\n}\n\n/** Returns the `route.outlet` or PRIMARY_OUTLET if none exists. */\nexport function getOutlet(route: Route): string {\n  return route.outlet || PRIMARY_OUTLET;\n}\n\n/**\n * Sorts the `routes` such that the ones with an outlet matching `outletName` come first.\n * The order of the configs is otherwise preserved.\n */\nexport function sortByMatchingOutlets(routes: Routes, outletName: string): Routes {\n  const sortedConfig = routes.filter(r => getOutlet(r) === outletName);\n  sortedConfig.push(...routes.filter(r => getOutlet(r) !== outletName));\n  return sortedConfig;\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Route} from '../config';\nimport {defaultUrlMatcher, PRIMARY_OUTLET} from '../shared';\nimport {UrlSegment, UrlSegmentGroup} from '../url_tree';\n\nimport {forEach} from './collection';\nimport {getOutlet} from './config';\n\nexport interface MatchResult {\n  matched: boolean;\n  consumedSegments: UrlSegment[];\n  lastChild: number;\n  parameters: {[k: string]: string};\n  positionalParamSegments: {[k: string]: UrlSegment};\n}\n\nconst noMatch: MatchResult = {\n  matched: false,\n  consumedSegments: [],\n  lastChild: 0,\n  parameters: {},\n  positionalParamSegments: {}\n};\n\nexport function match(\n    segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]): MatchResult {\n  if (route.path === '') {\n    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n      return {...noMatch};\n    }\n\n    return {\n      matched: true,\n      consumedSegments: [],\n      lastChild: 0,\n      parameters: {},\n      positionalParamSegments: {}\n    };\n  }\n\n  const matcher = route.matcher || defaultUrlMatcher;\n  const res = matcher(segments, segmentGroup, route);\n  if (!res) return {...noMatch};\n\n  const posParams: {[n: string]: string} = {};\n  forEach(res.posParams!, (v: UrlSegment, k: string) => {\n    posParams[k] = v.path;\n  });\n  const parameters = res.consumed.length > 0 ?\n      {...posParams, ...res.consumed[res.consumed.length - 1].parameters} :\n      posParams;\n\n  return {\n    matched: true,\n    consumedSegments: res.consumed,\n    lastChild: res.consumed.length,\n    // TODO(atscott): investigate combining parameters and positionalParamSegments\n    parameters,\n    positionalParamSegments: res.posParams ?? {}\n  };\n}\n\nexport function split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[], relativeLinkResolution: 'legacy'|'corrected' = 'corrected') {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        consumedSegments,\n        createChildrenForEmptyPaths(\n            segmentGroup, consumedSegments, config,\n            new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments: []};\n  }\n\n  if (slicedSegments.length === 0 &&\n      containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        segmentGroup.segments,\n        addEmptyPathsToChildrenIfNeeded(\n            segmentGroup, consumedSegments, slicedSegments, config, segmentGroup.children,\n            relativeLinkResolution));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments};\n  }\n\n  const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n  s._sourceSegment = segmentGroup;\n  s._segmentIndexShift = consumedSegments.length;\n  return {segmentGroup: s, slicedSegments};\n}\n\nfunction addEmptyPathsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    routes: Route[], children: {[name: string]: UrlSegmentGroup},\n    relativeLinkResolution: 'legacy'|'corrected'): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  for (const r of routes) {\n    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      const s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      if (relativeLinkResolution === 'legacy') {\n        s._segmentIndexShift = segmentGroup.segments.length;\n      } else {\n        s._segmentIndexShift = consumedSegments.length;\n      }\n      res[getOutlet(r)] = s;\n    }\n  }\n  return {...children, ...res};\n}\n\nfunction createChildrenForEmptyPaths(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], routes: Route[],\n    primarySegment: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegment;\n  primarySegment._sourceSegment = segmentGroup;\n  primarySegment._segmentIndexShift = consumedSegments.length;\n\n  for (const r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      const s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      s._segmentIndexShift = consumedSegments.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return res;\n}\n\nfunction containsEmptyPathMatchesWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(\n      r => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET);\n}\n\nfunction containsEmptyPathMatches(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r));\n}\n\nfunction emptyPathMatch(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n\n  return r.path === '';\n}\n\n/**\n * Determines if `route` is a path match for the `rawSegment`, `segments`, and `outlet` without\n * verifying that its children are a full match for the remainder of the `rawSegment` children as\n * well.\n */\nexport function isImmediateMatch(\n    route: Route, rawSegment: UrlSegmentGroup, segments: UrlSegment[], outlet: string): boolean {\n  // We allow matches to empty paths when the outlets differ so we can match a url like `/(b:b)` to\n  // a config like\n  // * `{path: '', children: [{path: 'b', outlet: 'b'}]}`\n  // or even\n  // * `{path: '', outlet: 'a', children: [{path: 'b', outlet: 'b'}]`\n  //\n  // The exception here is when the segment outlet is for the primary outlet. This would\n  // result in a match inside the named outlet because all children there are written as primary\n  // outlets. So we need to prevent child named outlet matches in a url like `/b` in a config like\n  // * `{path: '', outlet: 'x' children: [{path: 'b'}]}`\n  // This should only match if the url is `/(x:b)`.\n  if (getOutlet(route) !== outlet &&\n      (outlet === PRIMARY_OUTLET || !emptyPathMatch(rawSegment, segments, route))) {\n    return false;\n  }\n  if (route.path === '**') {\n    return true;\n  }\n  return match(rawSegment, route, segments).matched;\n}\n\nexport function noLeftoversInUrl(\n    segmentGroup: UrlSegmentGroup, segments: UrlSegment[], outlet: string): boolean {\n  return segments.length === 0 && !segmentGroup.children[outlet];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, NgModuleRef} from '@angular/core';\nimport {EmptyError, from, Observable, Observer, of} from 'rxjs';\nimport {catchError, concatMap, first, last, map, mergeMap, scan, tap} from 'rxjs/operators';\n\nimport {LoadedRouterConfig, Route, Routes} from './config';\nimport {CanLoadFn} from './interfaces';\nimport {prioritizedGuardValue} from './operators/prioritized_guard_value';\nimport {RouterConfigLoader} from './router_config_loader';\nimport {navigationCancelingError, Params, PRIMARY_OUTLET} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree} from './url_tree';\nimport {forEach, wrapIntoObservable} from './utils/collection';\nimport {getOutlet, sortByMatchingOutlets} from './utils/config';\nimport {isImmediateMatch, match, noLeftoversInUrl, split} from './utils/config_matching';\nimport {isCanLoad, isFunction, isUrlTree} from './utils/type_guards';\n\nclass NoMatch {\n  public segmentGroup: UrlSegmentGroup|null;\n\n  constructor(segmentGroup?: UrlSegmentGroup) {\n    this.segmentGroup = segmentGroup || null;\n  }\n}\n\nclass AbsoluteRedirect {\n  constructor(public urlTree: UrlTree) {}\n}\n\nfunction noMatch(segmentGroup: UrlSegmentGroup): Observable<UrlSegmentGroup> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new NoMatch(segmentGroup)));\n}\n\nfunction absoluteRedirect(newTree: UrlTree): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new AbsoluteRedirect(newTree)));\n}\n\nfunction namedOutletsRedirect(redirectTo: string): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new Error(\n          `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`)));\n}\n\nfunction canLoadFails(route: Route): Observable<LoadedRouterConfig> {\n  return new Observable<LoadedRouterConfig>(\n      (obs: Observer<LoadedRouterConfig>) => obs.error(\n          navigationCancelingError(`Cannot load children because the guard of the route \"path: '${\n              route.path}'\" returned false`)));\n}\n\n/**\n * Returns the `UrlTree` with the redirection applied.\n *\n * Lazy modules are loaded along the way.\n */\nexport function applyRedirects(\n    moduleInjector: Injector, configLoader: RouterConfigLoader, urlSerializer: UrlSerializer,\n    urlTree: UrlTree, config: Routes): Observable<UrlTree> {\n  return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();\n}\n\nclass ApplyRedirects {\n  private allowRedirects: boolean = true;\n  private ngModule: NgModuleRef<any>;\n\n  constructor(\n      moduleInjector: Injector, private configLoader: RouterConfigLoader,\n      private urlSerializer: UrlSerializer, private urlTree: UrlTree, private config: Routes) {\n    this.ngModule = moduleInjector.get(NgModuleRef);\n  }\n\n  apply(): Observable<UrlTree> {\n    const splitGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;\n    // TODO(atscott): creating a new segment removes the _sourceSegment _segmentIndexShift, which is\n    // only necessary to prevent failures in tests which assert exact object matches. The `split` is\n    // now shared between `applyRedirects` and `recognize` but only the `recognize` step needs these\n    // properties. Before the implementations were merged, the `applyRedirects` would not assign\n    // them. We should be able to remove this logic as a \"breaking change\" but should do some more\n    // investigation into the failures first.\n    const rootSegmentGroup = new UrlSegmentGroup(splitGroup.segments, splitGroup.children);\n\n    const expanded$ =\n        this.expandSegmentGroup(this.ngModule, this.config, rootSegmentGroup, PRIMARY_OUTLET);\n    const urlTrees$ = expanded$.pipe(map((rootSegmentGroup: UrlSegmentGroup) => {\n      return this.createUrlTree(\n          squashSegmentGroup(rootSegmentGroup), this.urlTree.queryParams, this.urlTree.fragment!);\n    }));\n    return urlTrees$.pipe(catchError((e: any) => {\n      if (e instanceof AbsoluteRedirect) {\n        // after an absolute redirect we do not apply any more redirects!\n        this.allowRedirects = false;\n        // we need to run matching, so we can fetch all lazy-loaded modules\n        return this.match(e.urlTree);\n      }\n\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    }));\n  }\n\n  private match(tree: UrlTree): Observable<UrlTree> {\n    const expanded$ =\n        this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);\n    const mapped$ = expanded$.pipe(map((rootSegmentGroup: UrlSegmentGroup) => {\n      return this.createUrlTree(\n          squashSegmentGroup(rootSegmentGroup), tree.queryParams, tree.fragment!);\n    }));\n    return mapped$.pipe(catchError((e: any): Observable<UrlTree> => {\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    }));\n  }\n\n  private noMatchError(e: NoMatch): any {\n    return new Error(`Cannot match any routes. URL Segment: '${e.segmentGroup}'`);\n  }\n\n  private createUrlTree(rootCandidate: UrlSegmentGroup, queryParams: Params, fragment: string):\n      UrlTree {\n    const root = rootCandidate.segments.length > 0 ?\n        new UrlSegmentGroup([], {[PRIMARY_OUTLET]: rootCandidate}) :\n        rootCandidate;\n    return new UrlTree(root, queryParams, fragment);\n  }\n\n  private expandSegmentGroup(\n      ngModule: NgModuleRef<any>, routes: Route[], segmentGroup: UrlSegmentGroup,\n      outlet: string): Observable<UrlSegmentGroup> {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.expandChildren(ngModule, routes, segmentGroup)\n          .pipe(map((children: any) => new UrlSegmentGroup([], children)));\n    }\n\n    return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);\n  }\n\n  // Recursively expand segment groups for all the child outlets\n  private expandChildren(\n      ngModule: NgModuleRef<any>, routes: Route[],\n      segmentGroup: UrlSegmentGroup): Observable<{[name: string]: UrlSegmentGroup}> {\n    // Expand outlets one at a time, starting with the primary outlet. We need to do it this way\n    // because an absolute redirect from the primary outlet takes precedence.\n    const childOutlets: string[] = [];\n    for (const child of Object.keys(segmentGroup.children)) {\n      if (child === 'primary') {\n        childOutlets.unshift(child);\n      } else {\n        childOutlets.push(child);\n      }\n    }\n\n    return from(childOutlets)\n        .pipe(\n            concatMap(childOutlet => {\n              const child = segmentGroup.children[childOutlet];\n              // Sort the routes so routes with outlets that match the segment appear\n              // first, followed by routes for other outlets, which might match if they have an\n              // empty path.\n              const sortedRoutes = sortByMatchingOutlets(routes, childOutlet);\n              return this.expandSegmentGroup(ngModule, sortedRoutes, child, childOutlet)\n                  .pipe(map(s => ({segment: s, outlet: childOutlet})));\n            }),\n            scan(\n                (children, expandedChild) => {\n                  children[expandedChild.outlet] = expandedChild.segment;\n                  return children;\n                },\n                {} as {[outlet: string]: UrlSegmentGroup}),\n            last(),\n        );\n  }\n\n  private expandSegment(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[],\n      segments: UrlSegment[], outlet: string,\n      allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    return from(routes).pipe(\n        concatMap((r: any) => {\n          const expanded$ = this.expandSegmentAgainstRoute(\n              ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);\n          return expanded$.pipe(catchError((e: any) => {\n            if (e instanceof NoMatch) {\n              return of(null);\n            }\n            throw e;\n          }));\n        }),\n        first((s): s is UrlSegmentGroup => !!s), catchError((e: any, _: any) => {\n          if (e instanceof EmptyError || e.name === 'EmptyError') {\n            if (noLeftoversInUrl(segmentGroup, segments, outlet)) {\n              return of(new UrlSegmentGroup([], {}));\n            }\n            throw new NoMatch(segmentGroup);\n          }\n          throw e;\n        }));\n  }\n\n  private expandSegmentAgainstRoute(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      paths: UrlSegment[], outlet: string, allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    if (!isImmediateMatch(route, segmentGroup, paths, outlet)) {\n      return noMatch(segmentGroup);\n    }\n\n    if (route.redirectTo === undefined) {\n      return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths, outlet);\n    }\n\n    if (allowRedirects && this.allowRedirects) {\n      return this.expandSegmentAgainstRouteUsingRedirect(\n          ngModule, segmentGroup, routes, route, paths, outlet);\n    }\n\n    return noMatch(segmentGroup);\n  }\n\n  private expandSegmentAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      return this.expandWildCardWithParamsAgainstRouteUsingRedirect(\n          ngModule, routes, route, outlet);\n    }\n\n    return this.expandRegularSegmentAgainstRouteUsingRedirect(\n        ngModule, segmentGroup, routes, route, segments, outlet);\n  }\n\n  private expandWildCardWithParamsAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, routes: Route[], route: Route,\n      outlet: string): Observable<UrlSegmentGroup> {\n    const newTree = this.applyRedirectCommands([], route.redirectTo!, {});\n    if (route.redirectTo!.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return this.lineralizeSegments(route, newTree).pipe(mergeMap((newSegments: UrlSegment[]) => {\n      const group = new UrlSegmentGroup(newSegments, {});\n      return this.expandSegment(ngModule, group, routes, newSegments, outlet, false);\n    }));\n  }\n\n  private expandRegularSegmentAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    const {matched, consumedSegments, lastChild, positionalParamSegments} =\n        match(segmentGroup, route, segments);\n    if (!matched) return noMatch(segmentGroup);\n\n    const newTree =\n        this.applyRedirectCommands(consumedSegments, route.redirectTo!, positionalParamSegments);\n    if (route.redirectTo!.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return this.lineralizeSegments(route, newTree).pipe(mergeMap((newSegments: UrlSegment[]) => {\n      return this.expandSegment(\n          ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet,\n          false);\n    }));\n  }\n\n  private matchSegmentAgainstRoute(\n      ngModule: NgModuleRef<any>, rawSegmentGroup: UrlSegmentGroup, route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      if (route.loadChildren) {\n        const loaded$ = route._loadedConfig ? of(route._loadedConfig) :\n                                              this.configLoader.load(ngModule.injector, route);\n        return loaded$.pipe(map((cfg: LoadedRouterConfig) => {\n          route._loadedConfig = cfg;\n          return new UrlSegmentGroup(segments, {});\n        }));\n      }\n\n      return of(new UrlSegmentGroup(segments, {}));\n    }\n\n    const {matched, consumedSegments, lastChild} = match(rawSegmentGroup, route, segments);\n    if (!matched) return noMatch(rawSegmentGroup);\n\n    const rawSlicedSegments = segments.slice(lastChild);\n    const childConfig$ = this.getChildConfig(ngModule, route, segments);\n\n    return childConfig$.pipe(mergeMap((routerConfig: LoadedRouterConfig) => {\n      const childModule = routerConfig.module;\n      const childConfig = routerConfig.routes;\n\n      const {segmentGroup: splitSegmentGroup, slicedSegments} =\n          split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);\n      // See comment on the other call to `split` about why this is necessary.\n      const segmentGroup =\n          new UrlSegmentGroup(splitSegmentGroup.segments, splitSegmentGroup.children);\n\n      if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n        const expanded$ = this.expandChildren(childModule, childConfig, segmentGroup);\n        return expanded$.pipe(\n            map((children: any) => new UrlSegmentGroup(consumedSegments, children)));\n      }\n\n      if (childConfig.length === 0 && slicedSegments.length === 0) {\n        return of(new UrlSegmentGroup(consumedSegments, {}));\n      }\n\n      const matchedOnOutlet = getOutlet(route) === outlet;\n      const expanded$ = this.expandSegment(\n          childModule, segmentGroup, childConfig, slicedSegments,\n          matchedOnOutlet ? PRIMARY_OUTLET : outlet, true);\n      return expanded$.pipe(\n          map((cs: UrlSegmentGroup) =>\n                  new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children)));\n    }));\n  }\n\n  private getChildConfig(ngModule: NgModuleRef<any>, route: Route, segments: UrlSegment[]):\n      Observable<LoadedRouterConfig> {\n    if (route.children) {\n      // The children belong to the same module\n      return of(new LoadedRouterConfig(route.children, ngModule));\n    }\n\n    if (route.loadChildren) {\n      // lazy children belong to the loaded module\n      if (route._loadedConfig !== undefined) {\n        return of(route._loadedConfig);\n      }\n\n      return this.runCanLoadGuards(ngModule.injector, route, segments)\n          .pipe(mergeMap((shouldLoadResult: boolean) => {\n            if (shouldLoadResult) {\n              return this.configLoader.load(ngModule.injector, route)\n                  .pipe(map((cfg: LoadedRouterConfig) => {\n                    route._loadedConfig = cfg;\n                    return cfg;\n                  }));\n            }\n            return canLoadFails(route);\n          }));\n    }\n\n    return of(new LoadedRouterConfig([], ngModule));\n  }\n\n  private runCanLoadGuards(moduleInjector: Injector, route: Route, segments: UrlSegment[]):\n      Observable<boolean> {\n    const canLoad = route.canLoad;\n    if (!canLoad || canLoad.length === 0) return of(true);\n\n    const canLoadObservables = canLoad.map((injectionToken: any) => {\n      const guard = moduleInjector.get(injectionToken);\n      let guardVal;\n      if (isCanLoad(guard)) {\n        guardVal = guard.canLoad(route, segments);\n      } else if (isFunction<CanLoadFn>(guard)) {\n        guardVal = guard(route, segments);\n      } else {\n        throw new Error('Invalid CanLoad guard');\n      }\n      return wrapIntoObservable(guardVal);\n    });\n\n    return of(canLoadObservables)\n        .pipe(\n            prioritizedGuardValue(),\n            tap((result: UrlTree|boolean) => {\n              if (!isUrlTree(result)) return;\n\n              const error: Error&{url?: UrlTree} = navigationCancelingError(\n                  `Redirecting to \"${this.urlSerializer.serialize(result)}\"`);\n              error.url = result;\n              throw error;\n            }),\n            map(result => result === true),\n        );\n  }\n\n  private lineralizeSegments(route: Route, urlTree: UrlTree): Observable<UrlSegment[]> {\n    let res: UrlSegment[] = [];\n    let c = urlTree.root;\n    while (true) {\n      res = res.concat(c.segments);\n      if (c.numberOfChildren === 0) {\n        return of(res);\n      }\n\n      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n        return namedOutletsRedirect(route.redirectTo!);\n      }\n\n      c = c.children[PRIMARY_OUTLET];\n    }\n  }\n\n  private applyRedirectCommands(\n      segments: UrlSegment[], redirectTo: string, posParams: {[k: string]: UrlSegment}): UrlTree {\n    return this.applyRedirectCreatreUrlTree(\n        redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n  }\n\n  private applyRedirectCreatreUrlTree(\n      redirectTo: string, urlTree: UrlTree, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlTree {\n    const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n    return new UrlTree(\n        newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams),\n        urlTree.fragment);\n  }\n\n  private createQueryParams(redirectToParams: Params, actualParams: Params): Params {\n    const res: Params = {};\n    forEach(redirectToParams, (v: any, k: string) => {\n      const copySourceValue = typeof v === 'string' && v.startsWith(':');\n      if (copySourceValue) {\n        const sourceName = v.substring(1);\n        res[k] = actualParams[sourceName];\n      } else {\n        res[k] = v;\n      }\n    });\n    return res;\n  }\n\n  private createSegmentGroup(\n      redirectTo: string, group: UrlSegmentGroup, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegmentGroup {\n    const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n\n    let children: {[n: string]: UrlSegmentGroup} = {};\n    forEach(group.children, (child: UrlSegmentGroup, name: string) => {\n      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n    });\n\n    return new UrlSegmentGroup(updatedSegments, children);\n  }\n\n  private createSegments(\n      redirectTo: string, redirectToSegments: UrlSegment[], actualSegments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegment[] {\n    return redirectToSegments.map(\n        s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) :\n                                      this.findOrReturn(s, actualSegments));\n  }\n\n  private findPosParam(\n      redirectTo: string, redirectToUrlSegment: UrlSegment,\n      posParams: {[k: string]: UrlSegment}): UrlSegment {\n    const pos = posParams[redirectToUrlSegment.path.substring(1)];\n    if (!pos)\n      throw new Error(\n          `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n    return pos;\n  }\n\n  private findOrReturn(redirectToUrlSegment: UrlSegment, actualSegments: UrlSegment[]): UrlSegment {\n    let idx = 0;\n    for (const s of actualSegments) {\n      if (s.path === redirectToUrlSegment.path) {\n        actualSegments.splice(idx);\n        return s;\n      }\n      idx++;\n    }\n    return redirectToUrlSegment;\n  }\n}\n\n/**\n * When possible, merges the primary outlet child into the parent `UrlSegmentGroup`.\n *\n * When a segment group has only one child which is a primary outlet, merges that child into the\n * parent. That is, the child segment group's segments are merged into the `s` and the child's\n * children become the children of `s`. Think of this like a 'squash', merging the child segment\n * group into the parent.\n */\nfunction mergeTrivialChildren(s: UrlSegmentGroup): UrlSegmentGroup {\n  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n    const c = s.children[PRIMARY_OUTLET];\n    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n  }\n\n  return s;\n}\n\n/**\n * Recursively merges primary segment children into their parents and also drops empty children\n * (those which have no segments and no children themselves). The latter prevents serializing a\n * group into something like `/a(aux:)`, where `aux` is an empty child segment.\n */\nfunction squashSegmentGroup(segmentGroup: UrlSegmentGroup): UrlSegmentGroup {\n  const newChildren = {} as any;\n  for (const childOutlet of Object.keys(segmentGroup.children)) {\n    const child = segmentGroup.children[childOutlet];\n    const childCandidate = squashSegmentGroup(child);\n    // don't add empty children\n    if (childCandidate.segments.length > 0 || childCandidate.hasChildren()) {\n      newChildren[childOutlet] = childCandidate;\n    }\n  }\n  const s = new UrlSegmentGroup(segmentGroup.segments, newChildren);\n  return mergeTrivialChildren(s);\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction } from '../../internal/types';\nimport { filter } from './filter';\nimport { takeLast } from './takeLast';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { identity } from '../util/identity';\n\n/* tslint:disable:max-line-length */\nexport function last<T, D = T>(\n  predicate?: null,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;\nexport function last<T, S extends T>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue?: S\n): OperatorFunction<T, S>;\nexport function last<T, D = T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * ![](last.png)\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} [predicate] - The condition any source emitted item has to satisfy.\n * @param {any} [defaultValue] - An optional default value to provide if last\n * predicate isn't met or no values were emitted.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n */\nexport function last<T, D>(\n  predicate?: ((value: T, index: number, source: Observable<T>) => boolean) | null,\n  defaultValue?: D\n): OperatorFunction<T, T | D> {\n  const hasDefaultValue = arguments.length >= 2;\n  return (source: Observable<T>) => source.pipe(\n    predicate ? filter((v, i) => predicate(v, i, source)) : identity,\n    takeLast(1),\n    hasDefaultValue ? defaultIfEmpty<T | D>(defaultValue) : throwIfEmpty(() => new EmptyError()),\n  );\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\n\nimport {LoadedRouterConfig, RunGuardsAndResolvers} from '../config';\nimport {ChildrenOutletContexts, OutletContext} from '../router_outlet_context';\nimport {ActivatedRouteSnapshot, equalParamsAndUrlSegments, RouterStateSnapshot} from '../router_state';\nimport {equalPath} from '../url_tree';\nimport {forEach, shallowEqual} from '../utils/collection';\nimport {nodeChildrenAsMap, TreeNode} from '../utils/tree';\n\nexport class CanActivate {\n  readonly route: ActivatedRouteSnapshot;\n  constructor(public path: ActivatedRouteSnapshot[]) {\n    this.route = this.path[this.path.length - 1];\n  }\n}\n\nexport class CanDeactivate {\n  constructor(public component: Object|null, public route: ActivatedRouteSnapshot) {}\n}\n\nexport declare type Checks = {\n  canDeactivateChecks: CanDeactivate[],\n  canActivateChecks: CanActivate[],\n};\n\nexport function getAllRouteGuards(\n    future: RouterStateSnapshot, curr: RouterStateSnapshot,\n    parentContexts: ChildrenOutletContexts) {\n  const futureRoot = future._root;\n  const currRoot = curr ? curr._root : null;\n\n  return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);\n}\n\nexport function getCanActivateChild(p: ActivatedRouteSnapshot):\n    {node: ActivatedRouteSnapshot, guards: any[]}|null {\n  const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;\n  if (!canActivateChild || canActivateChild.length === 0) return null;\n  return {node: p, guards: canActivateChild};\n}\n\nexport function getToken(\n    token: any, snapshot: ActivatedRouteSnapshot, moduleInjector: Injector): any {\n  const config = getClosestLoadedConfig(snapshot);\n  const injector = config ? config.module.injector : moduleInjector;\n  return injector.get(token);\n}\n\nfunction getClosestLoadedConfig(snapshot: ActivatedRouteSnapshot): LoadedRouterConfig|null {\n  if (!snapshot) return null;\n\n  for (let s = snapshot.parent; s; s = s.parent) {\n    const route = s.routeConfig;\n    if (route && route._loadedConfig) return route._loadedConfig;\n  }\n\n  return null;\n}\n\nfunction getChildRouteGuards(\n    futureNode: TreeNode<ActivatedRouteSnapshot>, currNode: TreeNode<ActivatedRouteSnapshot>|null,\n    contexts: ChildrenOutletContexts|null, futurePath: ActivatedRouteSnapshot[], checks: Checks = {\n      canDeactivateChecks: [],\n      canActivateChecks: []\n    }): Checks {\n  const prevChildren = nodeChildrenAsMap(currNode);\n\n  // Process the children of the future route\n  futureNode.children.forEach(c => {\n    getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);\n    delete prevChildren[c.value.outlet];\n  });\n\n  // Process any children left from the current route (not active for the future route)\n  forEach(\n      prevChildren,\n      (v: TreeNode<ActivatedRouteSnapshot>, k: string) =>\n          deactivateRouteAndItsChildren(v, contexts!.getContext(k), checks));\n\n  return checks;\n}\n\nfunction getRouteGuards(\n    futureNode: TreeNode<ActivatedRouteSnapshot>, currNode: TreeNode<ActivatedRouteSnapshot>,\n    parentContexts: ChildrenOutletContexts|null, futurePath: ActivatedRouteSnapshot[],\n    checks: Checks = {\n      canDeactivateChecks: [],\n      canActivateChecks: []\n    }): Checks {\n  const future = futureNode.value;\n  const curr = currNode ? currNode.value : null;\n  const context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;\n\n  // reusing the node\n  if (curr && future.routeConfig === curr.routeConfig) {\n    const shouldRun =\n        shouldRunGuardsAndResolvers(curr, future, future.routeConfig!.runGuardsAndResolvers);\n    if (shouldRun) {\n      checks.canActivateChecks.push(new CanActivate(futurePath));\n    } else {\n      // we need to set the data\n      future.data = curr.data;\n      future._resolvedData = curr._resolvedData;\n    }\n\n    // If we have a component, we need to go through an outlet.\n    if (future.component) {\n      getChildRouteGuards(\n          futureNode, currNode, context ? context.children : null, futurePath, checks);\n\n      // if we have a componentless route, we recurse but keep the same outlet map.\n    } else {\n      getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);\n    }\n\n    if (shouldRun && context && context.outlet && context.outlet.isActivated) {\n      checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, curr));\n    }\n  } else {\n    if (curr) {\n      deactivateRouteAndItsChildren(currNode, context, checks);\n    }\n\n    checks.canActivateChecks.push(new CanActivate(futurePath));\n    // If we have a component, we need to go through an outlet.\n    if (future.component) {\n      getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks);\n\n      // if we have a componentless route, we recurse but keep the same outlet map.\n    } else {\n      getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);\n    }\n  }\n\n  return checks;\n}\n\nfunction shouldRunGuardsAndResolvers(\n    curr: ActivatedRouteSnapshot, future: ActivatedRouteSnapshot,\n    mode: RunGuardsAndResolvers|undefined): boolean {\n  if (typeof mode === 'function') {\n    return mode(curr, future);\n  }\n  switch (mode) {\n    case 'pathParamsChange':\n      return !equalPath(curr.url, future.url);\n\n    case 'pathParamsOrQueryParamsChange':\n      return !equalPath(curr.url, future.url) ||\n          !shallowEqual(curr.queryParams, future.queryParams);\n\n    case 'always':\n      return true;\n\n    case 'paramsOrQueryParamsChange':\n      return !equalParamsAndUrlSegments(curr, future) ||\n          !shallowEqual(curr.queryParams, future.queryParams);\n\n    case 'paramsChange':\n    default:\n      return !equalParamsAndUrlSegments(curr, future);\n  }\n}\n\nfunction deactivateRouteAndItsChildren(\n    route: TreeNode<ActivatedRouteSnapshot>, context: OutletContext|null, checks: Checks): void {\n  const children = nodeChildrenAsMap(route);\n  const r = route.value;\n\n  forEach(children, (node: TreeNode<ActivatedRouteSnapshot>, childName: string) => {\n    if (!r.component) {\n      deactivateRouteAndItsChildren(node, context, checks);\n    } else if (context) {\n      deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);\n    } else {\n      deactivateRouteAndItsChildren(node, null, checks);\n    }\n  });\n\n  if (!r.component) {\n    checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n  } else if (context && context.outlet && context.outlet.isActivated) {\n    checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\n  } else {\n    checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {Observable, Observer, of} from 'rxjs';\n\nimport {Data, ResolveData, Route, Routes} from './config';\nimport {ActivatedRouteSnapshot, inheritedParamsDataResolve, ParamsInheritanceStrategy, RouterStateSnapshot} from './router_state';\nimport {PRIMARY_OUTLET} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\nimport {last} from './utils/collection';\nimport {getOutlet, sortByMatchingOutlets} from './utils/config';\nimport {isImmediateMatch, match, noLeftoversInUrl, split} from './utils/config_matching';\nimport {TreeNode} from './utils/tree';\n\nclass NoMatch {}\n\nfunction newObservableError(e: unknown): Observable<RouterStateSnapshot> {\n  // TODO(atscott): This pattern is used throughout the router code and can be `throwError` instead.\n  return new Observable<RouterStateSnapshot>((obs: Observer<RouterStateSnapshot>) => obs.error(e));\n}\n\nexport function recognize(\n    rootComponentType: Type<any>|null, config: Routes, urlTree: UrlTree, url: string,\n    paramsInheritanceStrategy: ParamsInheritanceStrategy = 'emptyOnly',\n    relativeLinkResolution: 'legacy'|'corrected' = 'legacy'): Observable<RouterStateSnapshot> {\n  try {\n    const result = new Recognizer(\n                       rootComponentType, config, urlTree, url, paramsInheritanceStrategy,\n                       relativeLinkResolution)\n                       .recognize();\n    if (result === null) {\n      return newObservableError(new NoMatch());\n    } else {\n      return of(result);\n    }\n  } catch (e) {\n    // Catch the potential error from recognize due to duplicate outlet matches and return as an\n    // `Observable` error instead.\n    return newObservableError(e);\n  }\n}\n\nexport class Recognizer {\n  constructor(\n      private rootComponentType: Type<any>|null, private config: Routes, private urlTree: UrlTree,\n      private url: string, private paramsInheritanceStrategy: ParamsInheritanceStrategy,\n      private relativeLinkResolution: 'legacy'|'corrected') {}\n\n  recognize(): RouterStateSnapshot|null {\n    const rootSegmentGroup =\n        split(\n            this.urlTree.root, [], [], this.config.filter(c => c.redirectTo === undefined),\n            this.relativeLinkResolution)\n            .segmentGroup;\n\n    const children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n    if (children === null) {\n      return null;\n    }\n\n    // Use Object.freeze to prevent readers of the Router state from modifying it outside of a\n    // navigation, resulting in the router being out of sync with the browser.\n    const root = new ActivatedRouteSnapshot(\n        [], Object.freeze({}), Object.freeze({...this.urlTree.queryParams}), this.urlTree.fragment!,\n        {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\n\n    const rootNode = new TreeNode<ActivatedRouteSnapshot>(root, children);\n    const routeState = new RouterStateSnapshot(this.url, rootNode);\n    this.inheritParamsAndData(routeState._root);\n    return routeState;\n  }\n\n  inheritParamsAndData(routeNode: TreeNode<ActivatedRouteSnapshot>): void {\n    const route = routeNode.value;\n\n    const i = inheritedParamsDataResolve(route, this.paramsInheritanceStrategy);\n    route.params = Object.freeze(i.params);\n    route.data = Object.freeze(i.data);\n\n    routeNode.children.forEach(n => this.inheritParamsAndData(n));\n  }\n\n  processSegmentGroup(config: Route[], segmentGroup: UrlSegmentGroup, outlet: string):\n      TreeNode<ActivatedRouteSnapshot>[]|null {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.processChildren(config, segmentGroup);\n    }\n\n    return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n  }\n\n  /**\n   * Matches every child outlet in the `segmentGroup` to a `Route` in the config. Returns `null` if\n   * we cannot find a match for _any_ of the children.\n   *\n   * @param config - The `Routes` to match against\n   * @param segmentGroup - The `UrlSegmentGroup` whose children need to be matched against the\n   *     config.\n   */\n  processChildren(config: Route[], segmentGroup: UrlSegmentGroup):\n      TreeNode<ActivatedRouteSnapshot>[]|null {\n    const children: Array<TreeNode<ActivatedRouteSnapshot>> = [];\n    for (const childOutlet of Object.keys(segmentGroup.children)) {\n      const child = segmentGroup.children[childOutlet];\n      // Sort the config so that routes with outlets that match the one being activated appear\n      // first, followed by routes for other outlets, which might match if they have an empty path.\n      const sortedConfig = sortByMatchingOutlets(config, childOutlet);\n      const outletChildren = this.processSegmentGroup(sortedConfig, child, childOutlet);\n      if (outletChildren === null) {\n        // Configs must match all segment children so because we did not find a match for this\n        // outlet, return `null`.\n        return null;\n      }\n      children.push(...outletChildren);\n    }\n    // Because we may have matched two outlets to the same empty path segment, we can have multiple\n    // activated results for the same outlet. We should merge the children of these results so the\n    // final return value is only one `TreeNode` per outlet.\n    const mergedChildren = mergeEmptyPathMatches(children);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // This should really never happen - we are only taking the first match for each outlet and\n      // merge the empty path matches.\n      checkOutletNameUniqueness(mergedChildren);\n    }\n    sortActivatedRouteSnapshots(mergedChildren);\n    return mergedChildren;\n  }\n\n  processSegment(\n      config: Route[], segmentGroup: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[]|null {\n    for (const r of config) {\n      const children = this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n      if (children !== null) {\n        return children;\n      }\n    }\n    if (noLeftoversInUrl(segmentGroup, segments, outlet)) {\n      return [];\n    }\n\n    return null;\n  }\n\n  processSegmentAgainstRoute(\n      route: Route, rawSegment: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[]|null {\n    if (route.redirectTo || !isImmediateMatch(route, rawSegment, segments, outlet)) return null;\n\n    let snapshot: ActivatedRouteSnapshot;\n    let consumedSegments: UrlSegment[] = [];\n    let rawSlicedSegments: UrlSegment[] = [];\n\n    if (route.path === '**') {\n      const params = segments.length > 0 ? last(segments)!.parameters : {};\n      snapshot = new ActivatedRouteSnapshot(\n          segments, params, Object.freeze({...this.urlTree.queryParams}), this.urlTree.fragment!,\n          getData(route), getOutlet(route), route.component!, route,\n          getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length,\n          getResolve(route));\n    } else {\n      const result = match(rawSegment, route, segments);\n      if (!result.matched) {\n        return null;\n      }\n      consumedSegments = result.consumedSegments;\n      rawSlicedSegments = segments.slice(result.lastChild);\n\n      snapshot = new ActivatedRouteSnapshot(\n          consumedSegments, result.parameters, Object.freeze({...this.urlTree.queryParams}),\n          this.urlTree.fragment!, getData(route), getOutlet(route), route.component!, route,\n          getSourceSegmentGroup(rawSegment),\n          getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));\n    }\n\n    const childConfig: Route[] = getChildConfig(route);\n\n    const {segmentGroup, slicedSegments} = split(\n        rawSegment, consumedSegments, rawSlicedSegments,\n        // Filter out routes with redirectTo because we are trying to create activated route\n        // snapshots and don't handle redirects here. That should have been done in\n        // `applyRedirects`.\n        childConfig.filter(c => c.redirectTo === undefined), this.relativeLinkResolution);\n\n    if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n      const children = this.processChildren(childConfig, segmentGroup);\n      if (children === null) {\n        return null;\n      }\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n    }\n\n    if (childConfig.length === 0 && slicedSegments.length === 0) {\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n    }\n\n    const matchedOnOutlet = getOutlet(route) === outlet;\n    // If we matched a config due to empty path match on a different outlet, we need to continue\n    // passing the current outlet for the segment rather than switch to PRIMARY.\n    // Note that we switch to primary when we have a match because outlet configs look like this:\n    // {path: 'a', outlet: 'a', children: [\n    //  {path: 'b', component: B},\n    //  {path: 'c', component: C},\n    // ]}\n    // Notice that the children of the named outlet are configured with the primary outlet\n    const children = this.processSegment(\n        childConfig, segmentGroup, slicedSegments, matchedOnOutlet ? PRIMARY_OUTLET : outlet);\n    if (children === null) {\n      return null;\n    }\n    return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n  }\n}\n\nfunction sortActivatedRouteSnapshots(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  nodes.sort((a, b) => {\n    if (a.value.outlet === PRIMARY_OUTLET) return -1;\n    if (b.value.outlet === PRIMARY_OUTLET) return 1;\n    return a.value.outlet.localeCompare(b.value.outlet);\n  });\n}\n\nfunction getChildConfig(route: Route): Route[] {\n  if (route.children) {\n    return route.children;\n  }\n\n  if (route.loadChildren) {\n    return route._loadedConfig!.routes;\n  }\n\n  return [];\n}\n\nfunction hasEmptyPathConfig(node: TreeNode<ActivatedRouteSnapshot>) {\n  const config = node.value.routeConfig;\n  return config && config.path === '' && config.redirectTo === undefined;\n}\n\n/**\n * Finds `TreeNode`s with matching empty path route configs and merges them into `TreeNode` with the\n * children from each duplicate. This is necessary because different outlets can match a single\n * empty path route config and the results need to then be merged.\n */\nfunction mergeEmptyPathMatches(nodes: Array<TreeNode<ActivatedRouteSnapshot>>):\n    Array<TreeNode<ActivatedRouteSnapshot>> {\n  const result: Array<TreeNode<ActivatedRouteSnapshot>> = [];\n\n  for (const node of nodes) {\n    if (!hasEmptyPathConfig(node)) {\n      result.push(node);\n      continue;\n    }\n\n    const duplicateEmptyPathNode =\n        result.find(resultNode => node.value.routeConfig === resultNode.value.routeConfig);\n    if (duplicateEmptyPathNode !== undefined) {\n      duplicateEmptyPathNode.children.push(...node.children);\n    } else {\n      result.push(node);\n    }\n  }\n  return result;\n}\n\nfunction checkOutletNameUniqueness(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  const names: {[k: string]: ActivatedRouteSnapshot} = {};\n  nodes.forEach(n => {\n    const routeWithSameOutletName = names[n.value.outlet];\n    if (routeWithSameOutletName) {\n      const p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\n      const c = n.value.url.map(s => s.toString()).join('/');\n      throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n    }\n    names[n.value.outlet] = n.value;\n  });\n}\n\nfunction getSourceSegmentGroup(segmentGroup: UrlSegmentGroup): UrlSegmentGroup {\n  let s = segmentGroup;\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n  }\n  return s;\n}\n\nfunction getPathIndexShift(segmentGroup: UrlSegmentGroup): number {\n  let s = segmentGroup;\n  let res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n    res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  }\n  return res - 1;\n}\n\nfunction getData(route: Route): Data {\n  return route.data || {};\n}\n\nfunction getResolve(route: Route): ResolveData {\n  return route.resolve || {};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {from, MonoTypeOperatorFunction, ObservableInput, of} from 'rxjs';\nimport {map, switchMap} from 'rxjs/operators';\n\n/**\n * Perform a side effect through a switchMap for every emission on the source Observable,\n * but return an Observable that is identical to the source. It's essentially the same as\n * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,\n * it will wait before continuing with the original value.\n */\nexport function switchTap<T>(next: (x: T) => void|ObservableInput<any>):\n    MonoTypeOperatorFunction<T> {\n  return switchMap(v => {\n    const nextResult = next(v);\n    if (nextResult) {\n      return from(nextResult).pipe(map(() => v));\n    }\n    return of(v);\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentRef} from '@angular/core';\n\nimport {OutletContext} from './router_outlet_context';\nimport {ActivatedRoute, ActivatedRouteSnapshot} from './router_state';\nimport {TreeNode} from './utils/tree';\n\n/**\n * @description\n *\n * Represents the detached route tree.\n *\n * This is an opaque value the router will give to a custom route reuse strategy\n * to store and retrieve later on.\n *\n * @publicApi\n */\nexport type DetachedRouteHandle = {};\n\n/** @internal */\nexport type DetachedRouteHandleInternal = {\n  contexts: Map<string, OutletContext>,\n  componentRef: ComponentRef<any>,\n  route: TreeNode<ActivatedRoute>,\n};\n\n/**\n * @description\n *\n * Provides a way to customize when activated routes get reused.\n *\n * @publicApi\n */\nexport abstract class RouteReuseStrategy {\n  /** Determines if this route (and its subtree) should be detached to be reused later */\n  abstract shouldDetach(route: ActivatedRouteSnapshot): boolean;\n\n  /**\n   * Stores the detached route.\n   *\n   * Storing a `null` value should erase the previously stored value.\n   */\n  abstract store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle|null): void;\n\n  /** Determines if this route (and its subtree) should be reattached */\n  abstract shouldAttach(route: ActivatedRouteSnapshot): boolean;\n\n  /** Retrieves the previously stored route */\n  abstract retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle|null;\n\n  /** Determines if a route should be reused */\n  abstract shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean;\n}\n\n/**\n * @description\n *\n * This base route reuse strategy only reuses routes when the matched router configs are\n * identical. This prevents components from being destroyed and recreated\n * when just the fragment or query parameters change\n * (that is, the existing component is _reused_).\n *\n * This strategy does not store any routes for later reuse.\n *\n * Angular uses this strategy by default.\n *\n *\n * It can be used as a base class for custom route reuse strategies, i.e. you can create your own\n * class that extends the `BaseRouteReuseStrategy` one.\n * @publicApi\n */\nexport abstract class BaseRouteReuseStrategy implements RouteReuseStrategy {\n  /**\n   * Whether the given route should detach for later reuse.\n   * Always returns false for `BaseRouteReuseStrategy`.\n   * */\n  shouldDetach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  /**\n   * A no-op; the route is never stored since this strategy never detaches routes for later re-use.\n   */\n  store(route: ActivatedRouteSnapshot, detachedTree: DetachedRouteHandle): void {}\n\n  /** Returns `false`, meaning the route (and its subtree) is never reattached */\n  shouldAttach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  /** Returns `null` because this strategy does not store routes for later re-use. */\n  retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle|null {\n    return null;\n  }\n\n  /**\n   * Determines if a route should be reused.\n   * This strategy returns `true` when the future route config and current route config are\n   * identical.\n   */\n  shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    return future.routeConfig === curr.routeConfig;\n  }\n}\n\nexport class DefaultRouteReuseStrategy extends BaseRouteReuseStrategy {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, InjectFlags, InjectionToken, Injector, NgModuleFactory, NgModuleFactoryLoader} from '@angular/core';\nimport {ConnectableObservable, from, Observable, of, Subject} from 'rxjs';\nimport {catchError, map, mergeMap, refCount, tap} from 'rxjs/operators';\n\nimport {LoadChildren, LoadedRouterConfig, Route} from './config';\nimport {flatten, wrapIntoObservable} from './utils/collection';\nimport {standardizeConfig} from './utils/config';\n\n/**\n * The [DI token](guide/glossary/#di-token) for a router configuration.\n * @see `ROUTES`\n * @publicApi\n */\nexport const ROUTES = new InjectionToken<Route[][]>('ROUTES');\n\nexport class RouterConfigLoader {\n  constructor(\n      private loader: NgModuleFactoryLoader, private compiler: Compiler,\n      private onLoadStartListener?: (r: Route) => void,\n      private onLoadEndListener?: (r: Route) => void) {}\n\n  load(parentInjector: Injector, route: Route): Observable<LoadedRouterConfig> {\n    if (route._loader$) {\n      return route._loader$;\n    }\n\n    if (this.onLoadStartListener) {\n      this.onLoadStartListener(route);\n    }\n    const moduleFactory$ = this.loadModuleFactory(route.loadChildren!);\n    const loadRunner = moduleFactory$.pipe(\n        map((factory: NgModuleFactory<any>) => {\n          if (this.onLoadEndListener) {\n            this.onLoadEndListener(route);\n          }\n          const module = factory.create(parentInjector);\n          // When loading a module that doesn't provide `RouterModule.forChild()` preloader\n          // will get stuck in an infinite loop. The child module's Injector will look to\n          // its parent `Injector` when it doesn't find any ROUTES so it will return routes\n          // for it's parent module instead.\n          return new LoadedRouterConfig(\n              flatten(\n                  module.injector.get(ROUTES, undefined, InjectFlags.Self | InjectFlags.Optional))\n                  .map(standardizeConfig),\n              module);\n        }),\n        catchError((err) => {\n          route._loader$ = undefined;\n          throw err;\n        }),\n    );\n    // Use custom ConnectableObservable as share in runners pipe increasing the bundle size too much\n    route._loader$ = new ConnectableObservable(loadRunner, () => new Subject<LoadedRouterConfig>())\n                         .pipe(refCount());\n    return route._loader$;\n  }\n\n  private loadModuleFactory(loadChildren: LoadChildren): Observable<NgModuleFactory<any>> {\n    if (typeof loadChildren === 'string') {\n      return from(this.loader.load(loadChildren));\n    } else {\n      return wrapIntoObservable(loadChildren()).pipe(mergeMap((t: any) => {\n        if (t instanceof NgModuleFactory) {\n          return of(t);\n        } else {\n          return from(this.compiler.compileModuleAsync(t));\n        }\n      }));\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactoryResolver, ComponentRef} from '@angular/core';\n\nimport {RouterOutlet} from './directives/router_outlet';\nimport {ActivatedRoute} from './router_state';\n\n\n/**\n * Store contextual information about a `RouterOutlet`\n *\n * @publicApi\n */\nexport class OutletContext {\n  outlet: RouterOutlet|null = null;\n  route: ActivatedRoute|null = null;\n  resolver: ComponentFactoryResolver|null = null;\n  children = new ChildrenOutletContexts();\n  attachRef: ComponentRef<any>|null = null;\n}\n\n/**\n * Store contextual information about the children (= nested) `RouterOutlet`\n *\n * @publicApi\n */\nexport class ChildrenOutletContexts {\n  // contexts for child outlets, by name.\n  private contexts = new Map<string, OutletContext>();\n\n  /** Called when a `RouterOutlet` directive is instantiated */\n  onChildOutletCreated(childName: string, outlet: RouterOutlet): void {\n    const context = this.getOrCreateContext(childName);\n    context.outlet = outlet;\n    this.contexts.set(childName, context);\n  }\n\n  /**\n   * Called when a `RouterOutlet` directive is destroyed.\n   * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n   * re-created later.\n   */\n  onChildOutletDestroyed(childName: string): void {\n    const context = this.getContext(childName);\n    if (context) {\n      context.outlet = null;\n    }\n  }\n\n  /**\n   * Called when the corresponding route is deactivated during navigation.\n   * Because the component get destroyed, all children outlet are destroyed.\n   */\n  onOutletDeactivated(): Map<string, OutletContext> {\n    const contexts = this.contexts;\n    this.contexts = new Map();\n    return contexts;\n  }\n\n  onOutletReAttached(contexts: Map<string, OutletContext>) {\n    this.contexts = contexts;\n  }\n\n  getOrCreateContext(childName: string): OutletContext {\n    let context = this.getContext(childName);\n\n    if (!context) {\n      context = new OutletContext();\n      this.contexts.set(childName, context);\n    }\n\n    return context;\n  }\n\n  getContext(childName: string): OutletContext|null {\n    return this.contexts.get(childName) || null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {UrlTree} from './url_tree';\n\n/**\n * @description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * @publicApi\n */\nexport abstract class UrlHandlingStrategy {\n  /**\n   * Tells the router if this URL should be processed.\n   *\n   * When it returns true, the router will execute the regular navigation.\n   * When it returns false, the router will set the router state to an empty state.\n   * As a result, all the active components will be destroyed.\n   *\n   */\n  abstract shouldProcessUrl(url: UrlTree): boolean;\n\n  /**\n   * Extracts the part of the URL that should be handled by the router.\n   * The rest of the URL will remain untouched.\n   */\n  abstract extract(url: UrlTree): UrlTree;\n\n  /**\n   * Merges the URL fragment with the rest of the URL.\n   */\n  abstract merge(newUrlPart: UrlTree, rawUrl: UrlTree): UrlTree;\n}\n\n/**\n * @publicApi\n */\nexport class DefaultUrlHandlingStrategy implements UrlHandlingStrategy {\n  shouldProcessUrl(url: UrlTree): boolean {\n    return true;\n  }\n  extract(url: UrlTree): UrlTree {\n    return url;\n  }\n  merge(newUrlPart: UrlTree, wholeUrl: UrlTree): UrlTree {\n    return newUrlPart;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location, PopStateEvent} from '@angular/common';\nimport {Compiler, Injectable, Injector, NgModuleFactoryLoader, NgModuleRef, NgZone, Type, ɵConsole as Console} from '@angular/core';\nimport {BehaviorSubject, EMPTY, Observable, of, Subject, SubscriptionLike} from 'rxjs';\nimport {catchError, filter, finalize, map, switchMap, tap} from 'rxjs/operators';\n\nimport {QueryParamsHandling, Route, Routes} from './config';\nimport {createRouterState} from './create_router_state';\nimport {createUrlTree} from './create_url_tree';\nimport {Event, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, NavigationTrigger, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RoutesRecognized} from './events';\nimport {activateRoutes} from './operators/activate_routes';\nimport {applyRedirects} from './operators/apply_redirects';\nimport {checkGuards} from './operators/check_guards';\nimport {recognize} from './operators/recognize';\nimport {resolveData} from './operators/resolve_data';\nimport {switchTap} from './operators/switch_tap';\nimport {DefaultRouteReuseStrategy, RouteReuseStrategy} from './route_reuse_strategy';\nimport {RouterConfigLoader} from './router_config_loader';\nimport {ChildrenOutletContexts} from './router_outlet_context';\nimport {ActivatedRoute, createEmptyState, RouterState, RouterStateSnapshot} from './router_state';\nimport {isNavigationCancelingError, navigationCancelingError, Params} from './shared';\nimport {DefaultUrlHandlingStrategy, UrlHandlingStrategy} from './url_handling_strategy';\nimport {containsTree, createEmptyUrlTree, UrlSerializer, UrlTree} from './url_tree';\nimport {standardizeConfig, validateConfig} from './utils/config';\nimport {Checks, getAllRouteGuards} from './utils/preactivation';\nimport {isUrlTree} from './utils/type_guards';\n\n\n\n/**\n * @description\n *\n * Options that modify the `Router` URL.\n * Supply an object containing any of these properties to a `Router` navigation function to\n * control how the target URL should be constructed.\n *\n * @see [Router.navigate() method](api/router/Router#navigate)\n * @see [Router.createUrlTree() method](api/router/Router#createurltree)\n * @see [Routing and Navigation guide](guide/router)\n *\n * @publicApi\n */\nexport interface UrlCreationOptions {\n  /**\n   * Specifies a root URI to use for relative navigation.\n   *\n   * For example, consider the following route configuration where the parent route\n   * has two children.\n   *\n   * ```\n   * [{\n   *   path: 'parent',\n   *   component: ParentComponent,\n   *   children: [{\n   *     path: 'list',\n   *     component: ListComponent\n   *   },{\n   *     path: 'child',\n   *     component: ChildComponent\n   *   }]\n   * }]\n   * ```\n   *\n   * The following `go()` function navigates to the `list` route by\n   * interpreting the destination URI as relative to the activated `child`  route\n   *\n   * ```\n   *  @Component({...})\n   *  class ChildComponent {\n   *    constructor(private router: Router, private route: ActivatedRoute) {}\n   *\n   *    go() {\n   *      this.router.navigate(['../list'], { relativeTo: this.route });\n   *    }\n   *  }\n   * ```\n   *\n   * A value of `null` or `undefined` indicates that the navigation commands should be applied\n   * relative to the root.\n   */\n  relativeTo?: ActivatedRoute|null;\n\n  /**\n   * Sets query parameters to the URL.\n   *\n   * ```\n   * // Navigate to /results?page=1\n   * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n   * ```\n   */\n  queryParams?: Params|null;\n\n  /**\n   * Sets the hash fragment for the URL.\n   *\n   * ```\n   * // Navigate to /results#top\n   * this.router.navigate(['/results'], { fragment: 'top' });\n   * ```\n   */\n  fragment?: string;\n\n  /**\n   * How to handle query parameters in the router link for the next navigation.\n   * One of:\n   * * `preserve` : Preserve current parameters.\n   * * `merge` : Merge new with current parameters.\n   *\n   * The \"preserve\" option discards any new query params:\n   * ```\n   * // from /view1?page=1 to/view2?page=1\n   * this.router.navigate(['/view2'], { queryParams: { page: 2 },  queryParamsHandling: \"preserve\"\n   * });\n   * ```\n   * The \"merge\" option appends new query params to the params from the current URL:\n   * ```\n   * // from /view1?page=1 to/view2?page=1&otherKey=2\n   * this.router.navigate(['/view2'], { queryParams: { otherKey: 2 },  queryParamsHandling: \"merge\"\n   * });\n   * ```\n   * In case of a key collision between current parameters and those in the `queryParams` object,\n   * the new value is used.\n   *\n   */\n  queryParamsHandling?: QueryParamsHandling|null;\n\n  /**\n   * When true, preserves the URL fragment for the next navigation\n   *\n   * ```\n   * // Preserve fragment from /results#top to /view#top\n   * this.router.navigate(['/view'], { preserveFragment: true });\n   * ```\n   */\n  preserveFragment?: boolean;\n}\n\n/**\n * @description\n *\n * Options that modify the `Router` navigation strategy.\n * Supply an object containing any of these properties to a `Router` navigation function to\n * control how the navigation should be handled.\n *\n * @see [Router.navigate() method](api/router/Router#navigate)\n * @see [Router.navigateByUrl() method](api/router/Router#navigatebyurl)\n * @see [Routing and Navigation guide](guide/router)\n *\n * @publicApi\n */\nexport interface NavigationBehaviorOptions {\n  /**\n   * When true, navigates without pushing a new state into history.\n   *\n   * ```\n   * // Navigate silently to /view\n   * this.router.navigate(['/view'], { skipLocationChange: true });\n   * ```\n   */\n  skipLocationChange?: boolean;\n\n  /**\n   * When true, navigates while replacing the current state in history.\n   *\n   * ```\n   * // Navigate to /view\n   * this.router.navigate(['/view'], { replaceUrl: true });\n   * ```\n   */\n  replaceUrl?: boolean;\n\n  /**\n   * Developer-defined state that can be passed to any navigation.\n   * Access this value through the `Navigation.extras` object\n   * returned from the [Router.getCurrentNavigation()\n   * method](api/router/Router#getcurrentnavigation) while a navigation is executing.\n   *\n   * After a navigation completes, the router writes an object containing this\n   * value together with a `navigationId` to `history.state`.\n   * The value is written when `location.go()` or `location.replaceState()`\n   * is called before activating this route.\n   *\n   * Note that `history.state` does not pass an object equality test because\n   * the router adds the `navigationId` on each navigation.\n   *\n   */\n  state?: {[k: string]: any};\n}\n\n/**\n * @description\n *\n * Options that modify the `Router` navigation strategy.\n * Supply an object containing any of these properties to a `Router` navigation function to\n * control how the target URL should be constructed or interpreted.\n *\n * @see [Router.navigate() method](api/router/Router#navigate)\n * @see [Router.navigateByUrl() method](api/router/Router#navigatebyurl)\n * @see [Router.createUrlTree() method](api/router/Router#createurltree)\n * @see [Routing and Navigation guide](guide/router)\n * @see UrlCreationOptions\n * @see NavigationBehaviorOptions\n *\n * @publicApi\n */\nexport interface NavigationExtras extends UrlCreationOptions, NavigationBehaviorOptions {}\n\n/**\n * Error handler that is invoked when a navigation error occurs.\n *\n * If the handler returns a value, the navigation Promise is resolved with this value.\n * If the handler throws an exception, the navigation Promise is rejected with\n * the exception.\n *\n * @publicApi\n */\nexport type ErrorHandler = (error: any) => any;\n\nfunction defaultErrorHandler(error: any): any {\n  throw error;\n}\n\nfunction defaultMalformedUriErrorHandler(\n    error: URIError, urlSerializer: UrlSerializer, url: string): UrlTree {\n  return urlSerializer.parse('/');\n}\n\nexport type RestoredState = {\n  [k: string]: any; navigationId: number;\n};\n\n/**\n * Information about a navigation operation.\n * Retrieve the most recent navigation object with the\n * [Router.getCurrentNavigation() method](api/router/Router#getcurrentnavigation) .\n *\n * * *id* : The unique identifier of the current navigation.\n * * *initialUrl* : The target URL passed into the `Router#navigateByUrl()` call before navigation.\n * This is the value before the router has parsed or applied redirects to it.\n * * *extractedUrl* : The initial target URL after being parsed with `UrlSerializer.extract()`.\n * * *finalUrl* : The extracted URL after redirects have been applied.\n * This URL may not be available immediately, therefore this property can be `undefined`.\n * It is guaranteed to be set after the `RoutesRecognized` event fires.\n * * *trigger* : Identifies how this navigation was triggered.\n * -- 'imperative'--Triggered by `router.navigateByUrl` or `router.navigate`.\n * -- 'popstate'--Triggered by a popstate event.\n * -- 'hashchange'--Triggered by a hashchange event.\n * * *extras* : A `NavigationExtras` options object that controlled the strategy used for this\n * navigation.\n * * *previousNavigation* : The previously successful `Navigation` object. Only one previous\n * navigation is available, therefore this previous `Navigation` object has a `null` value for its\n * own `previousNavigation`.\n *\n * @publicApi\n */\nexport type Navigation = {\n  /**\n   * The unique identifier of the current navigation.\n   */\n  id: number;\n  /**\n   * The target URL passed into the `Router#navigateByUrl()` call before navigation. This is\n   * the value before the router has parsed or applied redirects to it.\n   */\n  initialUrl: string | UrlTree;\n  /**\n   * The initial target URL after being parsed with `UrlSerializer.extract()`.\n   */\n  extractedUrl: UrlTree;\n  /**\n   * The extracted URL after redirects have been applied.\n   * This URL may not be available immediately, therefore this property can be `undefined`.\n   * It is guaranteed to be set after the `RoutesRecognized` event fires.\n   */\n  finalUrl?: UrlTree;\n  /**\n   * Identifies how this navigation was triggered.\n   *\n   * * 'imperative'--Triggered by `router.navigateByUrl` or `router.navigate`.\n   * * 'popstate'--Triggered by a popstate event.\n   * * 'hashchange'--Triggered by a hashchange event.\n   */\n  trigger: 'imperative' | 'popstate' | 'hashchange';\n  /**\n   * Options that controlled the strategy used for this navigation.\n   * See `NavigationExtras`.\n   */\n  extras: NavigationExtras;\n  /**\n   * The previously successful `Navigation` object. Only one previous navigation\n   * is available, therefore this previous `Navigation` object has a `null` value\n   * for its own `previousNavigation`.\n   */\n  previousNavigation: Navigation | null;\n};\n\nexport type NavigationTransition = {\n  id: number,\n  currentUrlTree: UrlTree,\n  currentRawUrl: UrlTree,\n  extractedUrl: UrlTree,\n  urlAfterRedirects: UrlTree,\n  rawUrl: UrlTree,\n  extras: NavigationExtras,\n  resolve: any,\n  reject: any,\n  promise: Promise<boolean>,\n  source: NavigationTrigger,\n  restoredState: RestoredState|null,\n  currentSnapshot: RouterStateSnapshot,\n  targetSnapshot: RouterStateSnapshot|null,\n  currentRouterState: RouterState,\n  targetRouterState: RouterState|null,\n  guards: Checks,\n  guardsResult: boolean|UrlTree|null,\n};\n\n/**\n * @internal\n */\nexport type RouterHook = (snapshot: RouterStateSnapshot, runExtras: {\n  appliedUrlTree: UrlTree,\n  rawUrlTree: UrlTree,\n  skipLocationChange: boolean,\n  replaceUrl: boolean,\n  navigationId: number\n}) => Observable<void>;\n\n/**\n * @internal\n */\nfunction defaultRouterHook(snapshot: RouterStateSnapshot, runExtras: {\n  appliedUrlTree: UrlTree,\n  rawUrlTree: UrlTree,\n  skipLocationChange: boolean,\n  replaceUrl: boolean,\n  navigationId: number\n}): Observable<void> {\n  return of(null) as any;\n}\n\n/**\n * Information related to a location change, necessary for scheduling follow-up Router navigations.\n */\ntype LocationChangeInfo = {\n  source: 'popstate'|'hashchange',\n  urlTree: UrlTree,\n  state: RestoredState|null,\n  transitionId: number\n};\n\n/**\n * @description\n *\n * A service that provides navigation among views and URL manipulation capabilities.\n *\n * @see `Route`.\n * @see [Routing and Navigation Guide](guide/router).\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\n@Injectable()\nexport class Router {\n  private currentUrlTree: UrlTree;\n  private rawUrlTree: UrlTree;\n  private browserUrlTree: UrlTree;\n  private readonly transitions: BehaviorSubject<NavigationTransition>;\n  private navigations: Observable<NavigationTransition>;\n  private lastSuccessfulNavigation: Navigation|null = null;\n  private currentNavigation: Navigation|null = null;\n  private disposed = false;\n\n  private locationSubscription?: SubscriptionLike;\n  /**\n   * Tracks the previously seen location change from the location subscription so we can compare\n   * the two latest to see if they are duplicates. See setUpLocationChangeListener.\n   */\n  private lastLocationChangeInfo: LocationChangeInfo|null = null;\n  private navigationId: number = 0;\n  private configLoader: RouterConfigLoader;\n  private ngModule: NgModuleRef<any>;\n  private console: Console;\n  private isNgZoneEnabled: boolean = false;\n\n  /**\n   * An event stream for routing events in this NgModule.\n   */\n  public readonly events: Observable<Event> = new Subject<Event>();\n  /**\n   * The current state of routing in this NgModule.\n   */\n  public readonly routerState: RouterState;\n\n  /**\n   * A handler for navigation errors in this NgModule.\n   */\n  errorHandler: ErrorHandler = defaultErrorHandler;\n\n  /**\n   * A handler for errors thrown by `Router.parseUrl(url)`\n   * when `url` contains an invalid character.\n   * The most common case is a `%` sign\n   * that's not encoded and is not part of a percent encoded sequence.\n   */\n  malformedUriErrorHandler:\n      (error: URIError, urlSerializer: UrlSerializer,\n       url: string) => UrlTree = defaultMalformedUriErrorHandler;\n\n  /**\n   * True if at least one navigation event has occurred,\n   * false otherwise.\n   */\n  navigated: boolean = false;\n  private lastSuccessfulId: number = -1;\n\n  /**\n   * Hooks that enable you to pause navigation,\n   * either before or after the preactivation phase.\n   * Used by `RouterModule`.\n   *\n   * @internal\n   */\n  hooks: {\n    beforePreactivation: RouterHook,\n    afterPreactivation: RouterHook\n  } = {beforePreactivation: defaultRouterHook, afterPreactivation: defaultRouterHook};\n\n  /**\n   * A strategy for extracting and merging URLs.\n   * Used for AngularJS to Angular migrations.\n   */\n  urlHandlingStrategy: UrlHandlingStrategy = new DefaultUrlHandlingStrategy();\n\n  /**\n   * A strategy for re-using routes.\n   */\n  routeReuseStrategy: RouteReuseStrategy = new DefaultRouteReuseStrategy();\n\n  /**\n   * How to handle a navigation request to the current URL. One of:\n   * - `'ignore'` :  The router ignores the request.\n   * - `'reload'` : The router reloads the URL. Use to implement a \"refresh\" feature.\n   */\n  onSameUrlNavigation: 'reload'|'ignore' = 'ignore';\n\n  /**\n   * How to merge parameters, data, and resolved data from parent to child\n   * routes. One of:\n   *\n   * - `'emptyOnly'` : Inherit parent parameters, data, and resolved data\n   * for path-less or component-less routes.\n   * - `'always'` : Inherit parent parameters, data, and resolved data\n   * for all child routes.\n   */\n  paramsInheritanceStrategy: 'emptyOnly'|'always' = 'emptyOnly';\n\n  /**\n   * Determines when the router updates the browser URL.\n   * By default (`\"deferred\"`), updates the browser URL after navigation has finished.\n   * Set to `'eager'` to update the browser URL at the beginning of navigation.\n   * You can choose to update early so that, if navigation fails,\n   * you can show an error message with the URL that failed.\n   */\n  urlUpdateStrategy: 'deferred'|'eager' = 'deferred';\n\n  /**\n   * Enables a bug fix that corrects relative link resolution in components with empty paths.\n   * @see `RouterModule`\n   */\n  relativeLinkResolution: 'legacy'|'corrected' = 'corrected';\n\n  /**\n   * Creates the router service.\n   */\n  // TODO: vsavkin make internal after the final is out.\n  constructor(\n      private rootComponentType: Type<any>|null, private urlSerializer: UrlSerializer,\n      private rootContexts: ChildrenOutletContexts, private location: Location, injector: Injector,\n      loader: NgModuleFactoryLoader, compiler: Compiler, public config: Routes) {\n    const onLoadStart = (r: Route) => this.triggerEvent(new RouteConfigLoadStart(r));\n    const onLoadEnd = (r: Route) => this.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.ngModule = injector.get(NgModuleRef);\n    this.console = injector.get(Console);\n    const ngZone = injector.get(NgZone);\n    this.isNgZoneEnabled = ngZone instanceof NgZone && NgZone.isInAngularZone();\n\n    this.resetConfig(config);\n    this.currentUrlTree = createEmptyUrlTree();\n    this.rawUrlTree = this.currentUrlTree;\n    this.browserUrlTree = this.currentUrlTree;\n\n    this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);\n    this.routerState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n\n    this.transitions = new BehaviorSubject<NavigationTransition>({\n      id: 0,\n      currentUrlTree: this.currentUrlTree,\n      currentRawUrl: this.currentUrlTree,\n      extractedUrl: this.urlHandlingStrategy.extract(this.currentUrlTree),\n      urlAfterRedirects: this.urlHandlingStrategy.extract(this.currentUrlTree),\n      rawUrl: this.currentUrlTree,\n      extras: {},\n      resolve: null,\n      reject: null,\n      promise: Promise.resolve(true),\n      source: 'imperative',\n      restoredState: null,\n      currentSnapshot: this.routerState.snapshot,\n      targetSnapshot: null,\n      currentRouterState: this.routerState,\n      targetRouterState: null,\n      guards: {canActivateChecks: [], canDeactivateChecks: []},\n      guardsResult: null,\n    });\n    this.navigations = this.setupNavigations(this.transitions);\n\n    this.processNavigations();\n  }\n\n  private setupNavigations(transitions: Observable<NavigationTransition>):\n      Observable<NavigationTransition> {\n    const eventsSubject = (this.events as Subject<Event>);\n    return transitions.pipe(\n               filter(t => t.id !== 0),\n\n               // Extract URL\n               map(t =>\n                       ({...t, extractedUrl: this.urlHandlingStrategy.extract(t.rawUrl)} as\n                        NavigationTransition)),\n\n               // Using switchMap so we cancel executing navigations when a new one comes in\n               switchMap(t => {\n                 let completed = false;\n                 let errored = false;\n                 return of(t).pipe(\n                     // Store the Navigation object\n                     tap(t => {\n                       this.currentNavigation = {\n                         id: t.id,\n                         initialUrl: t.currentRawUrl,\n                         extractedUrl: t.extractedUrl,\n                         trigger: t.source,\n                         extras: t.extras,\n                         previousNavigation: this.lastSuccessfulNavigation ?\n                             {...this.lastSuccessfulNavigation, previousNavigation: null} :\n                             null\n                       };\n                     }),\n                     switchMap(t => {\n                       const urlTransition = !this.navigated ||\n                           t.extractedUrl.toString() !== this.browserUrlTree.toString();\n                       const processCurrentUrl =\n                           (this.onSameUrlNavigation === 'reload' ? true : urlTransition) &&\n                           this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl);\n\n                       if (processCurrentUrl) {\n                         return of(t).pipe(\n                             // Fire NavigationStart event\n                             switchMap(t => {\n                               const transition = this.transitions.getValue();\n                               eventsSubject.next(new NavigationStart(\n                                   t.id, this.serializeUrl(t.extractedUrl), t.source,\n                                   t.restoredState));\n                               if (transition !== this.transitions.getValue()) {\n                                 return EMPTY;\n                               }\n\n                               // This delay is required to match old behavior that forced\n                               // navigation to always be async\n                               return Promise.resolve(t);\n                             }),\n\n                             // ApplyRedirects\n                             applyRedirects(\n                                 this.ngModule.injector, this.configLoader, this.urlSerializer,\n                                 this.config),\n\n                             // Update the currentNavigation\n                             tap(t => {\n                               this.currentNavigation = {\n                                 ...this.currentNavigation!,\n                                 finalUrl: t.urlAfterRedirects\n                               };\n                             }),\n\n                             // Recognize\n                             recognize(\n                                 this.rootComponentType, this.config,\n                                 (url) => this.serializeUrl(url), this.paramsInheritanceStrategy,\n                                 this.relativeLinkResolution),\n\n                             // Update URL if in `eager` update mode\n                             tap(t => {\n                               if (this.urlUpdateStrategy === 'eager') {\n                                 if (!t.extras.skipLocationChange) {\n                                   this.setBrowserUrl(\n                                       t.urlAfterRedirects, !!t.extras.replaceUrl, t.id,\n                                       t.extras.state);\n                                 }\n                                 this.browserUrlTree = t.urlAfterRedirects;\n                               }\n\n                               // Fire RoutesRecognized\n                               const routesRecognized = new RoutesRecognized(\n                                   t.id, this.serializeUrl(t.extractedUrl),\n                                   this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot!);\n                               eventsSubject.next(routesRecognized);\n                             }));\n                       } else {\n                         const processPreviousUrl = urlTransition && this.rawUrlTree &&\n                             this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree);\n                         /* When the current URL shouldn't be processed, but the previous one was,\n                          * we handle this \"error condition\" by navigating to the previously\n                          * successful URL, but leaving the URL intact.*/\n                         if (processPreviousUrl) {\n                           const {id, extractedUrl, source, restoredState, extras} = t;\n                           const navStart = new NavigationStart(\n                               id, this.serializeUrl(extractedUrl), source, restoredState);\n                           eventsSubject.next(navStart);\n                           const targetSnapshot =\n                               createEmptyState(extractedUrl, this.rootComponentType).snapshot;\n\n                           return of({\n                             ...t,\n                             targetSnapshot,\n                             urlAfterRedirects: extractedUrl,\n                             extras: {...extras, skipLocationChange: false, replaceUrl: false},\n                           });\n                         } else {\n                           /* When neither the current or previous URL can be processed, do nothing\n                            * other than update router's internal reference to the current \"settled\"\n                            * URL. This way the next navigation will be coming from the current URL\n                            * in the browser.\n                            */\n                           this.rawUrlTree = t.rawUrl;\n                           this.browserUrlTree = t.urlAfterRedirects;\n                           t.resolve(null);\n                           return EMPTY;\n                         }\n                       }\n                     }),\n\n                     // Before Preactivation\n                     switchTap(t => {\n                       const {\n                         targetSnapshot,\n                         id: navigationId,\n                         extractedUrl: appliedUrlTree,\n                         rawUrl: rawUrlTree,\n                         extras: {skipLocationChange, replaceUrl}\n                       } = t;\n                       return this.hooks.beforePreactivation(targetSnapshot!, {\n                         navigationId,\n                         appliedUrlTree,\n                         rawUrlTree,\n                         skipLocationChange: !!skipLocationChange,\n                         replaceUrl: !!replaceUrl,\n                       });\n                     }),\n\n                     // --- GUARDS ---\n                     tap(t => {\n                       const guardsStart = new GuardsCheckStart(\n                           t.id, this.serializeUrl(t.extractedUrl),\n                           this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot!);\n                       this.triggerEvent(guardsStart);\n                     }),\n\n                     map(t => ({\n                           ...t,\n                           guards: getAllRouteGuards(\n                               t.targetSnapshot!, t.currentSnapshot, this.rootContexts)\n                         })),\n\n                     checkGuards(this.ngModule.injector, (evt: Event) => this.triggerEvent(evt)),\n                     tap(t => {\n                       if (isUrlTree(t.guardsResult)) {\n                         const error: Error&{url?: UrlTree} = navigationCancelingError(\n                             `Redirecting to \"${this.serializeUrl(t.guardsResult)}\"`);\n                         error.url = t.guardsResult;\n                         throw error;\n                       }\n\n                       const guardsEnd = new GuardsCheckEnd(\n                           t.id, this.serializeUrl(t.extractedUrl),\n                           this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot!,\n                           !!t.guardsResult);\n                       this.triggerEvent(guardsEnd);\n                     }),\n\n                     filter(t => {\n                       if (!t.guardsResult) {\n                         this.resetUrlToCurrentUrlTree();\n                         const navCancel =\n                             new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), '');\n                         eventsSubject.next(navCancel);\n                         t.resolve(false);\n                         return false;\n                       }\n                       return true;\n                     }),\n\n                     // --- RESOLVE ---\n                     switchTap(t => {\n                       if (t.guards.canActivateChecks.length) {\n                         return of(t).pipe(\n                             tap(t => {\n                               const resolveStart = new ResolveStart(\n                                   t.id, this.serializeUrl(t.extractedUrl),\n                                   this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot!);\n                               this.triggerEvent(resolveStart);\n                             }),\n                             switchMap(t => {\n                               let dataResolved = false;\n                               return of(t).pipe(\n                                   resolveData(\n                                       this.paramsInheritanceStrategy, this.ngModule.injector),\n                                   tap({\n                                     next: () => dataResolved = true,\n                                     complete: () => {\n                                       if (!dataResolved) {\n                                         const navCancel = new NavigationCancel(\n                                             t.id, this.serializeUrl(t.extractedUrl),\n                                             `At least one route resolver didn't emit any value.`);\n                                         eventsSubject.next(navCancel);\n                                         t.resolve(false);\n                                       }\n                                     }\n                                   }),\n                               );\n                             }),\n                             tap(t => {\n                               const resolveEnd = new ResolveEnd(\n                                   t.id, this.serializeUrl(t.extractedUrl),\n                                   this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot!);\n                               this.triggerEvent(resolveEnd);\n                             }));\n                       }\n                       return undefined;\n                     }),\n\n                     // --- AFTER PREACTIVATION ---\n                     switchTap((t: NavigationTransition) => {\n                       const {\n                         targetSnapshot,\n                         id: navigationId,\n                         extractedUrl: appliedUrlTree,\n                         rawUrl: rawUrlTree,\n                         extras: {skipLocationChange, replaceUrl}\n                       } = t;\n                       return this.hooks.afterPreactivation(targetSnapshot!, {\n                         navigationId,\n                         appliedUrlTree,\n                         rawUrlTree,\n                         skipLocationChange: !!skipLocationChange,\n                         replaceUrl: !!replaceUrl,\n                       });\n                     }),\n\n                     map((t: NavigationTransition) => {\n                       const targetRouterState = createRouterState(\n                           this.routeReuseStrategy, t.targetSnapshot!, t.currentRouterState);\n                       return ({...t, targetRouterState});\n                     }),\n\n                     /* Once here, we are about to activate syncronously. The assumption is this\n                        will succeed, and user code may read from the Router service. Therefore\n                        before activation, we need to update router properties storing the current\n                        URL and the RouterState, as well as updated the browser URL. All this should\n                        happen *before* activating. */\n                     tap((t: NavigationTransition) => {\n                       this.currentUrlTree = t.urlAfterRedirects;\n                       this.rawUrlTree =\n                           this.urlHandlingStrategy.merge(this.currentUrlTree, t.rawUrl);\n\n                       (this as {routerState: RouterState}).routerState = t.targetRouterState!;\n\n                       if (this.urlUpdateStrategy === 'deferred') {\n                         if (!t.extras.skipLocationChange) {\n                           this.setBrowserUrl(\n                               this.rawUrlTree, !!t.extras.replaceUrl, t.id, t.extras.state);\n                         }\n                         this.browserUrlTree = t.urlAfterRedirects;\n                       }\n                     }),\n\n                     activateRoutes(\n                         this.rootContexts, this.routeReuseStrategy,\n                         (evt: Event) => this.triggerEvent(evt)),\n\n                     tap({\n                       next() {\n                         completed = true;\n                       },\n                       complete() {\n                         completed = true;\n                       }\n                     }),\n                     finalize(() => {\n                       /* When the navigation stream finishes either through error or success, we\n                        * set the `completed` or `errored` flag. However, there are some situations\n                        * where we could get here without either of those being set. For instance, a\n                        * redirect during NavigationStart. Therefore, this is a catch-all to make\n                        * sure the NavigationCancel\n                        * event is fired when a navigation gets cancelled but not caught by other\n                        * means. */\n                       if (!completed && !errored) {\n                         // Must reset to current URL tree here to ensure history.state is set. On a\n                         // fresh page load, if a new navigation comes in before a successful\n                         // navigation completes, there will be nothing in\n                         // history.state.navigationId. This can cause sync problems with AngularJS\n                         // sync code which looks for a value here in order to determine whether or\n                         // not to handle a given popstate event or to leave it to the Angular\n                         // router.\n                         this.resetUrlToCurrentUrlTree();\n                         const navCancel = new NavigationCancel(\n                             t.id, this.serializeUrl(t.extractedUrl),\n                             `Navigation ID ${t.id} is not equal to the current navigation id ${\n                                 this.navigationId}`);\n                         eventsSubject.next(navCancel);\n                         t.resolve(false);\n                       }\n                       // currentNavigation should always be reset to null here. If navigation was\n                       // successful, lastSuccessfulTransition will have already been set. Therefore\n                       // we can safely set currentNavigation to null here.\n                       this.currentNavigation = null;\n                     }),\n                     catchError((e) => {\n                       errored = true;\n                       /* This error type is issued during Redirect, and is handled as a\n                        * cancellation rather than an error. */\n                       if (isNavigationCancelingError(e)) {\n                         const redirecting = isUrlTree(e.url);\n                         if (!redirecting) {\n                           // Set property only if we're not redirecting. If we landed on a page and\n                           // redirect to `/` route, the new navigation is going to see the `/`\n                           // isn't a change from the default currentUrlTree and won't navigate.\n                           // This is only applicable with initial navigation, so setting\n                           // `navigated` only when not redirecting resolves this scenario.\n                           this.navigated = true;\n                           this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);\n                         }\n                         const navCancel = new NavigationCancel(\n                             t.id, this.serializeUrl(t.extractedUrl), e.message);\n                         eventsSubject.next(navCancel);\n\n                         // When redirecting, we need to delay resolving the navigation\n                         // promise and push it to the redirect navigation\n                         if (!redirecting) {\n                           t.resolve(false);\n                         } else {\n                           // setTimeout is required so this navigation finishes with\n                           // the return EMPTY below. If it isn't allowed to finish\n                           // processing, there can be multiple navigations to the same\n                           // URL.\n                           setTimeout(() => {\n                             const mergedTree =\n                                 this.urlHandlingStrategy.merge(e.url, this.rawUrlTree);\n                             const extras = {\n                               skipLocationChange: t.extras.skipLocationChange,\n                               replaceUrl: this.urlUpdateStrategy === 'eager'\n                             };\n\n                             this.scheduleNavigation(\n                                 mergedTree, 'imperative', null, extras,\n                                 {resolve: t.resolve, reject: t.reject, promise: t.promise});\n                           }, 0);\n                         }\n\n                         /* All other errors should reset to the router's internal URL reference to\n                          * the pre-error state. */\n                       } else {\n                         this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);\n                         const navError =\n                             new NavigationError(t.id, this.serializeUrl(t.extractedUrl), e);\n                         eventsSubject.next(navError);\n                         try {\n                           t.resolve(this.errorHandler(e));\n                         } catch (ee) {\n                           t.reject(ee);\n                         }\n                       }\n                       return EMPTY;\n                     }));\n                 // TODO(jasonaden): remove cast once g3 is on updated TypeScript\n               })) as any as Observable<NavigationTransition>;\n  }\n\n  /**\n   * @internal\n   * TODO: this should be removed once the constructor of the router made internal\n   */\n  resetRootComponentType(rootComponentType: Type<any>): void {\n    this.rootComponentType = rootComponentType;\n    // TODO: vsavkin router 4.0 should make the root component set to null\n    // this will simplify the lifecycle of the router.\n    this.routerState.root.component = this.rootComponentType;\n  }\n\n  private getTransition(): NavigationTransition {\n    const transition = this.transitions.value;\n    // This value needs to be set. Other values such as extractedUrl are set on initial navigation\n    // but the urlAfterRedirects may not get set if we aren't processing the new URL *and* not\n    // processing the previous URL.\n    transition.urlAfterRedirects = this.browserUrlTree;\n    return transition;\n  }\n\n  private setTransition(t: Partial<NavigationTransition>): void {\n    this.transitions.next({...this.getTransition(), ...t});\n  }\n\n  /**\n   * Sets up the location change listener and performs the initial navigation.\n   */\n  initialNavigation(): void {\n    this.setUpLocationChangeListener();\n    if (this.navigationId === 0) {\n      this.navigateByUrl(this.location.path(true), {replaceUrl: true});\n    }\n  }\n\n  /**\n   * Sets up the location change listener. This listener detects navigations triggered from outside\n   * the Router (the browser back/forward buttons, for example) and schedules a corresponding Router\n   * navigation so that the correct events, guards, etc. are triggered.\n   */\n  setUpLocationChangeListener(): void {\n    // Don't need to use Zone.wrap any more, because zone.js\n    // already patch onPopState, so location change callback will\n    // run into ngZone\n    if (!this.locationSubscription) {\n      this.locationSubscription = this.location.subscribe(event => {\n        const currentChange = this.extractLocationChangeInfoFromEvent(event);\n        if (this.shouldScheduleNavigation(this.lastLocationChangeInfo, currentChange)) {\n          // The `setTimeout` was added in #12160 and is likely to support Angular/AngularJS\n          // hybrid apps.\n          setTimeout(() => {\n            const {source, state, urlTree} = currentChange;\n            const extras: NavigationExtras = {replaceUrl: true};\n            if (state) {\n              const stateCopy = {...state} as Partial<RestoredState>;\n              delete stateCopy.navigationId;\n              if (Object.keys(stateCopy).length !== 0) {\n                extras.state = stateCopy;\n              }\n            }\n            this.scheduleNavigation(urlTree, source, state, extras);\n          }, 0);\n        }\n        this.lastLocationChangeInfo = currentChange;\n      });\n    }\n  }\n\n  /** Extracts router-related information from a `PopStateEvent`. */\n  private extractLocationChangeInfoFromEvent(change: PopStateEvent): LocationChangeInfo {\n    return {\n      source: change['type'] === 'popstate' ? 'popstate' : 'hashchange',\n      urlTree: this.parseUrl(change['url']!),\n      // Navigations coming from Angular router have a navigationId state\n      // property. When this exists, restore the state.\n      state: change.state?.navigationId ? change.state : null,\n      transitionId: this.getTransition().id\n    } as const;\n  }\n\n  /**\n   * Determines whether two events triggered by the Location subscription are due to the same\n   * navigation. The location subscription can fire two events (popstate and hashchange) for a\n   * single navigation. The second one should be ignored, that is, we should not schedule another\n   * navigation in the Router.\n   */\n  private shouldScheduleNavigation(previous: LocationChangeInfo|null, current: LocationChangeInfo):\n      boolean {\n    if (!previous) return true;\n\n    const sameDestination = current.urlTree.toString() === previous.urlTree.toString();\n    const eventsOccurredAtSameTime = current.transitionId === previous.transitionId;\n    if (!eventsOccurredAtSameTime || !sameDestination) {\n      return true;\n    }\n\n    if ((current.source === 'hashchange' && previous.source === 'popstate') ||\n        (current.source === 'popstate' && previous.source === 'hashchange')) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /** The current URL. */\n  get url(): string {\n    return this.serializeUrl(this.currentUrlTree);\n  }\n\n  /** The current Navigation object if one exists */\n  getCurrentNavigation(): Navigation|null {\n    return this.currentNavigation;\n  }\n\n  /** @internal */\n  triggerEvent(event: Event): void {\n    (this.events as Subject<Event>).next(event);\n  }\n\n  /**\n   * Resets the route configuration used for navigation and generating links.\n   *\n   * @param config The route array for the new configuration.\n   *\n   * @usageNotes\n   *\n   * ```\n   * router.resetConfig([\n   *  { path: 'team/:id', component: TeamCmp, children: [\n   *    { path: 'simple', component: SimpleCmp },\n   *    { path: 'user/:name', component: UserCmp }\n   *  ]}\n   * ]);\n   * ```\n   */\n  resetConfig(config: Routes): void {\n    validateConfig(config);\n    this.config = config.map(standardizeConfig);\n    this.navigated = false;\n    this.lastSuccessfulId = -1;\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    this.dispose();\n  }\n\n  /** Disposes of the router. */\n  dispose(): void {\n    this.transitions.complete();\n    if (this.locationSubscription) {\n      this.locationSubscription.unsubscribe();\n      this.locationSubscription = undefined;\n    }\n    this.disposed = true;\n  }\n\n  /**\n   * Appends URL segments to the current URL tree to create a new URL tree.\n   *\n   * @param commands An array of URL fragments with which to construct the new URL tree.\n   * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n   * segments, followed by the parameters for each segment.\n   * The fragments are applied to the current URL tree or the one provided  in the `relativeTo`\n   * property of the options object, if supplied.\n   * @param navigationExtras Options that control the navigation strategy.\n   * @returns The new URL tree.\n   *\n   * @usageNotes\n   *\n   * ```\n   * // create /team/33/user/11\n   * router.createUrlTree(['/team', 33, 'user', 11]);\n   *\n   * // create /team/33;expand=true/user/11\n   * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n   *\n   * // you can collapse static segments like this (this works only with the first passed-in value):\n   * router.createUrlTree(['/team/33/user', userId]);\n   *\n   * // If the first segment can contain slashes, and you do not want the router to split it,\n   * // you can do the following:\n   * router.createUrlTree([{segmentPath: '/one/two'}]);\n   *\n   * // create /team/33/(user/11//right:chat)\n   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n   *\n   * // remove the right secondary node\n   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n   *\n   * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n   *\n   * // navigate to /team/33/user/11/details\n   * router.createUrlTree(['details'], {relativeTo: route});\n   *\n   * // navigate to /team/33/user/22\n   * router.createUrlTree(['../22'], {relativeTo: route});\n   *\n   * // navigate to /team/44/user/22\n   * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n   *\n   * Note that a value of `null` or `undefined` for `relativeTo` indicates that the\n   * tree should be created relative to the root.\n   * ```\n   */\n  createUrlTree(commands: any[], navigationExtras: UrlCreationOptions = {}): UrlTree {\n    const {relativeTo, queryParams, fragment, queryParamsHandling, preserveFragment} =\n        navigationExtras;\n    const a = relativeTo || this.routerState.root;\n    const f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n    let q: Params|null = null;\n    switch (queryParamsHandling) {\n      case 'merge':\n        q = {...this.currentUrlTree.queryParams, ...queryParams};\n        break;\n      case 'preserve':\n        q = this.currentUrlTree.queryParams;\n        break;\n      default:\n        q = queryParams || null;\n    }\n    if (q !== null) {\n      q = this.removeEmptyProps(q);\n    }\n    return createUrlTree(a, this.currentUrlTree, commands, q!, f!);\n  }\n\n  /**\n   * Navigates to a view using an absolute route path.\n   *\n   * @param url An absolute path for a defined route. The function does not apply any delta to the\n   *     current URL.\n   * @param extras An object containing properties that modify the navigation strategy.\n   *\n   * @returns A Promise that resolves to 'true' when navigation succeeds,\n   * to 'false' when navigation fails, or is rejected on error.\n   *\n   * @usageNotes\n   *\n   * The following calls request navigation to an absolute path.\n   *\n   * ```\n   * router.navigateByUrl(\"/team/33/user/11\");\n   *\n   * // Navigate without updating the URL\n   * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n   * ```\n   *\n   * @see [Routing and Navigation guide](guide/router)\n   *\n   */\n  navigateByUrl(url: string|UrlTree, extras: NavigationBehaviorOptions = {\n    skipLocationChange: false\n  }): Promise<boolean> {\n    if (typeof ngDevMode === 'undefined' ||\n        ngDevMode && this.isNgZoneEnabled && !NgZone.isInAngularZone()) {\n      this.console.warn(\n          `Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?`);\n    }\n\n    const urlTree = isUrlTree(url) ? url : this.parseUrl(url);\n    const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n\n    return this.scheduleNavigation(mergedTree, 'imperative', null, extras);\n  }\n\n  /**\n   * Navigate based on the provided array of commands and a starting point.\n   * If no starting route is provided, the navigation is absolute.\n   *\n   * @param commands An array of URL fragments with which to construct the target URL.\n   * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path\n   * segments, followed by the parameters for each segment.\n   * The fragments are applied to the current URL or the one provided  in the `relativeTo` property\n   * of the options object, if supplied.\n   * @param extras An options object that determines how the URL should be constructed or\n   *     interpreted.\n   *\n   * @returns A Promise that resolves to `true` when navigation succeeds, to `false` when navigation\n   *     fails,\n   * or is rejected on error.\n   *\n   * @usageNotes\n   *\n   * The following calls request navigation to a dynamic route path relative to the current URL.\n   *\n   * ```\n   * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n   *\n   * // Navigate without updating the URL, overriding the default behavior\n   * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n   * ```\n   *\n   * @see [Routing and Navigation guide](guide/router)\n   *\n   */\n  navigate(commands: any[], extras: NavigationExtras = {skipLocationChange: false}):\n      Promise<boolean> {\n    validateCommands(commands);\n    return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n  }\n\n  /** Serializes a `UrlTree` into a string */\n  serializeUrl(url: UrlTree): string {\n    return this.urlSerializer.serialize(url);\n  }\n\n  /** Parses a string into a `UrlTree` */\n  parseUrl(url: string): UrlTree {\n    let urlTree: UrlTree;\n    try {\n      urlTree = this.urlSerializer.parse(url);\n    } catch (e) {\n      urlTree = this.malformedUriErrorHandler(e, this.urlSerializer, url);\n    }\n    return urlTree;\n  }\n\n  /** Returns whether the url is activated */\n  isActive(url: string|UrlTree, exact: boolean): boolean {\n    if (isUrlTree(url)) {\n      return containsTree(this.currentUrlTree, url, exact);\n    }\n\n    const urlTree = this.parseUrl(url);\n    return containsTree(this.currentUrlTree, urlTree, exact);\n  }\n\n  private removeEmptyProps(params: Params): Params {\n    return Object.keys(params).reduce((result: Params, key: string) => {\n      const value: any = params[key];\n      if (value !== null && value !== undefined) {\n        result[key] = value;\n      }\n      return result;\n    }, {});\n  }\n\n  private processNavigations(): void {\n    this.navigations.subscribe(\n        t => {\n          this.navigated = true;\n          this.lastSuccessfulId = t.id;\n          (this.events as Subject<Event>)\n              .next(new NavigationEnd(\n                  t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(this.currentUrlTree)));\n          this.lastSuccessfulNavigation = this.currentNavigation;\n          this.currentNavigation = null;\n          t.resolve(true);\n        },\n        e => {\n          this.console.warn(`Unhandled Navigation Error: `);\n        });\n  }\n\n  private scheduleNavigation(\n      rawUrl: UrlTree, source: NavigationTrigger, restoredState: RestoredState|null,\n      extras: NavigationExtras,\n      priorPromise?: {resolve: any, reject: any, promise: Promise<boolean>}): Promise<boolean> {\n    if (this.disposed) {\n      return Promise.resolve(false);\n    }\n    // * Imperative navigations (router.navigate) might trigger additional navigations to the same\n    //   URL via a popstate event and the locationChangeListener. We should skip these duplicate\n    //   navs. Duplicates may also be triggered by attempts to sync AngularJS and Angular router\n    //   states.\n    // * Imperative navigations can be cancelled by router guards, meaning the URL won't change. If\n    //   the user follows that with a navigation using the back/forward button or manual URL change,\n    //   the destination may be the same as the previous imperative attempt. We should not skip\n    //   these navigations because it's a separate case from the one above -- it's not a duplicate\n    //   navigation.\n    const lastNavigation = this.getTransition();\n    // We don't want to skip duplicate successful navs if they're imperative because\n    // onSameUrlNavigation could be 'reload' (so the duplicate is intended).\n    const browserNavPrecededByRouterNav =\n        source !== 'imperative' && lastNavigation?.source === 'imperative';\n    const lastNavigationSucceeded = this.lastSuccessfulId === lastNavigation.id;\n    // If the last navigation succeeded or is in flight, we can use the rawUrl as the comparison.\n    // However, if it failed, we should compare to the final result (urlAfterRedirects).\n    const lastNavigationUrl = (lastNavigationSucceeded || this.currentNavigation) ?\n        lastNavigation.rawUrl :\n        lastNavigation.urlAfterRedirects;\n    const duplicateNav = lastNavigationUrl.toString() === rawUrl.toString();\n    if (browserNavPrecededByRouterNav && duplicateNav) {\n      return Promise.resolve(true);  // return value is not used\n    }\n\n    let resolve: any;\n    let reject: any;\n    let promise: Promise<boolean>;\n    if (priorPromise) {\n      resolve = priorPromise.resolve;\n      reject = priorPromise.reject;\n      promise = priorPromise.promise;\n\n    } else {\n      promise = new Promise<boolean>((res, rej) => {\n        resolve = res;\n        reject = rej;\n      });\n    }\n\n    const id = ++this.navigationId;\n    this.setTransition({\n      id,\n      source,\n      restoredState,\n      currentUrlTree: this.currentUrlTree,\n      currentRawUrl: this.rawUrlTree,\n      rawUrl,\n      extras,\n      resolve,\n      reject,\n      promise,\n      currentSnapshot: this.routerState.snapshot,\n      currentRouterState: this.routerState\n    });\n\n    // Make sure that the error is propagated even though `processNavigations` catch\n    // handler does not rethrow\n    return promise.catch((e: any) => {\n      return Promise.reject(e);\n    });\n  }\n\n  private setBrowserUrl(\n      url: UrlTree, replaceUrl: boolean, id: number, state?: {[key: string]: any}) {\n    const path = this.urlSerializer.serialize(url);\n    state = state || {};\n    if (this.location.isCurrentPathEqualTo(path) || replaceUrl) {\n      // TODO(jasonaden): Remove first `navigationId` and rely on `ng` namespace.\n      this.location.replaceState(path, '', {...state, navigationId: id});\n    } else {\n      this.location.go(path, '', {...state, navigationId: id});\n    }\n  }\n\n  private resetStateAndUrl(storedState: RouterState, storedUrl: UrlTree, rawUrl: UrlTree): void {\n    (this as {routerState: RouterState}).routerState = storedState;\n    this.currentUrlTree = storedUrl;\n    this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n    this.resetUrlToCurrentUrlTree();\n  }\n\n  private resetUrlToCurrentUrlTree(): void {\n    this.location.replaceState(\n        this.urlSerializer.serialize(this.rawUrlTree), '', {navigationId: this.lastSuccessfulId});\n  }\n}\n\nfunction validateCommands(commands: string[]): void {\n  for (let i = 0; i < commands.length; i++) {\n    const cmd = commands[i];\n    if (cmd == null) {\n      throw new Error(`The requested path contains ${cmd} segment at index ${i}`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationStrategy} from '@angular/common';\nimport {Attribute, Directive, ElementRef, HostBinding, HostListener, Input, OnChanges, OnDestroy, Renderer2, SimpleChanges} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\n\nimport {QueryParamsHandling} from '../config';\nimport {Event, NavigationEnd} from '../events';\nimport {Router} from '../router';\nimport {ActivatedRoute} from '../router_state';\nimport {Params} from '../shared';\nimport {UrlTree} from '../url_tree';\n\n\n/**\n * @description\n *\n * When applied to an element in a template, makes that element a link\n * that initiates navigation to a route. Navigation opens one or more routed components\n * in one or more `<router-outlet>` locations on the page.\n *\n * Given a route configuration `[{ path: 'user/:name', component: UserCmp }]`,\n * the following creates a static link to the route:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n *\n * You can use dynamic values to generate the link.\n * For a dynamic link, pass an array of path segments,\n * followed by the params for each segment.\n * For example, `['/team', teamId, 'user', userName, {details: true}]`\n * generates a link to `/team/11/user/bob;details=true`.\n *\n * Multiple static segments can be merged into one term and combined with dynamic segements.\n * For example, `['/team/11/user', userName, {details: true}]`\n *\n * The input that you provide to the link is treated as a delta to the current URL.\n * For instance, suppose the current URL is `/user/(box//aux:team)`.\n * The link `<a [routerLink]=\"['/user/jim']\">Jim</a>` creates the URL\n * `/user/(jim//aux:team)`.\n * See {@link Router#createUrlTree createUrlTree} for more information.\n *\n * @usageNotes\n *\n * You can use absolute or relative paths in a link, set query parameters,\n * control how parameters are handled, and keep a history of navigation states.\n *\n * ### Relative link paths\n *\n * The first segment name can be prepended with `/`, `./`, or `../`.\n * * If the first segment begins with `/`, the router looks up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router\n *   looks in the children of the current activated route.\n * * If the first segment begins with `../`, the router goes up one level in the route tree.\n *\n * ### Setting and handling query params and fragments\n *\n * The following link adds a query parameter and a fragment to the generated URL:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * By default, the directive constructs the new URL using the given query parameters.\n * The example generates the link: `/user/bob?debug=true#education`.\n *\n * You can instruct the directive to handle query parameters differently\n * by specifying the `queryParamsHandling` option in the link.\n * Allowed values are:\n *\n *  - `'merge'`: Merge the given `queryParams` into the current query params.\n *  - `'preserve'`: Preserve the current query params.\n *\n * For example:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n *\n * See {@link UrlCreationOptions.queryParamsHandling UrlCreationOptions#queryParamsHandling}.\n *\n * ### Preserving navigation history\n *\n * You can provide a `state` value to be persisted to the browser's\n * [`History.state` property](https://developer.mozilla.org/en-US/docs/Web/API/History#Properties).\n * For example:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [state]=\"{tracingId: 123}\">\n *   link to user component\n * </a>\n * ```\n *\n * Use {@link Router.getCurrentNavigation() Router#getCurrentNavigation} to retrieve a saved\n * navigation-state value. For example, to capture the `tracingId` during the `NavigationStart`\n * event:\n *\n * ```\n * // Get NavigationStart events\n * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {\n *   const navigation = router.getCurrentNavigation();\n *   tracingService.trace({id: navigation.extras.state.tracingId});\n * });\n * ```\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\n@Directive({selector: ':not(a):not(area)[routerLink]'})\nexport class RouterLink implements OnChanges {\n  /**\n   * Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#queryParams UrlCreationOptions#queryParams}\n   * @see {@link Router#createUrlTree Router#createUrlTree}\n   */\n  @Input() queryParams?: Params|null;\n  /**\n   * Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#fragment UrlCreationOptions#fragment}\n   * @see {@link Router#createUrlTree Router#createUrlTree}\n   */\n  @Input() fragment?: string;\n  /**\n   * Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#queryParamsHandling UrlCreationOptions#queryParamsHandling}\n   * @see {@link Router#createUrlTree Router#createUrlTree}\n   */\n  @Input() queryParamsHandling?: QueryParamsHandling|null;\n  /**\n   * Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#preserveFragment UrlCreationOptions#preserveFragment}\n   * @see {@link Router#createUrlTree Router#createUrlTree}\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input() preserveFragment!: boolean;\n  /**\n   * Passed to {@link Router#navigateByUrl Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#skipLocationChange NavigationBehaviorOptions#skipLocationChange}\n   * @see {@link Router#navigateByUrl Router#navigateByUrl}\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input() skipLocationChange!: boolean;\n  /**\n   * Passed to {@link Router#navigateByUrl Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#replaceUrl NavigationBehaviorOptions#replaceUrl}\n   * @see {@link Router#navigateByUrl Router#navigateByUrl}\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input() replaceUrl!: boolean;\n  /**\n   * Passed to {@link Router#navigateByUrl Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#state NavigationBehaviorOptions#state}\n   * @see {@link Router#navigateByUrl Router#navigateByUrl}\n   */\n  @Input() state?: {[k: string]: any};\n  /**\n   * Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * Specify a value here when you do not want to use the default value\n   * for `routerLink`, which is the current activated route.\n   * Note that a value of `undefined` here will use the `routerLink` default.\n   * @see {@link UrlCreationOptions#relativeTo UrlCreationOptions#relativeTo}\n   * @see {@link Router#createUrlTree Router#createUrlTree}\n   */\n  @Input() relativeTo?: ActivatedRoute|null;\n\n  private commands: any[] = [];\n  private preserve!: boolean;\n\n  /** @internal */\n  onChanges = new Subject<RouterLink>();\n\n  constructor(\n      private router: Router, private route: ActivatedRoute,\n      @Attribute('tabindex') tabIndex: string, renderer: Renderer2, el: ElementRef) {\n    if (tabIndex == null) {\n      renderer.setAttribute(el.nativeElement, 'tabindex', '0');\n    }\n  }\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges) {\n    // This is subscribed to by `RouterLinkActive` so that it knows to update when there are changes\n    // to the RouterLinks it's tracking.\n    this.onChanges.next(this);\n  }\n\n  /**\n   * Commands to pass to {@link Router#createUrlTree Router#createUrlTree}.\n   *   - **array**: commands to pass to {@link Router#createUrlTree Router#createUrlTree}.\n   *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`\n   *   - **null|undefined**: shorthand for an empty array of commands, i.e. `[]`\n   * @see {@link Router#createUrlTree Router#createUrlTree}\n   */\n  @Input()\n  set routerLink(commands: any[]|string|null|undefined) {\n    if (commands != null) {\n      this.commands = Array.isArray(commands) ? commands : [commands];\n    } else {\n      this.commands = [];\n    }\n  }\n\n  /** @nodoc */\n  @HostListener('click')\n  onClick(): boolean {\n    const extras = {\n      skipLocationChange: attrBoolValue(this.skipLocationChange),\n      replaceUrl: attrBoolValue(this.replaceUrl),\n      state: this.state,\n    };\n    this.router.navigateByUrl(this.urlTree, extras);\n    return true;\n  }\n\n  get urlTree(): UrlTree {\n    return this.router.createUrlTree(this.commands, {\n      // If the `relativeTo` input is not defined, we want to use `this.route` by default.\n      // Otherwise, we should use the value provided by the user in the input.\n      relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: attrBoolValue(this.preserveFragment),\n    });\n  }\n}\n\n/**\n * @description\n *\n * Lets you link to specific routes in your app.\n *\n * See `RouterLink` for more information.\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\n@Directive({selector: 'a[routerLink],area[routerLink]'})\nexport class RouterLinkWithHref implements OnChanges, OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  @HostBinding('attr.target') @Input() target!: string;\n  /**\n   * Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#queryParams UrlCreationOptions#queryParams}\n   * @see {@link Router#createUrlTree Router#createUrlTree}\n   */\n  @Input() queryParams?: Params|null;\n  /**\n   * Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#fragment UrlCreationOptions#fragment}\n   * @see {@link Router#createUrlTree Router#createUrlTree}\n   */\n  @Input() fragment?: string;\n  /**\n   * Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#queryParamsHandling UrlCreationOptions#queryParamsHandling}\n   * @see {@link Router#createUrlTree Router#createUrlTree}\n   */\n  @Input() queryParamsHandling?: QueryParamsHandling|null;\n  /**\n   * Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * @see {@link UrlCreationOptions#preserveFragment UrlCreationOptions#preserveFragment}\n   * @see {@link Router#createUrlTree Router#createUrlTree}\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input() preserveFragment!: boolean;\n  /**\n   * Passed to {@link Router#navigateByUrl Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#skipLocationChange NavigationBehaviorOptions#skipLocationChange}\n   * @see {@link Router#navigateByUrl Router#navigateByUrl}\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input() skipLocationChange!: boolean;\n  /**\n   * Passed to {@link Router#navigateByUrl Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#replaceUrl NavigationBehaviorOptions#replaceUrl}\n   * @see {@link Router#navigateByUrl Router#navigateByUrl}\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input() replaceUrl!: boolean;\n  /**\n   * Passed to {@link Router#navigateByUrl Router#navigateByUrl} as part of the\n   * `NavigationBehaviorOptions`.\n   * @see {@link NavigationBehaviorOptions#state NavigationBehaviorOptions#state}\n   * @see {@link Router#navigateByUrl Router#navigateByUrl}\n   */\n  @Input() state?: {[k: string]: any};\n  /**\n   * Passed to {@link Router#createUrlTree Router#createUrlTree} as part of the\n   * `UrlCreationOptions`.\n   * Specify a value here when you do not want to use the default value\n   * for `routerLink`, which is the current activated route.\n   * Note that a value of `undefined` here will use the `routerLink` default.\n   * @see {@link UrlCreationOptions#relativeTo UrlCreationOptions#relativeTo}\n   * @see {@link Router#createUrlTree Router#createUrlTree}\n   */\n  @Input() relativeTo?: ActivatedRoute|null;\n\n  private commands: any[] = [];\n  private subscription: Subscription;\n  // TODO(issue/24571): remove '!'.\n  private preserve!: boolean;\n\n  // the url displayed on the anchor element.\n  // TODO(issue/24571): remove '!'.\n  @HostBinding() href!: string;\n\n  /** @internal */\n  onChanges = new Subject<RouterLinkWithHref>();\n\n  constructor(\n      private router: Router, private route: ActivatedRoute,\n      private locationStrategy: LocationStrategy) {\n    this.subscription = router.events.subscribe((s: Event) => {\n      if (s instanceof NavigationEnd) {\n        this.updateTargetUrlAndHref();\n      }\n    });\n  }\n\n  /**\n   * Commands to pass to {@link Router#createUrlTree Router#createUrlTree}.\n   *   - **array**: commands to pass to {@link Router#createUrlTree Router#createUrlTree}.\n   *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`\n   *   - **null|undefined**: shorthand for an empty array of commands, i.e. `[]`\n   * @see {@link Router#createUrlTree Router#createUrlTree}\n   */\n  @Input()\n  set routerLink(commands: any[]|string|null|undefined) {\n    if (commands != null) {\n      this.commands = Array.isArray(commands) ? commands : [commands];\n    } else {\n      this.commands = [];\n    }\n  }\n\n  /** @nodoc */\n  ngOnChanges(changes: SimpleChanges): any {\n    this.updateTargetUrlAndHref();\n    this.onChanges.next(this);\n  }\n  /** @nodoc */\n  ngOnDestroy(): any {\n    this.subscription.unsubscribe();\n  }\n\n  /** @nodoc */\n  @HostListener(\n      'click',\n      ['$event.button', '$event.ctrlKey', '$event.shiftKey', '$event.altKey', '$event.metaKey'])\n  onClick(button: number, ctrlKey: boolean, shiftKey: boolean, altKey: boolean, metaKey: boolean):\n      boolean {\n    if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\n      return true;\n    }\n\n    if (typeof this.target === 'string' && this.target != '_self') {\n      return true;\n    }\n\n    const extras = {\n      skipLocationChange: attrBoolValue(this.skipLocationChange),\n      replaceUrl: attrBoolValue(this.replaceUrl),\n      state: this.state\n    };\n    this.router.navigateByUrl(this.urlTree, extras);\n    return false;\n  }\n\n  private updateTargetUrlAndHref(): void {\n    this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\n  }\n\n  get urlTree(): UrlTree {\n    return this.router.createUrlTree(this.commands, {\n      // If the `relativeTo` input is not defined, we want to use `this.route` by default.\n      // Otherwise, we should use the value provided by the user in the input.\n      relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: attrBoolValue(this.preserveFragment),\n    });\n  }\n}\n\nfunction attrBoolValue(s: any): boolean {\n  return s === '' || !!s;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\nimport {MonoTypeOperatorFunction} from 'rxjs';\nimport {map, switchMap} from 'rxjs/operators';\n\nimport {applyRedirects as applyRedirectsFn} from '../apply_redirects';\nimport {Routes} from '../config';\nimport {NavigationTransition} from '../router';\nimport {RouterConfigLoader} from '../router_config_loader';\nimport {UrlSerializer} from '../url_tree';\n\nexport function applyRedirects(\n    moduleInjector: Injector, configLoader: RouterConfigLoader, urlSerializer: UrlSerializer,\n    config: Routes): MonoTypeOperatorFunction<NavigationTransition> {\n  return switchMap(\n      t => applyRedirectsFn(moduleInjector, configLoader, urlSerializer, t.extractedUrl, config)\n               .pipe(map(urlAfterRedirects => ({...t, urlAfterRedirects}))));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {MonoTypeOperatorFunction} from 'rxjs';\nimport {map, mergeMap} from 'rxjs/operators';\n\nimport {Route} from '../config';\nimport {recognize as recognizeFn} from '../recognize';\nimport {NavigationTransition} from '../router';\nimport {UrlTree} from '../url_tree';\n\nexport function recognize(\n    rootComponentType: Type<any>|null, config: Route[], serializer: (url: UrlTree) => string,\n    paramsInheritanceStrategy: 'emptyOnly'|'always',\n    relativeLinkResolution: 'legacy'|'corrected'): MonoTypeOperatorFunction<NavigationTransition> {\n  return mergeMap(\n      t => recognizeFn(\n               rootComponentType, config, t.urlAfterRedirects, serializer(t.urlAfterRedirects),\n               paramsInheritanceStrategy, relativeLinkResolution)\n               .pipe(map(targetSnapshot => ({...t, targetSnapshot}))));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\nimport {concat, defer, from, MonoTypeOperatorFunction, Observable, of} from 'rxjs';\nimport {concatMap, first, map, mergeMap} from 'rxjs/operators';\n\nimport {ActivationStart, ChildActivationStart, Event} from '../events';\nimport {CanActivateChildFn, CanActivateFn, CanDeactivateFn} from '../interfaces';\nimport {NavigationTransition} from '../router';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from '../router_state';\nimport {UrlTree} from '../url_tree';\nimport {wrapIntoObservable} from '../utils/collection';\nimport {CanActivate, CanDeactivate, getCanActivateChild, getToken} from '../utils/preactivation';\nimport {isBoolean, isCanActivate, isCanActivateChild, isCanDeactivate, isFunction} from '../utils/type_guards';\n\nimport {prioritizedGuardValue} from './prioritized_guard_value';\n\nexport function checkGuards(moduleInjector: Injector, forwardEvent?: (evt: Event) => void):\n    MonoTypeOperatorFunction<NavigationTransition> {\n  return mergeMap(t => {\n    const {targetSnapshot, currentSnapshot, guards: {canActivateChecks, canDeactivateChecks}} = t;\n    if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {\n      return of({...t, guardsResult: true});\n    }\n\n    return runCanDeactivateChecks(\n               canDeactivateChecks, targetSnapshot!, currentSnapshot, moduleInjector)\n        .pipe(\n            mergeMap(canDeactivate => {\n              return canDeactivate && isBoolean(canDeactivate) ?\n                  runCanActivateChecks(\n                      targetSnapshot!, canActivateChecks, moduleInjector, forwardEvent) :\n                  of(canDeactivate);\n            }),\n            map(guardsResult => ({...t, guardsResult})));\n  });\n}\n\nfunction runCanDeactivateChecks(\n    checks: CanDeactivate[], futureRSS: RouterStateSnapshot, currRSS: RouterStateSnapshot,\n    moduleInjector: Injector) {\n  return from(checks).pipe(\n      mergeMap(\n          check =>\n              runCanDeactivate(check.component, check.route, currRSS, futureRSS, moduleInjector)),\n      first(result => {\n        return result !== true;\n      }, true as boolean | UrlTree));\n}\n\nfunction runCanActivateChecks(\n    futureSnapshot: RouterStateSnapshot, checks: CanActivate[], moduleInjector: Injector,\n    forwardEvent?: (evt: Event) => void) {\n  return from(checks).pipe(\n      concatMap((check: CanActivate) => {\n        return concat(\n            fireChildActivationStart(check.route.parent, forwardEvent),\n            fireActivationStart(check.route, forwardEvent),\n            runCanActivateChild(futureSnapshot, check.path, moduleInjector),\n            runCanActivate(futureSnapshot, check.route, moduleInjector));\n      }),\n      first(result => {\n        return result !== true;\n      }, true as boolean | UrlTree));\n}\n\n/**\n * This should fire off `ActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n */\nfunction fireActivationStart(\n    snapshot: ActivatedRouteSnapshot|null,\n    forwardEvent?: (evt: Event) => void): Observable<boolean> {\n  if (snapshot !== null && forwardEvent) {\n    forwardEvent(new ActivationStart(snapshot));\n  }\n  return of(true);\n}\n\n/**\n * This should fire off `ChildActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n */\nfunction fireChildActivationStart(\n    snapshot: ActivatedRouteSnapshot|null,\n    forwardEvent?: (evt: Event) => void): Observable<boolean> {\n  if (snapshot !== null && forwardEvent) {\n    forwardEvent(new ChildActivationStart(snapshot));\n  }\n  return of(true);\n}\n\nfunction runCanActivate(\n    futureRSS: RouterStateSnapshot, futureARS: ActivatedRouteSnapshot,\n    moduleInjector: Injector): Observable<boolean|UrlTree> {\n  const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;\n  if (!canActivate || canActivate.length === 0) return of(true);\n\n  const canActivateObservables = canActivate.map((c: any) => {\n    return defer(() => {\n      const guard = getToken(c, futureARS, moduleInjector);\n      let observable;\n      if (isCanActivate(guard)) {\n        observable = wrapIntoObservable(guard.canActivate(futureARS, futureRSS));\n      } else if (isFunction<CanActivateFn>(guard)) {\n        observable = wrapIntoObservable(guard(futureARS, futureRSS));\n      } else {\n        throw new Error('Invalid CanActivate guard');\n      }\n      return observable.pipe(first());\n    });\n  });\n  return of(canActivateObservables).pipe(prioritizedGuardValue());\n}\n\nfunction runCanActivateChild(\n    futureRSS: RouterStateSnapshot, path: ActivatedRouteSnapshot[],\n    moduleInjector: Injector): Observable<boolean|UrlTree> {\n  const futureARS = path[path.length - 1];\n\n  const canActivateChildGuards = path.slice(0, path.length - 1)\n                                     .reverse()\n                                     .map(p => getCanActivateChild(p))\n                                     .filter(_ => _ !== null);\n\n  const canActivateChildGuardsMapped = canActivateChildGuards.map((d: any) => {\n    return defer(() => {\n      const guardsMapped = d.guards.map((c: any) => {\n        const guard = getToken(c, d.node, moduleInjector);\n        let observable;\n        if (isCanActivateChild(guard)) {\n          observable = wrapIntoObservable(guard.canActivateChild(futureARS, futureRSS));\n        } else if (isFunction<CanActivateChildFn>(guard)) {\n          observable = wrapIntoObservable(guard(futureARS, futureRSS));\n        } else {\n          throw new Error('Invalid CanActivateChild guard');\n        }\n        return observable.pipe(first());\n      });\n      return of(guardsMapped).pipe(prioritizedGuardValue());\n    });\n  });\n  return of(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());\n}\n\nfunction runCanDeactivate(\n    component: Object|null, currARS: ActivatedRouteSnapshot, currRSS: RouterStateSnapshot,\n    futureRSS: RouterStateSnapshot, moduleInjector: Injector): Observable<boolean|UrlTree> {\n  const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;\n  if (!canDeactivate || canDeactivate.length === 0) return of(true);\n  const canDeactivateObservables = canDeactivate.map((c: any) => {\n    const guard = getToken(c, currARS, moduleInjector);\n    let observable;\n    if (isCanDeactivate(guard)) {\n      observable = wrapIntoObservable(guard.canDeactivate(component!, currARS, currRSS, futureRSS));\n    } else if (isFunction<CanDeactivateFn<any>>(guard)) {\n      observable = wrapIntoObservable(guard(component, currARS, currRSS, futureRSS));\n    } else {\n      throw new Error('Invalid CanDeactivate guard');\n    }\n    return observable.pipe(first());\n  });\n  return of(canDeactivateObservables).pipe(prioritizedGuardValue());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\nimport {EMPTY, from, MonoTypeOperatorFunction, Observable, of} from 'rxjs';\nimport {concatMap, map, mergeMap, takeLast, tap} from 'rxjs/operators';\n\nimport {ResolveData} from '../config';\nimport {NavigationTransition} from '../router';\nimport {ActivatedRouteSnapshot, inheritedParamsDataResolve, RouterStateSnapshot} from '../router_state';\nimport {wrapIntoObservable} from '../utils/collection';\nimport {getToken} from '../utils/preactivation';\n\nexport function resolveData(\n    paramsInheritanceStrategy: 'emptyOnly'|'always',\n    moduleInjector: Injector): MonoTypeOperatorFunction<NavigationTransition> {\n  return mergeMap(t => {\n    const {targetSnapshot, guards: {canActivateChecks}} = t;\n\n    if (!canActivateChecks.length) {\n      return of(t);\n    }\n    let canActivateChecksResolved = 0;\n    return from(canActivateChecks)\n        .pipe(\n            concatMap(\n                check => runResolve(\n                    check.route, targetSnapshot!, paramsInheritanceStrategy, moduleInjector)),\n            tap(() => canActivateChecksResolved++),\n            takeLast(1),\n            mergeMap(_ => canActivateChecksResolved === canActivateChecks.length ? of(t) : EMPTY),\n        );\n  });\n}\n\nfunction runResolve(\n    futureARS: ActivatedRouteSnapshot, futureRSS: RouterStateSnapshot,\n    paramsInheritanceStrategy: 'emptyOnly'|'always', moduleInjector: Injector) {\n  const resolve = futureARS._resolve;\n  return resolveNode(resolve, futureARS, futureRSS, moduleInjector)\n      .pipe(map((resolvedData: any) => {\n        futureARS._resolvedData = resolvedData;\n        futureARS.data = {\n          ...futureARS.data,\n          ...inheritedParamsDataResolve(futureARS, paramsInheritanceStrategy).resolve\n        };\n        return null;\n      }));\n}\n\nfunction resolveNode(\n    resolve: ResolveData, futureARS: ActivatedRouteSnapshot, futureRSS: RouterStateSnapshot,\n    moduleInjector: Injector): Observable<any> {\n  const keys = Object.keys(resolve);\n  if (keys.length === 0) {\n    return of({});\n  }\n  const data: {[k: string]: any} = {};\n  return from(keys).pipe(\n      mergeMap(\n          (key: string) => getResolver(resolve[key], futureARS, futureRSS, moduleInjector)\n                               .pipe(tap((value: any) => {\n                                 data[key] = value;\n                               }))),\n      takeLast(1),\n      mergeMap(() => {\n        // Ensure all resolvers returned values, otherwise don't emit any \"next\" and just complete\n        // the chain which will cancel navigation\n        if (Object.keys(data).length === keys.length) {\n          return of(data);\n        }\n        return EMPTY;\n      }),\n  );\n}\n\nfunction getResolver(\n    injectionToken: any, futureARS: ActivatedRouteSnapshot, futureRSS: RouterStateSnapshot,\n    moduleInjector: Injector): Observable<any> {\n  const resolver = getToken(injectionToken, futureARS, moduleInjector);\n  return resolver.resolve ? wrapIntoObservable(resolver.resolve(futureARS, futureRSS)) :\n                            wrapIntoObservable(resolver(futureARS, futureRSS));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute, ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, Injector, OnDestroy, OnInit, Output, ViewContainerRef} from '@angular/core';\n\nimport {Data} from '../config';\nimport {ChildrenOutletContexts} from '../router_outlet_context';\nimport {ActivatedRoute} from '../router_state';\nimport {PRIMARY_OUTLET} from '../shared';\n\n/**\n * @description\n *\n * Acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * Each outlet can have a unique name, determined by the optional `name` attribute.\n * The name cannot be set or changed dynamically. If not set, default value is \"primary\".\n *\n * ```\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n *\n * Named outlets can be the targets of secondary routes.\n * The `Route` object for a secondary route has an `outlet` property to identify the target outlet:\n *\n * `{path: <base-path>, component: <component>, outlet: <target_outlet_name>}`\n *\n * Using named outlets and secondary routes, you can target multiple outlets in\n * the same `RouterLink` directive.\n *\n * The router keeps track of separate branches in a navigation tree for each named outlet and\n * generates a representation of that tree in the URL.\n * The URL for a secondary route uses the following syntax to specify both the primary and secondary\n * routes at the same time:\n *\n * `http://base-path/primary-route-path(outlet-name:route-path)`\n *\n * A router outlet emits an activate event when a new component is instantiated,\n * and a deactivate event when a component is destroyed.\n *\n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'></router-outlet>\n * ```\n *\n * @see [Routing tutorial](guide/router-tutorial-toh#named-outlets \"Example of a named\n * outlet and secondary route configuration\").\n * @see `RouterLink`\n * @see `Route`\n * @ngModule RouterModule\n *\n * @publicApi\n */\n@Directive({selector: 'router-outlet', exportAs: 'outlet'})\nexport class RouterOutlet implements OnDestroy, OnInit {\n  private activated: ComponentRef<any>|null = null;\n  private _activatedRoute: ActivatedRoute|null = null;\n  private name: string;\n\n  @Output('activate') activateEvents = new EventEmitter<any>();\n  @Output('deactivate') deactivateEvents = new EventEmitter<any>();\n\n  constructor(\n      private parentContexts: ChildrenOutletContexts, private location: ViewContainerRef,\n      private resolver: ComponentFactoryResolver, @Attribute('name') name: string,\n      private changeDetector: ChangeDetectorRef) {\n    this.name = name || PRIMARY_OUTLET;\n    parentContexts.onChildOutletCreated(this.name, this);\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    this.parentContexts.onChildOutletDestroyed(this.name);\n  }\n\n  /** @nodoc */\n  ngOnInit(): void {\n    if (!this.activated) {\n      // If the outlet was not instantiated at the time the route got activated we need to populate\n      // the outlet when it is initialized (ie inside a NgIf)\n      const context = this.parentContexts.getContext(this.name);\n      if (context && context.route) {\n        if (context.attachRef) {\n          // `attachRef` is populated when there is an existing component to mount\n          this.attach(context.attachRef, context.route);\n        } else {\n          // otherwise the component defined in the configuration is created\n          this.activateWith(context.route, context.resolver || null);\n        }\n      }\n    }\n  }\n\n  get isActivated(): boolean {\n    return !!this.activated;\n  }\n\n  get component(): Object {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    return this.activated.instance;\n  }\n\n  get activatedRoute(): ActivatedRoute {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    return this._activatedRoute as ActivatedRoute;\n  }\n\n  get activatedRouteData(): Data {\n    if (this._activatedRoute) {\n      return this._activatedRoute.snapshot.data;\n    }\n    return {};\n  }\n\n  /**\n   * Called when the `RouteReuseStrategy` instructs to detach the subtree\n   */\n  detach(): ComponentRef<any> {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    this.location.detach();\n    const cmp = this.activated;\n    this.activated = null;\n    this._activatedRoute = null;\n    return cmp;\n  }\n\n  /**\n   * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n   */\n  attach(ref: ComponentRef<any>, activatedRoute: ActivatedRoute) {\n    this.activated = ref;\n    this._activatedRoute = activatedRoute;\n    this.location.insert(ref.hostView);\n  }\n\n  deactivate(): void {\n    if (this.activated) {\n      const c = this.component;\n      this.activated.destroy();\n      this.activated = null;\n      this._activatedRoute = null;\n      this.deactivateEvents.emit(c);\n    }\n  }\n\n  activateWith(activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver|null) {\n    if (this.isActivated) {\n      throw new Error('Cannot activate an already activated outlet');\n    }\n    this._activatedRoute = activatedRoute;\n    const snapshot = activatedRoute._futureSnapshot;\n    const component = <any>snapshot.routeConfig!.component;\n    resolver = resolver || this.resolver;\n    const factory = resolver.resolveComponentFactory(component);\n    const childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n    const injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);\n    this.activated = this.location.createComponent(factory, this.location.length, injector);\n    // Calling `markForCheck` to make sure we will run the change detection when the\n    // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n    this.changeDetector.markForCheck();\n    this.activateEvents.emit(this.activated.instance);\n  }\n}\n\nclass OutletInjector implements Injector {\n  constructor(\n      private route: ActivatedRoute, private childContexts: ChildrenOutletContexts,\n      private parent: Injector) {}\n\n  get(token: any, notFoundValue?: any): any {\n    if (token === ActivatedRoute) {\n      return this.route;\n    }\n\n    if (token === ChildrenOutletContexts) {\n      return this.childContexts;\n    }\n\n    return this.parent.get(token, notFoundValue);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewportScroller} from '@angular/common';\nimport {Injectable, OnDestroy} from '@angular/core';\nimport {Unsubscribable} from 'rxjs';\n\nimport {NavigationEnd, NavigationStart, Scroll} from './events';\nimport {Router} from './router';\n\n@Injectable()\nexport class RouterScroller implements OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  private routerEventsSubscription!: Unsubscribable;\n  // TODO(issue/24571): remove '!'.\n  private scrollEventsSubscription!: Unsubscribable;\n\n  private lastId = 0;\n  private lastSource: 'imperative'|'popstate'|'hashchange'|undefined = 'imperative';\n  private restoredId = 0;\n  private store: {[key: string]: [number, number]} = {};\n\n  constructor(\n      private router: Router,\n      /** @docsNotRequired */ public readonly viewportScroller: ViewportScroller, private options: {\n        scrollPositionRestoration?: 'disabled'|'enabled'|'top',\n        anchorScrolling?: 'disabled'|'enabled'\n      } = {}) {\n    // Default both options to 'disabled'\n    options.scrollPositionRestoration = options.scrollPositionRestoration || 'disabled';\n    options.anchorScrolling = options.anchorScrolling || 'disabled';\n  }\n\n  init(): void {\n    // we want to disable the automatic scrolling because having two places\n    // responsible for scrolling results race conditions, especially given\n    // that browser don't implement this behavior consistently\n    if (this.options.scrollPositionRestoration !== 'disabled') {\n      this.viewportScroller.setHistoryScrollRestoration('manual');\n    }\n    this.routerEventsSubscription = this.createScrollEvents();\n    this.scrollEventsSubscription = this.consumeScrollEvents();\n  }\n\n  private createScrollEvents() {\n    return this.router.events.subscribe(e => {\n      if (e instanceof NavigationStart) {\n        // store the scroll position of the current stable navigations.\n        this.store[this.lastId] = this.viewportScroller.getScrollPosition();\n        this.lastSource = e.navigationTrigger;\n        this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;\n      } else if (e instanceof NavigationEnd) {\n        this.lastId = e.id;\n        this.scheduleScrollEvent(e, this.router.parseUrl(e.urlAfterRedirects).fragment);\n      }\n    });\n  }\n\n  private consumeScrollEvents() {\n    return this.router.events.subscribe(e => {\n      if (!(e instanceof Scroll)) return;\n      // a popstate event. The pop state event will always ignore anchor scrolling.\n      if (e.position) {\n        if (this.options.scrollPositionRestoration === 'top') {\n          this.viewportScroller.scrollToPosition([0, 0]);\n        } else if (this.options.scrollPositionRestoration === 'enabled') {\n          this.viewportScroller.scrollToPosition(e.position);\n        }\n        // imperative navigation \"forward\"\n      } else {\n        if (e.anchor && this.options.anchorScrolling === 'enabled') {\n          this.viewportScroller.scrollToAnchor(e.anchor);\n        } else if (this.options.scrollPositionRestoration !== 'disabled') {\n          this.viewportScroller.scrollToPosition([0, 0]);\n        }\n      }\n    });\n  }\n\n  private scheduleScrollEvent(routerEvent: NavigationEnd, anchor: string|null): void {\n    this.router.triggerEvent(new Scroll(\n        routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));\n  }\n\n  /** @nodoc */\n  ngOnDestroy() {\n    if (this.routerEventsSubscription) {\n      this.routerEventsSubscription.unsubscribe();\n    }\n    if (this.scrollEventsSubscription) {\n      this.scrollEventsSubscription.unsubscribe();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, Injectable, Injector, NgModuleFactoryLoader, NgModuleRef, OnDestroy} from '@angular/core';\nimport {from, Observable, of, Subscription} from 'rxjs';\nimport {catchError, concatMap, filter, map, mergeAll, mergeMap} from 'rxjs/operators';\n\nimport {LoadedRouterConfig, Route, Routes} from './config';\nimport {Event, NavigationEnd, RouteConfigLoadEnd, RouteConfigLoadStart} from './events';\nimport {Router} from './router';\nimport {RouterConfigLoader} from './router_config_loader';\n\n\n/**\n * @description\n *\n * Provides a preloading strategy.\n *\n * @publicApi\n */\nexport abstract class PreloadingStrategy {\n  abstract preload(route: Route, fn: () => Observable<any>): Observable<any>;\n}\n\n/**\n * @description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```\n * RouterModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * @publicApi\n */\nexport class PreloadAllModules implements PreloadingStrategy {\n  preload(route: Route, fn: () => Observable<any>): Observable<any> {\n    return fn().pipe(catchError(() => of(null)));\n  }\n}\n\n/**\n * @description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * @publicApi\n */\nexport class NoPreloading implements PreloadingStrategy {\n  preload(route: Route, fn: () => Observable<any>): Observable<any> {\n    return of(null);\n  }\n}\n\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n * @publicApi\n */\n@Injectable()\nexport class RouterPreloader implements OnDestroy {\n  private loader: RouterConfigLoader;\n  private subscription?: Subscription;\n\n  constructor(\n      private router: Router, moduleLoader: NgModuleFactoryLoader, compiler: Compiler,\n      private injector: Injector, private preloadingStrategy: PreloadingStrategy) {\n    const onStartLoad = (r: Route) => router.triggerEvent(new RouteConfigLoadStart(r));\n    const onEndLoad = (r: Route) => router.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);\n  }\n\n  setUpPreloading(): void {\n    this.subscription =\n        this.router.events\n            .pipe(filter((e: Event) => e instanceof NavigationEnd), concatMap(() => this.preload()))\n            .subscribe(() => {});\n  }\n\n  preload(): Observable<any> {\n    const ngModule = this.injector.get(NgModuleRef);\n    return this.processRoutes(ngModule, this.router.config);\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  private processRoutes(ngModule: NgModuleRef<any>, routes: Routes): Observable<void> {\n    const res: Observable<any>[] = [];\n    for (const route of routes) {\n      // we already have the config loaded, just recurse\n      if (route.loadChildren && !route.canLoad && route._loadedConfig) {\n        const childConfig = route._loadedConfig;\n        res.push(this.processRoutes(childConfig.module, childConfig.routes));\n\n        // no config loaded, fetch the config\n      } else if (route.loadChildren && !route.canLoad) {\n        res.push(this.preloadConfig(ngModule, route));\n\n        // recurse into children\n      } else if (route.children) {\n        res.push(this.processRoutes(ngModule, route.children));\n      }\n    }\n    return from(res).pipe(mergeAll(), map((_) => void 0));\n  }\n\n  private preloadConfig(ngModule: NgModuleRef<any>, route: Route): Observable<void> {\n    return this.preloadingStrategy.preload(route, () => {\n      const loaded$ = route._loadedConfig ? of(route._loadedConfig) :\n                                            this.loader.load(ngModule.injector, route);\n      return loaded$.pipe(mergeMap((config: LoadedRouterConfig) => {\n        route._loadedConfig = config;\n        return this.processRoutes(config.module, config.routes);\n      }));\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_BASE_HREF, HashLocationStrategy, Location, LOCATION_INITIALIZED, LocationStrategy, PathLocationStrategy, PlatformLocation, ViewportScroller, ɵgetDOM as getDOM} from '@angular/common';\nimport {ANALYZE_FOR_ENTRY_COMPONENTS, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationRef, Compiler, ComponentRef, Inject, Injectable, InjectionToken, Injector, ModuleWithProviders, NgModule, NgModuleFactoryLoader, NgProbeToken, Optional, Provider, SkipSelf, SystemJsNgModuleLoader} from '@angular/core';\nimport {of, Subject} from 'rxjs';\n\nimport {EmptyOutletComponent} from './components/empty_outlet';\nimport {Route, Routes} from './config';\nimport {RouterLink, RouterLinkWithHref} from './directives/router_link';\nimport {RouterLinkActive} from './directives/router_link_active';\nimport {RouterOutlet} from './directives/router_outlet';\nimport {Event} from './events';\nimport {RouteReuseStrategy} from './route_reuse_strategy';\nimport {ErrorHandler, Router} from './router';\nimport {ROUTES} from './router_config_loader';\nimport {ChildrenOutletContexts} from './router_outlet_context';\nimport {NoPreloading, PreloadAllModules, PreloadingStrategy, RouterPreloader} from './router_preloader';\nimport {RouterScroller} from './router_scroller';\nimport {ActivatedRoute} from './router_state';\nimport {UrlHandlingStrategy} from './url_handling_strategy';\nimport {DefaultUrlSerializer, UrlSerializer, UrlTree} from './url_tree';\nimport {flatten} from './utils/collection';\n\n/**\n * The directives defined in the `RouterModule`.\n */\nconst ROUTER_DIRECTIVES =\n    [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, EmptyOutletComponent];\n\n/**\n * A [DI token](guide/glossary/#di-token) for the router service.\n *\n * @publicApi\n */\nexport const ROUTER_CONFIGURATION = new InjectionToken<ExtraOptions>('ROUTER_CONFIGURATION');\n\n/**\n * @docsNotRequired\n */\nexport const ROUTER_FORROOT_GUARD = new InjectionToken<void>('ROUTER_FORROOT_GUARD');\n\nexport const ROUTER_PROVIDERS: Provider[] = [\n  Location,\n  {provide: UrlSerializer, useClass: DefaultUrlSerializer},\n  {\n    provide: Router,\n    useFactory: setupRouter,\n    deps: [\n      UrlSerializer, ChildrenOutletContexts, Location, Injector, NgModuleFactoryLoader, Compiler,\n      ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()],\n      [RouteReuseStrategy, new Optional()]\n    ]\n  },\n  ChildrenOutletContexts,\n  {provide: ActivatedRoute, useFactory: rootRoute, deps: [Router]},\n  {provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader},\n  RouterPreloader,\n  NoPreloading,\n  PreloadAllModules,\n  {provide: ROUTER_CONFIGURATION, useValue: {enableTracing: false}},\n];\n\nexport function routerNgProbeToken() {\n  return new NgProbeToken('Router', Router);\n}\n\n/**\n * @description\n *\n * Adds directives and providers for in-app navigation among views defined in an application.\n * Use the Angular `Router` service to declaratively specify application states and manage state\n * transitions.\n *\n * You can import this NgModule multiple times, once for each lazy-loaded bundle.\n * However, only one `Router` service can be active.\n * To ensure this, there are two ways to register routes when importing this module:\n *\n * * The `forRoot()` method creates an `NgModule` that contains all the directives, the given\n * routes, and the `Router` service itself.\n * * The `forChild()` method creates an `NgModule` that contains all the directives and the given\n * routes, but does not include the `Router` service.\n *\n * @see [Routing and Navigation guide](guide/router) for an\n * overview of how the `Router` service should be used.\n *\n * @publicApi\n */\n@NgModule({\n  declarations: ROUTER_DIRECTIVES,\n  exports: ROUTER_DIRECTIVES,\n  entryComponents: [EmptyOutletComponent]\n})\nexport class RouterModule {\n  // Note: We are injecting the Router so it gets created eagerly...\n  constructor(@Optional() @Inject(ROUTER_FORROOT_GUARD) guard: any, @Optional() router: Router) {}\n\n  /**\n   * Creates and configures a module with all the router providers and directives.\n   * Optionally sets up an application listener to perform an initial navigation.\n   *\n   * When registering the NgModule at the root, import as follows:\n   *\n   * ```\n   * @NgModule({\n   *   imports: [RouterModule.forRoot(ROUTES)]\n   * })\n   * class MyNgModule {}\n   * ```\n   *\n   * @param routes An array of `Route` objects that define the navigation paths for the application.\n   * @param config An `ExtraOptions` configuration object that controls how navigation is performed.\n   * @return The new `NgModule`.\n   *\n   */\n  static forRoot(routes: Routes, config?: ExtraOptions): ModuleWithProviders<RouterModule> {\n    return {\n      ngModule: RouterModule,\n      providers: [\n        ROUTER_PROVIDERS,\n        provideRoutes(routes),\n        {\n          provide: ROUTER_FORROOT_GUARD,\n          useFactory: provideForRootGuard,\n          deps: [[Router, new Optional(), new SkipSelf()]]\n        },\n        {provide: ROUTER_CONFIGURATION, useValue: config ? config : {}},\n        {\n          provide: LocationStrategy,\n          useFactory: provideLocationStrategy,\n          deps:\n              [PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION]\n        },\n        {\n          provide: RouterScroller,\n          useFactory: createRouterScroller,\n          deps: [Router, ViewportScroller, ROUTER_CONFIGURATION]\n        },\n        {\n          provide: PreloadingStrategy,\n          useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\n                                                             NoPreloading\n        },\n        {provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken},\n        provideRouterInitializer(),\n      ],\n    };\n  }\n\n  /**\n   * Creates a module with all the router directives and a provider registering routes,\n   * without creating a new Router service.\n   * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:\n   *\n   * ```\n   * @NgModule({\n   *   imports: [RouterModule.forChild(ROUTES)]\n   * })\n   * class MyNgModule {}\n   * ```\n   *\n   * @param routes An array of `Route` objects that define the navigation paths for the submodule.\n   * @return The new NgModule.\n   *\n   */\n  static forChild(routes: Routes): ModuleWithProviders<RouterModule> {\n    return {ngModule: RouterModule, providers: [provideRoutes(routes)]};\n  }\n}\n\nexport function createRouterScroller(\n    router: Router, viewportScroller: ViewportScroller, config: ExtraOptions): RouterScroller {\n  if (config.scrollOffset) {\n    viewportScroller.setOffset(config.scrollOffset);\n  }\n  return new RouterScroller(router, viewportScroller, config);\n}\n\nexport function provideLocationStrategy(\n    platformLocationStrategy: PlatformLocation, baseHref: string, options: ExtraOptions = {}) {\n  return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :\n                           new PathLocationStrategy(platformLocationStrategy, baseHref);\n}\n\nexport function provideForRootGuard(router: Router): any {\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && router) {\n    throw new Error(\n        `RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.`);\n  }\n  return 'guarded';\n}\n\n/**\n * Registers a [DI provider](guide/glossary#provider) for a set of routes.\n * @param routes The route configuration to provide.\n *\n * @usageNotes\n *\n * ```\n * @NgModule({\n *   imports: [RouterModule.forChild(ROUTES)],\n *   providers: [provideRoutes(EXTRA_ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * @publicApi\n */\nexport function provideRoutes(routes: Routes): any {\n  return [\n    {provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes},\n    {provide: ROUTES, multi: true, useValue: routes},\n  ];\n}\n\n/**\n * Allowed values in an `ExtraOptions` object that configure\n * when the router performs the initial navigation operation.\n *\n * * 'enabledNonBlocking' - (default) The initial navigation starts after the\n * root component has been created. The bootstrap is not blocked on the completion of the initial\n * navigation.\n * * 'enabledBlocking' - The initial navigation starts before the root component is created.\n * The bootstrap is blocked until the initial navigation is complete. This value is required\n * for [server-side rendering](guide/universal) to work.\n * * 'disabled' - The initial navigation is not performed. The location listener is set up before\n * the root component gets created. Use if there is a reason to have\n * more control over when the router starts its initial navigation due to some complex\n * initialization logic.\n *\n * The following values have been [deprecated](guide/releases#deprecation-practices) since v11,\n * and should not be used for new applications.\n *\n * * 'enabled' - This option is 1:1 replaceable with `enabledBlocking`.\n *\n * @see `forRoot()`\n *\n * @publicApi\n */\nexport type InitialNavigation = 'disabled'|'enabled'|'enabledBlocking'|'enabledNonBlocking';\n\n/**\n * A set of configuration options for a router module, provided in the\n * `forRoot()` method.\n *\n * @see `forRoot()`\n *\n *\n * @publicApi\n */\nexport interface ExtraOptions {\n  /**\n   * When true, log all internal navigation events to the console.\n   * Use for debugging.\n   */\n  enableTracing?: boolean;\n\n  /**\n   * When true, enable the location strategy that uses the URL fragment\n   * instead of the history API.\n   */\n  useHash?: boolean;\n\n  /**\n   * One of `enabled`, `enabledBlocking`, `enabledNonBlocking` or `disabled`.\n   * When set to `enabled` or `enabledBlocking`, the initial navigation starts before the root\n   * component is created. The bootstrap is blocked until the initial navigation is complete. This\n   * value is required for [server-side rendering](guide/universal) to work. When set to\n   * `enabledNonBlocking`, the initial navigation starts after the root component has been created.\n   * The bootstrap is not blocked on the completion of the initial navigation. When set to\n   * `disabled`, the initial navigation is not performed. The location listener is set up before the\n   * root component gets created. Use if there is a reason to have more control over when the router\n   * starts its initial navigation due to some complex initialization logic.\n   */\n  initialNavigation?: InitialNavigation;\n\n  /**\n   * A custom error handler for failed navigations.\n   * If the handler returns a value, the navigation Promise is resolved with this value.\n   * If the handler throws an exception, the navigation Promise is rejected with the exception.\n   *\n   */\n  errorHandler?: ErrorHandler;\n\n  /**\n   * Configures a preloading strategy.\n   * One of `PreloadAllModules` or `NoPreloading` (the default).\n   */\n  preloadingStrategy?: any;\n\n  /**\n   * Define what the router should do if it receives a navigation request to the current URL.\n   * Default is `ignore`, which causes the router ignores the navigation.\n   * This can disable features such as a \"refresh\" button.\n   * Use this option to configure the behavior when navigating to the\n   * current URL. Default is 'ignore'.\n   */\n  onSameUrlNavigation?: 'reload'|'ignore';\n\n  /**\n   * Configures if the scroll position needs to be restored when navigating back.\n   *\n   * * 'disabled'- (Default) Does nothing. Scroll position is maintained on navigation.\n   * * 'top'- Sets the scroll position to x = 0, y = 0 on all navigation.\n   * * 'enabled'- Restores the previous scroll position on backward navigation, else sets the\n   * position to the anchor if one is provided, or sets the scroll position to [0, 0] (forward\n   * navigation). This option will be the default in the future.\n   *\n   * You can implement custom scroll restoration behavior by adapting the enabled behavior as\n   * in the following example.\n   *\n   * ```typescript\n   * class AppModule {\n   *   constructor(router: Router, viewportScroller: ViewportScroller) {\n   *     router.events.pipe(\n   *       filter((e: Event): e is Scroll => e instanceof Scroll)\n   *     ).subscribe(e => {\n   *       if (e.position) {\n   *         // backward navigation\n   *         viewportScroller.scrollToPosition(e.position);\n   *       } else if (e.anchor) {\n   *         // anchor navigation\n   *         viewportScroller.scrollToAnchor(e.anchor);\n   *       } else {\n   *         // forward navigation\n   *         viewportScroller.scrollToPosition([0, 0]);\n   *       }\n   *     });\n   *   }\n   * }\n   * ```\n   */\n  scrollPositionRestoration?: 'disabled'|'enabled'|'top';\n\n  /**\n   * When set to 'enabled', scrolls to the anchor element when the URL has a fragment.\n   * Anchor scrolling is disabled by default.\n   *\n   * Anchor scrolling does not happen on 'popstate'. Instead, we restore the position\n   * that we stored or scroll to the top.\n   */\n  anchorScrolling?: 'disabled'|'enabled';\n\n  /**\n   * Configures the scroll offset the router will use when scrolling to an element.\n   *\n   * When given a tuple with x and y position value,\n   * the router uses that offset each time it scrolls.\n   * When given a function, the router invokes the function every time\n   * it restores scroll position.\n   */\n  scrollOffset?: [number, number]|(() => [number, number]);\n\n  /**\n   * Defines how the router merges parameters, data, and resolved data from parent to child\n   * routes. By default ('emptyOnly'), inherits parent parameters only for\n   * path-less or component-less routes.\n   *\n   * Set to 'always' to enable unconditional inheritance of parent parameters.\n   *\n   * Note that when dealing with matrix parameters, \"parent\" refers to the parent `Route`\n   * config which does not necessarily mean the \"URL segment to the left\". When the `Route` `path`\n   * contains multiple segments, the matrix parameters must appear on the last segment. For example,\n   * matrix parameters for `{path: 'a/b', component: MyComp}` should appear as `a/b;foo=bar` and not\n   * `a;foo=bar/b`.\n   *\n   */\n  paramsInheritanceStrategy?: 'emptyOnly'|'always';\n\n  /**\n   * A custom handler for malformed URI errors. The handler is invoked when `encodedURI` contains\n   * invalid character sequences.\n   * The default implementation is to redirect to the root URL, dropping\n   * any path or parameter information. The function takes three parameters:\n   *\n   * - `'URIError'` - Error thrown when parsing a bad URL.\n   * - `'UrlSerializer'` - UrlSerializer that’s configured with the router.\n   * - `'url'` -  The malformed URL that caused the URIError\n   * */\n  malformedUriErrorHandler?:\n      (error: URIError, urlSerializer: UrlSerializer, url: string) => UrlTree;\n\n  /**\n   * Defines when the router updates the browser URL. By default ('deferred'),\n   * update after successful navigation.\n   * Set to 'eager' if prefer to update the URL at the beginning of navigation.\n   * Updating the URL early allows you to handle a failure of navigation by\n   * showing an error message with the URL that failed.\n   */\n  urlUpdateStrategy?: 'deferred'|'eager';\n\n  /**\n   * Enables a bug fix that corrects relative link resolution in components with empty paths.\n   * Example:\n   *\n   * ```\n   * const routes = [\n   *   {\n   *     path: '',\n   *     component: ContainerComponent,\n   *     children: [\n   *       { path: 'a', component: AComponent },\n   *       { path: 'b', component: BComponent },\n   *     ]\n   *   }\n   * ];\n   * ```\n   *\n   * From the `ContainerComponent`, you should be able to navigate to `AComponent` using\n   * the following `routerLink`, but it will not work if `relativeLinkResolution` is set\n   * to `'legacy'`:\n   *\n   * `<a [routerLink]=\"['./a']\">Link to A</a>`\n   *\n   * However, this will work:\n   *\n   * `<a [routerLink]=\"['../a']\">Link to A</a>`\n   *\n   * In other words, you're required to use `../` rather than `./` when the relative link\n   * resolution is set to `'legacy'`.\n   *\n   * The default in v11 is `corrected`.\n   */\n  relativeLinkResolution?: 'legacy'|'corrected';\n}\n\nexport function setupRouter(\n    urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts, location: Location,\n    injector: Injector, loader: NgModuleFactoryLoader, compiler: Compiler, config: Route[][],\n    opts: ExtraOptions = {}, urlHandlingStrategy?: UrlHandlingStrategy,\n    routeReuseStrategy?: RouteReuseStrategy) {\n  const router = new Router(\n      null, urlSerializer, contexts, location, injector, loader, compiler, flatten(config));\n\n  if (urlHandlingStrategy) {\n    router.urlHandlingStrategy = urlHandlingStrategy;\n  }\n\n  if (routeReuseStrategy) {\n    router.routeReuseStrategy = routeReuseStrategy;\n  }\n\n  assignExtraOptionsToRouter(opts, router);\n\n  if (opts.enableTracing) {\n    const dom = getDOM();\n    router.events.subscribe((e: Event) => {\n      dom.logGroup(`Router Event: ${(<any>e.constructor).name}`);\n      dom.log(e.toString());\n      dom.log(e);\n      dom.logGroupEnd();\n    });\n  }\n\n  return router;\n}\n\nexport function assignExtraOptionsToRouter(opts: ExtraOptions, router: Router): void {\n  if (opts.errorHandler) {\n    router.errorHandler = opts.errorHandler;\n  }\n\n  if (opts.malformedUriErrorHandler) {\n    router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\n  }\n\n  if (opts.onSameUrlNavigation) {\n    router.onSameUrlNavigation = opts.onSameUrlNavigation;\n  }\n\n  if (opts.paramsInheritanceStrategy) {\n    router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n  }\n\n  if (opts.relativeLinkResolution) {\n    router.relativeLinkResolution = opts.relativeLinkResolution;\n  }\n\n  if (opts.urlUpdateStrategy) {\n    router.urlUpdateStrategy = opts.urlUpdateStrategy;\n  }\n}\n\nexport function rootRoute(router: Router): ActivatedRoute {\n  return router.routerState.root;\n}\n\n/**\n * Router initialization requires two steps:\n *\n * First, we start the navigation in a `APP_INITIALIZER` to block the bootstrap if\n * a resolver or a guard executes asynchronously.\n *\n * Next, we actually run activation in a `BOOTSTRAP_LISTENER`, using the\n * `afterPreactivation` hook provided by the router.\n * The router navigation starts, reaches the point when preactivation is done, and then\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\n */\n@Injectable()\nexport class RouterInitializer {\n  private initNavigation: boolean = false;\n  private resultOfPreactivationDone = new Subject<void>();\n\n  constructor(private injector: Injector) {}\n\n  appInitializer(): Promise<any> {\n    const p: Promise<any> = this.injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\n    return p.then(() => {\n      let resolve: Function = null!;\n      const res = new Promise(r => resolve = r);\n      const router = this.injector.get(Router);\n      const opts = this.injector.get(ROUTER_CONFIGURATION);\n\n      if (opts.initialNavigation === 'disabled') {\n        router.setUpLocationChangeListener();\n        resolve(true);\n      } else if (\n          // TODO: enabled is deprecated as of v11, can be removed in v13\n          opts.initialNavigation === 'enabled' || opts.initialNavigation === 'enabledBlocking') {\n        router.hooks.afterPreactivation = () => {\n          // only the initial navigation should be delayed\n          if (!this.initNavigation) {\n            this.initNavigation = true;\n            resolve(true);\n            return this.resultOfPreactivationDone;\n\n            // subsequent navigations should not be delayed\n          } else {\n            return of(null) as any;\n          }\n        };\n        router.initialNavigation();\n      } else {\n        resolve(true);\n      }\n\n      return res;\n    });\n  }\n\n  bootstrapListener(bootstrappedComponentRef: ComponentRef<any>): void {\n    const opts = this.injector.get(ROUTER_CONFIGURATION);\n    const preloader = this.injector.get(RouterPreloader);\n    const routerScroller = this.injector.get(RouterScroller);\n    const router = this.injector.get(Router);\n    const ref = this.injector.get<ApplicationRef>(ApplicationRef);\n\n    if (bootstrappedComponentRef !== ref.components[0]) {\n      return;\n    }\n\n    // Default case\n    if (opts.initialNavigation === 'enabledNonBlocking' || opts.initialNavigation === undefined) {\n      router.initialNavigation();\n    }\n\n    preloader.setUpPreloading();\n    routerScroller.init();\n    router.resetRootComponentType(ref.componentTypes[0]);\n    this.resultOfPreactivationDone.next(null!);\n    this.resultOfPreactivationDone.complete();\n  }\n}\n\nexport function getAppInitializer(r: RouterInitializer) {\n  return r.appInitializer.bind(r);\n}\n\nexport function getBootstrapListener(r: RouterInitializer) {\n  return r.bootstrapListener.bind(r);\n}\n\n/**\n * A [DI token](guide/glossary/#di-token) for the router initializer that\n * is called after the app is bootstrapped.\n *\n * @publicApi\n */\nexport const ROUTER_INITIALIZER =\n    new InjectionToken<(compRef: ComponentRef<any>) => void>('Router Initializer');\n\nexport function provideRouterInitializer() {\n  return [\n    RouterInitializer,\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: getAppInitializer,\n      deps: [RouterInitializer]\n    },\n    {provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer]},\n    {provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER},\n  ];\n}\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, PartialObserver, TeardownLogic } from '../types';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\n/** @deprecated Use an observer instead of a complete callback */\nexport function tap<T>(next: null | undefined, error: null | undefined, complete: () => void): MonoTypeOperatorFunction<T>;\n/** @deprecated Use an observer instead of an error callback */\nexport function tap<T>(next: null | undefined, error: (error: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\n/** @deprecated Use an observer instead of a complete callback */\nexport function tap<T>(next: (value: T) => void, error: null | undefined, complete: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(next?: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * ![](do.png)\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `tap` is not subscribed, the side effects specified by the\n * Observer will never happen. `tap` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * ## Example\n * Map every click to the clientX position of that click, while also logging the click event\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { tap, map } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(\n *   tap(ev => console.log(ev)),\n *   map(ev => ev.clientX),\n * );\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n * @see {@link Observable#subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nclass TapSubscriber<T> extends Subscriber<T> {\n  private _context: any;\n\n  private _tapNext: ((value: T) => void) = noop;\n\n  private _tapError: ((err: any) => void) = noop;\n\n  private _tapComplete: (() => void) = noop;\n\n  constructor(destination: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n      super(destination);\n      this._tapError = error || noop;\n      this._tapComplete = complete || noop;\n      if (isFunction(observerOrNext)) {\n        this._context = this;\n        this._tapNext = observerOrNext;\n      } else if (observerOrNext) {\n        this._context = observerOrNext;\n        this._tapNext = observerOrNext.next || noop;\n        this._tapError = observerOrNext.error || noop;\n        this._tapComplete = observerOrNext.complete || noop;\n      }\n    }\n\n  _next(value: T) {\n    try {\n      this._tapNext.call(this._context, value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(value);\n  }\n\n  _error(err: any) {\n    try {\n      this._tapError.call(this._context, err);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.error(err);\n  }\n\n  _complete() {\n    try {\n      this._tapComplete.call(this._context, );\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    return this.destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../types';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for `multicast(() => new Subject()), refCount()`.\n *\n * ![](share.png)\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction, ObservedValueOf, ObservableInput } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subject: Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T, O extends ObservableInput<any>>(subject: Subject<T>, selector: (shared: Observable<T>) => O): UnaryFunction<Observable<T>, ConnectableObservable<ObservedValueOf<O>>>;\nexport function multicast<T>(subjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T, O extends ObservableInput<any>>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector: (shared: Observable<T>) => O): OperatorFunction<T, ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * ![](multicast.png)\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\n/**\n * Make a {@link ConnectableObservable} behave like a ordinary observable and automates the way\n * you can connect to it.\n *\n * Internally it counts the subscriptions to the observable and subscribes (only once) to the source if\n * the number of subscriptions is larger than 0. If the number of subscriptions is smaller than 1, it\n * unsubscribes from the source. This way you can make sure that everything before the *published*\n * refCount has only a single subscription independently of the number of subscribers to the target\n * observable.\n *\n * Note that using the {@link share} operator is exactly the same as using the *publish* operator\n * (making the observable hot) and the *refCount* operator in a sequence.\n *\n * ![](refCount.png)\n *\n * ## Example\n *\n * In the following example there are two intervals turned into connectable observables\n * by using the *publish* operator. The first one uses the *refCount* operator, the\n * second one does not use it. You will notice that a connectable observable does nothing\n * until you call its connect function.\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { tap, publish, refCount } from 'rxjs/operators';\n *\n * // Turn the interval observable into a ConnectableObservable (hot)\n * const refCountInterval = interval(400).pipe(\n *   tap((num) => console.log(`refCount ${num}`)),\n *   publish(),\n *   refCount()\n * );\n *\n * const publishedInterval = interval(400).pipe(\n *   tap((num) => console.log(`publish ${num}`)),\n *   publish()\n * );\n *\n * refCountInterval.subscribe();\n * refCountInterval.subscribe();\n * // 'refCount 0' -----> 'refCount 1' -----> etc\n * // All subscriptions will receive the same value and the tap (and\n * // every other operator) before the publish operator will be executed\n * // only once per event independently of the number of subscriptions.\n *\n * publishedInterval.subscribe();\n * // Nothing happens until you call .connect() on the observable.\n * ```\n *\n * @see {@link ConnectableObservable}\n * @see {@link share}\n * @see {@link publish}\n */\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  } as MonoTypeOperatorFunction<T>;\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // )\n    // .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { subscribeToArray } from '../util/subscribeToArray';\nimport { scheduleArray } from '../scheduled/scheduleArray';\n\nexport function fromArray<T>(input: ArrayLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToArray(input));\n  } else {\n    return scheduleArray(input, scheduler);\n  }\n}\n","import { SchedulerLike } from '../types';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵparseCookieValue as parseCookieValue, ɵsetRootDomAdapter as setRootDomAdapter} from '@angular/common';\nimport {ɵglobal as global} from '@angular/core';\n\nimport {GenericBrowserDomAdapter} from './generic_browser_adapter';\n\nconst nodeContains: (this: Node, other: Node) => boolean = (() => {\n  if (global['Node']) {\n    return global['Node'].prototype.contains || function(this: Node, node: any) {\n      return !!(this.compareDocumentPosition(node) & 16);\n    };\n  }\n\n  return undefined as any;\n})();\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nexport class BrowserDomAdapter extends GenericBrowserDomAdapter {\n  static makeCurrent() {\n    setRootDomAdapter(new BrowserDomAdapter());\n  }\n  getProperty(el: Node, name: string): any {\n    return (<any>el)[name];\n  }\n\n  log(error: string): void {\n    if (window.console) {\n      window.console.log && window.console.log(error);\n    }\n  }\n\n  logGroup(error: string): void {\n    if (window.console) {\n      window.console.group && window.console.group(error);\n    }\n  }\n\n  logGroupEnd(): void {\n    if (window.console) {\n      window.console.groupEnd && window.console.groupEnd();\n    }\n  }\n\n  onAndCancel(el: Node, evt: any, listener: any): Function {\n    el.addEventListener(evt, listener, false);\n    // Needed to follow Dart's subscription semantic, until fix of\n    // https://code.google.com/p/dart/issues/detail?id=17406\n    return () => {\n      el.removeEventListener(evt, listener, false);\n    };\n  }\n  dispatchEvent(el: Node, evt: any) {\n    el.dispatchEvent(evt);\n  }\n  remove(node: Node): Node {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n    return node;\n  }\n  getValue(el: any): string {\n    return el.value;\n  }\n  createElement(tagName: string, doc?: Document): HTMLElement {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  createHtmlDocument(): HTMLDocument {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  getDefaultDocument(): Document {\n    return document;\n  }\n\n  isElementNode(node: Node): boolean {\n    return node.nodeType === Node.ELEMENT_NODE;\n  }\n\n  isShadowRoot(node: any): boolean {\n    return node instanceof DocumentFragment;\n  }\n\n  getGlobalEventTarget(doc: Document, target: string): EventTarget|null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  getHistory(): History {\n    return window.history;\n  }\n  getLocation(): Location {\n    return window.location;\n  }\n  getBaseHref(doc: Document): string|null {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  resetBaseElement(): void {\n    baseElement = null;\n  }\n  getUserAgent(): string {\n    return window.navigator.userAgent;\n  }\n  performanceNow(): number {\n    // performance.now() is not available in all browsers, see\n    // https://caniuse.com/high-resolution-time\n    return window.performance && window.performance.now ? window.performance.now() :\n                                                          new Date().getTime();\n  }\n\n  supportsCookies(): boolean {\n    return true;\n  }\n\n  getCookie(name: string): string|null {\n    return parseCookieValue(document.cookie, name);\n  }\n}\n\nlet baseElement: HTMLElement|null = null;\nfunction getBaseElementHref(): string|null {\n  if (!baseElement) {\n    baseElement = document.querySelector('base')!;\n    if (!baseElement) {\n      return null;\n    }\n  }\n  return baseElement.getAttribute('href');\n}\n\n// based on urlUtils.js in AngularJS 1\nlet urlParsingNode: any;\nfunction relativePath(url: any): string {\n  if (!urlParsingNode) {\n    urlParsingNode = document.createElement('a');\n  }\n  urlParsingNode.setAttribute('href', url);\n  return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\n                                                       '/' + urlParsingNode.pathname;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\n\n/**\n * The injection token for the event-manager plug-in service.\n *\n * @publicApi\n */\nexport const EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\n@Injectable()\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n  private _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(@Inject(EVENT_MANAGER_PLUGINS) plugins: EventManagerPlugin[], private _zone: NgZone) {\n    plugins.forEach(p => p.manager = this);\n    this._plugins = plugins.slice().reverse();\n  }\n\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n\n  /**\n   * Registers a global handler for an event in a target view.\n   *\n   * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns A callback function that can be used to remove the handler.\n   */\n  addGlobalEventListener(target: string, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addGlobalEventListener(target, eventName, handler);\n  }\n\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone(): NgZone {\n    return this._zone;\n  }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    const plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n    for (let i = 0; i < plugins.length; i++) {\n      const plugin = plugins[i];\n      if (plugin.supports(eventName)) {\n        this._eventNameToPlugin.set(eventName, plugin);\n        return plugin;\n      }\n    }\n    throw new Error(`No event manager plugin found for event ${eventName}`);\n  }\n}\n\nexport abstract class EventManagerPlugin {\n  constructor(private _doc: any) {}\n\n  // TODO(issue/24571): remove '!'.\n  manager!: EventManager;\n\n  abstract supports(eventName: string): boolean;\n\n  abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n\n  addGlobalEventListener(element: string, eventName: string, handler: Function): Function {\n    const target: HTMLElement = getDOM().getGlobalEventTarget(this._doc, element);\n    if (!target) {\n      throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n    }\n    return this.addEventListener(target, eventName, handler);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\n\n@Injectable()\nexport class SharedStylesHost {\n  /** @internal */\n  protected _stylesSet = new Set<string>();\n\n  addStyles(styles: string[]): void {\n    const additions = new Set<string>();\n    styles.forEach(style => {\n      if (!this._stylesSet.has(style)) {\n        this._stylesSet.add(style);\n        additions.add(style);\n      }\n    });\n    this.onStylesAdded(additions);\n  }\n\n  onStylesAdded(additions: Set<string>): void {}\n\n  getAllStyles(): string[] {\n    return Array.from(this._stylesSet);\n  }\n}\n\n@Injectable()\nexport class DomSharedStylesHost extends SharedStylesHost implements OnDestroy {\n  private _hostNodes = new Set<Node>();\n  private _styleNodes = new Set<Node>();\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n    this._hostNodes.add(_doc.head);\n  }\n\n  private _addStylesToHost(styles: Set<string>, host: Node): void {\n    styles.forEach((style: string) => {\n      const styleEl = this._doc.createElement('style');\n      styleEl.textContent = style;\n      this._styleNodes.add(host.appendChild(styleEl));\n    });\n  }\n\n  addHost(hostNode: Node): void {\n    this._addStylesToHost(this._stylesSet, hostNode);\n    this._hostNodes.add(hostNode);\n  }\n\n  removeHost(hostNode: Node): void {\n    this._hostNodes.delete(hostNode);\n  }\n\n  onStylesAdded(additions: Set<string>): void {\n    this._hostNodes.forEach(hostNode => this._addStylesToHost(additions, hostNode));\n  }\n\n  ngOnDestroy(): void {\n    this._styleNodes.forEach(styleNode => getDOM().remove(styleNode));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵDomAdapter as DomAdapter} from '@angular/common';\n\n\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class GenericBrowserDomAdapter extends DomAdapter {\n  constructor() {\n    super();\n  }\n\n  supportsDOMEvents(): boolean {\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {APP_INITIALIZER, ApplicationInitStatus, Inject, InjectionToken, Injector, StaticProvider} from '@angular/core';\n\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nexport const TRANSITION_ID = new InjectionToken('TRANSITION_ID');\n\nexport function appInitializerFactory(transitionId: string, document: any, injector: Injector) {\n  return () => {\n    // Wait for all application initializers to be completed before removing the styles set by\n    // the server.\n    injector.get(ApplicationInitStatus).donePromise.then(() => {\n      const dom = getDOM();\n      const styles: any[] =\n          Array.prototype.slice.apply(document.querySelectorAll(`style[ng-transition]`));\n      styles.filter(el => el.getAttribute('ng-transition') === transitionId)\n          .forEach(el => dom.remove(el));\n    });\n  };\n}\n\nexport const SERVER_TRANSITION_PROVIDERS: StaticProvider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: appInitializerFactory,\n    deps: [TRANSITION_ID, DOCUMENT, Injector],\n    multi: true\n  },\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {GetTestability, setTestabilityGetter, Testability, TestabilityRegistry, ɵglobal as global} from '@angular/core';\n\nexport class BrowserGetTestability implements GetTestability {\n  static init() {\n    setTestabilityGetter(new BrowserGetTestability());\n  }\n\n  addToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new Error('Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const whenAllStable = (callback: any /** TODO #9100 */) => {\n      const testabilities = global['getAllAngularTestabilities']();\n      let count = testabilities.length;\n      let didWork = false;\n      const decrement = function(didWork_: any /** TODO #9100 */) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach(function(testability: any /** TODO #9100 */) {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, (<any>elem).host, true);\n    }\n    return this.findTestabilityInTree(registry, elem.parentElement, true);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_INITIALIZER, ApplicationRef, DebugNode, NgProbeToken, NgZone, Optional, Provider, ɵgetDebugNodeR2} from '@angular/core';\n\nimport {exportNgVar} from '../util';\n\nconst CORE_TOKENS = (() => ({\n                       'ApplicationRef': ApplicationRef,\n                       'NgZone': NgZone,\n                     }))();\n\nconst INSPECT_GLOBAL_NAME = 'probe';\nconst CORE_TOKENS_GLOBAL_NAME = 'coreTokens';\n\n/**\n * Returns a {@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n */\nexport function inspectNativeElementR2(element: any): DebugNode|null {\n  return ɵgetDebugNodeR2(element);\n}\n\nexport function _createNgProbeR2(coreTokens: NgProbeToken[]): any {\n  exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElementR2);\n  exportNgVar(CORE_TOKENS_GLOBAL_NAME, {...CORE_TOKENS, ..._ngProbeTokensToMap(coreTokens || [])});\n  return () => inspectNativeElementR2;\n}\n\nfunction _ngProbeTokensToMap(tokens: NgProbeToken[]): {[name: string]: any} {\n  return tokens.reduce((prev: any, t: any) => (prev[t.name] = t.token, prev), {});\n}\n\n/**\n * In Ivy, we don't support NgProbe because we have our own set of testing utilities\n * with more robust functionality.\n *\n * We shouldn't bring in NgProbe because it prevents DebugNode and friends from\n * tree-shaking properly.\n */\nexport const ELEMENT_PROBE_PROVIDERS__POST_R3__ = [];\n\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n */\nexport const ELEMENT_PROBE_PROVIDERS__PRE_R3__: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: _createNgProbeR2,\n    deps: [\n      [NgProbeToken, new Optional()],\n    ],\n    multi: true,\n  },\n];\n\nexport const ELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS__PRE_R3__;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_ID, Inject, Injectable, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, ViewEncapsulation} from '@angular/core';\n\nimport {EventManager} from './events/event_manager';\nimport {DomSharedStylesHost} from './shared_styles_host';\n\nexport const NAMESPACE_URIS: {[ns: string]: string} = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n};\n\nconst COMPONENT_REGEX = /%COMP%/g;\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;\n\nexport const COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\nexport function shimContentAttribute(componentShortId: string): string {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimHostAttribute(componentShortId: string): string {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function flattenStyles(\n    compId: string, styles: Array<any|any[]>, target: string[]): string[] {\n  for (let i = 0; i < styles.length; i++) {\n    let style = styles[i];\n\n    if (Array.isArray(style)) {\n      flattenStyles(compId, style, target);\n    } else {\n      style = style.replace(COMPONENT_REGEX, compId);\n      target.push(style);\n    }\n  }\n  return target;\n}\n\nfunction decoratePreventDefault(eventHandler: Function): Function {\n  // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n  // decoratePreventDefault or is a listener added outside the Angular context so it can handle the\n  // two differently. In the first case, the special '__ngUnwrap__' token is passed to the unwrap\n  // the listener (see below).\n  return (event: any) => {\n    // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n    // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The debug_node\n    // can inspect the listener toString contents for the existence of this special token. Because\n    // the token is a string literal, it is ensured to not be modified by compiled code.\n    if (event === '__ngUnwrap__') {\n      return eventHandler;\n    }\n\n    const allowDefaultBehavior = eventHandler(event);\n    if (allowDefaultBehavior === false) {\n      // TODO(tbosch): move preventDefault into event plugins...\n      event.preventDefault();\n      event.returnValue = false;\n    }\n\n    return undefined;\n  };\n}\n\nlet hasLoggedNativeEncapsulationWarning = false;\n\n@Injectable()\nexport class DomRendererFactory2 implements RendererFactory2 {\n  private rendererByCompId = new Map<string, Renderer2>();\n  private defaultRenderer: Renderer2;\n\n  constructor(\n      private eventManager: EventManager, private sharedStylesHost: DomSharedStylesHost,\n      @Inject(APP_ID) private appId: string) {\n    this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n  }\n\n  createRenderer(element: any, type: RendererType2|null): Renderer2 {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n    switch (type.encapsulation) {\n      case ViewEncapsulation.Emulated: {\n        let renderer = this.rendererByCompId.get(type.id);\n        if (!renderer) {\n          renderer = new EmulatedEncapsulationDomRenderer2(\n              this.eventManager, this.sharedStylesHost, type, this.appId);\n          this.rendererByCompId.set(type.id, renderer);\n        }\n        (<EmulatedEncapsulationDomRenderer2>renderer).applyToHost(element);\n        return renderer;\n      }\n      case 1:\n      case ViewEncapsulation.ShadowDom:\n        // TODO(FW-2290): remove the `case 1:` fallback logic and the warning in v12.\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            !hasLoggedNativeEncapsulationWarning && type.encapsulation === 1) {\n          hasLoggedNativeEncapsulationWarning = true;\n          console.warn(\n              'ViewEncapsulation.Native is no longer supported. Falling back to ViewEncapsulation.ShadowDom. The fallback will be removed in v12.');\n        }\n\n        return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n      default: {\n        if (!this.rendererByCompId.has(type.id)) {\n          const styles = flattenStyles(type.id, type.styles, []);\n          this.sharedStylesHost.addStyles(styles);\n          this.rendererByCompId.set(type.id, this.defaultRenderer);\n        }\n        return this.defaultRenderer;\n      }\n    }\n  }\n\n  begin() {}\n  end() {}\n}\n\nclass DefaultDomRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n\n  constructor(private eventManager: EventManager) {}\n\n  destroy(): void {}\n\n  destroyNode: null;\n\n  createElement(name: string, namespace?: string): any {\n    if (namespace) {\n      // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key\n      // will result in undefined, so we just return the namespace here.\n      return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n    }\n\n    return document.createElement(name);\n  }\n\n  createComment(value: string): any {\n    return document.createComment(value);\n  }\n\n  createText(value: string): any {\n    return document.createTextNode(value);\n  }\n\n  appendChild(parent: any, newChild: any): void {\n    parent.appendChild(newChild);\n  }\n\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    if (parent) {\n      parent.insertBefore(newChild, refChild);\n    }\n  }\n\n  removeChild(parent: any, oldChild: any): void {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n\n  selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any {\n    let el: any = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n                                                       selectorOrNode;\n    if (!el) {\n      throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n    return el;\n  }\n\n  parentNode(node: any): any {\n    return node.parentNode;\n  }\n\n  nextSibling(node: any): any {\n    return node.nextSibling;\n  }\n\n  setAttribute(el: any, name: string, value: string, namespace?: string): void {\n    if (namespace) {\n      name = namespace + ':' + name;\n      // TODO(FW-811): Ivy may cause issues here because it's passing around\n      // full URIs for namespaces, therefore this lookup will fail.\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n\n  removeAttribute(el: any, name: string, namespace?: string): void {\n    if (namespace) {\n      // TODO(FW-811): Ivy may cause issues here because it's passing around\n      // full URIs for namespaces, therefore this lookup will fail.\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        // TODO(FW-811): Since ivy is passing around full URIs for namespaces\n        // this could result in properties like `http://www.w3.org/2000/svg:cx=\"123\"`,\n        // which is wrong.\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n\n  addClass(el: any, name: string): void {\n    el.classList.add(name);\n  }\n\n  removeClass(el: any, name: string): void {\n    el.classList.remove(name);\n  }\n\n  setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n\n  removeStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      el.style.removeProperty(style);\n    } else {\n      // IE requires '' instead of null\n      // see https://github.com/angular/angular/issues/7916\n      el.style[style] = '';\n    }\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    NG_DEV_MODE && checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n\n  setValue(node: any, value: string): void {\n    node.nodeValue = value;\n  }\n\n  listen(target: 'window'|'document'|'body'|any, event: string, callback: (event: any) => boolean):\n      () => void {\n    NG_DEV_MODE && checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      return <() => void>this.eventManager.addGlobalEventListener(\n          target, event, decoratePreventDefault(callback));\n    }\n    return <() => void>this.eventManager.addEventListener(\n               target, event, decoratePreventDefault(callback)) as () => void;\n  }\n}\n\nconst AT_CHARCODE = (() => '@'.charCodeAt(0))();\nfunction checkNoSyntheticProp(name: string, nameKind: string) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new Error(`Found the synthetic ${nameKind} ${\n        name}. Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.`);\n  }\n}\n\nclass EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {\n  private contentAttr: string;\n  private hostAttr: string;\n\n  constructor(\n      eventManager: EventManager, sharedStylesHost: DomSharedStylesHost,\n      private component: RendererType2, appId: string) {\n    super(eventManager);\n    const styles = flattenStyles(appId + '-' + component.id, component.styles, []);\n    sharedStylesHost.addStyles(styles);\n\n    this.contentAttr = shimContentAttribute(appId + '-' + component.id);\n    this.hostAttr = shimHostAttribute(appId + '-' + component.id);\n  }\n\n  applyToHost(element: any) {\n    super.setAttribute(element, this.hostAttr, '');\n  }\n\n  createElement(parent: any, name: string): Element {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  private shadowRoot: any;\n\n  constructor(\n      eventManager: EventManager, private sharedStylesHost: DomSharedStylesHost,\n      private hostEl: any, component: RendererType2) {\n    super(eventManager);\n    this.shadowRoot = (hostEl as any).attachShadow({mode: 'open'});\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = flattenStyles(component.id, component.styles, []);\n    for (let i = 0; i < styles.length; i++) {\n      const styleEl = document.createElement('style');\n      styleEl.textContent = styles[i];\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n\n  private nodeOrShadowRoot(node: any): any {\n    return node === this.hostEl ? this.shadowRoot : node;\n  }\n\n  destroy() {\n    this.sharedStylesHost.removeHost(this.shadowRoot);\n  }\n\n  appendChild(parent: any, newChild: any): void {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n  removeChild(parent: any, oldChild: any): void {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n  parentNode(node: any): any {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  supports(eventName: string): boolean {\n    return true;\n  }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    element.addEventListener(eventName, handler as EventListener, false);\n    return () => this.removeEventListener(element, eventName, handler as EventListener);\n  }\n\n  removeEventListener(target: any, eventName: string, callback: Function): void {\n    return target.removeEventListener(eventName, callback as EventListener);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {forwardRef, Inject, Injectable, Injector, Sanitizer, SecurityContext, ɵ_sanitizeHtml as _sanitizeHtml, ɵ_sanitizeUrl as _sanitizeUrl, ɵallowSanitizationBypassAndThrow as allowSanitizationBypassOrThrow, ɵbypassSanitizationTrustHtml as bypassSanitizationTrustHtml, ɵbypassSanitizationTrustResourceUrl as bypassSanitizationTrustResourceUrl, ɵbypassSanitizationTrustScript as bypassSanitizationTrustScript, ɵbypassSanitizationTrustStyle as bypassSanitizationTrustStyle, ɵbypassSanitizationTrustUrl as bypassSanitizationTrustUrl, ɵBypassType as BypassType, ɵgetSanitizationBypassType as getSanitizationBypassType, ɵunwrapSafeValue as unwrapSafeValue} from '@angular/core';\n\nexport {SecurityContext};\n\n\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useExisting: forwardRef(() => DomSanitizerImpl)})\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Sanitizes a value for use in the given SecurityContext.\n   *\n   * If value is trusted for the context, this method will unwrap the contained safe value and use\n   * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n   * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n   * is responsible to make sure that the value can definitely be safely used in the given context.\n   */\n  abstract sanitize(context: SecurityContext, value: SafeValue|string|null): string|null;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\nexport function domSanitizerImplFactory(injector: Injector) {\n  return new DomSanitizerImpl(injector.get(DOCUMENT));\n}\n\n@Injectable({providedIn: 'root', useFactory: domSanitizerImplFactory, deps: [Injector]})\nexport class DomSanitizerImpl extends DomSanitizer {\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n  }\n\n  sanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value as string;\n      case SecurityContext.HTML:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Html)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeHtml(this._doc, String(value)).toString();\n      case SecurityContext.STYLE:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Style)) {\n          return unwrapSafeValue(value);\n        }\n        return value as string;\n      case SecurityContext.SCRIPT:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Script)) {\n          return unwrapSafeValue(value);\n        }\n        throw new Error('unsafe value used in a script context');\n      case SecurityContext.URL:\n        const type = getSanitizationBypassType(value);\n        if (allowSanitizationBypassOrThrow(value, BypassType.Url)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.ResourceUrl)) {\n          return unwrapSafeValue(value);\n        }\n        throw new Error(\n            'unsafe value used in a resource URL context (see https://g.co/ng/security#xss)');\n      default:\n        throw new Error(`Unexpected SecurityContext ${ctx} (see https://g.co/ng/security#xss)`);\n    }\n  }\n\n  bypassSecurityTrustHtml(value: string): SafeHtml {\n    return bypassSanitizationTrustHtml(value);\n  }\n  bypassSecurityTrustStyle(value: string): SafeStyle {\n    return bypassSanitizationTrustStyle(value);\n  }\n  bypassSecurityTrustScript(value: string): SafeScript {\n    return bypassSanitizationTrustScript(value);\n  }\n  bypassSecurityTrustUrl(value: string): SafeUrl {\n    return bypassSanitizationTrustUrl(value);\n  }\n  bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return bypassSanitizationTrustResourceUrl(value);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n\nconst DOM_KEY_LOCATION_NUMPAD = 3;\n\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\nconst _keyMap: {[k: string]: string} = {\n  // The following values are here for cross-browser compatibility and to match the W3C standard\n  // cf https://www.w3.org/TR/DOM-Level-3-Events-key/\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n\n// There is a bug in Chrome for numeric keypad keys:\n// https://code.google.com/p/chromium/issues/detail?id=155654\n// 1, 2, 3 ... are reported as A, B, C ...\nconst _chromeNumKeyPadMap = {\n  'A': '1',\n  'B': '2',\n  'C': '3',\n  'D': '4',\n  'E': '5',\n  'F': '6',\n  'G': '7',\n  'H': '8',\n  'I': '9',\n  'J': '*',\n  'K': '+',\n  'M': '-',\n  'N': '.',\n  'O': '/',\n  '\\x60': '0',\n  '\\x90': 'NumLock'\n};\n\n\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n\n/**\n * @publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\n@Injectable()\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  /**\n   * Reports whether a named key event is supported.\n   * @param eventName The event name to query.\n   * @return True if the named key event is supported.\n   */\n  supports(eventName: string): boolean {\n    return KeyEventsPlugin.parseEventName(eventName) != null;\n  }\n\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n   */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName)!;\n\n    const outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n\n  static parseEventName(eventName: string): {fullKey: string, domEventName: string}|null {\n    const parts: string[] = eventName.toLowerCase().split('.');\n\n    const domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop()!);\n\n    let fullKey = '';\n    MODIFIER_KEYS.forEach(modifierName => {\n      const index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.\n    //       The code must remain in the `result['domEventName']` form.\n    // return {domEventName, fullKey};\n    const result: {fullKey: string, domEventName: string} = {} as any;\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n\n  static getEventFullKey(event: KeyboardEvent): string {\n    let fullKey = '';\n    let key = getEventKey(event);\n    key = key.toLowerCase();\n    if (key === ' ') {\n      key = 'space';  // for readability\n    } else if (key === '.') {\n      key = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName != key) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          fullKey += modifierName + '.';\n        }\n      }\n    });\n    fullKey += key;\n    return fullKey;\n  }\n\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n  static eventCallback(fullKey: any, handler: Function, zone: NgZone): Function {\n    return (event: any /** TODO #9100 */) => {\n      if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    // TODO: switch to a Map if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n      default:\n        return keyName;\n    }\n  }\n}\n\nfunction getEventKey(event: any): string {\n  let key = event.key;\n  if (key == null) {\n    key = event.keyIdentifier;\n    // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n    // Safari cf\n    // https://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n    if (key == null) {\n      return 'Unidentified';\n    }\n    if (key.startsWith('U+')) {\n      key = String.fromCharCode(parseInt(key.substring(2), 16));\n      if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n        // There is a bug in Chrome for numeric keypad keys:\n        // https://code.google.com/p/chromium/issues/detail?id=155654\n        // 1, 2, 3 ... are reported as A, B, C ...\n        key = (_chromeNumKeyPadMap as any)[key];\n      }\n    }\n  }\n\n  return _keyMap[key] || key;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule, DOCUMENT, ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID} from '@angular/common';\nimport {APP_ID, ApplicationModule, createPlatformFactory, ErrorHandler, Inject, ModuleWithProviders, NgModule, NgZone, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, platformCore, PlatformRef, RendererFactory2, Sanitizer, SkipSelf, StaticProvider, Testability, ɵConsole as Console, ɵINJECTOR_SCOPE as INJECTOR_SCOPE, ɵsetDocument} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {SERVER_TRANSITION_PROVIDERS, TRANSITION_ID} from './browser/server-transition';\nimport {BrowserGetTestability} from './browser/testability';\nimport {ELEMENT_PROBE_PROVIDERS} from './dom/debug/ng_probe';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {HAMMER_PROVIDERS} from './dom/events/hammer_gestures';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {DomSharedStylesHost, SharedStylesHost} from './dom/shared_styles_host';\nimport {DomSanitizer, DomSanitizerImpl} from './security/dom_sanitization_service';\n\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n  BrowserGetTestability.init();\n}\n\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n\nexport function _document(): any {\n  // Tell ivy about the global document\n  ɵsetDocument(document);\n  return document;\n}\n\nexport const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n];\n\nconst BROWSER_SANITIZATION_PROVIDERS__PRE_R3__: StaticProvider[] = [\n  {provide: Sanitizer, useExisting: DomSanitizer},\n  {provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [DOCUMENT]},\n];\n\nexport const BROWSER_SANITIZATION_PROVIDERS__POST_R3__ = [];\n\n/**\n * @security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](https://g.co/ng/security).\n * @publicApi\n */\nexport const BROWSER_SANITIZATION_PROVIDERS = BROWSER_SANITIZATION_PROVIDERS__PRE_R3__;\n\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\nexport const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef =\n    createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n\nexport const BROWSER_MODULE_PROVIDERS: StaticProvider[] = [\n  BROWSER_SANITIZATION_PROVIDERS,\n  {provide: INJECTOR_SCOPE, useValue: 'root'},\n  {provide: ErrorHandler, useFactory: errorHandler, deps: []},\n  {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: DomEventsPlugin,\n    multi: true,\n    deps: [DOCUMENT, NgZone, PLATFORM_ID]\n  },\n  {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT]},\n  HAMMER_PROVIDERS,\n  {\n    provide: DomRendererFactory2,\n    useClass: DomRendererFactory2,\n    deps: [EventManager, DomSharedStylesHost, APP_ID]\n  },\n  {provide: RendererFactory2, useExisting: DomRendererFactory2},\n  {provide: SharedStylesHost, useExisting: DomSharedStylesHost},\n  {provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [DOCUMENT]},\n  {provide: Testability, useClass: Testability, deps: [NgZone]},\n  {provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, NgZone]},\n  ELEMENT_PROBE_PROVIDERS,\n];\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\n@NgModule({providers: BROWSER_MODULE_PROVIDERS, exports: [CommonModule, ApplicationModule]})\nexport class BrowserModule {\n  constructor(@Optional() @SkipSelf() @Inject(BrowserModule) parentModule: BrowserModule|null) {\n    if (parentModule) {\n      throw new Error(\n          `BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);\n    }\n  }\n\n  /**\n   * Configures a browser-based app to transition from a server-rendered app, if\n   * one is present on the page.\n   *\n   * @param params An object containing an identifier for the app to transition.\n   * The ID must match between the client and server versions of the app.\n   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n   */\n  static withServerTransition(params: {appId: string}): ModuleWithProviders<BrowserModule> {\n    return {\n      ngModule: BrowserModule,\n      providers: [\n        {provide: APP_ID, useValue: params.appId},\n        {provide: TRANSITION_ID, useExisting: APP_ID},\n        SERVER_TRANSITION_PROVIDERS,\n      ],\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, NgModule, Optional, Provider, ɵConsole as Console} from '@angular/core';\n\nimport {EVENT_MANAGER_PLUGINS, EventManagerPlugin} from './event_manager';\n\n\n\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n  'doubletap': true\n};\n\n/**\n * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * @ngModule HammerModule\n * @publicApi\n */\nexport const HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>('HammerGestureConfig');\n\n\n/**\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\n *\n * @publicApi\n */\nexport type HammerLoader = () => Promise<void>;\n\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nexport const HAMMER_LOADER = new InjectionToken<HammerLoader>('HammerLoader');\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n  destroy?(): void;\n}\n\n/**\n * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\n@Injectable()\nexport class HammerGestureConfig {\n  /**\n   * A set of supported event names for gestures to be used in Angular.\n   * Angular supports all built-in recognizers, as listed in\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  events: string[] = [];\n\n  /**\n   * Maps gesture event names to a set of configuration options\n   * that specify overrides to the default values for specific properties.\n   *\n   * The key is a supported event name to be configured,\n   * and the options object contains a set of properties, with override values\n   * to be applied to the named recognizer event.\n   * For example, to disable recognition of the rotate event, specify\n   *  `{\"rotate\": {\"enable\": false}}`.\n   *\n   * Properties that are not present take the HammerJS default values.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   *\n   */\n  overrides: {[key: string]: Object} = {};\n\n  /**\n   * Properties whose default values can be overridden for a given event.\n   * Different sets of properties apply to different events.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  options?: {\n    cssProps?: any;\n    domEvents?: boolean;\n    enable?: boolean | ((manager: any) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: any;\n    inputTarget?: EventTarget;\n  };\n\n  /**\n   * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n   * and attaches it to a given HTML element.\n   * @param element The element that will recognize gestures.\n   * @returns A HammerJS event-manager object.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new Hammer!(element, this.options);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\n}\n\n/**\n * Event plugin that adds Hammer support to an application.\n *\n * @ngModule HammerModule\n */\n@Injectable()\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n  private _loaderPromise: Promise<void>|null = null;\n\n  constructor(\n      @Inject(DOCUMENT) doc: any,\n      @Inject(HAMMER_GESTURE_CONFIG) private _config: HammerGestureConfig, private console: Console,\n      @Optional() @Inject(HAMMER_LOADER) private loader?: HammerLoader|null) {\n    super(doc);\n  }\n\n  supports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!(window as any).Hammer && !this.loader) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        this.console.warn(\n            `The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n            `loaded and no custom loader has been specified.`);\n      }\n      return false;\n    }\n\n    return true;\n  }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    // If Hammer is not present but a loader is specified, we defer adding the event listener\n    // until Hammer is loaded.\n    if (!(window as any).Hammer && this.loader) {\n      this._loaderPromise = this._loaderPromise || this.loader();\n      // This `addEventListener` method returns a function to remove the added listener.\n      // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n      // than remove anything.\n      let cancelRegistration = false;\n      let deregister: Function = () => {\n        cancelRegistration = true;\n      };\n\n      this._loaderPromise\n          .then(() => {\n            // If Hammer isn't actually loaded when the custom loader resolves, give up.\n            if (!(window as any).Hammer) {\n              if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                this.console.warn(\n                    `The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n              }\n              deregister = () => {};\n              return;\n            }\n\n            if (!cancelRegistration) {\n              // Now that Hammer is loaded and the listener is being loaded for real,\n              // the deregistration function changes from canceling registration to removal.\n              deregister = this.addEventListener(element, eventName, handler);\n            }\n          })\n          .catch(() => {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n              this.console.warn(\n                  `The \"${eventName}\" event cannot be bound because the custom ` +\n                  `Hammer.JS loader failed.`);\n            }\n            deregister = () => {};\n          });\n\n      // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n      // can change the behavior of `deregister` once the listener is added. Using a closure in\n      // this way allows us to avoid any additional data structures to track listener removal.\n      return () => {\n        deregister();\n      };\n    }\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const mc = this._config.buildHammer(element);\n      const callback = function(eventObj: HammerInput) {\n        zone.runGuarded(function() {\n          handler(eventObj);\n        });\n      };\n      mc.on(eventName, callback);\n      return () => {\n        mc.off(eventName, callback);\n        // destroy mc to prevent memory leak\n        if (typeof mc.destroy === 'function') {\n          mc.destroy();\n        }\n      };\n    });\n  }\n\n  isCustomEvent(eventName: string): boolean {\n    return this._config.events.indexOf(eventName) > -1;\n  }\n}\n\n/**\n * In Ivy, support for Hammer gestures is optional, so applications must\n * import the `HammerModule` at root to turn on support. This means that\n * Hammer-specific code can be tree-shaken away if not needed.\n */\nexport const HAMMER_PROVIDERS__POST_R3__ = [];\n\n/**\n * In View Engine, support for Hammer gestures is built-in by default.\n */\nexport const HAMMER_PROVIDERS__PRE_R3__: Provider[] = [\n  {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: HammerGesturesPlugin,\n    multi: true,\n    deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]\n  },\n  {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: []},\n];\n\nexport const HAMMER_PROVIDERS = HAMMER_PROVIDERS__PRE_R3__;\n\n/**\n * Adds support for HammerJS.\n *\n * Import this module at the root of your application so that Angular can work with\n * HammerJS to detect gesture events.\n *\n * Note that applications still need to include the HammerJS script itself. This module\n * simply sets up the coordination layer between HammerJS and Angular's EventManager.\n *\n * @publicApi\n */\n@NgModule({providers: HAMMER_PROVIDERS__PRE_R3__})\nexport class HammerModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, ɵɵinject} from '@angular/core';\n\n\n/**\n * Factory to create Title service.\n */\nexport function createTitle() {\n  return new Title(ɵɵinject(DOCUMENT));\n}\n\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: createTitle, deps: []})\nexport class Title {\n  constructor(@Inject(DOCUMENT) private _doc: any) {}\n  /**\n   * Get the title of the current HTML document.\n   */\n  getTitle(): string {\n    return this._doc.title;\n  }\n\n  /**\n   * Set the title of the current HTML document.\n   * @param newTitle\n   */\n  setTitle(newTitle: string) {\n    this._doc.title = newTitle || '';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst win = typeof window !== 'undefined' && window || <any>{};\nexport {win as window};\n","/*****************************************************************************************************************************************************\n * Copyright 2021 Evan H. Harding. All Rights Reserved.\n *\n * This file handles navigation for the core application. The URLs defined here are the parent directories for the entire SPA. It enables navigation\n * from one view to the next as users perform application tasks. A change in the browser URL indicates an instruction to change the view to the\n * corresponding component.\n *\n * @see https://angular.io/guide/router Angular Router Guide\n *\n * @remarks The order of routes is important because the Angular Router uses a first-match wins strategy when matching routes, so more specific\n * routes should be placed above less specific routes. To render the routed view corresponding to a browser URL, use the router outlet HTML like so:\n * ```html\n *    <router-outlet></router-outlet>\n * ```\n ****************************************************************************************************************************************************/\n\nimport { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\n\nimport { AboutModule } from '@about/about.module';\n\nconst ROUTES : Routes = [\n  { path : 'FanFiction.com', pathMatch : 'full', redirectTo : 'about' },\n  { path : '', pathMatch : 'full', redirectTo : 'about' },\n  { path : 'about', loadChildren : async() : Promise<AboutModule> => await import('@about/about.module').then((aboutModule) => aboutModule.AboutModule) }\n];\n\n@NgModule({\n  exports : [RouterModule],\n  imports : [RouterModule.forRoot(ROUTES)]\n})\nexport class AppRoutingModule { }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ntype ModifierKey = 'altKey' | 'shiftKey' | 'ctrlKey' | 'metaKey';\n\n/**\n * Checks whether a modifier key is pressed.\n * @param event Event to be checked.\n */\nexport function hasModifierKey(event: KeyboardEvent, ...modifiers: ModifierKey[]): boolean {\n  if (modifiers.length) {\n    return modifiers.some(modifier => event[modifier]);\n  }\n\n  return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;\n}\n","import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n    }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    clearInterval(id);\n    return undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a `scheduler`. An action is typically\n * created from within a {@link SchedulerLike} and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent {@link SchedulerLike} for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an `Action`.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}\n */\nexport class Scheduler implements SchedulerLike {\n\n  /**\n   * Note: the extra arrow function wrapper is to make testing by overriding\n   * Date.now easier.\n   * @nocollapse\n   */\n  public static now: () => number = () => Date.now();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport class AsyncScheduler extends Scheduler {\n  public static delegate?: Scheduler;\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @deprecated internal use only\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @deprecated internal use only\n   */\n  public scheduled: any = undefined;\n\n  constructor(SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    super(SchedulerAction, () => {\n      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n        return AsyncScheduler.delegate.now();\n      } else {\n        return now();\n      }\n    });\n  }\n\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n      return AsyncScheduler.delegate.schedule(work, delay, state);\n    } else {\n      return super.schedule(work, delay, state);\n    }\n  }\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asapScheduler} scheduler.\n *\n * ## Examples\n * Use async scheduler to delay task\n * ```ts\n * import { asyncScheduler } from 'rxjs';\n *\n * const task = () => console.log('it works!');\n *\n * asyncScheduler.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n * ```\n *\n * Use async scheduler to repeat task in intervals\n * ```ts\n * import { asyncScheduler } from 'rxjs';\n *\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * asyncScheduler.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n * ```\n */\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\n\n/**\n * @deprecated renamed. Use {@link asyncScheduler}\n */\nexport const async = asyncScheduler;","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * ![](debounceTime.png)\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link SchedulerLike} for\n * managing timers.\n *\n * ## Example\n * Emit the most recent click after a burst of clicks\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { debounceTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(debounceTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      const { lastValue } = this;\n      // This must be done *before* passing the value\n      // along to the destination because it's possible for\n      // the value to synchronously re-enter this operator\n      // recursively when scheduled with things like\n      // VirtualScheduler/TestScheduler.\n      this.lastValue = null;\n      this.hasValue = false;\n      this.destination.next(lastValue);\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {isPlatformBrowser} from '@angular/common';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  hasV8BreakIterator = (typeof Intl !== 'undefined' && (Intl as any).v8BreakIterator);\n} catch {\n  hasV8BreakIterator = false;\n}\n\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n@Injectable({providedIn: 'root'})\nexport class Platform {\n  // We want to use the Angular platform check because if the Document is shimmed\n  // without the navigator, the following checks will fail. This is preferred because\n  // sometimes the Document may be shimmed without the user's knowledge or intention\n  /** Whether the Angular application is being rendered in the browser. */\n  isBrowser: boolean = this._platformId ?\n      isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n\n  /** Whether the current browser is Microsoft Edge. */\n  EDGE: boolean = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n\n  /** Whether the current rendering engine is Microsoft Trident. */\n  TRIDENT: boolean = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n  /** Whether the current rendering engine is Blink. */\n  BLINK: boolean = this.isBrowser && (!!((window as any).chrome || hasV8BreakIterator) &&\n      typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\n\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n  /** Whether the current rendering engine is WebKit. */\n  WEBKIT: boolean = this.isBrowser &&\n      /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n\n  /** Whether the current platform is Apple iOS. */\n  IOS: boolean = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n      !('MSStream' in window);\n\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  /** Whether the current browser is Firefox. */\n  FIREFOX: boolean = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n  /** Whether the current platform is Android. */\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID: boolean = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n\n  // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n  // Safari browser should also use Webkit as its layout engine.\n  /** Whether the current browser is Safari. */\n  SAFARI: boolean = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n\n  constructor(@Inject(PLATFORM_ID) private _platformId: Object) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type describing the allowed values for a boolean input.\n * @docs-private\n */\nexport type BooleanInput = string | boolean | null | undefined;\n\n/** Coerces a data-bound value (typically a string) to a boolean. */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Wraps the provided value in an array, unless the provided value is an array. */\nexport function coerceArray<T>(value: T | T[]): T[];\nexport function coerceArray<T>(value: T | readonly T[]): readonly T[];\nexport function coerceArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Coerces a value to a CSS pixel value. */\nexport function coerceCssPixelValue(value: any): string {\n  if (value == null) {\n    return '';\n  }\n\n  return typeof value === 'string' ? value : `${value}px`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef} from '@angular/core';\n\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nexport function coerceElement<T>(elementOrRef: ElementRef<T> | T): T {\n  return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents: boolean;\n\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nexport function supportsPassiveEventListeners(): boolean {\n  if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n    try {\n      window.addEventListener('test', null!, Object.defineProperty({}, 'passive', {\n        get: () => supportsPassiveEvents = true\n      }));\n    } finally {\n      supportsPassiveEvents = supportsPassiveEvents || false;\n    }\n  }\n\n  return supportsPassiveEvents;\n}\n\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nexport function normalizePassiveListenerOptions(options: AddEventListenerOptions):\n  AddEventListenerOptions | boolean {\n  return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The possible ways the browser may handle the horizontal scroll axis in RTL languages. */\nexport const enum RtlScrollAxisType {\n  /**\n   * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\n   * all the way right.\n   */\n  NORMAL,\n  /**\n   * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  NEGATED,\n  /**\n   * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  INVERTED\n}\n\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType: RtlScrollAxisType|undefined;\n\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported: boolean|undefined;\n\n/** Check whether the browser supports scroll behaviors. */\nexport function supportsScrollBehavior(): boolean {\n  if (scrollBehaviorSupported == null) {\n    // If we're not in the browser, it can't be supported.\n    if (typeof document !== 'object' || !document) {\n      scrollBehaviorSupported = false;\n      return scrollBehaviorSupported;\n    }\n\n    // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n    if ('scrollBehavior' in document.documentElement!.style) {\n      scrollBehaviorSupported = true;\n    } else {\n      // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n      // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n      const scrollToFunction: Function|undefined = Element.prototype.scrollTo;\n\n      if (scrollToFunction) {\n        // We can detect if the function has been polyfilled by calling `toString` on it. Native\n        // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n        // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n        // polyfilled functions as supporting scroll behavior.\n        scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n      } else {\n        scrollBehaviorSupported = false;\n      }\n    }\n  }\n\n  return scrollBehaviorSupported;\n}\n\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nexport function getRtlScrollAxisType(): RtlScrollAxisType {\n  // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n  if (typeof document !== 'object' || !document) {\n    return RtlScrollAxisType.NORMAL;\n  }\n\n  if (rtlScrollAxisType == null) {\n    // Create a 1px wide scrolling container and a 2px wide content element.\n    const scrollContainer = document.createElement('div');\n    const containerStyle = scrollContainer.style;\n    scrollContainer.dir = 'rtl';\n    containerStyle.width = '1px';\n    containerStyle.overflow = 'auto';\n    containerStyle.visibility = 'hidden';\n    containerStyle.pointerEvents = 'none';\n    containerStyle.position = 'absolute';\n\n    const content = document.createElement('div');\n    const contentStyle = content.style;\n    contentStyle.width = '2px';\n    contentStyle.height = '1px';\n\n    scrollContainer.appendChild(content);\n    document.body.appendChild(scrollContainer);\n\n    rtlScrollAxisType = RtlScrollAxisType.NORMAL;\n\n    // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n    // dealing with one of the other two types of browsers.\n    if (scrollContainer.scrollLeft === 0) {\n      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n      // return 0 when we read it again.\n      scrollContainer.scrollLeft = 1;\n      rtlScrollAxisType =\n          scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;\n    }\n\n    scrollContainer.parentNode!.removeChild(scrollContainer);\n  }\n  return rtlScrollAxisType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nlet shadowDomIsSupported: boolean;\n\n/** Checks whether the user's browser support Shadow DOM. */\nexport function _supportsShadowDom(): boolean {\n  if (shadowDomIsSupported == null) {\n    const head = typeof document !== 'undefined' ? document.head : null;\n    shadowDomIsSupported = !!(head && ((head as any).createShadowRoot || head.attachShadow));\n  }\n\n  return shadowDomIsSupported;\n}\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement): ShadowRoot | null {\n  if (_supportsShadowDom()) {\n    const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n    // Note that this should be caught by `_supportsShadowDom`, but some\n    // teams have been able to hit this code path on unsupported browsers.\n    if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n      return rootNode;\n    }\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\n\n@NgModule({})\nexport class PlatformModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  coerceElement,\n  BooleanInput,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MutationObserverFactory {\n  create(callback: MutationCallback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\n\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({providedIn: 'root'})\nexport class ContentObserver implements OnDestroy {\n  /** Keeps track of the existing MutationObservers so they can be reused. */\n  private _observedElements = new Map<Element, {\n    observer: MutationObserver | null,\n    stream: Subject<MutationRecord[]>,\n    count: number\n  }>();\n\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: Element): Observable<MutationRecord[]>;\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<MutationRecord[]>) => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject<MutationRecord[]>();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n      this._observedElements.set(element, {observer, stream, count: 1});\n    } else {\n      this._observedElements.get(element)!.count++;\n    }\n    return this._observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  private _unobserveElement(element: Element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element)!.count--;\n      if (!this._observedElements.get(element)!.count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  private _cleanupObserver(element: Element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\n\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n@Directive({\n  selector: '[cdkObserveContent]',\n  exportAs: 'cdkObserveContent',\n})\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n  /** Event emitted for each change in the element's content. */\n  @Output('cdkObserveContent') event = new EventEmitter<MutationRecord[]>();\n\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  @Input('cdkObserveContentDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  private _disabled = false;\n\n  /** Debounce interval for emitting the changes. */\n  @Input()\n  get debounce(): number { return this._debounce; }\n  set debounce(value: number) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  private _debounce: number;\n\n  private _currentSubscription: Subscription | null = null;\n\n  constructor(private _contentObserver: ContentObserver,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone) {}\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  private _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription =\n          (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n\n  private _unsubscribe() {\n    this._currentSubscription?.unsubscribe();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_debounce: NumberInput;\n}\n\n\n@NgModule({\n  exports: [CdkObserveContent],\n  declarations: [CdkObserveContent],\n  providers: [MutationObserverFactory]\n})\nexport class ObserversModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IDs are delimited by an empty space, as per the spec. */\nconst ID_DELIMITER = ' ';\n\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function addAriaReferencedId(el: Element, attr: string, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  if (ids.some(existingId => existingId.trim() == id.trim())) { return; }\n  ids.push(id.trim());\n\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function removeAriaReferencedId(el: Element, attr: string, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  const filteredIds = ids.filter(val => val != id.trim());\n\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId} from './aria-reference';\n\n\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the same message and the reference to the message element used for the `aria-describedby`.\n */\nexport interface RegisteredMessage {\n  /** The element containing the message. */\n  messageElement: Element;\n\n  /** The number of elements that reference this message element via `aria-describedby`. */\n  referenceCount: number;\n}\n\n/** ID used for the body container where all messages are appended. */\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n\n/** ID prefix used for each created message element. */\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n\n/** Attribute given to each host element that is described by a message element. */\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n\n/** Global map of all registered message elements that have been placed into the document. */\nconst messageRegistry = new Map<string|Element, RegisteredMessage>();\n\n/** Container for all registered messages. */\nlet messagesContainer: HTMLElement | null = null;\n\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\n@Injectable({providedIn: 'root'})\nexport class AriaDescriber implements OnDestroy {\n  private _document: Document;\n\n  constructor(\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /**\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\n   * the message. If the same message has already been registered, then it will reuse the created\n   * message element.\n   */\n  describe(hostElement: Element, message: string, role?: string): void;\n\n  /**\n   * Adds to the host element an aria-describedby reference to an already-existing message element.\n   */\n  describe(hostElement: Element, message: HTMLElement): void;\n\n  describe(hostElement: Element, message: string|HTMLElement, role?: string): void {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    const key = getKey(message, role);\n\n    if (typeof message !== 'string') {\n      // We need to ensure that the element has an ID.\n      setMessageId(message);\n      messageRegistry.set(key, {messageElement: message, referenceCount: 0});\n    } else if (!messageRegistry.has(key)) {\n      this._createMessageElement(message, role);\n    }\n\n    if (!this._isElementDescribedByMessage(hostElement, key)) {\n      this._addMessageReference(hostElement, key);\n    }\n  }\n\n  /** Removes the host element's aria-describedby reference to the message. */\n  removeDescription(hostElement: Element, message: string, role?: string): void;\n\n  /** Removes the host element's aria-describedby reference to the message element. */\n  removeDescription(hostElement: Element, message: HTMLElement): void;\n\n  removeDescription(hostElement: Element, message: string|HTMLElement, role?: string): void {\n    if (!message || !this._isElementNode(hostElement)) {\n      return;\n    }\n\n    const key = getKey(message, role);\n\n    if (this._isElementDescribedByMessage(hostElement, key)) {\n      this._removeMessageReference(hostElement, key);\n    }\n\n    // If the message is a string, it means that it's one that we created for the\n    // consumer so we can remove it safely, otherwise we should leave it in place.\n    if (typeof message === 'string') {\n      const registeredMessage = messageRegistry.get(key);\n      if (registeredMessage && registeredMessage.referenceCount === 0) {\n        this._deleteMessageElement(key);\n      }\n    }\n\n    if (messagesContainer && messagesContainer.childNodes.length === 0) {\n      this._deleteMessagesContainer();\n    }\n  }\n\n  /** Unregisters all created message elements and removes the message container. */\n  ngOnDestroy() {\n    const describedElements =\n        this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    if (messagesContainer) {\n      this._deleteMessagesContainer();\n    }\n\n    messageRegistry.clear();\n  }\n\n  /**\n   * Creates a new element in the visually hidden message container element with the message\n   * as its content and adds it to the message registry.\n   */\n  private _createMessageElement(message: string, role?: string) {\n    const messageElement = this._document.createElement('div');\n    setMessageId(messageElement);\n    messageElement.textContent = message;\n\n    if (role) {\n      messageElement.setAttribute('role', role);\n    }\n\n    this._createMessagesContainer();\n    messagesContainer!.appendChild(messageElement);\n    messageRegistry.set(getKey(message, role), {messageElement, referenceCount: 0});\n  }\n\n  /** Deletes the message element from the global messages container. */\n  private _deleteMessageElement(key: string|Element) {\n    const registeredMessage = messageRegistry.get(key);\n    const messageElement = registeredMessage && registeredMessage.messageElement;\n    if (messagesContainer && messageElement) {\n      messagesContainer.removeChild(messageElement);\n    }\n    messageRegistry.delete(key);\n  }\n\n  /** Creates the global container for all aria-describedby messages. */\n  private _createMessagesContainer() {\n    if (!messagesContainer) {\n      const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n\n      // When going from the server to the client, we may end up in a situation where there's\n      // already a container on the page, but we don't have a reference to it. Clear the\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\n      // container, should be slightly faster.\n      if (preExistingContainer && preExistingContainer.parentNode) {\n        preExistingContainer.parentNode.removeChild(preExistingContainer);\n      }\n\n      messagesContainer = this._document.createElement('div');\n      messagesContainer.id = MESSAGES_CONTAINER_ID;\n      // We add `visibility: hidden` in order to prevent text in this container from\n      // being searchable by the browser's Ctrl + F functionality.\n      // Screen-readers will still read the description for elements with aria-describedby even\n      // when the description element is not visible.\n      messagesContainer.style.visibility = 'hidden';\n      // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n      // the description element doesn't impact page layout.\n      messagesContainer.classList.add('cdk-visually-hidden');\n\n      this._document.body.appendChild(messagesContainer);\n    }\n  }\n\n  /** Deletes the global messages container. */\n  private _deleteMessagesContainer() {\n    if (messagesContainer && messagesContainer.parentNode) {\n      messagesContainer.parentNode.removeChild(messagesContainer);\n      messagesContainer = null;\n    }\n  }\n\n  /** Removes all cdk-describedby messages that are hosted through the element. */\n  private _removeCdkDescribedByReferenceIds(element: Element) {\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n        .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n\n  /**\n   * Adds a message reference to the element using aria-describedby and increments the registered\n   * message's reference count.\n   */\n  private _addMessageReference(element: Element, key: string|Element) {\n    const registeredMessage = messageRegistry.get(key)!;\n\n    // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n    registeredMessage.referenceCount++;\n  }\n\n  /**\n   * Removes a message reference from the element using aria-describedby\n   * and decrements the registered message's reference count.\n   */\n  private _removeMessageReference(element: Element, key: string|Element) {\n    const registeredMessage = messageRegistry.get(key)!;\n    registeredMessage.referenceCount--;\n\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n\n  /** Returns true if the element has been described by the provided message ID. */\n  private _isElementDescribedByMessage(element: Element, key: string|Element): boolean {\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    const registeredMessage = messageRegistry.get(key);\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n\n  /** Determines whether a message can be described on a particular element. */\n  private _canBeDescribed(element: Element, message: string|HTMLElement|void): boolean {\n    if (!this._isElementNode(element)) {\n      return false;\n    }\n\n    if (message && typeof message === 'object') {\n      // We'd have to make some assumptions about the description element's text, if the consumer\n      // passed in an element. Assume that if an element is passed in, the consumer has verified\n      // that it can be used as a description.\n      return true;\n    }\n\n    const trimmedMessage = message == null ? '' : `${message}`.trim();\n    const ariaLabel = element.getAttribute('aria-label');\n\n    // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n    // element, because screen readers will end up reading out the same text twice in a row.\n    return trimmedMessage ? (!ariaLabel || ariaLabel.trim() !== trimmedMessage) : false;\n  }\n\n  /** Checks whether a node is an Element node. */\n  private _isElementNode(element: Node): element is Element {\n    return element.nodeType === this._document.ELEMENT_NODE;\n  }\n}\n\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message: string|Element, role?: string): string|Element {\n  return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element: HTMLElement) {\n  if (!element.id) {\n    element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\nimport {FocusOrigin} from '../focus-monitor/focus-monitor';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply its label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  /** Focuses the `FocusableOption`. */\n  focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n  private _origin: FocusOrigin = 'program';\n\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin: FocusOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the specified\n   * index and focuses the newly active item.\n   * @param index Index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item that is specified and focuses it.\n   * @param item Item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  TAB,\n  A,\n  Z,\n  ZERO,\n  NINE,\n  hasModifierKey,\n  HOME,\n  END,\n} from '@angular/cdk/keycodes';\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\n\n/** This interface is for items that can be passed to a ListKeyManager. */\nexport interface ListKeyManagerOption {\n  /** Whether the option is disabled. */\n  disabled?: boolean;\n\n  /** Gets the label for this option. */\n  getLabel?(): string;\n}\n\n/** Modifier keys handled by the ListKeyManager. */\nexport type ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n  private _activeItemIndex = -1;\n  private _activeItem: T | null = null;\n  private _wrap = false;\n  private _letterKeyStream = new Subject<string>();\n  private _typeaheadSubscription = Subscription.EMPTY;\n  private _vertical = true;\n  private _horizontal: 'ltr' | 'rtl' | null;\n  private _allowedModifierKeys: ListKeyManagerModifierKey[] = [];\n  private _homeAndEnd = false;\n\n  /**\n   * Predicate function that can be used to check whether an item should be skipped\n   * by the key manager. By default, disabled items are skipped.\n   */\n  private _skipPredicateFn = (item: T) => item.disabled;\n\n  // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n  private _pressedLetters: string[] = [];\n\n  constructor(private _items: QueryList<T> | T[]) {\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe((newItems: QueryList<T>) => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Stream that emits any time the TAB key is pressed, so components can react\n   * when focus is shifted off of the list.\n   */\n  tabOut: Subject<void> = new Subject<void>();\n\n  /** Stream that emits whenever the active item of the list manager changes. */\n  change = new Subject<number>();\n\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate: (item: T) => boolean): this {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n  withWrap(shouldWrap = true): this {\n    this._wrap = shouldWrap;\n    return this;\n  }\n\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled: boolean = true): this {\n    this._vertical = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n    this._horizontal = direction;\n    return this;\n  }\n\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n  withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval: number = 200): this {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && (this._items.length &&\n        this._items.some(item => typeof item.getLabel !== 'function'))) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe();\n\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream.pipe(\n      tap(letter => this._pressedLetters.push(letter)),\n      debounceTime(debounceInterval),\n      filter(() => this._pressedLetters.length > 0),\n      map(() => this._pressedLetters.join(''))\n    ).subscribe(inputString => {\n      const items = this._getItemsArray();\n\n      // Start at 1 because we want to start searching at the item immediately\n      // following the current active item.\n      for (let i = 1; i < items.length + 1; i++) {\n        const index = (this._activeItemIndex + i) % items.length;\n        const item = items[index];\n\n        if (!this._skipPredicateFn(item) &&\n            item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0) {\n\n          this.setActiveItem(index);\n          break;\n        }\n      }\n\n      this._pressedLetters = [];\n    });\n\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n  withHomeAndEnd(enabled: boolean = true): this {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the index specified.\n   * @param index The index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the specified item.\n   * @param item The item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    const previousActiveItem = this._activeItem;\n\n    this.updateActiveItem(item);\n\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const modifiers: ListKeyManagerModifierKey[] = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      default:\n      if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        }\n\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n\n  /** Index of the currently active item. */\n  get activeItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The active item. */\n  get activeItem(): T | null {\n    return this._activeItem;\n  }\n\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping(): boolean {\n    return this._pressedLetters.length > 0;\n  }\n\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive(): void {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive(): void {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n                                            : this._setActiveItemByDelta(-1);\n  }\n\n  /**\n   * Allows setting the active without any other effects.\n   * @param index Index of the item to be set as active.\n   */\n  updateActiveItem(index: number): void;\n\n  /**\n   * Allows setting the active item without any other effects.\n   * @param item Item to be set as active.\n   */\n  updateActiveItem(item: T): void;\n\n  updateActiveItem(item: any): void {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index];\n\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  private _setActiveItemByDelta(delta: -1 | 1): void {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  private _setActiveInWrapMode(delta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  private _setActiveInDefaultMode(delta: -1 | 1): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  private _setActiveItemByIndex(index: number, fallbackDelta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n\n  /** Returns the items as an array. */\n  private _getItemsArray(): T[] {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const MAC_ENTER = 3;\nexport const BACKSPACE = 8;\nexport const TAB = 9;\nexport const NUM_CENTER = 12;\nexport const ENTER = 13;\nexport const SHIFT = 16;\nexport const CONTROL = 17;\nexport const ALT = 18;\nexport const PAUSE = 19;\nexport const CAPS_LOCK = 20;\nexport const ESCAPE = 27;\nexport const SPACE = 32;\nexport const PAGE_UP = 33;\nexport const PAGE_DOWN = 34;\nexport const END = 35;\nexport const HOME = 36;\nexport const LEFT_ARROW = 37;\nexport const UP_ARROW = 38;\nexport const RIGHT_ARROW = 39;\nexport const DOWN_ARROW = 40;\nexport const PLUS_SIGN = 43;\nexport const PRINT_SCREEN = 44;\nexport const INSERT = 45;\nexport const DELETE = 46;\nexport const ZERO = 48;\nexport const ONE = 49;\nexport const TWO = 50;\nexport const THREE = 51;\nexport const FOUR = 52;\nexport const FIVE = 53;\nexport const SIX = 54;\nexport const SEVEN = 55;\nexport const EIGHT = 56;\nexport const NINE = 57;\nexport const FF_SEMICOLON = 59;     // Firefox (Gecko) fires this for semicolon instead of 186\nexport const FF_EQUALS = 61;        // Firefox (Gecko) fires this for equals instead of 187\nexport const QUESTION_MARK = 63;\nexport const AT_SIGN = 64;\nexport const A = 65;\nexport const B = 66;\nexport const C = 67;\nexport const D = 68;\nexport const E = 69;\nexport const F = 70;\nexport const G = 71;\nexport const H = 72;\nexport const I = 73;\nexport const J = 74;\nexport const K = 75;\nexport const L = 76;\nexport const M = 77;\nexport const N = 78;\nexport const O = 79;\nexport const P = 80;\nexport const Q = 81;\nexport const R = 82;\nexport const S = 83;\nexport const T = 84;\nexport const U = 85;\nexport const V = 86;\nexport const W = 87;\nexport const X = 88;\nexport const Y = 89;\nexport const Z = 90;\nexport const META = 91;             // WIN_KEY_LEFT\nexport const MAC_WK_CMD_LEFT = 91;\nexport const MAC_WK_CMD_RIGHT = 93;\nexport const CONTEXT_MENU = 93;\nexport const NUMPAD_ZERO = 96;\nexport const NUMPAD_ONE = 97;\nexport const NUMPAD_TWO = 98;\nexport const NUMPAD_THREE = 99;\nexport const NUMPAD_FOUR = 100;\nexport const NUMPAD_FIVE = 101;\nexport const NUMPAD_SIX = 102;\nexport const NUMPAD_SEVEN = 103;\nexport const NUMPAD_EIGHT = 104;\nexport const NUMPAD_NINE = 105;\nexport const NUMPAD_MULTIPLY = 106;\nexport const NUMPAD_PLUS = 107;\nexport const NUMPAD_MINUS = 109;\nexport const NUMPAD_PERIOD = 110;\nexport const NUMPAD_DIVIDE = 111;\nexport const F1 = 112;\nexport const F2 = 113;\nexport const F3 = 114;\nexport const F4 = 115;\nexport const F5 = 116;\nexport const F6 = 117;\nexport const F7 = 118;\nexport const F8 = 119;\nexport const F9 = 120;\nexport const F10 = 121;\nexport const F11 = 122;\nexport const F12 = 123;\nexport const NUM_LOCK = 144;\nexport const SCROLL_LOCK = 145;\nexport const FIRST_MEDIA = 166;\nexport const FF_MINUS = 173;\nexport const MUTE = 173;            // Firefox (Gecko) fires 181 for MUTE\nexport const VOLUME_DOWN = 174;     // Firefox (Gecko) fires 182 for VOLUME_DOWN\nexport const VOLUME_UP = 175;       // Firefox (Gecko) fires 183 for VOLUME_UP\nexport const FF_MUTE = 181;\nexport const FF_VOLUME_DOWN = 182;\nexport const LAST_MEDIA = 183;\nexport const FF_VOLUME_UP = 183;\nexport const SEMICOLON = 186;       // Firefox (Gecko) fires 59 for SEMICOLON\nexport const EQUALS = 187;          // Firefox (Gecko) fires 61 for EQUALS\nexport const COMMA = 188;\nexport const DASH = 189;            // Firefox (Gecko) fires 173 for DASH/MINUS\nexport const SLASH = 191;\nexport const APOSTROPHE = 192;\nexport const TILDE = 192;\nexport const OPEN_SQUARE_BRACKET = 219;\nexport const BACKSLASH = 220;\nexport const CLOSE_SQUARE_BRACKET = 221;\nexport const SINGLE_QUOTE = 222;\nexport const MAC_META = 224;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n */\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\n  return event.buttons === 0;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */\nexport function closest(element: EventTarget|Element|null|undefined, selector: string):\n    Element|null {\n  if (!(element instanceof Node)) { return null; }\n\n  let curr: Node|null = element;\n  while (curr != null && !(curr instanceof Element)) {\n    curr = curr.parentNode;\n  }\n\n  return curr && (hasNativeClosest ?\n      curr.closest(selector) : polyfillClosest(curr, selector)) as Element|null;\n}\n\n/** Polyfill for browsers without Element.closest. */\nfunction polyfillClosest(element: Element, selector: string): Element|null {\n  let curr: Node|null = element;\n  while (curr != null && !(curr instanceof Element && matches(curr, selector))) {\n    curr = curr.parentNode;\n  }\n\n  return (curr || null) as Element|null;\n}\n\nconst hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;\n\n/** IE 11 compatible matches implementation. */\nfunction matches(element: Element, selector: string): boolean {\n  return element.matches ?\n      element.matches(selector) :\n      (element as any)['msMatchesSelector'](selector);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, normalizePassiveListenerOptions, _getShadowRoot} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Injectable,\n  InjectionToken,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  AfterViewInit,\n} from '@angular/core';\nimport {Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {isFakeMousedownFromScreenReader} from '../fake-mousedown';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n/**\n * Corresponds to the options that can be passed to the native `focus` event.\n * via https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus\n */\nexport interface FocusOptions {\n  /** Whether the browser should scroll to the element when it is focused. */\n  preventScroll?: boolean;\n}\n\n/** Detection mode used for attributing the origin of a focus event. */\nexport const enum FocusMonitorDetectionMode {\n  /**\n   * Any mousedown, keydown, or touchstart event that happened in the previous\n   * tick or the current tick will be used to assign a focus event's origin (to\n   * either mouse, keyboard, or touch). This is the default option.\n   */\n  IMMEDIATE,\n  /**\n   * A focus event's origin is always attributed to the last corresponding\n   * mousedown, keydown, or touchstart event, no matter how long ago it occured.\n   */\n  EVENTUAL\n}\n\n/** Injectable service-level options for FocusMonitor. */\nexport interface FocusMonitorOptions {\n  detectionMode?: FocusMonitorDetectionMode;\n}\n\n/** InjectionToken for FocusMonitorOptions. */\nexport const FOCUS_MONITOR_DEFAULT_OPTIONS =\n    new InjectionToken<FocusMonitorOptions>('cdk-focus-monitor-default-options');\n\ntype MonitoredElementInfo = {\n  checkChildren: boolean,\n  subject: Subject<FocusOrigin>,\n  rootNode: HTMLElement|ShadowRoot|Document\n};\n\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n\n\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n@Injectable({providedIn: 'root'})\nexport class FocusMonitor implements OnDestroy {\n  /** The focus origin that the next focus event is a result of. */\n  private _origin: FocusOrigin = null;\n\n  /** The FocusOrigin of the last focus event tracked by the FocusMonitor. */\n  private _lastFocusOrigin: FocusOrigin;\n\n  /** Whether the window has just been focused. */\n  private _windowFocused = false;\n\n  /** The target of the last touch event. */\n  private _lastTouchTarget: EventTarget | null;\n\n  /** The timeout id of the touch timeout, used to cancel timeout later. */\n  private _touchTimeoutId: number;\n\n  /** The timeout id of the window focus timeout. */\n  private _windowFocusTimeoutId: number;\n\n  /** The timeout id of the origin clearing timeout. */\n  private _originTimeoutId: number;\n\n  /** Map of elements being monitored to their info. */\n  private _elementInfo = new Map<HTMLElement, MonitoredElementInfo>();\n\n  /** The number of elements currently being monitored. */\n  private _monitoredElementCount = 0;\n\n  /**\n   * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n   * as well as the number of monitored elements that they contain. We have to treat focus/blur\n   * handlers differently from the rest of the events, because the browser won't emit events\n   * to the document when focus moves inside of a shadow root.\n   */\n  private _rootNodeFocusListenerCount = new Map<HTMLElement|Document|ShadowRoot, number>();\n\n  /**\n   * The specified detection mode, used for attributing the origin of a focus\n   * event.\n   */\n  private readonly _detectionMode: FocusMonitorDetectionMode;\n\n  /**\n   * Event listener for `keydown` events on the document.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _documentKeydownListener = () => {\n    // On keydown record the origin and clear any touch event that may be in progress.\n    this._lastTouchTarget = null;\n    this._setOriginForCurrentEventQueue('keyboard');\n  }\n\n  /**\n   * Event listener for `mousedown` events on the document.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _documentMousedownListener = (event: MouseEvent) => {\n    // On mousedown record the origin only if there is not touch\n    // target, since a mousedown can happen as a result of a touch event.\n    if (!this._lastTouchTarget) {\n      // In some cases screen readers fire fake `mousedown` events instead of `keydown`.\n      // Resolve the focus source to `keyboard` if we detect one of them.\n      const source = isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse';\n      this._setOriginForCurrentEventQueue(source);\n    }\n  }\n\n  /**\n   * Event listener for `touchstart` events on the document.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _documentTouchstartListener = (event: TouchEvent) => {\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\n    // see if a focus happens.\n    if (this._touchTimeoutId != null) {\n      clearTimeout(this._touchTimeoutId);\n    }\n\n    this._lastTouchTarget = getTarget(event);\n    this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n  }\n\n  /**\n   * Event listener for `focus` events on the window.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _windowFocusListener = () => {\n    // Make a note of when the window regains focus, so we can\n    // restore the origin info for the focused element.\n    this._windowFocused = true;\n    this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n  }\n\n  /** Used to reference correct document/window */\n  protected _document?: Document;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _platform: Platform,\n      /** @breaking-change 11.0.0 make document required */\n      @Optional() @Inject(DOCUMENT) document: any|null,\n      @Optional() @Inject(FOCUS_MONITOR_DEFAULT_OPTIONS) options:\n          FocusMonitorOptions|null) {\n    this._document = document;\n    this._detectionMode = options?.detectionMode || FocusMonitorDetectionMode.IMMEDIATE;\n  }\n  /**\n   * Event listener for `focus` and 'blur' events on the document.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _rootNodeFocusAndBlurListener = (event: Event) => {\n    const target = getTarget(event);\n    const handler = event.type === 'focus' ? this._onFocus : this._onBlur;\n\n    // We need to walk up the ancestor chain in order to support `checkChildren`.\n    for (let element = target; element; element = element.parentElement) {\n      handler.call(this, event as FocusEvent, element);\n    }\n  }\n\n  /**\n   * Monitors focus on an element and applies appropriate CSS classes.\n   * @param element The element to monitor\n   * @param checkChildren Whether to count the element as focused when its children are focused.\n   * @returns An observable that emits when the focus state of the element changes.\n   *     When the element is blurred, null will be emitted.\n   */\n  monitor(element: HTMLElement, checkChildren?: boolean): Observable<FocusOrigin>;\n\n  /**\n   * Monitors focus on an element and applies appropriate CSS classes.\n   * @param element The element to monitor\n   * @param checkChildren Whether to count the element as focused when its children are focused.\n   * @returns An observable that emits when the focus state of the element changes.\n   *     When the element is blurred, null will be emitted.\n   */\n  monitor(element: ElementRef<HTMLElement>, checkChildren?: boolean): Observable<FocusOrigin>;\n\n  monitor(element: HTMLElement | ElementRef<HTMLElement>,\n          checkChildren: boolean = false): Observable<FocusOrigin> {\n    const nativeElement = coerceElement(element);\n\n    // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n    if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n      return observableOf(null);\n    }\n\n    // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n    // the shadow root, rather than the `document`, because the browser won't emit focus events\n    // to the `document`, if focus is moving within the same shadow root.\n    const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n    const cachedInfo = this._elementInfo.get(nativeElement);\n\n    // Check if we're already monitoring this element.\n    if (cachedInfo) {\n      if (checkChildren) {\n        // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n        // observers into ones that behave as if `checkChildren` was turned on. We need a more\n        // robust solution.\n        cachedInfo.checkChildren = true;\n      }\n\n      return cachedInfo.subject;\n    }\n\n    // Create monitored element info.\n    const info: MonitoredElementInfo = {\n      checkChildren: checkChildren,\n      subject: new Subject<FocusOrigin>(),\n      rootNode\n    };\n    this._elementInfo.set(nativeElement, info);\n    this._registerGlobalListeners(info);\n\n    return info.subject;\n  }\n\n  /**\n   * Stops monitoring an element and removes all focus classes.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: HTMLElement): void;\n\n  /**\n   * Stops monitoring an element and removes all focus classes.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: ElementRef<HTMLElement>): void;\n\n  stopMonitoring(element: HTMLElement | ElementRef<HTMLElement>): void {\n    const nativeElement = coerceElement(element);\n    const elementInfo = this._elementInfo.get(nativeElement);\n\n    if (elementInfo) {\n      elementInfo.subject.complete();\n\n      this._setClasses(nativeElement);\n      this._elementInfo.delete(nativeElement);\n      this._removeGlobalListeners(elementInfo);\n    }\n  }\n\n  /**\n   * Focuses the element via the specified focus origin.\n   * @param element Element to focus.\n   * @param origin Focus origin.\n   * @param options Options that can be used to configure the focus behavior.\n   */\n  focusVia(element: HTMLElement, origin: FocusOrigin, options?: FocusOptions): void;\n\n  /**\n   * Focuses the element via the specified focus origin.\n   * @param element Element to focus.\n   * @param origin Focus origin.\n   * @param options Options that can be used to configure the focus behavior.\n   */\n  focusVia(element: ElementRef<HTMLElement>, origin: FocusOrigin, options?: FocusOptions): void;\n\n  focusVia(element: HTMLElement | ElementRef<HTMLElement>,\n          origin: FocusOrigin,\n          options?: FocusOptions): void {\n\n    const nativeElement = coerceElement(element);\n    const focusedElement = this._getDocument().activeElement;\n\n    // If the element is focused already, calling `focus` again won't trigger the event listener\n    // which means that the focus classes won't be updated. If that's the case, update the classes\n    // directly without waiting for an event.\n    if (nativeElement === focusedElement) {\n      this._getClosestElementsInfo(nativeElement)\n        .forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\n    } else {\n      this._setOriginForCurrentEventQueue(origin);\n\n      // `focus` isn't available on the server\n      if (typeof nativeElement.focus === 'function') {\n        nativeElement.focus(options);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  private _toggleClass(element: Element, className: string, shouldSet: boolean) {\n    if (shouldSet) {\n      element.classList.add(className);\n    } else {\n      element.classList.remove(className);\n    }\n  }\n\n  private _getFocusOrigin(event: FocusEvent): FocusOrigin {\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (this._origin) {\n      return this._origin;\n    }\n\n    if (this._windowFocused && this._lastFocusOrigin) {\n      return this._lastFocusOrigin;\n    } else if (this._wasCausedByTouch(event)) {\n      return 'touch';\n    } else {\n      return 'program';\n    }\n  }\n\n  /**\n   * Sets the focus classes on the element based on the given focus origin.\n   * @param element The element to update the classes on.\n   * @param origin The focus origin.\n   */\n  private _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n    this._toggleClass(element, 'cdk-focused', !!origin);\n    this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n    this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n    this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n    this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n  }\n\n  /**\n   * Sets the origin and schedules an async function to clear it at the end of the event queue.\n   * If the detection mode is 'eventual', the origin is never cleared.\n   * @param origin The origin to set.\n   */\n  private _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._ngZone.runOutsideAngular(() => {\n      this._origin = origin;\n\n      if (this._detectionMode === FocusMonitorDetectionMode.IMMEDIATE) {\n        // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n        // tick after the interaction event fired. To ensure the focus origin is always correct,\n        // the focus origin will be determined at the beginning of the next tick.\n        this._originTimeoutId = setTimeout(() => this._origin = null, 1);\n      }\n    });\n  }\n\n  /**\n   * Checks whether the given focus event was caused by a touchstart event.\n   * @param event The focus event to check.\n   * @returns Whether the event was caused by a touch.\n   */\n  private _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, 'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    const focusTarget = getTarget(event);\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n\n  /**\n   * Handles focus events on a registered element.\n   * @param event The focus event.\n   * @param element The monitored element.\n   */\n  private _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || (!elementInfo.checkChildren && element !== getTarget(event))) {\n      return;\n    }\n\n    this._originChanged(element, this._getFocusOrigin(event), elementInfo);\n  }\n\n  /**\n   * Handles blur events on a registered element.\n   * @param event The blur event.\n   * @param element The monitored element.\n   */\n  _onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget))) {\n      return;\n    }\n\n    this._setClasses(element);\n    this._emitOrigin(elementInfo.subject, null);\n  }\n\n  private _emitOrigin(subject: Subject<FocusOrigin>, origin: FocusOrigin) {\n    this._ngZone.run(() => subject.next(origin));\n  }\n\n  private _registerGlobalListeners(elementInfo: MonitoredElementInfo) {\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    const rootNode = elementInfo.rootNode;\n    const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n\n    if (!rootNodeFocusListeners) {\n      this._ngZone.runOutsideAngular(() => {\n        rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions);\n        rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions);\n      });\n    }\n\n    this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n\n    // Register global listeners when first element is monitored.\n    if (++this._monitoredElementCount === 1) {\n      // Note: we listen to events in the capture phase so we\n      // can detect them even if the user stops propagation.\n      this._ngZone.runOutsideAngular(() => {\n        const document = this._getDocument();\n        const window = this._getWindow();\n\n        document.addEventListener('keydown', this._documentKeydownListener,\n          captureEventListenerOptions);\n        document.addEventListener('mousedown', this._documentMousedownListener,\n          captureEventListenerOptions);\n        document.addEventListener('touchstart', this._documentTouchstartListener,\n          captureEventListenerOptions);\n        window.addEventListener('focus', this._windowFocusListener);\n      });\n    }\n  }\n\n  private _removeGlobalListeners(elementInfo: MonitoredElementInfo) {\n    const rootNode = elementInfo.rootNode;\n\n    if (this._rootNodeFocusListenerCount.has(rootNode)) {\n      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode)!;\n\n      if (rootNodeFocusListeners > 1) {\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n      } else {\n        rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions);\n        rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions);\n        this._rootNodeFocusListenerCount.delete(rootNode);\n      }\n    }\n\n    // Unregister global listeners when last element is unmonitored.\n    if (!--this._monitoredElementCount) {\n      const document = this._getDocument();\n      const window = this._getWindow();\n\n      document.removeEventListener('keydown', this._documentKeydownListener,\n        captureEventListenerOptions);\n      document.removeEventListener('mousedown', this._documentMousedownListener,\n        captureEventListenerOptions);\n      document.removeEventListener('touchstart', this._documentTouchstartListener,\n        captureEventListenerOptions);\n      window.removeEventListener('focus', this._windowFocusListener);\n\n      // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n      clearTimeout(this._windowFocusTimeoutId);\n      clearTimeout(this._touchTimeoutId);\n      clearTimeout(this._originTimeoutId);\n    }\n  }\n\n  /** Updates all the state on an element once its focus origin has changed. */\n  private _originChanged(element: HTMLElement, origin: FocusOrigin,\n                         elementInfo: MonitoredElementInfo) {\n    this._setClasses(element, origin);\n    this._emitOrigin(elementInfo.subject, origin);\n    this._lastFocusOrigin = origin;\n  }\n\n  /**\n   * Collects the `MonitoredElementInfo` of a particular element and\n   * all of its ancestors that have enabled `checkChildren`.\n   * @param element Element from which to start the search.\n   */\n  private _getClosestElementsInfo(element: HTMLElement): [HTMLElement, MonitoredElementInfo][] {\n    const results: [HTMLElement, MonitoredElementInfo][] = [];\n\n    this._elementInfo.forEach((info, currentElement) => {\n      if (currentElement === element || (info.checkChildren && currentElement.contains(element))) {\n        results.push([currentElement, info]);\n      }\n    });\n\n    return results;\n  }\n}\n\n/** Gets the target of an event, accounting for Shadow DOM. */\nfunction getTarget(event: Event): HTMLElement|null {\n  // If an event is bound outside the Shadow DOM, the `event.target` will\n  // point to the shadow root so we have to use `composedPath` instead.\n  return (event.composedPath ? event.composedPath()[0] : event.target) as HTMLElement | null;\n}\n\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n@Directive({\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n})\nexport class CdkMonitorFocus implements AfterViewInit, OnDestroy {\n  private _monitorSubscription: Subscription;\n  @Output() cdkFocusChange = new EventEmitter<FocusOrigin>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _focusMonitor: FocusMonitor) {}\n\n  ngAfterViewInit() {\n    const element = this._elementRef.nativeElement;\n    this._monitorSubscription = this._focusMonitor.monitor(\n      element,\n      element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus'))\n    .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    if (this._monitorSubscription) {\n      this._monitorSubscription.unsubscribe();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {CdkMonitorFocus} from './focus-monitor/focus-monitor';\nimport {CdkTrapFocus} from './focus-trap/focus-trap';\nimport {HighContrastModeDetector} from './high-contrast-mode/high-contrast-mode-detector';\nimport {CdkAriaLive} from './live-announcer/live-announcer';\n\n\n@NgModule({\n  imports: [PlatformModule, ObserversModule],\n  declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n  exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n})\nexport class A11yModule {\n  constructor(highContrastModeDetector: HighContrastModeDetector) {\n    highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\n\n/** Set of possible high-contrast mode backgrounds. */\nexport const enum HighContrastMode {\n  NONE,\n  BLACK_ON_WHITE,\n  WHITE_ON_BLACK,\n}\n\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nexport const BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nexport const WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n\n/** CSS class applied to the document body when in high-contrast mode. */\nexport const HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\n@Injectable({providedIn: 'root'})\nexport class HighContrastModeDetector {\n  private _document: Document;\n\n  constructor(private _platform: Platform, @Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  /** Gets the current high-contrast-mode for the page. */\n  getHighContrastMode(): HighContrastMode {\n    if (!this._platform.isBrowser) {\n      return HighContrastMode.NONE;\n    }\n\n    // Create a test element with an arbitrary background-color that is neither black nor\n    // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n    // appending the test element to the DOM does not affect layout by absolutely positioning it\n    const testElement = this._document.createElement('div');\n    testElement.style.backgroundColor = 'rgb(1,2,3)';\n    testElement.style.position = 'absolute';\n    this._document.body.appendChild(testElement);\n\n    // Get the computed style for the background color, collapsing spaces to normalize between\n    // browsers. Once we get this color, we no longer need the test element. Access the `window`\n    // via the document so we can fake it in tests. Note that we have extra null checks, because\n    // this logic will likely run during app bootstrap and throwing can break the entire app.\n    const documentWindow = this._document.defaultView || window;\n    const computedStyle = (documentWindow && documentWindow.getComputedStyle) ?\n        documentWindow.getComputedStyle(testElement) : null;\n    const computedColor =\n        (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n    this._document.body.removeChild(testElement);\n\n    switch (computedColor) {\n      case 'rgb(0,0,0)': return HighContrastMode.WHITE_ON_BLACK;\n      case 'rgb(255,255,255)': return HighContrastMode.BLACK_ON_WHITE;\n    }\n    return HighContrastMode.NONE;\n  }\n\n  /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n  _applyBodyHighContrastModeCssClasses(): void {\n    if (this._platform.isBrowser && this._document.body) {\n      const bodyClasses = this._document.body.classList;\n      // IE11 doesn't support `classList` operations with multiple arguments\n      bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n      bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);\n      bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);\n\n      const mode = this.getHighContrastMode();\n      if (mode === HighContrastMode.BLACK_ON_WHITE) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n        bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);\n      } else if (mode === HighContrastMode.WHITE_ON_BLACK) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n        bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {Dir} from './dir';\n\n\n@NgModule({\n  exports: [Dir],\n  declarations: [Dir],\n})\nexport class BidiModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Inject, Injectable, Optional, OnDestroy} from '@angular/core';\nimport {DIR_DOCUMENT} from './dir-document-token';\n\n\nexport type Direction = 'ltr' | 'rtl';\n\n\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\n@Injectable({providedIn: 'root'})\nexport class Directionality implements OnDestroy {\n  /** The current 'ltr' or 'rtl' value. */\n  readonly value: Direction = 'ltr';\n\n  /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n  readonly change = new EventEmitter<Direction>();\n\n  constructor(@Optional() @Inject(DIR_DOCUMENT) _document?: any) {\n    if (_document) {\n      // TODO: handle 'auto' value -\n      // We still need to account for dir=\"auto\".\n      // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n      // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n      const bodyDir = _document.body ? _document.body.dir : null;\n      const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n      const value = bodyDir || htmlDir;\n      this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\n    }\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {inject, InjectionToken} from '@angular/core';\n\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nexport const DIR_DOCUMENT = new InjectionToken<Document>('cdk-dir-doc', {\n  providedIn: 'root',\n  factory: DIR_DOCUMENT_FACTORY,\n});\n\n/** @docs-private */\nexport function DIR_DOCUMENT_FACTORY(): Document {\n  return inject(DOCUMENT);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of the Angular Component Development Kit. */\nexport const VERSION = new Version('11.2.2');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationMetadata, AnimationOptions} from './animation_metadata';\nimport {AnimationPlayer} from './players/animation_player';\n\n/**\n * An injectable service that produces an animation sequence programmatically within an\n * Angular component or directive.\n * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.\n *\n * @usageNotes\n *\n * To use this service, add it to your component or directive as a dependency.\n * The service is instantiated along with your component.\n *\n * Apps do not typically need to create their own animation players, but if you\n * do need to, follow these steps:\n *\n * 1. Use the `build()` method to create a programmatic animation using the\n * `animate()` function. The method returns an `AnimationFactory` instance.\n *\n * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.\n *\n * 3. Use the player object to control the animation programmatically.\n *\n * For example:\n *\n * ```ts\n * // import the service from BrowserAnimationsModule\n * import {AnimationBuilder} from '@angular/animations';\n * // require the service as a dependency\n * class MyCmp {\n *   constructor(private _builder: AnimationBuilder) {}\n *\n *   makeAnimation(element: any) {\n *     // first define a reusable animation\n *     const myAnimation = this._builder.build([\n *       style({ width: 0 }),\n *       animate(1000, style({ width: '100px' }))\n *     ]);\n *\n *     // use the returned factory object to create a player\n *     const player = myAnimation.create(element);\n *\n *     player.play();\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport abstract class AnimationBuilder {\n  /**\n   * Builds a factory for producing a defined animation.\n   * @param animation A reusable animation definition.\n   * @returns A factory object that can create a player for the defined animation.\n   * @see `animate()`\n   */\n  abstract build(animation: AnimationMetadata|AnimationMetadata[]): AnimationFactory;\n}\n\n/**\n * A factory object returned from the `AnimationBuilder`.`build()` method.\n *\n * @publicApi\n */\nexport abstract class AnimationFactory {\n  /**\n   * Creates an `AnimationPlayer` instance for the reusable animation defined by\n   * the `AnimationBuilder`.`build()` method that created this factory.\n   * Attaches the new player a DOM element.\n   * @param element The DOM element to which to attach the animation.\n   * @param options A set of options that can include a time delay and\n   * additional developer-defined parameters.\n   */\n  abstract create(element: any, options?: AnimationOptions): AnimationPlayer;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Represents a set of CSS styles for use in an animation style.\n */\nexport interface ɵStyleData {\n  [key: string]: string|number;\n}\n\n/**\n * Represents animation-step timing parameters for an animation step.\n * @see `animate()`\n *\n * @publicApi\n */\nexport declare type AnimateTimings = {\n  /**\n   * The full duration of an animation step. A number and optional time unit,\n   * such as \"1s\" or \"10ms\" for one second and 10 milliseconds, respectively.\n   * The default unit is milliseconds.\n   */\n  duration: number,\n  /**\n   * The delay in applying an animation step. A number and optional time unit.\n   * The default unit is milliseconds.\n   */\n  delay: number,\n  /**\n   * An easing style that controls how an animations step accelerates\n   * and decelerates during its run time. An easing function such as `cubic-bezier()`,\n   * or one of the following constants:\n   * - `ease-in`\n   * - `ease-out`\n   * - `ease-in-and-out`\n   */\n  easing: string | null\n};\n\n/**\n * @description Options that control animation styling and timing.\n *\n * The following animation functions accept `AnimationOptions` data:\n *\n * - `transition()`\n * - `sequence()`\n * - `{@link animations/group group()}`\n * - `query()`\n * - `animation()`\n * - `useAnimation()`\n * - `animateChild()`\n *\n * Programmatic animations built using the `AnimationBuilder` service also\n * make use of `AnimationOptions`.\n *\n * @publicApi\n */\nexport declare interface AnimationOptions {\n  /**\n   * Sets a time-delay for initiating an animation action.\n   * A number and optional time unit, such as \"1s\" or \"10ms\" for one second\n   * and 10 milliseconds, respectively.The default unit is milliseconds.\n   * Default value is 0, meaning no delay.\n   */\n  delay?: number|string;\n  /**\n   * A set of developer-defined parameters that modify styling and timing\n   * when an animation action starts. An array of key-value pairs, where the provided value\n   * is used as a default.\n   */\n  params?: {[name: string]: any};\n}\n\n/**\n * Adds duration options to control animation styling and timing for a child animation.\n *\n * @see `animateChild()`\n *\n * @publicApi\n */\nexport declare interface AnimateChildOptions extends AnimationOptions {\n  duration?: number|string;\n}\n\n/**\n * @description Constants for the categories of parameters that can be defined for animations.\n *\n * A corresponding function defines a set of parameters for each category, and\n * collects them into a corresponding `AnimationMetadata` object.\n *\n * @publicApi\n */\nexport const enum AnimationMetadataType {\n  /**\n   * Associates a named animation state with a set of CSS styles.\n   * See `state()`\n   */\n  State = 0,\n  /**\n   * Data for a transition from one animation state to another.\n   * See `transition()`\n   */\n  Transition = 1,\n  /**\n   * Contains a set of animation steps.\n   * See `sequence()`\n   */\n  Sequence = 2,\n  /**\n   * Contains a set of animation steps.\n   * See `{@link animations/group group()}`\n   */\n  Group = 3,\n  /**\n   * Contains an animation step.\n   * See `animate()`\n   */\n  Animate = 4,\n  /**\n   * Contains a set of animation steps.\n   * See `keyframes()`\n   */\n  Keyframes = 5,\n  /**\n   * Contains a set of CSS property-value pairs into a named style.\n   * See `style()`\n   */\n  Style = 6,\n  /**\n   * Associates an animation with an entry trigger that can be attached to an element.\n   * See `trigger()`\n   */\n  Trigger = 7,\n  /**\n   * Contains a re-usable animation.\n   * See `animation()`\n   */\n  Reference = 8,\n  /**\n   * Contains data to use in executing child animations returned by a query.\n   * See `animateChild()`\n   */\n  AnimateChild = 9,\n  /**\n   * Contains animation parameters for a re-usable animation.\n   * See `useAnimation()`\n   */\n  AnimateRef = 10,\n  /**\n   * Contains child-animation query data.\n   * See `query()`\n   */\n  Query = 11,\n  /**\n   * Contains data for staggering an animation sequence.\n   * See `stagger()`\n   */\n  Stagger = 12\n}\n\n/**\n * Specifies automatic styling.\n *\n * @publicApi\n */\nexport const AUTO_STYLE = '*';\n\n/**\n * Base for animation data structures.\n *\n * @publicApi\n */\nexport interface AnimationMetadata {\n  type: AnimationMetadataType;\n}\n\n/**\n * Contains an animation trigger. Instantiated and returned by the\n * `trigger()` function.\n *\n * @publicApi\n */\nexport interface AnimationTriggerMetadata extends AnimationMetadata {\n  /**\n   * The trigger name, used to associate it with an element. Unique within the component.\n   */\n  name: string;\n  /**\n   * An animation definition object, containing an array of state and transition declarations.\n   */\n  definitions: AnimationMetadata[];\n  /**\n   * An options object containing a delay and\n   * developer-defined parameters that provide styling defaults and\n   * can be overridden on invocation. Default delay is 0.\n   */\n  options: {params?: {[name: string]: any}}|null;\n}\n\n/**\n * Encapsulates an animation state by associating a state name with a set of CSS styles.\n * Instantiated and returned by the `state()` function.\n *\n * @publicApi\n */\nexport interface AnimationStateMetadata extends AnimationMetadata {\n  /**\n   * The state name, unique within the component.\n   */\n  name: string;\n  /**\n   *  The CSS styles associated with this state.\n   */\n  styles: AnimationStyleMetadata;\n  /**\n   * An options object containing\n   * developer-defined parameters that provide styling defaults and\n   * can be overridden on invocation.\n   */\n  options?: {params: {[name: string]: any}};\n}\n\n/**\n * Encapsulates an animation transition. Instantiated and returned by the\n * `transition()` function.\n *\n * @publicApi\n */\nexport interface AnimationTransitionMetadata extends AnimationMetadata {\n  /**\n   * An expression that describes a state change.\n   */\n  expr: string|\n      ((fromState: string, toState: string, element?: any,\n        params?: {[key: string]: any}) => boolean);\n  /**\n   * One or more animation objects to which this transition applies.\n   */\n  animation: AnimationMetadata|AnimationMetadata[];\n  /**\n   * An options object containing a delay and\n   * developer-defined parameters that provide styling defaults and\n   * can be overridden on invocation. Default delay is 0.\n   */\n  options: AnimationOptions|null;\n}\n\n/**\n * Encapsulates a reusable animation, which is a collection of individual animation steps.\n * Instantiated and returned by the `animation()` function, and\n * passed to the `useAnimation()` function.\n *\n * @publicApi\n */\nexport interface AnimationReferenceMetadata extends AnimationMetadata {\n  /**\n   *  One or more animation step objects.\n   */\n  animation: AnimationMetadata|AnimationMetadata[];\n  /**\n   * An options object containing a delay and\n   * developer-defined parameters that provide styling defaults and\n   * can be overridden on invocation. Default delay is 0.\n   */\n  options: AnimationOptions|null;\n}\n\n/**\n * Encapsulates an animation query. Instantiated and returned by\n * the `query()` function.\n *\n * @publicApi\n */\nexport interface AnimationQueryMetadata extends AnimationMetadata {\n  /**\n   *  The CSS selector for this query.\n   */\n  selector: string;\n  /**\n   * One or more animation step objects.\n   */\n  animation: AnimationMetadata|AnimationMetadata[];\n  /**\n   * A query options object.\n   */\n  options: AnimationQueryOptions|null;\n}\n\n/**\n * Encapsulates a keyframes sequence. Instantiated and returned by\n * the `keyframes()` function.\n *\n * @publicApi\n */\nexport interface AnimationKeyframesSequenceMetadata extends AnimationMetadata {\n  /**\n   * An array of animation styles.\n   */\n  steps: AnimationStyleMetadata[];\n}\n\n/**\n * Encapsulates an animation style. Instantiated and returned by\n * the `style()` function.\n *\n * @publicApi\n */\nexport interface AnimationStyleMetadata extends AnimationMetadata {\n  /**\n   * A set of CSS style properties.\n   */\n  styles: '*'|{[key: string]: string | number}|Array<{[key: string]: string | number}|'*'>;\n  /**\n   * A percentage of the total animate time at which the style is to be applied.\n   */\n  offset: number|null;\n}\n\n/**\n * Encapsulates an animation step. Instantiated and returned by\n * the `animate()` function.\n *\n * @publicApi\n */\nexport interface AnimationAnimateMetadata extends AnimationMetadata {\n  /**\n   * The timing data for the step.\n   */\n  timings: string|number|AnimateTimings;\n  /**\n   * A set of styles used in the step.\n   */\n  styles: AnimationStyleMetadata|AnimationKeyframesSequenceMetadata|null;\n}\n\n/**\n * Encapsulates a child animation, that can be run explicitly when the parent is run.\n * Instantiated and returned by the `animateChild` function.\n *\n * @publicApi\n */\nexport interface AnimationAnimateChildMetadata extends AnimationMetadata {\n  /**\n   * An options object containing a delay and\n   * developer-defined parameters that provide styling defaults and\n   * can be overridden on invocation. Default delay is 0.\n   */\n  options: AnimationOptions|null;\n}\n\n/**\n * Encapsulates a reusable animation.\n * Instantiated and returned by the `useAnimation()` function.\n *\n * @publicApi\n */\nexport interface AnimationAnimateRefMetadata extends AnimationMetadata {\n  /**\n   * An animation reference object.\n   */\n  animation: AnimationReferenceMetadata;\n  /**\n   * An options object containing a delay and\n   * developer-defined parameters that provide styling defaults and\n   * can be overridden on invocation. Default delay is 0.\n   */\n  options: AnimationOptions|null;\n}\n\n/**\n * Encapsulates an animation sequence.\n * Instantiated and returned by the `sequence()` function.\n *\n * @publicApi\n */\nexport interface AnimationSequenceMetadata extends AnimationMetadata {\n  /**\n   *  An array of animation step objects.\n   */\n  steps: AnimationMetadata[];\n  /**\n   * An options object containing a delay and\n   * developer-defined parameters that provide styling defaults and\n   * can be overridden on invocation. Default delay is 0.\n   */\n  options: AnimationOptions|null;\n}\n\n/**\n * Encapsulates an animation group.\n * Instantiated and returned by the `{@link animations/group group()}` function.\n *\n * @publicApi\n */\nexport interface AnimationGroupMetadata extends AnimationMetadata {\n  /**\n   * One or more animation or style steps that form this group.\n   */\n  steps: AnimationMetadata[];\n  /**\n   * An options object containing a delay and\n   * developer-defined parameters that provide styling defaults and\n   * can be overridden on invocation. Default delay is 0.\n   */\n  options: AnimationOptions|null;\n}\n\n/**\n * Encapsulates animation query options.\n * Passed to the `query()` function.\n *\n * @publicApi\n */\nexport declare interface AnimationQueryOptions extends AnimationOptions {\n  /**\n   * True if this query is optional, false if it is required. Default is false.\n   * A required query throws an error if no elements are retrieved when\n   * the query is executed. An optional query does not.\n   *\n   */\n  optional?: boolean;\n  /**\n   * A maximum total number of results to return from the query.\n   * If negative, results are limited from the end of the query list towards the beginning.\n   * By default, results are not limited.\n   */\n  limit?: number;\n}\n\n/**\n * Encapsulates parameters for staggering the start times of a set of animation steps.\n * Instantiated and returned by the `stagger()` function.\n *\n * @publicApi\n **/\nexport interface AnimationStaggerMetadata extends AnimationMetadata {\n  /**\n   * The timing data for the steps.\n   */\n  timings: string|number;\n  /**\n   * One or more animation steps.\n   */\n  animation: AnimationMetadata|AnimationMetadata[];\n}\n\n/**\n * Creates a named animation trigger, containing a  list of `state()`\n * and `transition()` entries to be evaluated when the expression\n * bound to the trigger changes.\n *\n * @param name An identifying string.\n * @param definitions  An animation definition object, containing an array of `state()`\n * and `transition()` declarations.\n *\n * @return An object that encapsulates the trigger data.\n *\n * @usageNotes\n * Define an animation trigger in the `animations` section of `@Component` metadata.\n * In the template, reference the trigger by name and bind it to a trigger expression that\n * evaluates to a defined animation state, using the following format:\n *\n * `[@triggerName]=\"expression\"`\n *\n * Animation trigger bindings convert all values to strings, and then match the\n * previous and current values against any linked transitions.\n * Booleans can be specified as `1` or `true` and `0` or `false`.\n *\n * ### Usage Example\n *\n * The following example creates an animation trigger reference based on the provided\n * name value.\n * The provided animation value is expected to be an array consisting of state and\n * transition declarations.\n *\n * ```typescript\n * @Component({\n *   selector: \"my-component\",\n *   templateUrl: \"my-component-tpl.html\",\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *       state(...),\n *       state(...),\n *       transition(...),\n *       transition(...)\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"something\";\n * }\n * ```\n *\n * The template associated with this component makes use of the defined trigger\n * by binding to an element within its template code.\n *\n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n *\n * ### Using an inline function\n * The `transition` animation method also supports reading an inline function which can decide\n * if its associated animation should be run.\n *\n * ```typescript\n * // this method is run each time the `myAnimationTrigger` trigger value changes.\n * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:\n string]: any}): boolean {\n *   // notice that `element` and `params` are also available here\n *   return toState == 'yes-please-animate';\n * }\n *\n * @Component({\n *   selector: 'my-component',\n *   templateUrl: 'my-component-tpl.html',\n *   animations: [\n *     trigger('myAnimationTrigger', [\n *       transition(myInlineMatcherFn, [\n *         // the animation sequence code\n *       ]),\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"yes-please-animate\";\n * }\n * ```\n *\n * ### Disabling Animations\n * When true, the special animation control binding `@.disabled` binding prevents\n * all animations from rendering.\n * Place the  `@.disabled` binding on an element to disable\n * animations on the element itself, as well as any inner animation triggers\n * within the element.\n *\n * The following example shows how to use this feature:\n *\n * ```typescript\n * @Component({\n *   selector: 'my-component',\n *   template: `\n *     <div [@.disabled]=\"isDisabled\">\n *       <div [@childAnimation]=\"exp\"></div>\n *     </div>\n *   `,\n *   animations: [\n *     trigger(\"childAnimation\", [\n *       // ...\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   isDisabled = true;\n *   exp = '...';\n * }\n * ```\n *\n * When `@.disabled` is true, it prevents the `@childAnimation` trigger from animating,\n * along with any inner animations.\n *\n * ### Disable animations application-wide\n * When an area of the template is set to have animations disabled,\n * **all** inner components have their animations disabled as well.\n * This means that you can disable all animations for an app\n * by placing a host binding set on `@.disabled` on the topmost Angular component.\n *\n * ```typescript\n * import {Component, HostBinding} from '@angular/core';\n *\n * @Component({\n *   selector: 'app-component',\n *   templateUrl: 'app.component.html',\n * })\n * class AppComponent {\n *   @HostBinding('@.disabled')\n *   public animationsDisabled = true;\n * }\n * ```\n *\n * ### Overriding disablement of inner animations\n * Despite inner animations being disabled, a parent animation can `query()`\n * for inner elements located in disabled areas of the template and still animate\n * them if needed. This is also the case for when a sub animation is\n * queried by a parent and then later animated using `animateChild()`.\n *\n * ### Detecting when an animation is disabled\n * If a region of the DOM (or the entire application) has its animations disabled, the animation\n * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides\n * an instance of an `AnimationEvent`. If animations are disabled,\n * the `.disabled` flag on the event is true.\n *\n * @publicApi\n */\nexport function trigger(name: string, definitions: AnimationMetadata[]): AnimationTriggerMetadata {\n  return {type: AnimationMetadataType.Trigger, name, definitions, options: {}};\n}\n\n/**\n * Defines an animation step that combines styling information with timing information.\n *\n * @param timings Sets `AnimateTimings` for the parent animation.\n * A string in the format \"duration [delay] [easing]\".\n *  - Duration and delay are expressed as a number and optional time unit,\n * such as \"1s\" or \"10ms\" for one second and 10 milliseconds, respectively.\n * The default unit is milliseconds.\n *  - The easing value controls how the animation accelerates and decelerates\n * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,\n * `ease-in-out`, or a `cubic-bezier()` function call.\n * If not supplied, no easing is applied.\n *\n * For example, the string \"1s 100ms ease-out\" specifies a duration of\n * 1000 milliseconds, and delay of 100 ms, and the \"ease-out\" easing style,\n * which decelerates near the end of the duration.\n * @param styles Sets AnimationStyles for the parent animation.\n * A function call to either `style()` or `keyframes()`\n * that returns a collection of CSS style entries to be applied to the parent animation.\n * When null, uses the styles from the destination state.\n * This is useful when describing an animation step that will complete an animation;\n * see \"Animating to the final state\" in `transitions()`.\n * @returns An object that encapsulates the animation step.\n *\n * @usageNotes\n * Call within an animation `sequence()`, `{@link animations/group group()}`, or\n * `transition()` call to specify an animation step\n * that applies given style data to the parent animation for a given amount of time.\n *\n * ### Syntax Examples\n * **Timing examples**\n *\n * The following examples show various `timings` specifications.\n * - `animate(500)` : Duration is 500 milliseconds.\n * - `animate(\"1s\")` : Duration is 1000 milliseconds.\n * - `animate(\"100ms 0.5s\")` : Duration is 100 milliseconds, delay is 500 milliseconds.\n * - `animate(\"5s ease-in\")` : Duration is 5000 milliseconds, easing in.\n * - `animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\")` : Duration is 5000 milliseconds, delay is 10\n * milliseconds, easing according to a bezier curve.\n *\n * **Style examples**\n *\n * The following example calls `style()` to set a single CSS style.\n * ```typescript\n * animate(500, style({ background: \"red\" }))\n * ```\n * The following example calls `keyframes()` to set a CSS style\n * to different values for successive keyframes.\n * ```typescript\n * animate(500, keyframes(\n *  [\n *   style({ background: \"blue\" }),\n *   style({ background: \"red\" })\n *  ])\n * ```\n *\n * @publicApi\n */\nexport function animate(\n    timings: string|number,\n    styles: AnimationStyleMetadata|AnimationKeyframesSequenceMetadata|null =\n        null): AnimationAnimateMetadata {\n  return {type: AnimationMetadataType.Animate, styles, timings};\n}\n\n/**\n * @description Defines a list of animation steps to be run in parallel.\n *\n * @param steps An array of animation step objects.\n * - When steps are defined by `style()` or `animate()`\n * function calls, each call within the group is executed instantly.\n * - To specify offset styles to be applied at a later time, define steps with\n * `keyframes()`, or use `animate()` calls with a delay value.\n * For example:\n *\n * ```typescript\n * group([\n *   animate(\"1s\", style({ background: \"black\" })),\n *   animate(\"2s\", style({ color: \"white\" }))\n * ])\n * ```\n *\n * @param options An options object containing a delay and\n * developer-defined parameters that provide styling defaults and\n * can be overridden on invocation.\n *\n * @return An object that encapsulates the group data.\n *\n * @usageNotes\n * Grouped animations are useful when a series of styles must be\n * animated at different starting times and closed off at different ending times.\n *\n * When called within a `sequence()` or a\n * `transition()` call, does not continue to the next\n * instruction until all of the inner animation steps have completed.\n *\n * @publicApi\n */\nexport function group(\n    steps: AnimationMetadata[], options: AnimationOptions|null = null): AnimationGroupMetadata {\n  return {type: AnimationMetadataType.Group, steps, options};\n}\n\n/**\n * Defines a list of animation steps to be run sequentially, one by one.\n *\n * @param steps An array of animation step objects.\n * - Steps defined by `style()` calls apply the styling data immediately.\n * - Steps defined by `animate()` calls apply the styling data over time\n *   as specified by the timing data.\n *\n * ```typescript\n * sequence([\n *   style({ opacity: 0 }),\n *   animate(\"1s\", style({ opacity: 1 }))\n * ])\n * ```\n *\n * @param options An options object containing a delay and\n * developer-defined parameters that provide styling defaults and\n * can be overridden on invocation.\n *\n * @return An object that encapsulates the sequence data.\n *\n * @usageNotes\n * When you pass an array of steps to a\n * `transition()` call, the steps run sequentially by default.\n * Compare this to the `{@link animations/group group()}` call, which runs animation steps in\n *parallel.\n *\n * When a sequence is used within a `{@link animations/group group()}` or a `transition()` call,\n * execution continues to the next instruction only after each of the inner animation\n * steps have completed.\n *\n * @publicApi\n **/\nexport function sequence(\n    steps: AnimationMetadata[], options: AnimationOptions|null = null): AnimationSequenceMetadata {\n  return {type: AnimationMetadataType.Sequence, steps, options};\n}\n\n/**\n * Declares a key/value object containing CSS properties/styles that\n * can then be used for an animation `state`, within an animation `sequence`,\n * or as styling data for calls to `animate()` and `keyframes()`.\n *\n * @param tokens A set of CSS styles or HTML styles associated with an animation state.\n * The value can be any of the following:\n * - A key-value style pair associating a CSS property with a value.\n * - An array of key-value style pairs.\n * - An asterisk (*), to use auto-styling, where styles are derived from the element\n * being animated and applied to the animation when it starts.\n *\n * Auto-styling can be used to define a state that depends on layout or other\n * environmental factors.\n *\n * @return An object that encapsulates the style data.\n *\n * @usageNotes\n * The following examples create animation styles that collect a set of\n * CSS property values:\n *\n * ```typescript\n * // string values for CSS properties\n * style({ background: \"red\", color: \"blue\" })\n *\n * // numerical pixel values\n * style({ width: 100, height: 0 })\n * ```\n *\n * The following example uses auto-styling to allow a component to animate from\n * a height of 0 up to the height of the parent element:\n *\n * ```\n * style({ height: 0 }),\n * animate(\"1s\", style({ height: \"*\" }))\n * ```\n *\n * @publicApi\n **/\nexport function style(tokens: '*'|{[key: string]: string | number}|\n                      Array<'*'|{[key: string]: string | number}>): AnimationStyleMetadata {\n  return {type: AnimationMetadataType.Style, styles: tokens, offset: null};\n}\n\n/**\n * Declares an animation state within a trigger attached to an element.\n *\n * @param name One or more names for the defined state in a comma-separated string.\n * The following reserved state names can be supplied to define a style for specific use\n * cases:\n *\n * - `void` You can associate styles with this name to be used when\n * the element is detached from the application. For example, when an `ngIf` evaluates\n * to false, the state of the associated element is void.\n *  - `*` (asterisk) Indicates the default state. You can associate styles with this name\n * to be used as the fallback when the state that is being animated is not declared\n * within the trigger.\n *\n * @param styles A set of CSS styles associated with this state, created using the\n * `style()` function.\n * This set of styles persists on the element once the state has been reached.\n * @param options Parameters that can be passed to the state when it is invoked.\n * 0 or more key-value pairs.\n * @return An object that encapsulates the new state data.\n *\n * @usageNotes\n * Use the `trigger()` function to register states to an animation trigger.\n * Use the `transition()` function to animate between states.\n * When a state is active within a component, its associated styles persist on the element,\n * even when the animation ends.\n *\n * @publicApi\n **/\nexport function state(\n    name: string, styles: AnimationStyleMetadata,\n    options?: {params: {[name: string]: any}}): AnimationStateMetadata {\n  return {type: AnimationMetadataType.State, name, styles, options};\n}\n\n/**\n * Defines a set of animation styles, associating each style with an optional `offset` value.\n *\n * @param steps A set of animation styles with optional offset data.\n * The optional `offset` value for a style specifies a percentage of the total animation\n * time at which that style is applied.\n * @returns An object that encapsulates the keyframes data.\n *\n * @usageNotes\n * Use with the `animate()` call. Instead of applying animations\n * from the current state\n * to the destination state, keyframes describe how each style entry is applied and at what point\n * within the animation arc.\n * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).\n *\n * ### Usage\n *\n * In the following example, the offset values describe\n * when each `backgroundColor` value is applied. The color is red at the start, and changes to\n * blue when 20% of the total time has elapsed.\n *\n * ```typescript\n * // the provided offset values\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\", offset: 0 }),\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n *   style({ backgroundColor: \"black\", offset: 1 })\n * ]))\n * ```\n *\n * If there are no `offset` values specified in the style entries, the offsets\n * are calculated automatically.\n *\n * ```typescript\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\" }) // offset = 0\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n *   style({ backgroundColor: \"black\" }) // offset = 1\n * ]))\n *```\n\n * @publicApi\n */\nexport function keyframes(steps: AnimationStyleMetadata[]): AnimationKeyframesSequenceMetadata {\n  return {type: AnimationMetadataType.Keyframes, steps};\n}\n\n/**\n * Declares an animation transition as a sequence of animation steps to run when a given\n * condition is satisfied. The condition is a Boolean expression or function that compares\n * the previous and current animation states, and returns true if this transition should occur.\n * When the state criteria of a defined transition are met, the associated animation is\n * triggered.\n *\n * @param stateChangeExpr A Boolean expression or function that compares the previous and current\n * animation states, and returns true if this transition should occur. Note that  \"true\" and \"false\"\n * match 1 and 0, respectively. An expression is evaluated each time a state change occurs in the\n * animation trigger element.\n * The animation steps run when the expression evaluates to true.\n *\n * - A state-change string takes the form \"state1 => state2\", where each side is a defined animation\n * state, or an asterix (*) to refer to a dynamic start or end state.\n *   - The expression string can contain multiple comma-separated statements;\n * for example \"state1 => state2, state3 => state4\".\n *   - Special values `:enter` and `:leave` initiate a transition on the entry and exit states,\n * equivalent to  \"void => *\"  and \"* => void\".\n *   - Special values `:increment` and `:decrement` initiate a transition when a numeric value has\n * increased or decreased in value.\n * - A function is executed each time a state change occurs in the animation trigger element.\n * The animation steps run when the function returns true.\n *\n * @param steps One or more animation objects, as returned by the `animate()` or\n * `sequence()` function, that form a transformation from one state to another.\n * A sequence is used by default when you pass an array.\n * @param options An options object that can contain a delay value for the start of the animation,\n * and additional developer-defined parameters. Provided values for additional parameters are used\n * as defaults, and override values can be passed to the caller on invocation.\n * @returns An object that encapsulates the transition data.\n *\n * @usageNotes\n * The template associated with a component binds an animation trigger to an element.\n *\n * ```HTML\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n *\n * All transitions are defined within an animation trigger,\n * along with named states that the transitions change to and from.\n *\n * ```typescript\n * trigger(\"myAnimationTrigger\", [\n *  // define states\n *  state(\"on\", style({ background: \"green\" })),\n *  state(\"off\", style({ background: \"grey\" })),\n *  ...]\n * ```\n *\n * Note that when you call the `sequence()` function within a `{@link animations/group group()}`\n * or a `transition()` call, execution does not continue to the next instruction\n * until each of the inner animation steps have completed.\n *\n * ### Syntax examples\n *\n * The following examples define transitions between the two defined states (and default states),\n * using various options:\n *\n * ```typescript\n * // Transition occurs when the state value\n * // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n * transition(\"on => off\", animate(500))\n * // Run the same animation for both directions\n * transition(\"on <=> off\", animate(500))\n * // Define multiple state-change pairs separated by commas\n * transition(\"on => off, off => void\", animate(500))\n * ```\n *\n * ### Special values for state-change expressions\n *\n * - Catch-all state change for when an element is inserted into the page and the\n * destination state is unknown:\n *\n * ```typescript\n * transition(\"void => *\", [\n *  style({ opacity: 0 }),\n *  animate(500)\n *  ])\n * ```\n *\n * - Capture a state change between any states:\n *\n *  `transition(\"* => *\", animate(\"1s 0s\"))`\n *\n * - Entry and exit transitions:\n *\n * ```typescript\n * transition(\":enter\", [\n *   style({ opacity: 0 }),\n *   animate(500, style({ opacity: 1 }))\n *   ]),\n * transition(\":leave\", [\n *   animate(500, style({ opacity: 0 }))\n *   ])\n * ```\n *\n * - Use `:increment` and `:decrement` to initiate transitions:\n *\n * ```typescript\n * transition(\":increment\", group([\n *  query(':enter', [\n *     style({ left: '100%' }),\n *     animate('0.5s ease-out', style('*'))\n *   ]),\n *  query(':leave', [\n *     animate('0.5s ease-out', style({ left: '-100%' }))\n *  ])\n * ]))\n *\n * transition(\":decrement\", group([\n *  query(':enter', [\n *     style({ left: '100%' }),\n *     animate('0.5s ease-out', style('*'))\n *   ]),\n *  query(':leave', [\n *     animate('0.5s ease-out', style({ left: '-100%' }))\n *  ])\n * ]))\n * ```\n *\n * ### State-change functions\n *\n * Here is an example of a `fromState` specified as a state-change function that invokes an\n * animation when true:\n *\n * ```typescript\n * transition((fromState, toState) =>\n *  {\n *   return fromState == \"off\" && toState == \"on\";\n *  },\n *  animate(\"1s 0s\"))\n * ```\n *\n * ### Animating to the final state\n *\n * If the final step in a transition is a call to `animate()` that uses a timing value\n * with no style data, that step is automatically considered the final animation arc,\n * for the element to reach the final state. Angular automatically adds or removes\n * CSS styles to ensure that the element is in the correct final state.\n *\n * The following example defines a transition that starts by hiding the element,\n * then makes sure that it animates properly to whatever state is currently active for trigger:\n *\n * ```typescript\n * transition(\"void => *\", [\n *   style({ opacity: 0 }),\n *   animate(500)\n *  ])\n * ```\n * ### Boolean value matching\n * If a trigger binding value is a Boolean, it can be matched using a transition expression\n * that compares true and false or 1 and 0. For example:\n *\n * ```\n * // in the template\n * <div [@openClose]=\"open ? true : false\">...</div>\n * // in the component metadata\n * trigger('openClose', [\n *   state('true', style({ height: '*' })),\n *   state('false', style({ height: '0px' })),\n *   transition('false <=> true', animate(500))\n * ])\n * ```\n *\n * @publicApi\n **/\nexport function transition(\n    stateChangeExpr: string|\n    ((fromState: string, toState: string, element?: any, params?: {[key: string]: any}) => boolean),\n    steps: AnimationMetadata|AnimationMetadata[],\n    options: AnimationOptions|null = null): AnimationTransitionMetadata {\n  return {type: AnimationMetadataType.Transition, expr: stateChangeExpr, animation: steps, options};\n}\n\n/**\n * Produces a reusable animation that can be invoked in another animation or sequence,\n * by calling the `useAnimation()` function.\n *\n * @param steps One or more animation objects, as returned by the `animate()`\n * or `sequence()` function, that form a transformation from one state to another.\n * A sequence is used by default when you pass an array.\n * @param options An options object that can contain a delay value for the start of the\n * animation, and additional developer-defined parameters.\n * Provided values for additional parameters are used as defaults,\n * and override values can be passed to the caller on invocation.\n * @returns An object that encapsulates the animation data.\n *\n * @usageNotes\n * The following example defines a reusable animation, providing some default parameter\n * values.\n *\n * ```typescript\n * var fadeAnimation = animation([\n *   style({ opacity: '{{ start }}' }),\n *   animate('{{ time }}',\n *   style({ opacity: '{{ end }}'}))\n *   ],\n *   { params: { time: '1000ms', start: 0, end: 1 }});\n * ```\n *\n * The following invokes the defined animation with a call to `useAnimation()`,\n * passing in override parameter values.\n *\n * ```js\n * useAnimation(fadeAnimation, {\n *   params: {\n *     time: '2s',\n *     start: 1,\n *     end: 0\n *   }\n * })\n * ```\n *\n * If any of the passed-in parameter values are missing from this call,\n * the default values are used. If one or more parameter values are missing before a step is\n * animated, `useAnimation()` throws an error.\n *\n * @publicApi\n */\nexport function animation(\n    steps: AnimationMetadata|AnimationMetadata[],\n    options: AnimationOptions|null = null): AnimationReferenceMetadata {\n  return {type: AnimationMetadataType.Reference, animation: steps, options};\n}\n\n/**\n * Executes a queried inner animation element within an animation sequence.\n *\n * @param options An options object that can contain a delay value for the start of the\n * animation, and additional override values for developer-defined parameters.\n * @return An object that encapsulates the child animation data.\n *\n * @usageNotes\n * Each time an animation is triggered in Angular, the parent animation\n * has priority and any child animations are blocked. In order\n * for a child animation to run, the parent animation must query each of the elements\n * containing child animations, and run them using this function.\n *\n * Note that this feature is designed to be used with `query()` and it will only work\n * with animations that are assigned using the Angular animation library. CSS keyframes\n * and transitions are not handled by this API.\n *\n * @publicApi\n */\nexport function animateChild(options: AnimateChildOptions|null = null):\n    AnimationAnimateChildMetadata {\n  return {type: AnimationMetadataType.AnimateChild, options};\n}\n\n/**\n * Starts a reusable animation that is created using the `animation()` function.\n *\n * @param animation The reusable animation to start.\n * @param options An options object that can contain a delay value for the start of\n * the animation, and additional override values for developer-defined parameters.\n * @return An object that contains the animation parameters.\n *\n * @publicApi\n */\nexport function useAnimation(\n    animation: AnimationReferenceMetadata,\n    options: AnimationOptions|null = null): AnimationAnimateRefMetadata {\n  return {type: AnimationMetadataType.AnimateRef, animation, options};\n}\n\n/**\n * Finds one or more inner elements within the current element that is\n * being animated within a sequence. Use with `animate()`.\n *\n * @param selector The element to query, or a set of elements that contain Angular-specific\n * characteristics, specified with one or more of the following tokens.\n *  - `query(\":enter\")` or `query(\":leave\")` : Query for newly inserted/removed elements.\n *  - `query(\":animating\")` : Query all currently animating elements.\n *  - `query(\"@triggerName\")` : Query elements that contain an animation trigger.\n *  - `query(\"@*\")` : Query all elements that contain an animation triggers.\n *  - `query(\":self\")` : Include the current element into the animation sequence.\n *\n * @param animation One or more animation steps to apply to the queried element or elements.\n * An array is treated as an animation sequence.\n * @param options An options object. Use the 'limit' field to limit the total number of\n * items to collect.\n * @return An object that encapsulates the query data.\n *\n * @usageNotes\n * Tokens can be merged into a combined query selector string. For example:\n *\n * ```typescript\n *  query(':self, .record:enter, .record:leave, @subTrigger', [...])\n * ```\n *\n * The `query()` function collects multiple elements and works internally by using\n * `element.querySelectorAll`. Use the `limit` field of an options object to limit\n * the total number of items to be collected. For example:\n *\n * ```js\n * query('div', [\n *   animate(...),\n *   animate(...)\n * ], { limit: 1 })\n * ```\n *\n * By default, throws an error when zero items are found. Set the\n * `optional` flag to ignore this error. For example:\n *\n * ```js\n * query('.some-element-that-may-not-be-there', [\n *   animate(...),\n *   animate(...)\n * ], { optional: true })\n * ```\n *\n * ### Usage Example\n *\n * The following example queries for inner elements and animates them\n * individually using `animate()`.\n *\n * ```typescript\n * @Component({\n *   selector: 'inner',\n *   template: `\n *     <div [@queryAnimation]=\"exp\">\n *       <h1>Title</h1>\n *       <div class=\"content\">\n *         Blah blah blah\n *       </div>\n *     </div>\n *   `,\n *   animations: [\n *    trigger('queryAnimation', [\n *      transition('* => goAnimate', [\n *        // hide the inner elements\n *        query('h1', style({ opacity: 0 })),\n *        query('.content', style({ opacity: 0 })),\n *\n *        // animate the inner elements in, one by one\n *        query('h1', animate(1000, style({ opacity: 1 }))),\n *        query('.content', animate(1000, style({ opacity: 1 }))),\n *      ])\n *    ])\n *  ]\n * })\n * class Cmp {\n *   exp = '';\n *\n *   goAnimate() {\n *     this.exp = 'goAnimate';\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport function query(\n    selector: string, animation: AnimationMetadata|AnimationMetadata[],\n    options: AnimationQueryOptions|null = null): AnimationQueryMetadata {\n  return {type: AnimationMetadataType.Query, selector, animation, options};\n}\n\n/**\n * Use within an animation `query()` call to issue a timing gap after\n * each queried item is animated.\n *\n * @param timings A delay value.\n * @param animation One ore more animation steps.\n * @returns An object that encapsulates the stagger data.\n *\n * @usageNotes\n * In the following example, a container element wraps a list of items stamped out\n * by an `ngFor`. The container element contains an animation trigger that will later be set\n * to query for each of the inner items.\n *\n * Each time items are added, the opacity fade-in animation runs,\n * and each removed item is faded out.\n * When either of these animations occur, the stagger effect is\n * applied after each item's animation is started.\n *\n * ```html\n * <!-- list.component.html -->\n * <button (click)=\"toggle()\">Show / Hide Items</button>\n * <hr />\n * <div [@listAnimation]=\"items.length\">\n *   <div *ngFor=\"let item of items\">\n *     {{ item }}\n *   </div>\n * </div>\n * ```\n *\n * Here is the component code:\n *\n * ```typescript\n * import {trigger, transition, style, animate, query, stagger} from '@angular/animations';\n * @Component({\n *   templateUrl: 'list.component.html',\n *   animations: [\n *     trigger('listAnimation', [\n *     ...\n *     ])\n *   ]\n * })\n * class ListComponent {\n *   items = [];\n *\n *   showItems() {\n *     this.items = [0,1,2,3,4];\n *   }\n *\n *   hideItems() {\n *     this.items = [];\n *   }\n *\n *   toggle() {\n *     this.items.length ? this.hideItems() : this.showItems();\n *    }\n *  }\n * ```\n *\n * Here is the animation trigger code:\n *\n * ```typescript\n * trigger('listAnimation', [\n *   transition('* => *', [ // each time the binding value changes\n *     query(':leave', [\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 0 }))\n *       ])\n *     ]),\n *     query(':enter', [\n *       style({ opacity: 0 }),\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 1 }))\n *       ])\n *     ])\n *   ])\n * ])\n * ```\n *\n * @publicApi\n */\nexport function stagger(timings: string|number, animation: AnimationMetadata|AnimationMetadata[]):\n    AnimationStaggerMetadata {\n  return {type: AnimationMetadataType.Stagger, timings, animation};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport function scheduleMicroTask(cb: () => any) {\n  Promise.resolve(null).then(cb);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {scheduleMicroTask} from '../util';\n\n/**\n * Provides programmatic control of a reusable animation sequence,\n * built using the `build()` method of `AnimationBuilder`. The `build()` method\n * returns a factory, whose `create()` method instantiates and initializes this interface.\n *\n * @see `AnimationBuilder`\n * @see `AnimationFactory`\n * @see `animate()`\n *\n * @publicApi\n */\nexport interface AnimationPlayer {\n  /**\n   * Provides a callback to invoke when the animation finishes.\n   * @param fn The callback function.\n   * @see `finish()`\n   */\n  onDone(fn: () => void): void;\n  /**\n   * Provides a callback to invoke when the animation starts.\n   * @param fn The callback function.\n   * @see `run()`\n   */\n  onStart(fn: () => void): void;\n  /**\n   * Provides a callback to invoke after the animation is destroyed.\n   * @param fn The callback function.\n   * @see `destroy()`\n   * @see `beforeDestroy()`\n   */\n  onDestroy(fn: () => void): void;\n  /**\n   * Initializes the animation.\n   */\n  init(): void;\n  /**\n   * Reports whether the animation has started.\n   * @returns True if the animation has started, false otherwise.\n   */\n  hasStarted(): boolean;\n  /**\n   * Runs the animation, invoking the `onStart()` callback.\n   */\n  play(): void;\n  /**\n   * Pauses the animation.\n   */\n  pause(): void;\n  /**\n   * Restarts the paused animation.\n   */\n  restart(): void;\n  /**\n   * Ends the animation, invoking the `onDone()` callback.\n   */\n  finish(): void;\n  /**\n   * Destroys the animation, after invoking the `beforeDestroy()` callback.\n   * Calls the `onDestroy()` callback when destruction is completed.\n   */\n  destroy(): void;\n  /**\n   * Resets the animation to its initial state.\n   */\n  reset(): void;\n  /**\n   * Sets the position of the animation.\n   * @param position A 0-based offset into the duration, in milliseconds.\n   */\n  setPosition(position: any /** TODO #9100 */): void;\n  /**\n   * Reports the current position of the animation.\n   * @returns A 0-based offset into the duration, in milliseconds.\n   */\n  getPosition(): number;\n  /**\n   * The parent of this player, if any.\n   */\n  parentPlayer: AnimationPlayer|null;\n  /**\n   * The total run time of the animation, in milliseconds.\n   */\n  readonly totalTime: number;\n  /**\n   * Provides a callback to invoke before the animation is destroyed.\n   */\n  beforeDestroy?: () => any;\n  /**\n   * @internal\n   * Internal\n   */\n  triggerCallback?: (phaseName: string) => void;\n  /**\n   * @internal\n   * Internal\n   */\n  disabled?: boolean;\n}\n\n/**\n * An empty programmatic controller for reusable animations.\n * Used internally when animations are disabled, to avoid\n * checking for the null case when an animation player is expected.\n *\n * @see `animate()`\n * @see `AnimationPlayer`\n * @see `GroupPlayer`\n *\n * @publicApi\n */\nexport class NoopAnimationPlayer implements AnimationPlayer {\n  private _onDoneFns: Function[] = [];\n  private _onStartFns: Function[] = [];\n  private _onDestroyFns: Function[] = [];\n  private _started = false;\n  private _destroyed = false;\n  private _finished = false;\n  private _position = 0;\n  public parentPlayer: AnimationPlayer|null = null;\n  public readonly totalTime: number;\n  constructor(duration: number = 0, delay: number = 0) {\n    this.totalTime = duration + delay;\n  }\n  private _onFinish() {\n    if (!this._finished) {\n      this._finished = true;\n      this._onDoneFns.forEach(fn => fn());\n      this._onDoneFns = [];\n    }\n  }\n  onStart(fn: () => void): void {\n    this._onStartFns.push(fn);\n  }\n  onDone(fn: () => void): void {\n    this._onDoneFns.push(fn);\n  }\n  onDestroy(fn: () => void): void {\n    this._onDestroyFns.push(fn);\n  }\n  hasStarted(): boolean {\n    return this._started;\n  }\n  init(): void {}\n  play(): void {\n    if (!this.hasStarted()) {\n      this._onStart();\n      this.triggerMicrotask();\n    }\n    this._started = true;\n  }\n\n  /** @internal */\n  triggerMicrotask() {\n    scheduleMicroTask(() => this._onFinish());\n  }\n\n  private _onStart() {\n    this._onStartFns.forEach(fn => fn());\n    this._onStartFns = [];\n  }\n\n  pause(): void {}\n  restart(): void {}\n  finish(): void {\n    this._onFinish();\n  }\n  destroy(): void {\n    if (!this._destroyed) {\n      this._destroyed = true;\n      if (!this.hasStarted()) {\n        this._onStart();\n      }\n      this.finish();\n      this._onDestroyFns.forEach(fn => fn());\n      this._onDestroyFns = [];\n    }\n  }\n  reset(): void {}\n  setPosition(position: number): void {\n    this._position = this.totalTime ? position * this.totalTime : 1;\n  }\n  getPosition(): number {\n    return this.totalTime ? this._position / this.totalTime : 1;\n  }\n\n  /** @internal */\n  triggerCallback(phaseName: string): void {\n    const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n    methods.forEach(fn => fn());\n    methods.length = 0;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {scheduleMicroTask} from '../util';\nimport {AnimationPlayer} from './animation_player';\n\n/**\n * A programmatic controller for a group of reusable animations.\n * Used internally to control animations.\n *\n * @see `AnimationPlayer`\n * @see `{@link animations/group group()}`\n *\n */\nexport class AnimationGroupPlayer implements AnimationPlayer {\n  private _onDoneFns: Function[] = [];\n  private _onStartFns: Function[] = [];\n  private _finished = false;\n  private _started = false;\n  private _destroyed = false;\n  private _onDestroyFns: Function[] = [];\n\n  public parentPlayer: AnimationPlayer|null = null;\n  public totalTime: number = 0;\n  public readonly players: AnimationPlayer[];\n\n  constructor(_players: AnimationPlayer[]) {\n    this.players = _players;\n    let doneCount = 0;\n    let destroyCount = 0;\n    let startCount = 0;\n    const total = this.players.length;\n\n    if (total == 0) {\n      scheduleMicroTask(() => this._onFinish());\n    } else {\n      this.players.forEach(player => {\n        player.onDone(() => {\n          if (++doneCount == total) {\n            this._onFinish();\n          }\n        });\n        player.onDestroy(() => {\n          if (++destroyCount == total) {\n            this._onDestroy();\n          }\n        });\n        player.onStart(() => {\n          if (++startCount == total) {\n            this._onStart();\n          }\n        });\n      });\n    }\n\n    this.totalTime = this.players.reduce((time, player) => Math.max(time, player.totalTime), 0);\n  }\n\n  private _onFinish() {\n    if (!this._finished) {\n      this._finished = true;\n      this._onDoneFns.forEach(fn => fn());\n      this._onDoneFns = [];\n    }\n  }\n\n  init(): void {\n    this.players.forEach(player => player.init());\n  }\n\n  onStart(fn: () => void): void {\n    this._onStartFns.push(fn);\n  }\n\n  private _onStart() {\n    if (!this.hasStarted()) {\n      this._started = true;\n      this._onStartFns.forEach(fn => fn());\n      this._onStartFns = [];\n    }\n  }\n\n  onDone(fn: () => void): void {\n    this._onDoneFns.push(fn);\n  }\n\n  onDestroy(fn: () => void): void {\n    this._onDestroyFns.push(fn);\n  }\n\n  hasStarted() {\n    return this._started;\n  }\n\n  play() {\n    if (!this.parentPlayer) {\n      this.init();\n    }\n    this._onStart();\n    this.players.forEach(player => player.play());\n  }\n\n  pause(): void {\n    this.players.forEach(player => player.pause());\n  }\n\n  restart(): void {\n    this.players.forEach(player => player.restart());\n  }\n\n  finish(): void {\n    this._onFinish();\n    this.players.forEach(player => player.finish());\n  }\n\n  destroy(): void {\n    this._onDestroy();\n  }\n\n  private _onDestroy() {\n    if (!this._destroyed) {\n      this._destroyed = true;\n      this._onFinish();\n      this.players.forEach(player => player.destroy());\n      this._onDestroyFns.forEach(fn => fn());\n      this._onDestroyFns = [];\n    }\n  }\n\n  reset(): void {\n    this.players.forEach(player => player.reset());\n    this._destroyed = false;\n    this._finished = false;\n    this._started = false;\n  }\n\n  setPosition(p: number): void {\n    const timeAtPosition = p * this.totalTime;\n    this.players.forEach(player => {\n      const position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;\n      player.setPosition(position);\n    });\n  }\n\n  getPosition(): number {\n    const longestPlayer =\n        this.players.reduce((longestSoFar: AnimationPlayer|null, player: AnimationPlayer) => {\n          const newPlayerIsLongest =\n              longestSoFar === null || player.totalTime > longestSoFar.totalTime;\n          return newPlayerIsLongest ? player : longestSoFar;\n        }, null);\n    return longestPlayer != null ? longestPlayer.getPosition() : 0;\n  }\n\n  beforeDestroy(): void {\n    this.players.forEach(player => {\n      if (player.beforeDestroy) {\n        player.beforeDestroy();\n      }\n    });\n  }\n\n  /** @internal */\n  triggerCallback(phaseName: string): void {\n    const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n    methods.forEach(fn => fn());\n    methods.length = 0;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent, AnimationPlayer, AUTO_STYLE, NoopAnimationPlayer, ɵAnimationGroupPlayer, ɵPRE_STYLE as PRE_STYLE, ɵStyleData} from '@angular/animations';\n\nimport {AnimationStyleNormalizer} from '../../src/dsl/style_normalization/animation_style_normalizer';\nimport {AnimationDriver} from '../../src/render/animation_driver';\n\n// We don't include ambient node types here since @angular/animations/browser\n// is meant to target the browser so technically it should not depend on node\n// types. `process` is just declared locally here as a result.\ndeclare const process: any;\n\nexport function isBrowser(): boolean {\n  return (typeof window !== 'undefined' && typeof window.document !== 'undefined');\n}\n\nexport function isNode(): boolean {\n  // Checking only for `process` isn't enough to identify whether or not we're in a Node\n  // environment, because Webpack by default will polyfill the `process`. While we can discern\n  // that Webpack polyfilled it by looking at `process.browser`, it's very Webpack-specific and\n  // might not be future-proof. Instead we look at the stringified version of `process` which\n  // is `[object process]` in Node and `[object Object]` when polyfilled.\n  return typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n}\n\nexport function optimizeGroupPlayer(players: AnimationPlayer[]): AnimationPlayer {\n  switch (players.length) {\n    case 0:\n      return new NoopAnimationPlayer();\n    case 1:\n      return players[0];\n    default:\n      return new ɵAnimationGroupPlayer(players);\n  }\n}\n\nexport function normalizeKeyframes(\n    driver: AnimationDriver, normalizer: AnimationStyleNormalizer, element: any,\n    keyframes: ɵStyleData[], preStyles: ɵStyleData = {},\n    postStyles: ɵStyleData = {}): ɵStyleData[] {\n  const errors: string[] = [];\n  const normalizedKeyframes: ɵStyleData[] = [];\n  let previousOffset = -1;\n  let previousKeyframe: ɵStyleData|null = null;\n  keyframes.forEach(kf => {\n    const offset = kf['offset'] as number;\n    const isSameOffset = offset == previousOffset;\n    const normalizedKeyframe: ɵStyleData = (isSameOffset && previousKeyframe) || {};\n    Object.keys(kf).forEach(prop => {\n      let normalizedProp = prop;\n      let normalizedValue = kf[prop];\n      if (prop !== 'offset') {\n        normalizedProp = normalizer.normalizePropertyName(normalizedProp, errors);\n        switch (normalizedValue) {\n          case PRE_STYLE:\n            normalizedValue = preStyles[prop];\n            break;\n\n          case AUTO_STYLE:\n            normalizedValue = postStyles[prop];\n            break;\n\n          default:\n            normalizedValue =\n                normalizer.normalizeStyleValue(prop, normalizedProp, normalizedValue, errors);\n            break;\n        }\n      }\n      normalizedKeyframe[normalizedProp] = normalizedValue;\n    });\n    if (!isSameOffset) {\n      normalizedKeyframes.push(normalizedKeyframe);\n    }\n    previousKeyframe = normalizedKeyframe;\n    previousOffset = offset;\n  });\n  if (errors.length) {\n    const LINE_START = '\\n - ';\n    throw new Error(\n        `Unable to animate due to the following errors:${LINE_START}${errors.join(LINE_START)}`);\n  }\n\n  return normalizedKeyframes;\n}\n\nexport function listenOnPlayer(\n    player: AnimationPlayer, eventName: string, event: AnimationEvent|undefined,\n    callback: (event: any) => any) {\n  switch (eventName) {\n    case 'start':\n      player.onStart(() => callback(event && copyAnimationEvent(event, 'start', player)));\n      break;\n    case 'done':\n      player.onDone(() => callback(event && copyAnimationEvent(event, 'done', player)));\n      break;\n    case 'destroy':\n      player.onDestroy(() => callback(event && copyAnimationEvent(event, 'destroy', player)));\n      break;\n  }\n}\n\nexport function copyAnimationEvent(\n    e: AnimationEvent, phaseName: string, player: AnimationPlayer): AnimationEvent {\n  const totalTime = player.totalTime;\n  const disabled = (player as any).disabled ? true : false;\n  const event = makeAnimationEvent(\n      e.element, e.triggerName, e.fromState, e.toState, phaseName || e.phaseName,\n      totalTime == undefined ? e.totalTime : totalTime, disabled);\n  const data = (e as any)['_data'];\n  if (data != null) {\n    (event as any)['_data'] = data;\n  }\n  return event;\n}\n\nexport function makeAnimationEvent(\n    element: any, triggerName: string, fromState: string, toState: string, phaseName: string = '',\n    totalTime: number = 0, disabled?: boolean): AnimationEvent {\n  return {element, triggerName, fromState, toState, phaseName, totalTime, disabled: !!disabled};\n}\n\nexport function getOrSetAsInMap(\n    map: Map<any, any>|{[key: string]: any}, key: any, defaultValue: any) {\n  let value: any;\n  if (map instanceof Map) {\n    value = map.get(key);\n    if (!value) {\n      map.set(key, value = defaultValue);\n    }\n  } else {\n    value = map[key];\n    if (!value) {\n      value = map[key] = defaultValue;\n    }\n  }\n  return value;\n}\n\nexport function parseTimelineCommand(command: string): [string, string] {\n  const separatorPos = command.indexOf(':');\n  const id = command.substring(1, separatorPos);\n  const action = command.substr(separatorPos + 1);\n  return [id, action];\n}\n\nlet _contains: (elm1: any, elm2: any) => boolean = (elm1: any, elm2: any) => false;\nlet _matches: (element: any, selector: string) => boolean = (element: any, selector: string) =>\n    false;\nlet _query: (element: any, selector: string, multi: boolean) => any[] =\n    (element: any, selector: string, multi: boolean) => {\n      return [];\n    };\n\n// Define utility methods for browsers and platform-server(domino) where Element\n// and utility methods exist.\nconst _isNode = isNode();\nif (_isNode || typeof Element !== 'undefined') {\n  // this is well supported in all browsers\n  _contains = (elm1: any, elm2: any) => {\n    return elm1.contains(elm2) as boolean;\n  };\n\n  _matches = (() => {\n    if (_isNode || Element.prototype.matches) {\n      return (element: any, selector: string) => element.matches(selector);\n    } else {\n      const proto = Element.prototype as any;\n      const fn = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector ||\n          proto.oMatchesSelector || proto.webkitMatchesSelector;\n      if (fn) {\n        return (element: any, selector: string) => fn.apply(element, [selector]);\n      } else {\n        return _matches;\n      }\n    }\n  })();\n\n  _query = (element: any, selector: string, multi: boolean): any[] => {\n    let results: any[] = [];\n    if (multi) {\n      // DO NOT REFACTOR TO USE SPREAD SYNTAX.\n      // For element queries that return sufficiently large NodeList objects,\n      // using spread syntax to populate the results array causes a RangeError\n      // due to the call stack limit being reached. `Array.from` can not be used\n      // as well, since NodeList is not iterable in IE 11, see\n      // https://developer.mozilla.org/en-US/docs/Web/API/NodeList\n      // More info is available in #38551.\n      const elems = element.querySelectorAll(selector);\n      for (let i = 0; i < elems.length; i++) {\n        results.push(elems[i]);\n      }\n    } else {\n      const elm = element.querySelector(selector);\n      if (elm) {\n        results.push(elm);\n      }\n    }\n    return results;\n  };\n}\n\nfunction containsVendorPrefix(prop: string): boolean {\n  // Webkit is the only real popular vendor prefix nowadays\n  // cc: http://shouldiprefix.com/\n  return prop.substring(1, 6) == 'ebkit';  // webkit or Webkit\n}\n\nlet _CACHED_BODY: {style: any}|null = null;\nlet _IS_WEBKIT = false;\nexport function validateStyleProperty(prop: string): boolean {\n  if (!_CACHED_BODY) {\n    _CACHED_BODY = getBodyNode() || {};\n    _IS_WEBKIT = _CACHED_BODY!.style ? ('WebkitAppearance' in _CACHED_BODY!.style) : false;\n  }\n\n  let result = true;\n  if (_CACHED_BODY!.style && !containsVendorPrefix(prop)) {\n    result = prop in _CACHED_BODY!.style;\n    if (!result && _IS_WEBKIT) {\n      const camelProp = 'Webkit' + prop.charAt(0).toUpperCase() + prop.substr(1);\n      result = camelProp in _CACHED_BODY!.style;\n    }\n  }\n\n  return result;\n}\n\nexport function getBodyNode(): any|null {\n  if (typeof document != 'undefined') {\n    return document.body;\n  }\n  return null;\n}\n\nexport const matchesElement = _matches;\nexport const containsElement = _contains;\nexport const invokeQuery = _query;\n\nexport function hypenatePropsObject(object: {[key: string]: any}): {[key: string]: any} {\n  const newObj: {[key: string]: any} = {};\n  Object.keys(object).forEach(prop => {\n    const newProp = prop.replace(/([a-z])([A-Z])/g, '$1-$2');\n    newObj[newProp] = object[prop];\n  });\n  return newObj;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport {AnimationGroupPlayer as ɵAnimationGroupPlayer} from './players/animation_group_player';\nexport const ɵPRE_STYLE = '!';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationPlayer, NoopAnimationPlayer} from '@angular/animations';\nimport {Injectable} from '@angular/core';\n\nimport {containsElement, invokeQuery, matchesElement, validateStyleProperty} from './shared';\n\n/**\n * @publicApi\n */\n@Injectable()\nexport class NoopAnimationDriver implements AnimationDriver {\n  validateStyleProperty(prop: string): boolean {\n    return validateStyleProperty(prop);\n  }\n\n  matchesElement(element: any, selector: string): boolean {\n    return matchesElement(element, selector);\n  }\n\n  containsElement(elm1: any, elm2: any): boolean {\n    return containsElement(elm1, elm2);\n  }\n\n  query(element: any, selector: string, multi: boolean): any[] {\n    return invokeQuery(element, selector, multi);\n  }\n\n  computeStyle(element: any, prop: string, defaultValue?: string): string {\n    return defaultValue || '';\n  }\n\n  animate(\n      element: any, keyframes: {[key: string]: string|number}[], duration: number, delay: number,\n      easing: string, previousPlayers: any[] = [],\n      scrubberAccessRequested?: boolean): AnimationPlayer {\n    return new NoopAnimationPlayer(duration, delay);\n  }\n}\n\n/**\n * @publicApi\n */\nexport abstract class AnimationDriver {\n  static NOOP: AnimationDriver = new NoopAnimationDriver();\n\n  abstract validateStyleProperty(prop: string): boolean;\n\n  abstract matchesElement(element: any, selector: string): boolean;\n\n  abstract containsElement(elm1: any, elm2: any): boolean;\n\n  abstract query(element: any, selector: string, multi: boolean): any[];\n\n  abstract computeStyle(element: any, prop: string, defaultValue?: string): string;\n\n  abstract animate(\n      element: any, keyframes: {[key: string]: string|number}[], duration: number, delay: number,\n      easing?: string|null, previousPlayers?: any[], scrubberAccessRequested?: boolean): any;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimateTimings, AnimationMetadata, AnimationMetadataType, AnimationOptions, sequence, ɵStyleData} from '@angular/animations';\nimport {Ast as AnimationAst, AstVisitor as AnimationAstVisitor} from './dsl/animation_ast';\nimport {AnimationDslVisitor} from './dsl/animation_dsl_visitor';\nimport {isNode} from './render/shared';\n\nexport const ONE_SECOND = 1000;\n\nexport const SUBSTITUTION_EXPR_START = '{{';\nexport const SUBSTITUTION_EXPR_END = '}}';\nexport const ENTER_CLASSNAME = 'ng-enter';\nexport const LEAVE_CLASSNAME = 'ng-leave';\nexport const ENTER_SELECTOR = '.ng-enter';\nexport const LEAVE_SELECTOR = '.ng-leave';\nexport const NG_TRIGGER_CLASSNAME = 'ng-trigger';\nexport const NG_TRIGGER_SELECTOR = '.ng-trigger';\nexport const NG_ANIMATING_CLASSNAME = 'ng-animating';\nexport const NG_ANIMATING_SELECTOR = '.ng-animating';\n\nexport function resolveTimingValue(value: string|number) {\n  if (typeof value == 'number') return value;\n\n  const matches = value.match(/^(-?[\\.\\d]+)(m?s)/);\n  if (!matches || matches.length < 2) return 0;\n\n  return _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);\n}\n\nfunction _convertTimeValueToMS(value: number, unit: string): number {\n  switch (unit) {\n    case 's':\n      return value * ONE_SECOND;\n    default:  // ms or something else\n      return value;\n  }\n}\n\nexport function resolveTiming(\n    timings: string|number|AnimateTimings, errors: any[], allowNegativeValues?: boolean) {\n  return timings.hasOwnProperty('duration') ?\n      <AnimateTimings>timings :\n      parseTimeExpression(<string|number>timings, errors, allowNegativeValues);\n}\n\nfunction parseTimeExpression(\n    exp: string|number, errors: string[], allowNegativeValues?: boolean): AnimateTimings {\n  const regex = /^(-?[\\.\\d]+)(m?s)(?:\\s+(-?[\\.\\d]+)(m?s))?(?:\\s+([-a-z]+(?:\\(.+?\\))?))?$/i;\n  let duration: number;\n  let delay: number = 0;\n  let easing: string = '';\n  if (typeof exp === 'string') {\n    const matches = exp.match(regex);\n    if (matches === null) {\n      errors.push(`The provided timing value \"${exp}\" is invalid.`);\n      return {duration: 0, delay: 0, easing: ''};\n    }\n\n    duration = _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);\n\n    const delayMatch = matches[3];\n    if (delayMatch != null) {\n      delay = _convertTimeValueToMS(parseFloat(delayMatch), matches[4]);\n    }\n\n    const easingVal = matches[5];\n    if (easingVal) {\n      easing = easingVal;\n    }\n  } else {\n    duration = exp;\n  }\n\n  if (!allowNegativeValues) {\n    let containsErrors = false;\n    let startIndex = errors.length;\n    if (duration < 0) {\n      errors.push(`Duration values below 0 are not allowed for this animation step.`);\n      containsErrors = true;\n    }\n    if (delay < 0) {\n      errors.push(`Delay values below 0 are not allowed for this animation step.`);\n      containsErrors = true;\n    }\n    if (containsErrors) {\n      errors.splice(startIndex, 0, `The provided timing value \"${exp}\" is invalid.`);\n    }\n  }\n\n  return {duration, delay, easing};\n}\n\nexport function copyObj(\n    obj: {[key: string]: any}, destination: {[key: string]: any} = {}): {[key: string]: any} {\n  Object.keys(obj).forEach(prop => {\n    destination[prop] = obj[prop];\n  });\n  return destination;\n}\n\nexport function normalizeStyles(styles: ɵStyleData|ɵStyleData[]): ɵStyleData {\n  const normalizedStyles: ɵStyleData = {};\n  if (Array.isArray(styles)) {\n    styles.forEach(data => copyStyles(data, false, normalizedStyles));\n  } else {\n    copyStyles(styles, false, normalizedStyles);\n  }\n  return normalizedStyles;\n}\n\nexport function copyStyles(\n    styles: ɵStyleData, readPrototype: boolean, destination: ɵStyleData = {}): ɵStyleData {\n  if (readPrototype) {\n    // we make use of a for-in loop so that the\n    // prototypically inherited properties are\n    // revealed from the backFill map\n    for (let prop in styles) {\n      destination[prop] = styles[prop];\n    }\n  } else {\n    copyObj(styles, destination);\n  }\n  return destination;\n}\n\nfunction getStyleAttributeString(element: any, key: string, value: string) {\n  // Return the key-value pair string to be added to the style attribute for the\n  // given CSS style key.\n  if (value) {\n    return key + ':' + value + ';';\n  } else {\n    return '';\n  }\n}\n\nfunction writeStyleAttribute(element: any) {\n  // Read the style property of the element and manually reflect it to the\n  // style attribute. This is needed because Domino on platform-server doesn't\n  // understand the full set of allowed CSS properties and doesn't reflect some\n  // of them automatically.\n  let styleAttrValue = '';\n  for (let i = 0; i < element.style.length; i++) {\n    const key = element.style.item(i);\n    styleAttrValue += getStyleAttributeString(element, key, element.style.getPropertyValue(key));\n  }\n  for (const key in element.style) {\n    // Skip internal Domino properties that don't need to be reflected.\n    if (!element.style.hasOwnProperty(key) || key.startsWith('_')) {\n      continue;\n    }\n    const dashKey = camelCaseToDashCase(key);\n    styleAttrValue += getStyleAttributeString(element, dashKey, element.style[key]);\n  }\n  element.setAttribute('style', styleAttrValue);\n}\n\nexport function setStyles(element: any, styles: ɵStyleData, formerStyles?: {[key: string]: any}) {\n  if (element['style']) {\n    Object.keys(styles).forEach(prop => {\n      const camelProp = dashCaseToCamelCase(prop);\n      if (formerStyles && !formerStyles.hasOwnProperty(prop)) {\n        formerStyles[prop] = element.style[camelProp];\n      }\n      element.style[camelProp] = styles[prop];\n    });\n    // On the server set the 'style' attribute since it's not automatically reflected.\n    if (isNode()) {\n      writeStyleAttribute(element);\n    }\n  }\n}\n\nexport function eraseStyles(element: any, styles: ɵStyleData) {\n  if (element['style']) {\n    Object.keys(styles).forEach(prop => {\n      const camelProp = dashCaseToCamelCase(prop);\n      element.style[camelProp] = '';\n    });\n    // On the server set the 'style' attribute since it's not automatically reflected.\n    if (isNode()) {\n      writeStyleAttribute(element);\n    }\n  }\n}\n\nexport function normalizeAnimationEntry(steps: AnimationMetadata|\n                                        AnimationMetadata[]): AnimationMetadata {\n  if (Array.isArray(steps)) {\n    if (steps.length == 1) return steps[0];\n    return sequence(steps);\n  }\n  return steps as AnimationMetadata;\n}\n\nexport function validateStyleParams(\n    value: string|number, options: AnimationOptions, errors: any[]) {\n  const params = options.params || {};\n  const matches = extractStyleParams(value);\n  if (matches.length) {\n    matches.forEach(varName => {\n      if (!params.hasOwnProperty(varName)) {\n        errors.push(\n            `Unable to resolve the local animation param ${varName} in the given list of values`);\n      }\n    });\n  }\n}\n\nconst PARAM_REGEX =\n    new RegExp(`${SUBSTITUTION_EXPR_START}\\\\s*(.+?)\\\\s*${SUBSTITUTION_EXPR_END}`, 'g');\nexport function extractStyleParams(value: string|number): string[] {\n  let params: string[] = [];\n  if (typeof value === 'string') {\n    let match: any;\n    while (match = PARAM_REGEX.exec(value)) {\n      params.push(match[1] as string);\n    }\n    PARAM_REGEX.lastIndex = 0;\n  }\n  return params;\n}\n\nexport function interpolateParams(\n    value: string|number, params: {[name: string]: any}, errors: any[]): string|number {\n  const original = value.toString();\n  const str = original.replace(PARAM_REGEX, (_, varName) => {\n    let localVal = params[varName];\n    // this means that the value was never overridden by the data passed in by the user\n    if (!params.hasOwnProperty(varName)) {\n      errors.push(`Please provide a value for the animation param ${varName}`);\n      localVal = '';\n    }\n    return localVal.toString();\n  });\n\n  // we do this to assert that numeric values stay as they are\n  return str == original ? value : str;\n}\n\nexport function iteratorToArray(iterator: any): any[] {\n  const arr: any[] = [];\n  let item = iterator.next();\n  while (!item.done) {\n    arr.push(item.value);\n    item = iterator.next();\n  }\n  return arr;\n}\n\nconst DASH_CASE_REGEXP = /-+([a-z0-9])/g;\nexport function dashCaseToCamelCase(input: string): string {\n  return input.replace(DASH_CASE_REGEXP, (...m: any[]) => m[1].toUpperCase());\n}\n\nfunction camelCaseToDashCase(input: string): string {\n  return input.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n\nexport function allowPreviousPlayerStylesMerge(duration: number, delay: number) {\n  return duration === 0 || delay === 0;\n}\n\nexport function balancePreviousStylesIntoKeyframes(\n    element: any, keyframes: {[key: string]: any}[], previousStyles: {[key: string]: any}) {\n  const previousStyleProps = Object.keys(previousStyles);\n  if (previousStyleProps.length && keyframes.length) {\n    let startingKeyframe = keyframes[0];\n    let missingStyleProps: string[] = [];\n    previousStyleProps.forEach(prop => {\n      if (!startingKeyframe.hasOwnProperty(prop)) {\n        missingStyleProps.push(prop);\n      }\n      startingKeyframe[prop] = previousStyles[prop];\n    });\n\n    if (missingStyleProps.length) {\n      // tslint:disable-next-line\n      for (var i = 1; i < keyframes.length; i++) {\n        let kf = keyframes[i];\n        missingStyleProps.forEach(function(prop) {\n          kf[prop] = computeStyle(element, prop);\n        });\n      }\n    }\n  }\n  return keyframes;\n}\n\nexport function visitDslNode(\n    visitor: AnimationDslVisitor, node: AnimationMetadata, context: any): any;\nexport function visitDslNode(\n    visitor: AnimationAstVisitor, node: AnimationAst<AnimationMetadataType>, context: any): any;\nexport function visitDslNode(visitor: any, node: any, context: any): any {\n  switch (node.type) {\n    case AnimationMetadataType.Trigger:\n      return visitor.visitTrigger(node, context);\n    case AnimationMetadataType.State:\n      return visitor.visitState(node, context);\n    case AnimationMetadataType.Transition:\n      return visitor.visitTransition(node, context);\n    case AnimationMetadataType.Sequence:\n      return visitor.visitSequence(node, context);\n    case AnimationMetadataType.Group:\n      return visitor.visitGroup(node, context);\n    case AnimationMetadataType.Animate:\n      return visitor.visitAnimate(node, context);\n    case AnimationMetadataType.Keyframes:\n      return visitor.visitKeyframes(node, context);\n    case AnimationMetadataType.Style:\n      return visitor.visitStyle(node, context);\n    case AnimationMetadataType.Reference:\n      return visitor.visitReference(node, context);\n    case AnimationMetadataType.AnimateChild:\n      return visitor.visitAnimateChild(node, context);\n    case AnimationMetadataType.AnimateRef:\n      return visitor.visitAnimateRef(node, context);\n    case AnimationMetadataType.Query:\n      return visitor.visitQuery(node, context);\n    case AnimationMetadataType.Stagger:\n      return visitor.visitStagger(node, context);\n    default:\n      throw new Error(`Unable to resolve animation metadata node #${node.type}`);\n  }\n}\n\nexport function computeStyle(element: any, prop: string): string {\n  return (<any>window.getComputedStyle(element))[prop];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport const ANY_STATE = '*';\nexport declare type TransitionMatcherFn =\n    (fromState: any, toState: any, element: any, params: {[key: string]: any}) => boolean;\n\nexport function parseTransitionExpr(\n    transitionValue: string|TransitionMatcherFn, errors: string[]): TransitionMatcherFn[] {\n  const expressions: TransitionMatcherFn[] = [];\n  if (typeof transitionValue == 'string') {\n    transitionValue.split(/\\s*,\\s*/).forEach(\n        str => parseInnerTransitionStr(str, expressions, errors));\n  } else {\n    expressions.push(<TransitionMatcherFn>transitionValue);\n  }\n  return expressions;\n}\n\nfunction parseInnerTransitionStr(\n    eventStr: string, expressions: TransitionMatcherFn[], errors: string[]) {\n  if (eventStr[0] == ':') {\n    const result = parseAnimationAlias(eventStr, errors);\n    if (typeof result == 'function') {\n      expressions.push(result);\n      return;\n    }\n    eventStr = result;\n  }\n\n  const match = eventStr.match(/^(\\*|[-\\w]+)\\s*(<?[=-]>)\\s*(\\*|[-\\w]+)$/);\n  if (match == null || match.length < 4) {\n    errors.push(`The provided transition expression \"${eventStr}\" is not supported`);\n    return expressions;\n  }\n\n  const fromState = match[1];\n  const separator = match[2];\n  const toState = match[3];\n  expressions.push(makeLambdaFromStates(fromState, toState));\n\n  const isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;\n  if (separator[0] == '<' && !isFullAnyStateExpr) {\n    expressions.push(makeLambdaFromStates(toState, fromState));\n  }\n}\n\nfunction parseAnimationAlias(alias: string, errors: string[]): string|TransitionMatcherFn {\n  switch (alias) {\n    case ':enter':\n      return 'void => *';\n    case ':leave':\n      return '* => void';\n    case ':increment':\n      return (fromState: any, toState: any): boolean => parseFloat(toState) > parseFloat(fromState);\n    case ':decrement':\n      return (fromState: any, toState: any): boolean => parseFloat(toState) < parseFloat(fromState);\n    default:\n      errors.push(`The transition alias value \"${alias}\" is not supported`);\n      return '* => *';\n  }\n}\n\n// DO NOT REFACTOR ... keep the follow set instantiations\n// with the values intact (closure compiler for some reason\n// removes follow-up lines that add the values outside of\n// the constructor...\nconst TRUE_BOOLEAN_VALUES = new Set<string>(['true', '1']);\nconst FALSE_BOOLEAN_VALUES = new Set<string>(['false', '0']);\n\nfunction makeLambdaFromStates(lhs: string, rhs: string): TransitionMatcherFn {\n  const LHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(lhs) || FALSE_BOOLEAN_VALUES.has(lhs);\n  const RHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(rhs) || FALSE_BOOLEAN_VALUES.has(rhs);\n\n  return (fromState: any, toState: any): boolean => {\n    let lhsMatch = lhs == ANY_STATE || lhs == fromState;\n    let rhsMatch = rhs == ANY_STATE || rhs == toState;\n\n    if (!lhsMatch && LHS_MATCH_BOOLEAN && typeof fromState === 'boolean') {\n      lhsMatch = fromState ? TRUE_BOOLEAN_VALUES.has(lhs) : FALSE_BOOLEAN_VALUES.has(lhs);\n    }\n    if (!rhsMatch && RHS_MATCH_BOOLEAN && typeof toState === 'boolean') {\n      rhsMatch = toState ? TRUE_BOOLEAN_VALUES.has(rhs) : FALSE_BOOLEAN_VALUES.has(rhs);\n    }\n\n    return lhsMatch && rhsMatch;\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimateTimings, AnimationAnimateChildMetadata, AnimationAnimateMetadata, AnimationAnimateRefMetadata, AnimationGroupMetadata, AnimationKeyframesSequenceMetadata, AnimationMetadata, AnimationMetadataType, AnimationOptions, AnimationQueryMetadata, AnimationQueryOptions, AnimationReferenceMetadata, AnimationSequenceMetadata, AnimationStaggerMetadata, AnimationStateMetadata, AnimationStyleMetadata, AnimationTransitionMetadata, AnimationTriggerMetadata, AUTO_STYLE, style, ɵStyleData} from '@angular/animations';\n\nimport {AnimationDriver} from '../render/animation_driver';\nimport {getOrSetAsInMap} from '../render/shared';\nimport {copyObj, ENTER_SELECTOR, extractStyleParams, iteratorToArray, LEAVE_SELECTOR, NG_ANIMATING_SELECTOR, NG_TRIGGER_SELECTOR, normalizeAnimationEntry, resolveTiming, SUBSTITUTION_EXPR_START, validateStyleParams, visitDslNode} from '../util';\n\nimport {AnimateAst, AnimateChildAst, AnimateRefAst, Ast, DynamicTimingAst, GroupAst, KeyframesAst, QueryAst, ReferenceAst, SequenceAst, StaggerAst, StateAst, StyleAst, TimingAst, TransitionAst, TriggerAst} from './animation_ast';\nimport {AnimationDslVisitor} from './animation_dsl_visitor';\nimport {parseTransitionExpr} from './animation_transition_expr';\n\nconst SELF_TOKEN = ':self';\nconst SELF_TOKEN_REGEX = new RegExp(`\\s*${SELF_TOKEN}\\s*,?`, 'g');\n\n/*\n * [Validation]\n * The visitor code below will traverse the animation AST generated by the animation verb functions\n * (the output is a tree of objects) and attempt to perform a series of validations on the data. The\n * following corner-cases will be validated:\n *\n * 1. Overlap of animations\n * Given that a CSS property cannot be animated in more than one place at the same time, it's\n * important that this behavior is detected and validated. The way in which this occurs is that\n * each time a style property is examined, a string-map containing the property will be updated with\n * the start and end times for when the property is used within an animation step.\n *\n * If there are two or more parallel animations that are currently running (these are invoked by the\n * group()) on the same element then the validator will throw an error. Since the start/end timing\n * values are collected for each property then if the current animation step is animating the same\n * property and its timing values fall anywhere into the window of time that the property is\n * currently being animated within then this is what causes an error.\n *\n * 2. Timing values\n * The validator will validate to see if a timing value of `duration delay easing` or\n * `durationNumber` is valid or not.\n *\n * (note that upon validation the code below will replace the timing data with an object containing\n * {duration,delay,easing}.\n *\n * 3. Offset Validation\n * Each of the style() calls are allowed to have an offset value when placed inside of keyframes().\n * Offsets within keyframes() are considered valid when:\n *\n *   - No offsets are used at all\n *   - Each style() entry contains an offset value\n *   - Each offset is between 0 and 1\n *   - Each offset is greater to or equal than the previous one\n *\n * Otherwise an error will be thrown.\n */\nexport function buildAnimationAst(\n    driver: AnimationDriver, metadata: AnimationMetadata|AnimationMetadata[],\n    errors: any[]): Ast<AnimationMetadataType> {\n  return new AnimationAstBuilderVisitor(driver).build(metadata, errors);\n}\n\nconst ROOT_SELECTOR = '';\n\nexport class AnimationAstBuilderVisitor implements AnimationDslVisitor {\n  constructor(private _driver: AnimationDriver) {}\n\n  build(metadata: AnimationMetadata|AnimationMetadata[], errors: any[]):\n      Ast<AnimationMetadataType> {\n    const context = new AnimationAstBuilderContext(errors);\n    this._resetContextStyleTimingState(context);\n    return <Ast<AnimationMetadataType>>visitDslNode(\n        this, normalizeAnimationEntry(metadata), context);\n  }\n\n  private _resetContextStyleTimingState(context: AnimationAstBuilderContext) {\n    context.currentQuerySelector = ROOT_SELECTOR;\n    context.collectedStyles = {};\n    context.collectedStyles[ROOT_SELECTOR] = {};\n    context.currentTime = 0;\n  }\n\n  visitTrigger(metadata: AnimationTriggerMetadata, context: AnimationAstBuilderContext):\n      TriggerAst {\n    let queryCount = context.queryCount = 0;\n    let depCount = context.depCount = 0;\n    const states: StateAst[] = [];\n    const transitions: TransitionAst[] = [];\n    if (metadata.name.charAt(0) == '@') {\n      context.errors.push(\n          'animation triggers cannot be prefixed with an `@` sign (e.g. trigger(\\'@foo\\', [...]))');\n    }\n\n    metadata.definitions.forEach(def => {\n      this._resetContextStyleTimingState(context);\n      if (def.type == AnimationMetadataType.State) {\n        const stateDef = def as AnimationStateMetadata;\n        const name = stateDef.name;\n        name.toString().split(/\\s*,\\s*/).forEach(n => {\n          stateDef.name = n;\n          states.push(this.visitState(stateDef, context));\n        });\n        stateDef.name = name;\n      } else if (def.type == AnimationMetadataType.Transition) {\n        const transition = this.visitTransition(def as AnimationTransitionMetadata, context);\n        queryCount += transition.queryCount;\n        depCount += transition.depCount;\n        transitions.push(transition);\n      } else {\n        context.errors.push(\n            'only state() and transition() definitions can sit inside of a trigger()');\n      }\n    });\n\n    return {\n      type: AnimationMetadataType.Trigger,\n      name: metadata.name,\n      states,\n      transitions,\n      queryCount,\n      depCount,\n      options: null\n    };\n  }\n\n  visitState(metadata: AnimationStateMetadata, context: AnimationAstBuilderContext): StateAst {\n    const styleAst = this.visitStyle(metadata.styles, context);\n    const astParams = (metadata.options && metadata.options.params) || null;\n    if (styleAst.containsDynamicStyles) {\n      const missingSubs = new Set<string>();\n      const params = astParams || {};\n      styleAst.styles.forEach(value => {\n        if (isObject(value)) {\n          const stylesObj = value as any;\n          Object.keys(stylesObj).forEach(prop => {\n            extractStyleParams(stylesObj[prop]).forEach(sub => {\n              if (!params.hasOwnProperty(sub)) {\n                missingSubs.add(sub);\n              }\n            });\n          });\n        }\n      });\n      if (missingSubs.size) {\n        const missingSubsArr = iteratorToArray(missingSubs.values());\n        context.errors.push(`state(\"${\n            metadata\n                .name}\", ...) must define default values for all the following style substitutions: ${\n            missingSubsArr.join(', ')}`);\n      }\n    }\n\n    return {\n      type: AnimationMetadataType.State,\n      name: metadata.name,\n      style: styleAst,\n      options: astParams ? {params: astParams} : null\n    };\n  }\n\n  visitTransition(metadata: AnimationTransitionMetadata, context: AnimationAstBuilderContext):\n      TransitionAst {\n    context.queryCount = 0;\n    context.depCount = 0;\n    const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);\n    const matchers = parseTransitionExpr(metadata.expr, context.errors);\n\n    return {\n      type: AnimationMetadataType.Transition,\n      matchers,\n      animation,\n      queryCount: context.queryCount,\n      depCount: context.depCount,\n      options: normalizeAnimationOptions(metadata.options)\n    };\n  }\n\n  visitSequence(metadata: AnimationSequenceMetadata, context: AnimationAstBuilderContext):\n      SequenceAst {\n    return {\n      type: AnimationMetadataType.Sequence,\n      steps: metadata.steps.map(s => visitDslNode(this, s, context)),\n      options: normalizeAnimationOptions(metadata.options)\n    };\n  }\n\n  visitGroup(metadata: AnimationGroupMetadata, context: AnimationAstBuilderContext): GroupAst {\n    const currentTime = context.currentTime;\n    let furthestTime = 0;\n    const steps = metadata.steps.map(step => {\n      context.currentTime = currentTime;\n      const innerAst = visitDslNode(this, step, context);\n      furthestTime = Math.max(furthestTime, context.currentTime);\n      return innerAst;\n    });\n\n    context.currentTime = furthestTime;\n    return {\n      type: AnimationMetadataType.Group,\n      steps,\n      options: normalizeAnimationOptions(metadata.options)\n    };\n  }\n\n  visitAnimate(metadata: AnimationAnimateMetadata, context: AnimationAstBuilderContext):\n      AnimateAst {\n    const timingAst = constructTimingAst(metadata.timings, context.errors);\n    context.currentAnimateTimings = timingAst;\n\n    let styleAst: StyleAst|KeyframesAst;\n    let styleMetadata: AnimationMetadata = metadata.styles ? metadata.styles : style({});\n    if (styleMetadata.type == AnimationMetadataType.Keyframes) {\n      styleAst = this.visitKeyframes(styleMetadata as AnimationKeyframesSequenceMetadata, context);\n    } else {\n      let styleMetadata = metadata.styles as AnimationStyleMetadata;\n      let isEmpty = false;\n      if (!styleMetadata) {\n        isEmpty = true;\n        const newStyleData: {[prop: string]: string|number} = {};\n        if (timingAst.easing) {\n          newStyleData['easing'] = timingAst.easing;\n        }\n        styleMetadata = style(newStyleData);\n      }\n      context.currentTime += timingAst.duration + timingAst.delay;\n      const _styleAst = this.visitStyle(styleMetadata, context);\n      _styleAst.isEmptyStep = isEmpty;\n      styleAst = _styleAst;\n    }\n\n    context.currentAnimateTimings = null;\n    return {\n      type: AnimationMetadataType.Animate,\n      timings: timingAst,\n      style: styleAst,\n      options: null\n    };\n  }\n\n  visitStyle(metadata: AnimationStyleMetadata, context: AnimationAstBuilderContext): StyleAst {\n    const ast = this._makeStyleAst(metadata, context);\n    this._validateStyleAst(ast, context);\n    return ast;\n  }\n\n  private _makeStyleAst(metadata: AnimationStyleMetadata, context: AnimationAstBuilderContext):\n      StyleAst {\n    const styles: (ɵStyleData|string)[] = [];\n    if (Array.isArray(metadata.styles)) {\n      (metadata.styles as (ɵStyleData | string)[]).forEach(styleTuple => {\n        if (typeof styleTuple == 'string') {\n          if (styleTuple == AUTO_STYLE) {\n            styles.push(styleTuple);\n          } else {\n            context.errors.push(`The provided style string value ${styleTuple} is not allowed.`);\n          }\n        } else {\n          styles.push(styleTuple);\n        }\n      });\n    } else {\n      styles.push(metadata.styles);\n    }\n\n    let containsDynamicStyles = false;\n    let collectedEasing: string|null = null;\n    styles.forEach(styleData => {\n      if (isObject(styleData)) {\n        const styleMap = styleData as ɵStyleData;\n        const easing = styleMap['easing'];\n        if (easing) {\n          collectedEasing = easing as string;\n          delete styleMap['easing'];\n        }\n        if (!containsDynamicStyles) {\n          for (let prop in styleMap) {\n            const value = styleMap[prop];\n            if (value.toString().indexOf(SUBSTITUTION_EXPR_START) >= 0) {\n              containsDynamicStyles = true;\n              break;\n            }\n          }\n        }\n      }\n    });\n\n    return {\n      type: AnimationMetadataType.Style,\n      styles,\n      easing: collectedEasing,\n      offset: metadata.offset,\n      containsDynamicStyles,\n      options: null\n    };\n  }\n\n  private _validateStyleAst(ast: StyleAst, context: AnimationAstBuilderContext): void {\n    const timings = context.currentAnimateTimings;\n    let endTime = context.currentTime;\n    let startTime = context.currentTime;\n    if (timings && startTime > 0) {\n      startTime -= timings.duration + timings.delay;\n    }\n\n    ast.styles.forEach(tuple => {\n      if (typeof tuple == 'string') return;\n\n      Object.keys(tuple).forEach(prop => {\n        if (!this._driver.validateStyleProperty(prop)) {\n          context.errors.push(`The provided animation property \"${\n              prop}\" is not a supported CSS property for animations`);\n          return;\n        }\n\n        const collectedStyles = context.collectedStyles[context.currentQuerySelector!];\n        const collectedEntry = collectedStyles[prop];\n        let updateCollectedStyle = true;\n        if (collectedEntry) {\n          if (startTime != endTime && startTime >= collectedEntry.startTime &&\n              endTime <= collectedEntry.endTime) {\n            context.errors.push(`The CSS property \"${prop}\" that exists between the times of \"${\n                collectedEntry.startTime}ms\" and \"${\n                collectedEntry\n                    .endTime}ms\" is also being animated in a parallel animation between the times of \"${\n                startTime}ms\" and \"${endTime}ms\"`);\n            updateCollectedStyle = false;\n          }\n\n          // we always choose the smaller start time value since we\n          // want to have a record of the entire animation window where\n          // the style property is being animated in between\n          startTime = collectedEntry.startTime;\n        }\n\n        if (updateCollectedStyle) {\n          collectedStyles[prop] = {startTime, endTime};\n        }\n\n        if (context.options) {\n          validateStyleParams(tuple[prop], context.options, context.errors);\n        }\n      });\n    });\n  }\n\n  visitKeyframes(metadata: AnimationKeyframesSequenceMetadata, context: AnimationAstBuilderContext):\n      KeyframesAst {\n    const ast: KeyframesAst = {type: AnimationMetadataType.Keyframes, styles: [], options: null};\n    if (!context.currentAnimateTimings) {\n      context.errors.push(`keyframes() must be placed inside of a call to animate()`);\n      return ast;\n    }\n\n    const MAX_KEYFRAME_OFFSET = 1;\n\n    let totalKeyframesWithOffsets = 0;\n    const offsets: number[] = [];\n    let offsetsOutOfOrder = false;\n    let keyframesOutOfRange = false;\n    let previousOffset: number = 0;\n\n    const keyframes: StyleAst[] = metadata.steps.map(styles => {\n      const style = this._makeStyleAst(styles, context);\n      let offsetVal: number|null =\n          style.offset != null ? style.offset : consumeOffset(style.styles);\n      let offset: number = 0;\n      if (offsetVal != null) {\n        totalKeyframesWithOffsets++;\n        offset = style.offset = offsetVal;\n      }\n      keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;\n      offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;\n      previousOffset = offset;\n      offsets.push(offset);\n      return style;\n    });\n\n    if (keyframesOutOfRange) {\n      context.errors.push(`Please ensure that all keyframe offsets are between 0 and 1`);\n    }\n\n    if (offsetsOutOfOrder) {\n      context.errors.push(`Please ensure that all keyframe offsets are in order`);\n    }\n\n    const length = metadata.steps.length;\n    let generatedOffset = 0;\n    if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {\n      context.errors.push(`Not all style() steps within the declared keyframes() contain offsets`);\n    } else if (totalKeyframesWithOffsets == 0) {\n      generatedOffset = MAX_KEYFRAME_OFFSET / (length - 1);\n    }\n\n    const limit = length - 1;\n    const currentTime = context.currentTime;\n    const currentAnimateTimings = context.currentAnimateTimings!;\n    const animateDuration = currentAnimateTimings.duration;\n    keyframes.forEach((kf, i) => {\n      const offset = generatedOffset > 0 ? (i == limit ? 1 : (generatedOffset * i)) : offsets[i];\n      const durationUpToThisFrame = offset * animateDuration;\n      context.currentTime = currentTime + currentAnimateTimings.delay + durationUpToThisFrame;\n      currentAnimateTimings.duration = durationUpToThisFrame;\n      this._validateStyleAst(kf, context);\n      kf.offset = offset;\n\n      ast.styles.push(kf);\n    });\n\n    return ast;\n  }\n\n  visitReference(metadata: AnimationReferenceMetadata, context: AnimationAstBuilderContext):\n      ReferenceAst {\n    return {\n      type: AnimationMetadataType.Reference,\n      animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),\n      options: normalizeAnimationOptions(metadata.options)\n    };\n  }\n\n  visitAnimateChild(metadata: AnimationAnimateChildMetadata, context: AnimationAstBuilderContext):\n      AnimateChildAst {\n    context.depCount++;\n    return {\n      type: AnimationMetadataType.AnimateChild,\n      options: normalizeAnimationOptions(metadata.options)\n    };\n  }\n\n  visitAnimateRef(metadata: AnimationAnimateRefMetadata, context: AnimationAstBuilderContext):\n      AnimateRefAst {\n    return {\n      type: AnimationMetadataType.AnimateRef,\n      animation: this.visitReference(metadata.animation, context),\n      options: normalizeAnimationOptions(metadata.options)\n    };\n  }\n\n  visitQuery(metadata: AnimationQueryMetadata, context: AnimationAstBuilderContext): QueryAst {\n    const parentSelector = context.currentQuerySelector!;\n    const options = (metadata.options || {}) as AnimationQueryOptions;\n\n    context.queryCount++;\n    context.currentQuery = metadata;\n    const [selector, includeSelf] = normalizeSelector(metadata.selector);\n    context.currentQuerySelector =\n        parentSelector.length ? (parentSelector + ' ' + selector) : selector;\n    getOrSetAsInMap(context.collectedStyles, context.currentQuerySelector, {});\n\n    const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);\n    context.currentQuery = null;\n    context.currentQuerySelector = parentSelector;\n\n    return {\n      type: AnimationMetadataType.Query,\n      selector,\n      limit: options.limit || 0,\n      optional: !!options.optional,\n      includeSelf,\n      animation,\n      originalSelector: metadata.selector,\n      options: normalizeAnimationOptions(metadata.options)\n    };\n  }\n\n  visitStagger(metadata: AnimationStaggerMetadata, context: AnimationAstBuilderContext):\n      StaggerAst {\n    if (!context.currentQuery) {\n      context.errors.push(`stagger() can only be used inside of query()`);\n    }\n    const timings = metadata.timings === 'full' ?\n        {duration: 0, delay: 0, easing: 'full'} :\n        resolveTiming(metadata.timings, context.errors, true);\n\n    return {\n      type: AnimationMetadataType.Stagger,\n      animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),\n      timings,\n      options: null\n    };\n  }\n}\n\nfunction normalizeSelector(selector: string): [string, boolean] {\n  const hasAmpersand = selector.split(/\\s*,\\s*/).find(token => token == SELF_TOKEN) ? true : false;\n  if (hasAmpersand) {\n    selector = selector.replace(SELF_TOKEN_REGEX, '');\n  }\n\n  // the :enter and :leave selectors are filled in at runtime during timeline building\n  selector = selector.replace(/@\\*/g, NG_TRIGGER_SELECTOR)\n                 .replace(/@\\w+/g, match => NG_TRIGGER_SELECTOR + '-' + match.substr(1))\n                 .replace(/:animating/g, NG_ANIMATING_SELECTOR);\n\n  return [selector, hasAmpersand];\n}\n\n\nfunction normalizeParams(obj: {[key: string]: any}|any): {[key: string]: any}|null {\n  return obj ? copyObj(obj) : null;\n}\n\nexport type StyleTimeTuple = {\n  startTime: number; endTime: number;\n};\n\nexport class AnimationAstBuilderContext {\n  public queryCount: number = 0;\n  public depCount: number = 0;\n  public currentTransition: AnimationTransitionMetadata|null = null;\n  public currentQuery: AnimationQueryMetadata|null = null;\n  public currentQuerySelector: string|null = null;\n  public currentAnimateTimings: TimingAst|null = null;\n  public currentTime: number = 0;\n  public collectedStyles: {[selectorName: string]: {[propName: string]: StyleTimeTuple}} = {};\n  public options: AnimationOptions|null = null;\n  constructor(public errors: any[]) {}\n}\n\nfunction consumeOffset(styles: ɵStyleData|string|(ɵStyleData | string)[]): number|null {\n  if (typeof styles == 'string') return null;\n\n  let offset: number|null = null;\n\n  if (Array.isArray(styles)) {\n    styles.forEach(styleTuple => {\n      if (isObject(styleTuple) && styleTuple.hasOwnProperty('offset')) {\n        const obj = styleTuple as ɵStyleData;\n        offset = parseFloat(obj['offset'] as string);\n        delete obj['offset'];\n      }\n    });\n  } else if (isObject(styles) && styles.hasOwnProperty('offset')) {\n    const obj = styles;\n    offset = parseFloat(obj['offset'] as string);\n    delete obj['offset'];\n  }\n  return offset;\n}\n\nfunction isObject(value: any): boolean {\n  return !Array.isArray(value) && typeof value == 'object';\n}\n\nfunction constructTimingAst(value: string|number|AnimateTimings, errors: any[]) {\n  let timings: AnimateTimings|null = null;\n  if (value.hasOwnProperty('duration')) {\n    timings = value as AnimateTimings;\n  } else if (typeof value == 'number') {\n    const duration = resolveTiming(value, errors).duration;\n    return makeTimingAst(duration, 0, '');\n  }\n\n  const strValue = value as string;\n  const isDynamic = strValue.split(/\\s+/).some(v => v.charAt(0) == '{' && v.charAt(1) == '{');\n  if (isDynamic) {\n    const ast = makeTimingAst(0, 0, '') as any;\n    ast.dynamic = true;\n    ast.strValue = strValue;\n    return ast as DynamicTimingAst;\n  }\n\n  timings = timings || resolveTiming(strValue, errors);\n  return makeTimingAst(timings.duration, timings.delay, timings.easing);\n}\n\nfunction normalizeAnimationOptions(options: AnimationOptions|null): AnimationOptions {\n  if (options) {\n    options = copyObj(options);\n    if (options['params']) {\n      options['params'] = normalizeParams(options['params'])!;\n    }\n  } else {\n    options = {};\n  }\n  return options;\n}\n\nfunction makeTimingAst(duration: number, delay: number, easing: string|null): TimingAst {\n  return {duration, delay, easing};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ɵStyleData} from '@angular/animations';\nimport {AnimationEngineInstruction, AnimationTransitionInstructionType} from '../render/animation_engine_instruction';\n\nexport interface AnimationTimelineInstruction extends AnimationEngineInstruction {\n  element: any;\n  keyframes: ɵStyleData[];\n  preStyleProps: string[];\n  postStyleProps: string[];\n  duration: number;\n  delay: number;\n  totalTime: number;\n  easing: string|null;\n  stretchStartingKeyframe?: boolean;\n  subTimeline: boolean;\n}\n\nexport function createTimelineInstruction(\n    element: any, keyframes: ɵStyleData[], preStyleProps: string[], postStyleProps: string[],\n    duration: number, delay: number, easing: string|null = null,\n    subTimeline: boolean = false): AnimationTimelineInstruction {\n  return {\n    type: AnimationTransitionInstructionType.TimelineAnimation,\n    element,\n    keyframes,\n    preStyleProps,\n    postStyleProps,\n    duration,\n    delay,\n    totalTime: duration + delay,\n    easing,\n    subTimeline\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationTimelineInstruction} from './animation_timeline_instruction';\n\nexport class ElementInstructionMap {\n  private _map = new Map<any, AnimationTimelineInstruction[]>();\n\n  consume(element: any): AnimationTimelineInstruction[] {\n    let instructions = this._map.get(element);\n    if (instructions) {\n      this._map.delete(element);\n    } else {\n      instructions = [];\n    }\n    return instructions;\n  }\n\n  append(element: any, instructions: AnimationTimelineInstruction[]) {\n    let existingInstructions = this._map.get(element);\n    if (!existingInstructions) {\n      this._map.set(element, existingInstructions = []);\n    }\n    existingInstructions.push(...instructions);\n  }\n\n  has(element: any): boolean {\n    return this._map.has(element);\n  }\n\n  clear() {\n    this._map.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimateChildOptions, AnimateTimings, AnimationMetadataType, AnimationOptions, AnimationQueryOptions, AUTO_STYLE, ɵPRE_STYLE as PRE_STYLE, ɵStyleData} from '@angular/animations';\n\nimport {AnimationDriver} from '../render/animation_driver';\nimport {copyObj, copyStyles, interpolateParams, iteratorToArray, resolveTiming, resolveTimingValue, visitDslNode} from '../util';\n\nimport {AnimateAst, AnimateChildAst, AnimateRefAst, Ast, AstVisitor, DynamicTimingAst, GroupAst, KeyframesAst, QueryAst, ReferenceAst, SequenceAst, StaggerAst, StateAst, StyleAst, TimingAst, TransitionAst, TriggerAst} from './animation_ast';\nimport {AnimationTimelineInstruction, createTimelineInstruction} from './animation_timeline_instruction';\nimport {ElementInstructionMap} from './element_instruction_map';\n\nconst ONE_FRAME_IN_MILLISECONDS = 1;\nconst ENTER_TOKEN = ':enter';\nconst ENTER_TOKEN_REGEX = new RegExp(ENTER_TOKEN, 'g');\nconst LEAVE_TOKEN = ':leave';\nconst LEAVE_TOKEN_REGEX = new RegExp(LEAVE_TOKEN, 'g');\n\n/*\n * The code within this file aims to generate web-animations-compatible keyframes from Angular's\n * animation DSL code.\n *\n * The code below will be converted from:\n *\n * ```\n * sequence([\n *   style({ opacity: 0 }),\n *   animate(1000, style({ opacity: 0 }))\n * ])\n * ```\n *\n * To:\n * ```\n * keyframes = [{ opacity: 0, offset: 0 }, { opacity: 1, offset: 1 }]\n * duration = 1000\n * delay = 0\n * easing = ''\n * ```\n *\n * For this operation to cover the combination of animation verbs (style, animate, group, etc...) a\n * combination of prototypical inheritance, AST traversal and merge-sort-like algorithms are used.\n *\n * [AST Traversal]\n * Each of the animation verbs, when executed, will return an string-map object representing what\n * type of action it is (style, animate, group, etc...) and the data associated with it. This means\n * that when functional composition mix of these functions is evaluated (like in the example above)\n * then it will end up producing a tree of objects representing the animation itself.\n *\n * When this animation object tree is processed by the visitor code below it will visit each of the\n * verb statements within the visitor. And during each visit it will build the context of the\n * animation keyframes by interacting with the `TimelineBuilder`.\n *\n * [TimelineBuilder]\n * This class is responsible for tracking the styles and building a series of keyframe objects for a\n * timeline between a start and end time. The builder starts off with an initial timeline and each\n * time the AST comes across a `group()`, `keyframes()` or a combination of the two wihtin a\n * `sequence()` then it will generate a sub timeline for each step as well as a new one after\n * they are complete.\n *\n * As the AST is traversed, the timing state on each of the timelines will be incremented. If a sub\n * timeline was created (based on one of the cases above) then the parent timeline will attempt to\n * merge the styles used within the sub timelines into itself (only with group() this will happen).\n * This happens with a merge operation (much like how the merge works in mergesort) and it will only\n * copy the most recently used styles from the sub timelines into the parent timeline. This ensures\n * that if the styles are used later on in another phase of the animation then they will be the most\n * up-to-date values.\n *\n * [How Missing Styles Are Updated]\n * Each timeline has a `backFill` property which is responsible for filling in new styles into\n * already processed keyframes if a new style shows up later within the animation sequence.\n *\n * ```\n * sequence([\n *   style({ width: 0 }),\n *   animate(1000, style({ width: 100 })),\n *   animate(1000, style({ width: 200 })),\n *   animate(1000, style({ width: 300 }))\n *   animate(1000, style({ width: 400, height: 400 })) // notice how `height` doesn't exist anywhere\n * else\n * ])\n * ```\n *\n * What is happening here is that the `height` value is added later in the sequence, but is missing\n * from all previous animation steps. Therefore when a keyframe is created it would also be missing\n * from all previous keyframes up until where it is first used. For the timeline keyframe generation\n * to properly fill in the style it will place the previous value (the value from the parent\n * timeline) or a default value of `*` into the backFill object. Given that each of the keyframe\n * styles are objects that prototypically inhert from the backFill object, this means that if a\n * value is added into the backFill then it will automatically propagate any missing values to all\n * keyframes. Therefore the missing `height` value will be properly filled into the already\n * processed keyframes.\n *\n * When a sub-timeline is created it will have its own backFill property. This is done so that\n * styles present within the sub-timeline do not accidentally seep into the previous/future timeline\n * keyframes\n *\n * (For prototypically-inherited contents to be detected a `for(i in obj)` loop must be used.)\n *\n * [Validation]\n * The code in this file is not responsible for validation. That functionality happens with within\n * the `AnimationValidatorVisitor` code.\n */\nexport function buildAnimationTimelines(\n    driver: AnimationDriver, rootElement: any, ast: Ast<AnimationMetadataType>,\n    enterClassName: string, leaveClassName: string, startingStyles: ɵStyleData = {},\n    finalStyles: ɵStyleData = {}, options: AnimationOptions,\n    subInstructions?: ElementInstructionMap, errors: any[] = []): AnimationTimelineInstruction[] {\n  return new AnimationTimelineBuilderVisitor().buildKeyframes(\n      driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles,\n      options, subInstructions, errors);\n}\n\nexport class AnimationTimelineBuilderVisitor implements AstVisitor {\n  buildKeyframes(\n      driver: AnimationDriver, rootElement: any, ast: Ast<AnimationMetadataType>,\n      enterClassName: string, leaveClassName: string, startingStyles: ɵStyleData,\n      finalStyles: ɵStyleData, options: AnimationOptions, subInstructions?: ElementInstructionMap,\n      errors: any[] = []): AnimationTimelineInstruction[] {\n    subInstructions = subInstructions || new ElementInstructionMap();\n    const context = new AnimationTimelineContext(\n        driver, rootElement, subInstructions, enterClassName, leaveClassName, errors, []);\n    context.options = options;\n    context.currentTimeline.setStyles([startingStyles], null, context.errors, options);\n\n    visitDslNode(this, ast, context);\n\n    // this checks to see if an actual animation happened\n    const timelines = context.timelines.filter(timeline => timeline.containsAnimation());\n    if (timelines.length && Object.keys(finalStyles).length) {\n      const tl = timelines[timelines.length - 1];\n      if (!tl.allowOnlyTimelineStyles()) {\n        tl.setStyles([finalStyles], null, context.errors, options);\n      }\n    }\n\n    return timelines.length ? timelines.map(timeline => timeline.buildKeyframes()) :\n                              [createTimelineInstruction(rootElement, [], [], [], 0, 0, '', false)];\n  }\n\n  visitTrigger(ast: TriggerAst, context: AnimationTimelineContext): any {\n    // these values are not visited in this AST\n  }\n\n  visitState(ast: StateAst, context: AnimationTimelineContext): any {\n    // these values are not visited in this AST\n  }\n\n  visitTransition(ast: TransitionAst, context: AnimationTimelineContext): any {\n    // these values are not visited in this AST\n  }\n\n  visitAnimateChild(ast: AnimateChildAst, context: AnimationTimelineContext): any {\n    const elementInstructions = context.subInstructions.consume(context.element);\n    if (elementInstructions) {\n      const innerContext = context.createSubContext(ast.options);\n      const startTime = context.currentTimeline.currentTime;\n      const endTime = this._visitSubInstructions(\n          elementInstructions, innerContext, innerContext.options as AnimateChildOptions);\n      if (startTime != endTime) {\n        // we do this on the upper context because we created a sub context for\n        // the sub child animations\n        context.transformIntoNewTimeline(endTime);\n      }\n    }\n    context.previousNode = ast;\n  }\n\n  visitAnimateRef(ast: AnimateRefAst, context: AnimationTimelineContext): any {\n    const innerContext = context.createSubContext(ast.options);\n    innerContext.transformIntoNewTimeline();\n    this.visitReference(ast.animation, innerContext);\n    context.transformIntoNewTimeline(innerContext.currentTimeline.currentTime);\n    context.previousNode = ast;\n  }\n\n  private _visitSubInstructions(\n      instructions: AnimationTimelineInstruction[], context: AnimationTimelineContext,\n      options: AnimateChildOptions): number {\n    const startTime = context.currentTimeline.currentTime;\n    let furthestTime = startTime;\n\n    // this is a special-case for when a user wants to skip a sub\n    // animation from being fired entirely.\n    const duration = options.duration != null ? resolveTimingValue(options.duration) : null;\n    const delay = options.delay != null ? resolveTimingValue(options.delay) : null;\n    if (duration !== 0) {\n      instructions.forEach(instruction => {\n        const instructionTimings =\n            context.appendInstructionToTimeline(instruction, duration, delay);\n        furthestTime =\n            Math.max(furthestTime, instructionTimings.duration + instructionTimings.delay);\n      });\n    }\n\n    return furthestTime;\n  }\n\n  visitReference(ast: ReferenceAst, context: AnimationTimelineContext) {\n    context.updateOptions(ast.options, true);\n    visitDslNode(this, ast.animation, context);\n    context.previousNode = ast;\n  }\n\n  visitSequence(ast: SequenceAst, context: AnimationTimelineContext) {\n    const subContextCount = context.subContextCount;\n    let ctx = context;\n    const options = ast.options;\n\n    if (options && (options.params || options.delay)) {\n      ctx = context.createSubContext(options);\n      ctx.transformIntoNewTimeline();\n\n      if (options.delay != null) {\n        if (ctx.previousNode.type == AnimationMetadataType.Style) {\n          ctx.currentTimeline.snapshotCurrentStyles();\n          ctx.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n        }\n\n        const delay = resolveTimingValue(options.delay);\n        ctx.delayNextStep(delay);\n      }\n    }\n\n    if (ast.steps.length) {\n      ast.steps.forEach(s => visitDslNode(this, s, ctx));\n\n      // this is here just incase the inner steps only contain or end with a style() call\n      ctx.currentTimeline.applyStylesToKeyframe();\n\n      // this means that some animation function within the sequence\n      // ended up creating a sub timeline (which means the current\n      // timeline cannot overlap with the contents of the sequence)\n      if (ctx.subContextCount > subContextCount) {\n        ctx.transformIntoNewTimeline();\n      }\n    }\n\n    context.previousNode = ast;\n  }\n\n  visitGroup(ast: GroupAst, context: AnimationTimelineContext) {\n    const innerTimelines: TimelineBuilder[] = [];\n    let furthestTime = context.currentTimeline.currentTime;\n    const delay = ast.options && ast.options.delay ? resolveTimingValue(ast.options.delay) : 0;\n\n    ast.steps.forEach(s => {\n      const innerContext = context.createSubContext(ast.options);\n      if (delay) {\n        innerContext.delayNextStep(delay);\n      }\n\n      visitDslNode(this, s, innerContext);\n      furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);\n      innerTimelines.push(innerContext.currentTimeline);\n    });\n\n    // this operation is run after the AST loop because otherwise\n    // if the parent timeline's collected styles were updated then\n    // it would pass in invalid data into the new-to-be forked items\n    innerTimelines.forEach(\n        timeline => context.currentTimeline.mergeTimelineCollectedStyles(timeline));\n    context.transformIntoNewTimeline(furthestTime);\n    context.previousNode = ast;\n  }\n\n  private _visitTiming(ast: TimingAst, context: AnimationTimelineContext): AnimateTimings {\n    if ((ast as DynamicTimingAst).dynamic) {\n      const strValue = (ast as DynamicTimingAst).strValue;\n      const timingValue =\n          context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;\n      return resolveTiming(timingValue, context.errors);\n    } else {\n      return {duration: ast.duration, delay: ast.delay, easing: ast.easing};\n    }\n  }\n\n  visitAnimate(ast: AnimateAst, context: AnimationTimelineContext) {\n    const timings = context.currentAnimateTimings = this._visitTiming(ast.timings, context);\n    const timeline = context.currentTimeline;\n    if (timings.delay) {\n      context.incrementTime(timings.delay);\n      timeline.snapshotCurrentStyles();\n    }\n\n    const style = ast.style;\n    if (style.type == AnimationMetadataType.Keyframes) {\n      this.visitKeyframes(style, context);\n    } else {\n      context.incrementTime(timings.duration);\n      this.visitStyle(style as StyleAst, context);\n      timeline.applyStylesToKeyframe();\n    }\n\n    context.currentAnimateTimings = null;\n    context.previousNode = ast;\n  }\n\n  visitStyle(ast: StyleAst, context: AnimationTimelineContext) {\n    const timeline = context.currentTimeline;\n    const timings = context.currentAnimateTimings!;\n\n    // this is a special case for when a style() call\n    // directly follows  an animate() call (but not inside of an animate() call)\n    if (!timings && timeline.getCurrentStyleProperties().length) {\n      timeline.forwardFrame();\n    }\n\n    const easing = (timings && timings.easing) || ast.easing;\n    if (ast.isEmptyStep) {\n      timeline.applyEmptyStep(easing);\n    } else {\n      timeline.setStyles(ast.styles, easing, context.errors, context.options);\n    }\n\n    context.previousNode = ast;\n  }\n\n  visitKeyframes(ast: KeyframesAst, context: AnimationTimelineContext) {\n    const currentAnimateTimings = context.currentAnimateTimings!;\n    const startTime = (context.currentTimeline!).duration;\n    const duration = currentAnimateTimings.duration;\n    const innerContext = context.createSubContext();\n    const innerTimeline = innerContext.currentTimeline;\n    innerTimeline.easing = currentAnimateTimings.easing;\n\n    ast.styles.forEach(step => {\n      const offset: number = step.offset || 0;\n      innerTimeline.forwardTime(offset * duration);\n      innerTimeline.setStyles(step.styles, step.easing, context.errors, context.options);\n      innerTimeline.applyStylesToKeyframe();\n    });\n\n    // this will ensure that the parent timeline gets all the styles from\n    // the child even if the new timeline below is not used\n    context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);\n\n    // we do this because the window between this timeline and the sub timeline\n    // should ensure that the styles within are exactly the same as they were before\n    context.transformIntoNewTimeline(startTime + duration);\n    context.previousNode = ast;\n  }\n\n  visitQuery(ast: QueryAst, context: AnimationTimelineContext) {\n    // in the event that the first step before this is a style step we need\n    // to ensure the styles are applied before the children are animated\n    const startTime = context.currentTimeline.currentTime;\n    const options = (ast.options || {}) as AnimationQueryOptions;\n    const delay = options.delay ? resolveTimingValue(options.delay) : 0;\n\n    if (delay &&\n        (context.previousNode.type === AnimationMetadataType.Style ||\n         (startTime == 0 && context.currentTimeline.getCurrentStyleProperties().length))) {\n      context.currentTimeline.snapshotCurrentStyles();\n      context.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n    }\n\n    let furthestTime = startTime;\n    const elms = context.invokeQuery(\n        ast.selector, ast.originalSelector, ast.limit, ast.includeSelf,\n        options.optional ? true : false, context.errors);\n\n    context.currentQueryTotal = elms.length;\n    let sameElementTimeline: TimelineBuilder|null = null;\n    elms.forEach((element, i) => {\n      context.currentQueryIndex = i;\n      const innerContext = context.createSubContext(ast.options, element);\n      if (delay) {\n        innerContext.delayNextStep(delay);\n      }\n\n      if (element === context.element) {\n        sameElementTimeline = innerContext.currentTimeline;\n      }\n\n      visitDslNode(this, ast.animation, innerContext);\n\n      // this is here just incase the inner steps only contain or end\n      // with a style() call (which is here to signal that this is a preparatory\n      // call to style an element before it is animated again)\n      innerContext.currentTimeline.applyStylesToKeyframe();\n\n      const endTime = innerContext.currentTimeline.currentTime;\n      furthestTime = Math.max(furthestTime, endTime);\n    });\n\n    context.currentQueryIndex = 0;\n    context.currentQueryTotal = 0;\n    context.transformIntoNewTimeline(furthestTime);\n\n    if (sameElementTimeline) {\n      context.currentTimeline.mergeTimelineCollectedStyles(sameElementTimeline);\n      context.currentTimeline.snapshotCurrentStyles();\n    }\n\n    context.previousNode = ast;\n  }\n\n  visitStagger(ast: StaggerAst, context: AnimationTimelineContext) {\n    const parentContext = context.parentContext!;\n    const tl = context.currentTimeline;\n    const timings = ast.timings;\n    const duration = Math.abs(timings.duration);\n    const maxTime = duration * (context.currentQueryTotal - 1);\n    let delay = duration * context.currentQueryIndex;\n\n    let staggerTransformer = timings.duration < 0 ? 'reverse' : timings.easing;\n    switch (staggerTransformer) {\n      case 'reverse':\n        delay = maxTime - delay;\n        break;\n      case 'full':\n        delay = parentContext.currentStaggerTime;\n        break;\n    }\n\n    const timeline = context.currentTimeline;\n    if (delay) {\n      timeline.delayNextStep(delay);\n    }\n\n    const startingTime = timeline.currentTime;\n    visitDslNode(this, ast.animation, context);\n    context.previousNode = ast;\n\n    // time = duration + delay\n    // the reason why this computation is so complex is because\n    // the inner timeline may either have a delay value or a stretched\n    // keyframe depending on if a subtimeline is not used or is used.\n    parentContext.currentStaggerTime =\n        (tl.currentTime - startingTime) + (tl.startTime - parentContext.currentTimeline.startTime);\n  }\n}\n\nexport declare type StyleAtTime = {\n  time: number; value: string | number;\n};\n\nconst DEFAULT_NOOP_PREVIOUS_NODE = <Ast<AnimationMetadataType>>{};\nexport class AnimationTimelineContext {\n  public parentContext: AnimationTimelineContext|null = null;\n  public currentTimeline: TimelineBuilder;\n  public currentAnimateTimings: AnimateTimings|null = null;\n  public previousNode: Ast<AnimationMetadataType> = DEFAULT_NOOP_PREVIOUS_NODE;\n  public subContextCount = 0;\n  public options: AnimationOptions = {};\n  public currentQueryIndex: number = 0;\n  public currentQueryTotal: number = 0;\n  public currentStaggerTime: number = 0;\n\n  constructor(\n      private _driver: AnimationDriver, public element: any,\n      public subInstructions: ElementInstructionMap, private _enterClassName: string,\n      private _leaveClassName: string, public errors: any[], public timelines: TimelineBuilder[],\n      initialTimeline?: TimelineBuilder) {\n    this.currentTimeline = initialTimeline || new TimelineBuilder(this._driver, element, 0);\n    timelines.push(this.currentTimeline);\n  }\n\n  get params() {\n    return this.options.params;\n  }\n\n  updateOptions(options: AnimationOptions|null, skipIfExists?: boolean) {\n    if (!options) return;\n\n    const newOptions = options as any;\n    let optionsToUpdate = this.options;\n\n    // NOTE: this will get patched up when other animation methods support duration overrides\n    if (newOptions.duration != null) {\n      (optionsToUpdate as any).duration = resolveTimingValue(newOptions.duration);\n    }\n\n    if (newOptions.delay != null) {\n      optionsToUpdate.delay = resolveTimingValue(newOptions.delay);\n    }\n\n    const newParams = newOptions.params;\n    if (newParams) {\n      let paramsToUpdate: {[name: string]: any} = optionsToUpdate.params!;\n      if (!paramsToUpdate) {\n        paramsToUpdate = this.options.params = {};\n      }\n\n      Object.keys(newParams).forEach(name => {\n        if (!skipIfExists || !paramsToUpdate.hasOwnProperty(name)) {\n          paramsToUpdate[name] = interpolateParams(newParams[name], paramsToUpdate, this.errors);\n        }\n      });\n    }\n  }\n\n  private _copyOptions() {\n    const options: AnimationOptions = {};\n    if (this.options) {\n      const oldParams = this.options.params;\n      if (oldParams) {\n        const params: {[name: string]: any} = options['params'] = {};\n        Object.keys(oldParams).forEach(name => {\n          params[name] = oldParams[name];\n        });\n      }\n    }\n    return options;\n  }\n\n  createSubContext(options: AnimationOptions|null = null, element?: any, newTime?: number):\n      AnimationTimelineContext {\n    const target = element || this.element;\n    const context = new AnimationTimelineContext(\n        this._driver, target, this.subInstructions, this._enterClassName, this._leaveClassName,\n        this.errors, this.timelines, this.currentTimeline.fork(target, newTime || 0));\n    context.previousNode = this.previousNode;\n    context.currentAnimateTimings = this.currentAnimateTimings;\n\n    context.options = this._copyOptions();\n    context.updateOptions(options);\n\n    context.currentQueryIndex = this.currentQueryIndex;\n    context.currentQueryTotal = this.currentQueryTotal;\n    context.parentContext = this;\n    this.subContextCount++;\n    return context;\n  }\n\n  transformIntoNewTimeline(newTime?: number) {\n    this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n    this.currentTimeline = this.currentTimeline.fork(this.element, newTime);\n    this.timelines.push(this.currentTimeline);\n    return this.currentTimeline;\n  }\n\n  appendInstructionToTimeline(\n      instruction: AnimationTimelineInstruction, duration: number|null,\n      delay: number|null): AnimateTimings {\n    const updatedTimings: AnimateTimings = {\n      duration: duration != null ? duration : instruction.duration,\n      delay: this.currentTimeline.currentTime + (delay != null ? delay : 0) + instruction.delay,\n      easing: ''\n    };\n    const builder = new SubTimelineBuilder(\n        this._driver, instruction.element, instruction.keyframes, instruction.preStyleProps,\n        instruction.postStyleProps, updatedTimings, instruction.stretchStartingKeyframe);\n    this.timelines.push(builder);\n    return updatedTimings;\n  }\n\n  incrementTime(time: number) {\n    this.currentTimeline.forwardTime(this.currentTimeline.duration + time);\n  }\n\n  delayNextStep(delay: number) {\n    // negative delays are not yet supported\n    if (delay > 0) {\n      this.currentTimeline.delayNextStep(delay);\n    }\n  }\n\n  invokeQuery(\n      selector: string, originalSelector: string, limit: number, includeSelf: boolean,\n      optional: boolean, errors: any[]): any[] {\n    let results: any[] = [];\n    if (includeSelf) {\n      results.push(this.element);\n    }\n    if (selector.length > 0) {  // if :self is only used then the selector is empty\n      selector = selector.replace(ENTER_TOKEN_REGEX, '.' + this._enterClassName);\n      selector = selector.replace(LEAVE_TOKEN_REGEX, '.' + this._leaveClassName);\n      const multi = limit != 1;\n      let elements = this._driver.query(this.element, selector, multi);\n      if (limit !== 0) {\n        elements = limit < 0 ? elements.slice(elements.length + limit, elements.length) :\n                               elements.slice(0, limit);\n      }\n      results.push(...elements);\n    }\n\n    if (!optional && results.length == 0) {\n      errors.push(`\\`query(\"${originalSelector}\")\\` returned zero elements. (Use \\`query(\"${\n          originalSelector}\", { optional: true })\\` if you wish to allow this.)`);\n    }\n    return results;\n  }\n}\n\n\nexport class TimelineBuilder {\n  public duration: number = 0;\n  // TODO(issue/24571): remove '!'.\n  public easing!: string|null;\n  private _previousKeyframe: ɵStyleData = {};\n  private _currentKeyframe: ɵStyleData = {};\n  private _keyframes = new Map<number, ɵStyleData>();\n  private _styleSummary: {[prop: string]: StyleAtTime} = {};\n  private _localTimelineStyles: ɵStyleData;\n  private _globalTimelineStyles: ɵStyleData;\n  private _pendingStyles: ɵStyleData = {};\n  private _backFill: ɵStyleData = {};\n  private _currentEmptyStepKeyframe: ɵStyleData|null = null;\n\n  constructor(\n      private _driver: AnimationDriver, public element: any, public startTime: number,\n      private _elementTimelineStylesLookup?: Map<any, ɵStyleData>) {\n    if (!this._elementTimelineStylesLookup) {\n      this._elementTimelineStylesLookup = new Map<any, ɵStyleData>();\n    }\n\n    this._localTimelineStyles = Object.create(this._backFill, {});\n    this._globalTimelineStyles = this._elementTimelineStylesLookup.get(element)!;\n    if (!this._globalTimelineStyles) {\n      this._globalTimelineStyles = this._localTimelineStyles;\n      this._elementTimelineStylesLookup.set(element, this._localTimelineStyles);\n    }\n    this._loadKeyframe();\n  }\n\n  containsAnimation(): boolean {\n    switch (this._keyframes.size) {\n      case 0:\n        return false;\n      case 1:\n        return this.getCurrentStyleProperties().length > 0;\n      default:\n        return true;\n    }\n  }\n\n  getCurrentStyleProperties(): string[] {\n    return Object.keys(this._currentKeyframe);\n  }\n\n  get currentTime() {\n    return this.startTime + this.duration;\n  }\n\n  delayNextStep(delay: number) {\n    // in the event that a style() step is placed right before a stagger()\n    // and that style() step is the very first style() value in the animation\n    // then we need to make a copy of the keyframe [0, copy, 1] so that the delay\n    // properly applies the style() values to work with the stagger...\n    const hasPreStyleStep = this._keyframes.size == 1 && Object.keys(this._pendingStyles).length;\n\n    if (this.duration || hasPreStyleStep) {\n      this.forwardTime(this.currentTime + delay);\n      if (hasPreStyleStep) {\n        this.snapshotCurrentStyles();\n      }\n    } else {\n      this.startTime += delay;\n    }\n  }\n\n  fork(element: any, currentTime?: number): TimelineBuilder {\n    this.applyStylesToKeyframe();\n    return new TimelineBuilder(\n        this._driver, element, currentTime || this.currentTime, this._elementTimelineStylesLookup);\n  }\n\n  private _loadKeyframe() {\n    if (this._currentKeyframe) {\n      this._previousKeyframe = this._currentKeyframe;\n    }\n    this._currentKeyframe = this._keyframes.get(this.duration)!;\n    if (!this._currentKeyframe) {\n      this._currentKeyframe = Object.create(this._backFill, {});\n      this._keyframes.set(this.duration, this._currentKeyframe);\n    }\n  }\n\n  forwardFrame() {\n    this.duration += ONE_FRAME_IN_MILLISECONDS;\n    this._loadKeyframe();\n  }\n\n  forwardTime(time: number) {\n    this.applyStylesToKeyframe();\n    this.duration = time;\n    this._loadKeyframe();\n  }\n\n  private _updateStyle(prop: string, value: string|number) {\n    this._localTimelineStyles[prop] = value;\n    this._globalTimelineStyles[prop] = value;\n    this._styleSummary[prop] = {time: this.currentTime, value};\n  }\n\n  allowOnlyTimelineStyles() {\n    return this._currentEmptyStepKeyframe !== this._currentKeyframe;\n  }\n\n  applyEmptyStep(easing: string|null) {\n    if (easing) {\n      this._previousKeyframe['easing'] = easing;\n    }\n\n    // special case for animate(duration):\n    // all missing styles are filled with a `*` value then\n    // if any destination styles are filled in later on the same\n    // keyframe then they will override the overridden styles\n    // We use `_globalTimelineStyles` here because there may be\n    // styles in previous keyframes that are not present in this timeline\n    Object.keys(this._globalTimelineStyles).forEach(prop => {\n      this._backFill[prop] = this._globalTimelineStyles[prop] || AUTO_STYLE;\n      this._currentKeyframe[prop] = AUTO_STYLE;\n    });\n    this._currentEmptyStepKeyframe = this._currentKeyframe;\n  }\n\n  setStyles(\n      input: (ɵStyleData|string)[], easing: string|null, errors: any[],\n      options?: AnimationOptions) {\n    if (easing) {\n      this._previousKeyframe['easing'] = easing;\n    }\n\n    const params = (options && options.params) || {};\n    const styles = flattenStyles(input, this._globalTimelineStyles);\n    Object.keys(styles).forEach(prop => {\n      const val = interpolateParams(styles[prop], params, errors);\n      this._pendingStyles[prop] = val;\n      if (!this._localTimelineStyles.hasOwnProperty(prop)) {\n        this._backFill[prop] = this._globalTimelineStyles.hasOwnProperty(prop) ?\n            this._globalTimelineStyles[prop] :\n            AUTO_STYLE;\n      }\n      this._updateStyle(prop, val);\n    });\n  }\n\n  applyStylesToKeyframe() {\n    const styles = this._pendingStyles;\n    const props = Object.keys(styles);\n    if (props.length == 0) return;\n\n    this._pendingStyles = {};\n\n    props.forEach(prop => {\n      const val = styles[prop];\n      this._currentKeyframe[prop] = val;\n    });\n\n    Object.keys(this._localTimelineStyles).forEach(prop => {\n      if (!this._currentKeyframe.hasOwnProperty(prop)) {\n        this._currentKeyframe[prop] = this._localTimelineStyles[prop];\n      }\n    });\n  }\n\n  snapshotCurrentStyles() {\n    Object.keys(this._localTimelineStyles).forEach(prop => {\n      const val = this._localTimelineStyles[prop];\n      this._pendingStyles[prop] = val;\n      this._updateStyle(prop, val);\n    });\n  }\n\n  getFinalKeyframe() {\n    return this._keyframes.get(this.duration);\n  }\n\n  get properties() {\n    const properties: string[] = [];\n    for (let prop in this._currentKeyframe) {\n      properties.push(prop);\n    }\n    return properties;\n  }\n\n  mergeTimelineCollectedStyles(timeline: TimelineBuilder) {\n    Object.keys(timeline._styleSummary).forEach(prop => {\n      const details0 = this._styleSummary[prop];\n      const details1 = timeline._styleSummary[prop];\n      if (!details0 || details1.time > details0.time) {\n        this._updateStyle(prop, details1.value);\n      }\n    });\n  }\n\n  buildKeyframes(): AnimationTimelineInstruction {\n    this.applyStylesToKeyframe();\n    const preStyleProps = new Set<string>();\n    const postStyleProps = new Set<string>();\n    const isEmpty = this._keyframes.size === 1 && this.duration === 0;\n\n    let finalKeyframes: ɵStyleData[] = [];\n    this._keyframes.forEach((keyframe, time) => {\n      const finalKeyframe = copyStyles(keyframe, true);\n      Object.keys(finalKeyframe).forEach(prop => {\n        const value = finalKeyframe[prop];\n        if (value == PRE_STYLE) {\n          preStyleProps.add(prop);\n        } else if (value == AUTO_STYLE) {\n          postStyleProps.add(prop);\n        }\n      });\n      if (!isEmpty) {\n        finalKeyframe['offset'] = time / this.duration;\n      }\n      finalKeyframes.push(finalKeyframe);\n    });\n\n    const preProps: string[] = preStyleProps.size ? iteratorToArray(preStyleProps.values()) : [];\n    const postProps: string[] = postStyleProps.size ? iteratorToArray(postStyleProps.values()) : [];\n\n    // special case for a 0-second animation (which is designed just to place styles onscreen)\n    if (isEmpty) {\n      const kf0 = finalKeyframes[0];\n      const kf1 = copyObj(kf0);\n      kf0['offset'] = 0;\n      kf1['offset'] = 1;\n      finalKeyframes = [kf0, kf1];\n    }\n\n    return createTimelineInstruction(\n        this.element, finalKeyframes, preProps, postProps, this.duration, this.startTime,\n        this.easing, false);\n  }\n}\n\nclass SubTimelineBuilder extends TimelineBuilder {\n  public timings: AnimateTimings;\n\n  constructor(\n      driver: AnimationDriver, public element: any, public keyframes: ɵStyleData[],\n      public preStyleProps: string[], public postStyleProps: string[], timings: AnimateTimings,\n      private _stretchStartingKeyframe: boolean = false) {\n    super(driver, element, timings.delay);\n    this.timings = {duration: timings.duration, delay: timings.delay, easing: timings.easing};\n  }\n\n  containsAnimation(): boolean {\n    return this.keyframes.length > 1;\n  }\n\n  buildKeyframes(): AnimationTimelineInstruction {\n    let keyframes = this.keyframes;\n    let {delay, duration, easing} = this.timings;\n    if (this._stretchStartingKeyframe && delay) {\n      const newKeyframes: ɵStyleData[] = [];\n      const totalTime = duration + delay;\n      const startingGap = delay / totalTime;\n\n      // the original starting keyframe now starts once the delay is done\n      const newFirstKeyframe = copyStyles(keyframes[0], false);\n      newFirstKeyframe['offset'] = 0;\n      newKeyframes.push(newFirstKeyframe);\n\n      const oldFirstKeyframe = copyStyles(keyframes[0], false);\n      oldFirstKeyframe['offset'] = roundOffset(startingGap);\n      newKeyframes.push(oldFirstKeyframe);\n\n      /*\n        When the keyframe is stretched then it means that the delay before the animation\n        starts is gone. Instead the first keyframe is placed at the start of the animation\n        and it is then copied to where it starts when the original delay is over. This basically\n        means nothing animates during that delay, but the styles are still renderered. For this\n        to work the original offset values that exist in the original keyframes must be \"warped\"\n        so that they can take the new keyframe + delay into account.\n\n        delay=1000, duration=1000, keyframes = 0 .5 1\n\n        turns into\n\n        delay=0, duration=2000, keyframes = 0 .33 .66 1\n       */\n\n      // offsets between 1 ... n -1 are all warped by the keyframe stretch\n      const limit = keyframes.length - 1;\n      for (let i = 1; i <= limit; i++) {\n        let kf = copyStyles(keyframes[i], false);\n        const oldOffset = kf['offset'] as number;\n        const timeAtKeyframe = delay + oldOffset * duration;\n        kf['offset'] = roundOffset(timeAtKeyframe / totalTime);\n        newKeyframes.push(kf);\n      }\n\n      // the new starting keyframe should be added at the start\n      duration = totalTime;\n      delay = 0;\n      easing = '';\n\n      keyframes = newKeyframes;\n    }\n\n    return createTimelineInstruction(\n        this.element, keyframes, this.preStyleProps, this.postStyleProps, duration, delay, easing,\n        true);\n  }\n}\n\nfunction roundOffset(offset: number, decimalPoints = 3): number {\n  const mult = Math.pow(10, decimalPoints - 1);\n  return Math.round(offset * mult) / mult;\n}\n\nfunction flattenStyles(input: (ɵStyleData|string)[], allStyles: ɵStyleData) {\n  const styles: ɵStyleData = {};\n  let allProperties: string[];\n  input.forEach(token => {\n    if (token === '*') {\n      allProperties = allProperties || Object.keys(allStyles);\n      allProperties.forEach(prop => {\n        styles[prop] = AUTO_STYLE;\n      });\n    } else {\n      copyStyles(token as ɵStyleData, false, styles);\n    }\n  });\n  return styles;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @publicApi\n */\nexport abstract class AnimationStyleNormalizer {\n  abstract normalizePropertyName(propertyName: string, errors: string[]): string;\n  abstract normalizeStyleValue(\n      userProvidedProperty: string, normalizedProperty: string, value: string|number,\n      errors: string[]): string;\n}\n\n/**\n * @publicApi\n */\nexport class NoopAnimationStyleNormalizer {\n  normalizePropertyName(propertyName: string, errors: string[]): string {\n    return propertyName;\n  }\n\n  normalizeStyleValue(\n      userProvidedProperty: string, normalizedProperty: string, value: string|number,\n      errors: string[]): string {\n    return <any>value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {dashCaseToCamelCase} from '../../util';\n\nimport {AnimationStyleNormalizer} from './animation_style_normalizer';\n\nexport class WebAnimationsStyleNormalizer extends AnimationStyleNormalizer {\n  normalizePropertyName(propertyName: string, errors: string[]): string {\n    return dashCaseToCamelCase(propertyName);\n  }\n\n  normalizeStyleValue(\n      userProvidedProperty: string, normalizedProperty: string, value: string|number,\n      errors: string[]): string {\n    let unit: string = '';\n    const strVal = value.toString().trim();\n\n    if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {\n      if (typeof value === 'number') {\n        unit = 'px';\n      } else {\n        const valAndSuffixMatch = value.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n        if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n          errors.push(`Please provide a CSS unit value for ${userProvidedProperty}:${value}`);\n        }\n      }\n    }\n    return strVal + unit;\n  }\n}\n\nconst DIMENSIONAL_PROP_MAP =\n    (() => makeBooleanMap(\n         'width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective'\n             .split(',')))();\n\nfunction makeBooleanMap(keys: string[]): {[key: string]: boolean} {\n  const map: {[key: string]: boolean} = {};\n  keys.forEach(key => map[key] = true);\n  return map;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ɵStyleData} from '@angular/animations';\nimport {AnimationEngineInstruction, AnimationTransitionInstructionType} from '../render/animation_engine_instruction';\nimport {AnimationTimelineInstruction} from './animation_timeline_instruction';\n\nexport interface AnimationTransitionInstruction extends AnimationEngineInstruction {\n  element: any;\n  triggerName: string;\n  isRemovalTransition: boolean;\n  fromState: string;\n  fromStyles: ɵStyleData;\n  toState: string;\n  toStyles: ɵStyleData;\n  timelines: AnimationTimelineInstruction[];\n  queriedElements: any[];\n  preStyleProps: Map<any, {[prop: string]: boolean}>;\n  postStyleProps: Map<any, {[prop: string]: boolean}>;\n  totalTime: number;\n  errors?: any[];\n}\n\nexport function createTransitionInstruction(\n    element: any, triggerName: string, fromState: string, toState: string,\n    isRemovalTransition: boolean, fromStyles: ɵStyleData, toStyles: ɵStyleData,\n    timelines: AnimationTimelineInstruction[], queriedElements: any[],\n    preStyleProps: Map<any, {[prop: string]: boolean}>,\n    postStyleProps: Map<any, {[prop: string]: boolean}>, totalTime: number,\n    errors?: any[]): AnimationTransitionInstruction {\n  return {\n    type: AnimationTransitionInstructionType.TransitionAnimation,\n    element,\n    triggerName,\n    isRemovalTransition,\n    fromState,\n    fromStyles,\n    toState,\n    toStyles,\n    timelines,\n    queriedElements,\n    preStyleProps,\n    postStyleProps,\n    totalTime,\n    errors\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationOptions, ɵStyleData} from '@angular/animations';\n\nimport {AnimationDriver} from '../render/animation_driver';\nimport {getOrSetAsInMap} from '../render/shared';\nimport {copyObj, interpolateParams, iteratorToArray} from '../util';\n\nimport {StyleAst, TransitionAst} from './animation_ast';\nimport {buildAnimationTimelines} from './animation_timeline_builder';\nimport {TransitionMatcherFn} from './animation_transition_expr';\nimport {AnimationTransitionInstruction, createTransitionInstruction} from './animation_transition_instruction';\nimport {ElementInstructionMap} from './element_instruction_map';\n\nconst EMPTY_OBJECT = {};\n\nexport class AnimationTransitionFactory {\n  constructor(\n      private _triggerName: string, public ast: TransitionAst,\n      private _stateStyles: {[stateName: string]: AnimationStateStyles}) {}\n\n  match(currentState: any, nextState: any, element: any, params: {[key: string]: any}): boolean {\n    return oneOrMoreTransitionsMatch(this.ast.matchers, currentState, nextState, element, params);\n  }\n\n  buildStyles(stateName: string, params: {[key: string]: any}, errors: any[]) {\n    const backupStateStyler = this._stateStyles['*'];\n    const stateStyler = this._stateStyles[stateName];\n    const backupStyles = backupStateStyler ? backupStateStyler.buildStyles(params, errors) : {};\n    return stateStyler ? stateStyler.buildStyles(params, errors) : backupStyles;\n  }\n\n  build(\n      driver: AnimationDriver, element: any, currentState: any, nextState: any,\n      enterClassName: string, leaveClassName: string, currentOptions?: AnimationOptions,\n      nextOptions?: AnimationOptions, subInstructions?: ElementInstructionMap,\n      skipAstBuild?: boolean): AnimationTransitionInstruction {\n    const errors: any[] = [];\n\n    const transitionAnimationParams = this.ast.options && this.ast.options.params || EMPTY_OBJECT;\n    const currentAnimationParams = currentOptions && currentOptions.params || EMPTY_OBJECT;\n    const currentStateStyles = this.buildStyles(currentState, currentAnimationParams, errors);\n    const nextAnimationParams = nextOptions && nextOptions.params || EMPTY_OBJECT;\n    const nextStateStyles = this.buildStyles(nextState, nextAnimationParams, errors);\n\n    const queriedElements = new Set<any>();\n    const preStyleMap = new Map<any, {[prop: string]: boolean}>();\n    const postStyleMap = new Map<any, {[prop: string]: boolean}>();\n    const isRemoval = nextState === 'void';\n\n    const animationOptions = {params: {...transitionAnimationParams, ...nextAnimationParams}};\n\n    const timelines = skipAstBuild ?\n        [] :\n        buildAnimationTimelines(\n            driver, element, this.ast.animation, enterClassName, leaveClassName, currentStateStyles,\n            nextStateStyles, animationOptions, subInstructions, errors);\n\n    let totalTime = 0;\n    timelines.forEach(tl => {\n      totalTime = Math.max(tl.duration + tl.delay, totalTime);\n    });\n\n    if (errors.length) {\n      return createTransitionInstruction(\n          element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles,\n          nextStateStyles, [], [], preStyleMap, postStyleMap, totalTime, errors);\n    }\n\n    timelines.forEach(tl => {\n      const elm = tl.element;\n      const preProps = getOrSetAsInMap(preStyleMap, elm, {});\n      tl.preStyleProps.forEach(prop => preProps[prop] = true);\n\n      const postProps = getOrSetAsInMap(postStyleMap, elm, {});\n      tl.postStyleProps.forEach(prop => postProps[prop] = true);\n\n      if (elm !== element) {\n        queriedElements.add(elm);\n      }\n    });\n\n    const queriedElementsList = iteratorToArray(queriedElements.values());\n    return createTransitionInstruction(\n        element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles,\n        nextStateStyles, timelines, queriedElementsList, preStyleMap, postStyleMap, totalTime);\n  }\n}\n\nfunction oneOrMoreTransitionsMatch(\n    matchFns: TransitionMatcherFn[], currentState: any, nextState: any, element: any,\n    params: {[key: string]: any}): boolean {\n  return matchFns.some(fn => fn(currentState, nextState, element, params));\n}\n\nexport class AnimationStateStyles {\n  constructor(private styles: StyleAst, private defaultParams: {[key: string]: any}) {}\n\n  buildStyles(params: {[key: string]: any}, errors: string[]): ɵStyleData {\n    const finalStyles: ɵStyleData = {};\n    const combinedParams = copyObj(this.defaultParams);\n    Object.keys(params).forEach(key => {\n      const value = params[key];\n      if (value != null) {\n        combinedParams[key] = value;\n      }\n    });\n    this.styles.styles.forEach(value => {\n      if (typeof value !== 'string') {\n        const styleObj = value as any;\n        Object.keys(styleObj).forEach(prop => {\n          let val = styleObj[prop];\n          if (val.length > 1) {\n            val = interpolateParams(val, combinedParams, errors);\n          }\n          finalStyles[prop] = val;\n        });\n      }\n    });\n    return finalStyles;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationMetadataType, ɵStyleData} from '@angular/animations';\n\nimport {copyStyles, interpolateParams} from '../util';\n\nimport {SequenceAst, StyleAst, TransitionAst, TriggerAst} from './animation_ast';\nimport {AnimationStateStyles, AnimationTransitionFactory} from './animation_transition_factory';\n\n\n\n/**\n * @publicApi\n */\nexport function buildTrigger(name: string, ast: TriggerAst): AnimationTrigger {\n  return new AnimationTrigger(name, ast);\n}\n\n/**\n * @publicApi\n */\nexport class AnimationTrigger {\n  public transitionFactories: AnimationTransitionFactory[] = [];\n  public fallbackTransition: AnimationTransitionFactory;\n  public states: {[stateName: string]: AnimationStateStyles} = {};\n\n  constructor(public name: string, public ast: TriggerAst) {\n    ast.states.forEach(ast => {\n      const defaultParams = (ast.options && ast.options.params) || {};\n      this.states[ast.name] = new AnimationStateStyles(ast.style, defaultParams);\n    });\n\n    balanceProperties(this.states, 'true', '1');\n    balanceProperties(this.states, 'false', '0');\n\n    ast.transitions.forEach(ast => {\n      this.transitionFactories.push(new AnimationTransitionFactory(name, ast, this.states));\n    });\n\n    this.fallbackTransition = createFallbackTransition(name, this.states);\n  }\n\n  get containsQueries() {\n    return this.ast.queryCount > 0;\n  }\n\n  matchTransition(currentState: any, nextState: any, element: any, params: {[key: string]: any}):\n      AnimationTransitionFactory|null {\n    const entry =\n        this.transitionFactories.find(f => f.match(currentState, nextState, element, params));\n    return entry || null;\n  }\n\n  matchStyles(currentState: any, params: {[key: string]: any}, errors: any[]): ɵStyleData {\n    return this.fallbackTransition.buildStyles(currentState, params, errors);\n  }\n}\n\nfunction createFallbackTransition(\n    triggerName: string,\n    states: {[stateName: string]: AnimationStateStyles}): AnimationTransitionFactory {\n  const matchers = [(fromState: any, toState: any) => true];\n  const animation: SequenceAst = {type: AnimationMetadataType.Sequence, steps: [], options: null};\n  const transition: TransitionAst = {\n    type: AnimationMetadataType.Transition,\n    animation,\n    matchers,\n    options: null,\n    queryCount: 0,\n    depCount: 0\n  };\n  return new AnimationTransitionFactory(triggerName, transition, states);\n}\n\nfunction balanceProperties(obj: {[key: string]: any}, key1: string, key2: string) {\n  if (obj.hasOwnProperty(key1)) {\n    if (!obj.hasOwnProperty(key2)) {\n      obj[key2] = obj[key1];\n    }\n  } else if (obj.hasOwnProperty(key2)) {\n    obj[key1] = obj[key2];\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationMetadata, AnimationMetadataType, AnimationOptions, AnimationPlayer, AUTO_STYLE, ɵStyleData} from '@angular/animations';\n\nimport {Ast} from '../dsl/animation_ast';\nimport {buildAnimationAst} from '../dsl/animation_ast_builder';\nimport {buildAnimationTimelines} from '../dsl/animation_timeline_builder';\nimport {AnimationTimelineInstruction} from '../dsl/animation_timeline_instruction';\nimport {ElementInstructionMap} from '../dsl/element_instruction_map';\nimport {AnimationStyleNormalizer} from '../dsl/style_normalization/animation_style_normalizer';\nimport {ENTER_CLASSNAME, LEAVE_CLASSNAME} from '../util';\n\nimport {AnimationDriver} from './animation_driver';\nimport {getOrSetAsInMap, listenOnPlayer, makeAnimationEvent, normalizeKeyframes, optimizeGroupPlayer} from './shared';\n\nconst EMPTY_INSTRUCTION_MAP = new ElementInstructionMap();\n\nexport class TimelineAnimationEngine {\n  private _animations: {[id: string]: Ast<AnimationMetadataType>} = {};\n  private _playersById: {[id: string]: AnimationPlayer} = {};\n  public players: AnimationPlayer[] = [];\n\n  constructor(\n      public bodyNode: any, private _driver: AnimationDriver,\n      private _normalizer: AnimationStyleNormalizer) {}\n\n  register(id: string, metadata: AnimationMetadata|AnimationMetadata[]) {\n    const errors: any[] = [];\n    const ast = buildAnimationAst(this._driver, metadata, errors);\n    if (errors.length) {\n      throw new Error(\n          `Unable to build the animation due to the following errors: ${errors.join('\\n')}`);\n    } else {\n      this._animations[id] = ast;\n    }\n  }\n\n  private _buildPlayer(\n      i: AnimationTimelineInstruction, preStyles: ɵStyleData,\n      postStyles?: ɵStyleData): AnimationPlayer {\n    const element = i.element;\n    const keyframes = normalizeKeyframes(\n        this._driver, this._normalizer, element, i.keyframes, preStyles, postStyles);\n    return this._driver.animate(element, keyframes, i.duration, i.delay, i.easing, [], true);\n  }\n\n  create(id: string, element: any, options: AnimationOptions = {}): AnimationPlayer {\n    const errors: any[] = [];\n    const ast = this._animations[id];\n    let instructions: AnimationTimelineInstruction[];\n\n    const autoStylesMap = new Map<any, ɵStyleData>();\n\n    if (ast) {\n      instructions = buildAnimationTimelines(\n          this._driver, element, ast, ENTER_CLASSNAME, LEAVE_CLASSNAME, {}, {}, options,\n          EMPTY_INSTRUCTION_MAP, errors);\n      instructions.forEach(inst => {\n        const styles = getOrSetAsInMap(autoStylesMap, inst.element, {});\n        inst.postStyleProps.forEach(prop => styles[prop] = null);\n      });\n    } else {\n      errors.push('The requested animation doesn\\'t exist or has already been destroyed');\n      instructions = [];\n    }\n\n    if (errors.length) {\n      throw new Error(\n          `Unable to create the animation due to the following errors: ${errors.join('\\n')}`);\n    }\n\n    autoStylesMap.forEach((styles, element) => {\n      Object.keys(styles).forEach(prop => {\n        styles[prop] = this._driver.computeStyle(element, prop, AUTO_STYLE);\n      });\n    });\n\n    const players = instructions.map(i => {\n      const styles = autoStylesMap.get(i.element);\n      return this._buildPlayer(i, {}, styles);\n    });\n    const player = optimizeGroupPlayer(players);\n    this._playersById[id] = player;\n    player.onDestroy(() => this.destroy(id));\n\n    this.players.push(player);\n    return player;\n  }\n\n  destroy(id: string) {\n    const player = this._getPlayer(id);\n    player.destroy();\n    delete this._playersById[id];\n    const index = this.players.indexOf(player);\n    if (index >= 0) {\n      this.players.splice(index, 1);\n    }\n  }\n\n  private _getPlayer(id: string): AnimationPlayer {\n    const player = this._playersById[id];\n    if (!player) {\n      throw new Error(`Unable to find the timeline player referenced by ${id}`);\n    }\n    return player;\n  }\n\n  listen(id: string, element: string, eventName: string, callback: (event: any) => any):\n      () => void {\n    // triggerName, fromState, toState are all ignored for timeline animations\n    const baseEvent = makeAnimationEvent(element, '', '', '');\n    listenOnPlayer(this._getPlayer(id), eventName, baseEvent, callback);\n    return () => {};\n  }\n\n  command(id: string, element: any, command: string, args: any[]): void {\n    if (command == 'register') {\n      this.register(id, args[0] as AnimationMetadata | AnimationMetadata[]);\n      return;\n    }\n\n    if (command == 'create') {\n      const options = (args[0] || {}) as AnimationOptions;\n      this.create(id, element, options);\n      return;\n    }\n\n    const player = this._getPlayer(id);\n    switch (command) {\n      case 'play':\n        player.play();\n        break;\n      case 'pause':\n        player.pause();\n        break;\n      case 'reset':\n        player.reset();\n        break;\n      case 'restart':\n        player.restart();\n        break;\n      case 'finish':\n        player.finish();\n        break;\n      case 'init':\n        player.init();\n        break;\n      case 'setPosition':\n        player.setPosition(parseFloat(args[0] as string));\n        break;\n      case 'destroy':\n        this.destroy(id);\n        break;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationOptions, AnimationPlayer, AUTO_STYLE, NoopAnimationPlayer, ɵAnimationGroupPlayer as AnimationGroupPlayer, ɵPRE_STYLE as PRE_STYLE, ɵStyleData} from '@angular/animations';\n\nimport {AnimationTimelineInstruction} from '../dsl/animation_timeline_instruction';\nimport {AnimationTransitionFactory} from '../dsl/animation_transition_factory';\nimport {AnimationTransitionInstruction} from '../dsl/animation_transition_instruction';\nimport {AnimationTrigger} from '../dsl/animation_trigger';\nimport {ElementInstructionMap} from '../dsl/element_instruction_map';\nimport {AnimationStyleNormalizer} from '../dsl/style_normalization/animation_style_normalizer';\nimport {copyObj, ENTER_CLASSNAME, eraseStyles, iteratorToArray, LEAVE_CLASSNAME, NG_ANIMATING_CLASSNAME, NG_ANIMATING_SELECTOR, NG_TRIGGER_CLASSNAME, NG_TRIGGER_SELECTOR, setStyles} from '../util';\n\nimport {AnimationDriver} from './animation_driver';\nimport {getOrSetAsInMap, listenOnPlayer, makeAnimationEvent, normalizeKeyframes, optimizeGroupPlayer} from './shared';\n\nconst QUEUED_CLASSNAME = 'ng-animate-queued';\nconst QUEUED_SELECTOR = '.ng-animate-queued';\nconst DISABLED_CLASSNAME = 'ng-animate-disabled';\nconst DISABLED_SELECTOR = '.ng-animate-disabled';\nconst STAR_CLASSNAME = 'ng-star-inserted';\nconst STAR_SELECTOR = '.ng-star-inserted';\n\nconst EMPTY_PLAYER_ARRAY: TransitionAnimationPlayer[] = [];\nconst NULL_REMOVAL_STATE: ElementAnimationState = {\n  namespaceId: '',\n  setForRemoval: false,\n  setForMove: false,\n  hasAnimation: false,\n  removedBeforeQueried: false\n};\nconst NULL_REMOVED_QUERIED_STATE: ElementAnimationState = {\n  namespaceId: '',\n  setForMove: false,\n  setForRemoval: false,\n  hasAnimation: false,\n  removedBeforeQueried: true\n};\n\ninterface TriggerListener {\n  name: string;\n  phase: string;\n  callback: (event: any) => any;\n}\n\nexport interface QueueInstruction {\n  element: any;\n  triggerName: string;\n  fromState: StateValue;\n  toState: StateValue;\n  transition: AnimationTransitionFactory;\n  player: TransitionAnimationPlayer;\n  isFallbackTransition: boolean;\n}\n\nexport const REMOVAL_FLAG = '__ng_removed';\n\nexport interface ElementAnimationState {\n  setForRemoval: boolean;\n  setForMove: boolean;\n  hasAnimation: boolean;\n  namespaceId: string;\n  removedBeforeQueried: boolean;\n}\n\nexport class StateValue {\n  public value: string;\n  public options: AnimationOptions;\n\n  get params(): {[key: string]: any} {\n    return this.options.params as {[key: string]: any};\n  }\n\n  constructor(input: any, public namespaceId: string = '') {\n    const isObj = input && input.hasOwnProperty('value');\n    const value = isObj ? input['value'] : input;\n    this.value = normalizeTriggerValue(value);\n    if (isObj) {\n      const options = copyObj(input as any);\n      delete options['value'];\n      this.options = options as AnimationOptions;\n    } else {\n      this.options = {};\n    }\n    if (!this.options.params) {\n      this.options.params = {};\n    }\n  }\n\n  absorbOptions(options: AnimationOptions) {\n    const newParams = options.params;\n    if (newParams) {\n      const oldParams = this.options.params!;\n      Object.keys(newParams).forEach(prop => {\n        if (oldParams[prop] == null) {\n          oldParams[prop] = newParams[prop];\n        }\n      });\n    }\n  }\n}\n\nexport const VOID_VALUE = 'void';\nexport const DEFAULT_STATE_VALUE = new StateValue(VOID_VALUE);\n\nexport class AnimationTransitionNamespace {\n  public players: TransitionAnimationPlayer[] = [];\n\n  private _triggers: {[triggerName: string]: AnimationTrigger} = {};\n  private _queue: QueueInstruction[] = [];\n\n  private _elementListeners = new Map<any, TriggerListener[]>();\n\n  private _hostClassName: string;\n\n  constructor(\n      public id: string, public hostElement: any, private _engine: TransitionAnimationEngine) {\n    this._hostClassName = 'ng-tns-' + id;\n    addClass(hostElement, this._hostClassName);\n  }\n\n  listen(element: any, name: string, phase: string, callback: (event: any) => boolean): () => any {\n    if (!this._triggers.hasOwnProperty(name)) {\n      throw new Error(`Unable to listen on the animation trigger event \"${\n          phase}\" because the animation trigger \"${name}\" doesn\\'t exist!`);\n    }\n\n    if (phase == null || phase.length == 0) {\n      throw new Error(`Unable to listen on the animation trigger \"${\n          name}\" because the provided event is undefined!`);\n    }\n\n    if (!isTriggerEventValid(phase)) {\n      throw new Error(`The provided animation trigger event \"${phase}\" for the animation trigger \"${\n          name}\" is not supported!`);\n    }\n\n    const listeners = getOrSetAsInMap(this._elementListeners, element, []);\n    const data = {name, phase, callback};\n    listeners.push(data);\n\n    const triggersWithStates = getOrSetAsInMap(this._engine.statesByElement, element, {});\n    if (!triggersWithStates.hasOwnProperty(name)) {\n      addClass(element, NG_TRIGGER_CLASSNAME);\n      addClass(element, NG_TRIGGER_CLASSNAME + '-' + name);\n      triggersWithStates[name] = DEFAULT_STATE_VALUE;\n    }\n\n    return () => {\n      // the event listener is removed AFTER the flush has occurred such\n      // that leave animations callbacks can fire (otherwise if the node\n      // is removed in between then the listeners would be deregistered)\n      this._engine.afterFlush(() => {\n        const index = listeners.indexOf(data);\n        if (index >= 0) {\n          listeners.splice(index, 1);\n        }\n\n        if (!this._triggers[name]) {\n          delete triggersWithStates[name];\n        }\n      });\n    };\n  }\n\n  register(name: string, ast: AnimationTrigger): boolean {\n    if (this._triggers[name]) {\n      // throw\n      return false;\n    } else {\n      this._triggers[name] = ast;\n      return true;\n    }\n  }\n\n  private _getTrigger(name: string) {\n    const trigger = this._triggers[name];\n    if (!trigger) {\n      throw new Error(`The provided animation trigger \"${name}\" has not been registered!`);\n    }\n    return trigger;\n  }\n\n  trigger(element: any, triggerName: string, value: any, defaultToFallback: boolean = true):\n      TransitionAnimationPlayer|undefined {\n    const trigger = this._getTrigger(triggerName);\n    const player = new TransitionAnimationPlayer(this.id, triggerName, element);\n\n    let triggersWithStates = this._engine.statesByElement.get(element);\n    if (!triggersWithStates) {\n      addClass(element, NG_TRIGGER_CLASSNAME);\n      addClass(element, NG_TRIGGER_CLASSNAME + '-' + triggerName);\n      this._engine.statesByElement.set(element, triggersWithStates = {});\n    }\n\n    let fromState = triggersWithStates[triggerName];\n    const toState = new StateValue(value, this.id);\n\n    const isObj = value && value.hasOwnProperty('value');\n    if (!isObj && fromState) {\n      toState.absorbOptions(fromState.options);\n    }\n\n    triggersWithStates[triggerName] = toState;\n\n    if (!fromState) {\n      fromState = DEFAULT_STATE_VALUE;\n    }\n\n    const isRemoval = toState.value === VOID_VALUE;\n\n    // normally this isn't reached by here, however, if an object expression\n    // is passed in then it may be a new object each time. Comparing the value\n    // is important since that will stay the same despite there being a new object.\n    // The removal arc here is special cased because the same element is triggered\n    // twice in the event that it contains animations on the outer/inner portions\n    // of the host container\n    if (!isRemoval && fromState.value === toState.value) {\n      // this means that despite the value not changing, some inner params\n      // have changed which means that the animation final styles need to be applied\n      if (!objEquals(fromState.params, toState.params)) {\n        const errors: any[] = [];\n        const fromStyles = trigger.matchStyles(fromState.value, fromState.params, errors);\n        const toStyles = trigger.matchStyles(toState.value, toState.params, errors);\n        if (errors.length) {\n          this._engine.reportError(errors);\n        } else {\n          this._engine.afterFlush(() => {\n            eraseStyles(element, fromStyles);\n            setStyles(element, toStyles);\n          });\n        }\n      }\n      return;\n    }\n\n    const playersOnElement: TransitionAnimationPlayer[] =\n        getOrSetAsInMap(this._engine.playersByElement, element, []);\n    playersOnElement.forEach(player => {\n      // only remove the player if it is queued on the EXACT same trigger/namespace\n      // we only also deal with queued players here because if the animation has\n      // started then we want to keep the player alive until the flush happens\n      // (which is where the previousPlayers are passed into the new palyer)\n      if (player.namespaceId == this.id && player.triggerName == triggerName && player.queued) {\n        player.destroy();\n      }\n    });\n\n    let transition =\n        trigger.matchTransition(fromState.value, toState.value, element, toState.params);\n    let isFallbackTransition = false;\n    if (!transition) {\n      if (!defaultToFallback) return;\n      transition = trigger.fallbackTransition;\n      isFallbackTransition = true;\n    }\n\n    this._engine.totalQueuedPlayers++;\n    this._queue.push(\n        {element, triggerName, transition, fromState, toState, player, isFallbackTransition});\n\n    if (!isFallbackTransition) {\n      addClass(element, QUEUED_CLASSNAME);\n      player.onStart(() => {\n        removeClass(element, QUEUED_CLASSNAME);\n      });\n    }\n\n    player.onDone(() => {\n      let index = this.players.indexOf(player);\n      if (index >= 0) {\n        this.players.splice(index, 1);\n      }\n\n      const players = this._engine.playersByElement.get(element);\n      if (players) {\n        let index = players.indexOf(player);\n        if (index >= 0) {\n          players.splice(index, 1);\n        }\n      }\n    });\n\n    this.players.push(player);\n    playersOnElement.push(player);\n\n    return player;\n  }\n\n  deregister(name: string) {\n    delete this._triggers[name];\n\n    this._engine.statesByElement.forEach((stateMap, element) => {\n      delete stateMap[name];\n    });\n\n    this._elementListeners.forEach((listeners, element) => {\n      this._elementListeners.set(element, listeners.filter(entry => {\n        return entry.name != name;\n      }));\n    });\n  }\n\n  clearElementCache(element: any) {\n    this._engine.statesByElement.delete(element);\n    this._elementListeners.delete(element);\n    const elementPlayers = this._engine.playersByElement.get(element);\n    if (elementPlayers) {\n      elementPlayers.forEach(player => player.destroy());\n      this._engine.playersByElement.delete(element);\n    }\n  }\n\n  private _signalRemovalForInnerTriggers(rootElement: any, context: any) {\n    const elements = this._engine.driver.query(rootElement, NG_TRIGGER_SELECTOR, true);\n\n    // emulate a leave animation for all inner nodes within this node.\n    // If there are no animations found for any of the nodes then clear the cache\n    // for the element.\n    elements.forEach(elm => {\n      // this means that an inner remove() operation has already kicked off\n      // the animation on this element...\n      if (elm[REMOVAL_FLAG]) return;\n\n      const namespaces = this._engine.fetchNamespacesByElement(elm);\n      if (namespaces.size) {\n        namespaces.forEach(ns => ns.triggerLeaveAnimation(elm, context, false, true));\n      } else {\n        this.clearElementCache(elm);\n      }\n    });\n\n    // If the child elements were removed along with the parent, their animations might not\n    // have completed. Clear all the elements from the cache so we don't end up with a memory leak.\n    this._engine.afterFlushAnimationsDone(\n        () => elements.forEach(elm => this.clearElementCache(elm)));\n  }\n\n  triggerLeaveAnimation(\n      element: any, context: any, destroyAfterComplete?: boolean,\n      defaultToFallback?: boolean): boolean {\n    const triggerStates = this._engine.statesByElement.get(element);\n    if (triggerStates) {\n      const players: TransitionAnimationPlayer[] = [];\n      Object.keys(triggerStates).forEach(triggerName => {\n        // this check is here in the event that an element is removed\n        // twice (both on the host level and the component level)\n        if (this._triggers[triggerName]) {\n          const player = this.trigger(element, triggerName, VOID_VALUE, defaultToFallback);\n          if (player) {\n            players.push(player);\n          }\n        }\n      });\n\n      if (players.length) {\n        this._engine.markElementAsRemoved(this.id, element, true, context);\n        if (destroyAfterComplete) {\n          optimizeGroupPlayer(players).onDone(() => this._engine.processLeaveNode(element));\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  prepareLeaveAnimationListeners(element: any) {\n    const listeners = this._elementListeners.get(element);\n    const elementStates = this._engine.statesByElement.get(element);\n\n    // if this statement fails then it means that the element was picked up\n    // by an earlier flush (or there are no listeners at all to track the leave).\n    if (listeners && elementStates) {\n      const visitedTriggers = new Set<string>();\n      listeners.forEach(listener => {\n        const triggerName = listener.name;\n        if (visitedTriggers.has(triggerName)) return;\n        visitedTriggers.add(triggerName);\n\n        const trigger = this._triggers[triggerName];\n        const transition = trigger.fallbackTransition;\n        const fromState = elementStates[triggerName] || DEFAULT_STATE_VALUE;\n        const toState = new StateValue(VOID_VALUE);\n        const player = new TransitionAnimationPlayer(this.id, triggerName, element);\n\n        this._engine.totalQueuedPlayers++;\n        this._queue.push({\n          element,\n          triggerName,\n          transition,\n          fromState,\n          toState,\n          player,\n          isFallbackTransition: true\n        });\n      });\n    }\n  }\n\n  removeNode(element: any, context: any): void {\n    const engine = this._engine;\n    if (element.childElementCount) {\n      this._signalRemovalForInnerTriggers(element, context);\n    }\n\n    // this means that a * => VOID animation was detected and kicked off\n    if (this.triggerLeaveAnimation(element, context, true)) return;\n\n    // find the player that is animating and make sure that the\n    // removal is delayed until that player has completed\n    let containsPotentialParentTransition = false;\n    if (engine.totalAnimations) {\n      const currentPlayers =\n          engine.players.length ? engine.playersByQueriedElement.get(element) : [];\n\n      // when this `if statement` does not continue forward it means that\n      // a previous animation query has selected the current element and\n      // is animating it. In this situation want to continue forwards and\n      // allow the element to be queued up for animation later.\n      if (currentPlayers && currentPlayers.length) {\n        containsPotentialParentTransition = true;\n      } else {\n        let parent = element;\n        while (parent = parent.parentNode) {\n          const triggers = engine.statesByElement.get(parent);\n          if (triggers) {\n            containsPotentialParentTransition = true;\n            break;\n          }\n        }\n      }\n    }\n\n    // at this stage we know that the element will either get removed\n    // during flush or will be picked up by a parent query. Either way\n    // we need to fire the listeners for this element when it DOES get\n    // removed (once the query parent animation is done or after flush)\n    this.prepareLeaveAnimationListeners(element);\n\n    // whether or not a parent has an animation we need to delay the deferral of the leave\n    // operation until we have more information (which we do after flush() has been called)\n    if (containsPotentialParentTransition) {\n      engine.markElementAsRemoved(this.id, element, false, context);\n    } else {\n      const removalFlag = element[REMOVAL_FLAG];\n      if (!removalFlag || removalFlag === NULL_REMOVAL_STATE) {\n        // we do this after the flush has occurred such\n        // that the callbacks can be fired\n        engine.afterFlush(() => this.clearElementCache(element));\n        engine.destroyInnerAnimations(element);\n        engine._onRemovalComplete(element, context);\n      }\n    }\n  }\n\n  insertNode(element: any, parent: any): void {\n    addClass(element, this._hostClassName);\n  }\n\n  drainQueuedTransitions(microtaskId: number): QueueInstruction[] {\n    const instructions: QueueInstruction[] = [];\n    this._queue.forEach(entry => {\n      const player = entry.player;\n      if (player.destroyed) return;\n\n      const element = entry.element;\n      const listeners = this._elementListeners.get(element);\n      if (listeners) {\n        listeners.forEach((listener: TriggerListener) => {\n          if (listener.name == entry.triggerName) {\n            const baseEvent = makeAnimationEvent(\n                element, entry.triggerName, entry.fromState.value, entry.toState.value);\n            (baseEvent as any)['_data'] = microtaskId;\n            listenOnPlayer(entry.player, listener.phase, baseEvent, listener.callback);\n          }\n        });\n      }\n\n      if (player.markedForDestroy) {\n        this._engine.afterFlush(() => {\n          // now we can destroy the element properly since the event listeners have\n          // been bound to the player\n          player.destroy();\n        });\n      } else {\n        instructions.push(entry);\n      }\n    });\n\n    this._queue = [];\n\n    return instructions.sort((a, b) => {\n      // if depCount == 0 them move to front\n      // otherwise if a contains b then move back\n      const d0 = a.transition.ast.depCount;\n      const d1 = b.transition.ast.depCount;\n      if (d0 == 0 || d1 == 0) {\n        return d0 - d1;\n      }\n      return this._engine.driver.containsElement(a.element, b.element) ? 1 : -1;\n    });\n  }\n\n  destroy(context: any) {\n    this.players.forEach(p => p.destroy());\n    this._signalRemovalForInnerTriggers(this.hostElement, context);\n  }\n\n  elementContainsData(element: any): boolean {\n    let containsData = false;\n    if (this._elementListeners.has(element)) containsData = true;\n    containsData =\n        (this._queue.find(entry => entry.element === element) ? true : false) || containsData;\n    return containsData;\n  }\n}\n\nexport interface QueuedTransition {\n  element: any;\n  instruction: AnimationTransitionInstruction;\n  player: TransitionAnimationPlayer;\n}\n\nexport class TransitionAnimationEngine {\n  public players: TransitionAnimationPlayer[] = [];\n  public newHostElements = new Map<any, AnimationTransitionNamespace>();\n  public playersByElement = new Map<any, TransitionAnimationPlayer[]>();\n  public playersByQueriedElement = new Map<any, TransitionAnimationPlayer[]>();\n  public statesByElement = new Map<any, {[triggerName: string]: StateValue}>();\n  public disabledNodes = new Set<any>();\n\n  public totalAnimations = 0;\n  public totalQueuedPlayers = 0;\n\n  private _namespaceLookup: {[id: string]: AnimationTransitionNamespace} = {};\n  private _namespaceList: AnimationTransitionNamespace[] = [];\n  private _flushFns: (() => any)[] = [];\n  private _whenQuietFns: (() => any)[] = [];\n\n  public namespacesByHostElement = new Map<any, AnimationTransitionNamespace>();\n  public collectedEnterElements: any[] = [];\n  public collectedLeaveElements: any[] = [];\n\n  // this method is designed to be overridden by the code that uses this engine\n  public onRemovalComplete = (element: any, context: any) => {};\n\n  /** @internal */\n  _onRemovalComplete(element: any, context: any) {\n    this.onRemovalComplete(element, context);\n  }\n\n  constructor(\n      public bodyNode: any, public driver: AnimationDriver,\n      private _normalizer: AnimationStyleNormalizer) {}\n\n  get queuedPlayers(): TransitionAnimationPlayer[] {\n    const players: TransitionAnimationPlayer[] = [];\n    this._namespaceList.forEach(ns => {\n      ns.players.forEach(player => {\n        if (player.queued) {\n          players.push(player);\n        }\n      });\n    });\n    return players;\n  }\n\n  createNamespace(namespaceId: string, hostElement: any) {\n    const ns = new AnimationTransitionNamespace(namespaceId, hostElement, this);\n    if (hostElement.parentNode) {\n      this._balanceNamespaceList(ns, hostElement);\n    } else {\n      // defer this later until flush during when the host element has\n      // been inserted so that we know exactly where to place it in\n      // the namespace list\n      this.newHostElements.set(hostElement, ns);\n\n      // given that this host element is apart of the animation code, it\n      // may or may not be inserted by a parent node that is an of an\n      // animation renderer type. If this happens then we can still have\n      // access to this item when we query for :enter nodes. If the parent\n      // is a renderer then the set data-structure will normalize the entry\n      this.collectEnterElement(hostElement);\n    }\n    return this._namespaceLookup[namespaceId] = ns;\n  }\n\n  private _balanceNamespaceList(ns: AnimationTransitionNamespace, hostElement: any) {\n    const limit = this._namespaceList.length - 1;\n    if (limit >= 0) {\n      let found = false;\n      for (let i = limit; i >= 0; i--) {\n        const nextNamespace = this._namespaceList[i];\n        if (this.driver.containsElement(nextNamespace.hostElement, hostElement)) {\n          this._namespaceList.splice(i + 1, 0, ns);\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        this._namespaceList.splice(0, 0, ns);\n      }\n    } else {\n      this._namespaceList.push(ns);\n    }\n\n    this.namespacesByHostElement.set(hostElement, ns);\n    return ns;\n  }\n\n  register(namespaceId: string, hostElement: any) {\n    let ns = this._namespaceLookup[namespaceId];\n    if (!ns) {\n      ns = this.createNamespace(namespaceId, hostElement);\n    }\n    return ns;\n  }\n\n  registerTrigger(namespaceId: string, name: string, trigger: AnimationTrigger) {\n    let ns = this._namespaceLookup[namespaceId];\n    if (ns && ns.register(name, trigger)) {\n      this.totalAnimations++;\n    }\n  }\n\n  destroy(namespaceId: string, context: any) {\n    if (!namespaceId) return;\n\n    const ns = this._fetchNamespace(namespaceId);\n\n    this.afterFlush(() => {\n      this.namespacesByHostElement.delete(ns.hostElement);\n      delete this._namespaceLookup[namespaceId];\n      const index = this._namespaceList.indexOf(ns);\n      if (index >= 0) {\n        this._namespaceList.splice(index, 1);\n      }\n    });\n\n    this.afterFlushAnimationsDone(() => ns.destroy(context));\n  }\n\n  private _fetchNamespace(id: string) {\n    return this._namespaceLookup[id];\n  }\n\n  fetchNamespacesByElement(element: any): Set<AnimationTransitionNamespace> {\n    // normally there should only be one namespace per element, however\n    // if @triggers are placed on both the component element and then\n    // its host element (within the component code) then there will be\n    // two namespaces returned. We use a set here to simply the dedupe\n    // of namespaces incase there are multiple triggers both the elm and host\n    const namespaces = new Set<AnimationTransitionNamespace>();\n    const elementStates = this.statesByElement.get(element);\n    if (elementStates) {\n      const keys = Object.keys(elementStates);\n      for (let i = 0; i < keys.length; i++) {\n        const nsId = elementStates[keys[i]].namespaceId;\n        if (nsId) {\n          const ns = this._fetchNamespace(nsId);\n          if (ns) {\n            namespaces.add(ns);\n          }\n        }\n      }\n    }\n    return namespaces;\n  }\n\n  trigger(namespaceId: string, element: any, name: string, value: any): boolean {\n    if (isElementNode(element)) {\n      const ns = this._fetchNamespace(namespaceId);\n      if (ns) {\n        ns.trigger(element, name, value);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  insertNode(namespaceId: string, element: any, parent: any, insertBefore: boolean): void {\n    if (!isElementNode(element)) return;\n\n    // special case for when an element is removed and reinserted (move operation)\n    // when this occurs we do not want to use the element for deletion later\n    const details = element[REMOVAL_FLAG] as ElementAnimationState;\n    if (details && details.setForRemoval) {\n      details.setForRemoval = false;\n      details.setForMove = true;\n      const index = this.collectedLeaveElements.indexOf(element);\n      if (index >= 0) {\n        this.collectedLeaveElements.splice(index, 1);\n      }\n    }\n\n    // in the event that the namespaceId is blank then the caller\n    // code does not contain any animation code in it, but it is\n    // just being called so that the node is marked as being inserted\n    if (namespaceId) {\n      const ns = this._fetchNamespace(namespaceId);\n      // This if-statement is a workaround for router issue #21947.\n      // The router sometimes hits a race condition where while a route\n      // is being instantiated a new navigation arrives, triggering leave\n      // animation of DOM that has not been fully initialized, until this\n      // is resolved, we need to handle the scenario when DOM is not in a\n      // consistent state during the animation.\n      if (ns) {\n        ns.insertNode(element, parent);\n      }\n    }\n\n    // only *directives and host elements are inserted before\n    if (insertBefore) {\n      this.collectEnterElement(element);\n    }\n  }\n\n  collectEnterElement(element: any) {\n    this.collectedEnterElements.push(element);\n  }\n\n  markElementAsDisabled(element: any, value: boolean) {\n    if (value) {\n      if (!this.disabledNodes.has(element)) {\n        this.disabledNodes.add(element);\n        addClass(element, DISABLED_CLASSNAME);\n      }\n    } else if (this.disabledNodes.has(element)) {\n      this.disabledNodes.delete(element);\n      removeClass(element, DISABLED_CLASSNAME);\n    }\n  }\n\n  removeNode(namespaceId: string, element: any, isHostElement: boolean, context: any): void {\n    if (isElementNode(element)) {\n      const ns = namespaceId ? this._fetchNamespace(namespaceId) : null;\n      if (ns) {\n        ns.removeNode(element, context);\n      } else {\n        this.markElementAsRemoved(namespaceId, element, false, context);\n      }\n\n      if (isHostElement) {\n        const hostNS = this.namespacesByHostElement.get(element);\n        if (hostNS && hostNS.id !== namespaceId) {\n          hostNS.removeNode(element, context);\n        }\n      }\n    } else {\n      this._onRemovalComplete(element, context);\n    }\n  }\n\n  markElementAsRemoved(namespaceId: string, element: any, hasAnimation?: boolean, context?: any) {\n    this.collectedLeaveElements.push(element);\n    element[REMOVAL_FLAG] =\n        {namespaceId, setForRemoval: context, hasAnimation, removedBeforeQueried: false};\n  }\n\n  listen(\n      namespaceId: string, element: any, name: string, phase: string,\n      callback: (event: any) => boolean): () => any {\n    if (isElementNode(element)) {\n      return this._fetchNamespace(namespaceId).listen(element, name, phase, callback);\n    }\n    return () => {};\n  }\n\n  private _buildInstruction(\n      entry: QueueInstruction, subTimelines: ElementInstructionMap, enterClassName: string,\n      leaveClassName: string, skipBuildAst?: boolean) {\n    return entry.transition.build(\n        this.driver, entry.element, entry.fromState.value, entry.toState.value, enterClassName,\n        leaveClassName, entry.fromState.options, entry.toState.options, subTimelines, skipBuildAst);\n  }\n\n  destroyInnerAnimations(containerElement: any) {\n    let elements = this.driver.query(containerElement, NG_TRIGGER_SELECTOR, true);\n    elements.forEach(element => this.destroyActiveAnimationsForElement(element));\n\n    if (this.playersByQueriedElement.size == 0) return;\n\n    elements = this.driver.query(containerElement, NG_ANIMATING_SELECTOR, true);\n    elements.forEach(element => this.finishActiveQueriedAnimationOnElement(element));\n  }\n\n  destroyActiveAnimationsForElement(element: any) {\n    const players = this.playersByElement.get(element);\n    if (players) {\n      players.forEach(player => {\n        // special case for when an element is set for destruction, but hasn't started.\n        // in this situation we want to delay the destruction until the flush occurs\n        // so that any event listeners attached to the player are triggered.\n        if (player.queued) {\n          player.markedForDestroy = true;\n        } else {\n          player.destroy();\n        }\n      });\n    }\n  }\n\n  finishActiveQueriedAnimationOnElement(element: any) {\n    const players = this.playersByQueriedElement.get(element);\n    if (players) {\n      players.forEach(player => player.finish());\n    }\n  }\n\n  whenRenderingDone(): Promise<any> {\n    return new Promise<void>(resolve => {\n      if (this.players.length) {\n        return optimizeGroupPlayer(this.players).onDone(() => resolve());\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  processLeaveNode(element: any) {\n    const details = element[REMOVAL_FLAG] as ElementAnimationState;\n    if (details && details.setForRemoval) {\n      // this will prevent it from removing it twice\n      element[REMOVAL_FLAG] = NULL_REMOVAL_STATE;\n      if (details.namespaceId) {\n        this.destroyInnerAnimations(element);\n        const ns = this._fetchNamespace(details.namespaceId);\n        if (ns) {\n          ns.clearElementCache(element);\n        }\n      }\n      this._onRemovalComplete(element, details.setForRemoval);\n    }\n\n    if (this.driver.matchesElement(element, DISABLED_SELECTOR)) {\n      this.markElementAsDisabled(element, false);\n    }\n\n    this.driver.query(element, DISABLED_SELECTOR, true).forEach(node => {\n      this.markElementAsDisabled(node, false);\n    });\n  }\n\n  flush(microtaskId: number = -1) {\n    let players: AnimationPlayer[] = [];\n    if (this.newHostElements.size) {\n      this.newHostElements.forEach((ns, element) => this._balanceNamespaceList(ns, element));\n      this.newHostElements.clear();\n    }\n\n    if (this.totalAnimations && this.collectedEnterElements.length) {\n      for (let i = 0; i < this.collectedEnterElements.length; i++) {\n        const elm = this.collectedEnterElements[i];\n        addClass(elm, STAR_CLASSNAME);\n      }\n    }\n\n    if (this._namespaceList.length &&\n        (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {\n      const cleanupFns: Function[] = [];\n      try {\n        players = this._flushAnimations(cleanupFns, microtaskId);\n      } finally {\n        for (let i = 0; i < cleanupFns.length; i++) {\n          cleanupFns[i]();\n        }\n      }\n    } else {\n      for (let i = 0; i < this.collectedLeaveElements.length; i++) {\n        const element = this.collectedLeaveElements[i];\n        this.processLeaveNode(element);\n      }\n    }\n\n    this.totalQueuedPlayers = 0;\n    this.collectedEnterElements.length = 0;\n    this.collectedLeaveElements.length = 0;\n    this._flushFns.forEach(fn => fn());\n    this._flushFns = [];\n\n    if (this._whenQuietFns.length) {\n      // we move these over to a variable so that\n      // if any new callbacks are registered in another\n      // flush they do not populate the existing set\n      const quietFns = this._whenQuietFns;\n      this._whenQuietFns = [];\n\n      if (players.length) {\n        optimizeGroupPlayer(players).onDone(() => {\n          quietFns.forEach(fn => fn());\n        });\n      } else {\n        quietFns.forEach(fn => fn());\n      }\n    }\n  }\n\n  reportError(errors: string[]) {\n    throw new Error(\n        `Unable to process animations due to the following failed trigger transitions\\n ${\n            errors.join('\\n')}`);\n  }\n\n  private _flushAnimations(cleanupFns: Function[], microtaskId: number):\n      TransitionAnimationPlayer[] {\n    const subTimelines = new ElementInstructionMap();\n    const skippedPlayers: TransitionAnimationPlayer[] = [];\n    const skippedPlayersMap = new Map<any, AnimationPlayer[]>();\n    const queuedInstructions: QueuedTransition[] = [];\n    const queriedElements = new Map<any, TransitionAnimationPlayer[]>();\n    const allPreStyleElements = new Map<any, Set<string>>();\n    const allPostStyleElements = new Map<any, Set<string>>();\n\n    const disabledElementsSet = new Set<any>();\n    this.disabledNodes.forEach(node => {\n      disabledElementsSet.add(node);\n      const nodesThatAreDisabled = this.driver.query(node, QUEUED_SELECTOR, true);\n      for (let i = 0; i < nodesThatAreDisabled.length; i++) {\n        disabledElementsSet.add(nodesThatAreDisabled[i]);\n      }\n    });\n\n    const bodyNode = this.bodyNode;\n    const allTriggerElements = Array.from(this.statesByElement.keys());\n    const enterNodeMap = buildRootMap(allTriggerElements, this.collectedEnterElements);\n\n    // this must occur before the instructions are built below such that\n    // the :enter queries match the elements (since the timeline queries\n    // are fired during instruction building).\n    const enterNodeMapIds = new Map<any, string>();\n    let i = 0;\n    enterNodeMap.forEach((nodes, root) => {\n      const className = ENTER_CLASSNAME + i++;\n      enterNodeMapIds.set(root, className);\n      nodes.forEach(node => addClass(node, className));\n    });\n\n    const allLeaveNodes: any[] = [];\n    const mergedLeaveNodes = new Set<any>();\n    const leaveNodesWithoutAnimations = new Set<any>();\n    for (let i = 0; i < this.collectedLeaveElements.length; i++) {\n      const element = this.collectedLeaveElements[i];\n      const details = element[REMOVAL_FLAG] as ElementAnimationState;\n      if (details && details.setForRemoval) {\n        allLeaveNodes.push(element);\n        mergedLeaveNodes.add(element);\n        if (details.hasAnimation) {\n          this.driver.query(element, STAR_SELECTOR, true).forEach(elm => mergedLeaveNodes.add(elm));\n        } else {\n          leaveNodesWithoutAnimations.add(element);\n        }\n      }\n    }\n\n    const leaveNodeMapIds = new Map<any, string>();\n    const leaveNodeMap = buildRootMap(allTriggerElements, Array.from(mergedLeaveNodes));\n    leaveNodeMap.forEach((nodes, root) => {\n      const className = LEAVE_CLASSNAME + i++;\n      leaveNodeMapIds.set(root, className);\n      nodes.forEach(node => addClass(node, className));\n    });\n\n    cleanupFns.push(() => {\n      enterNodeMap.forEach((nodes, root) => {\n        const className = enterNodeMapIds.get(root)!;\n        nodes.forEach(node => removeClass(node, className));\n      });\n\n      leaveNodeMap.forEach((nodes, root) => {\n        const className = leaveNodeMapIds.get(root)!;\n        nodes.forEach(node => removeClass(node, className));\n      });\n\n      allLeaveNodes.forEach(element => {\n        this.processLeaveNode(element);\n      });\n    });\n\n    const allPlayers: TransitionAnimationPlayer[] = [];\n    const erroneousTransitions: AnimationTransitionInstruction[] = [];\n    for (let i = this._namespaceList.length - 1; i >= 0; i--) {\n      const ns = this._namespaceList[i];\n      ns.drainQueuedTransitions(microtaskId).forEach(entry => {\n        const player = entry.player;\n        const element = entry.element;\n        allPlayers.push(player);\n\n        if (this.collectedEnterElements.length) {\n          const details = element[REMOVAL_FLAG] as ElementAnimationState;\n          // move animations are currently not supported...\n          if (details && details.setForMove) {\n            player.destroy();\n            return;\n          }\n        }\n\n        const nodeIsOrphaned = !bodyNode || !this.driver.containsElement(bodyNode, element);\n        const leaveClassName = leaveNodeMapIds.get(element)!;\n        const enterClassName = enterNodeMapIds.get(element)!;\n        const instruction = this._buildInstruction(\n            entry, subTimelines, enterClassName, leaveClassName, nodeIsOrphaned)!;\n        if (instruction.errors && instruction.errors.length) {\n          erroneousTransitions.push(instruction);\n          return;\n        }\n\n        // even though the element may not be apart of the DOM, it may\n        // still be added at a later point (due to the mechanics of content\n        // projection and/or dynamic component insertion) therefore it's\n        // important we still style the element.\n        if (nodeIsOrphaned) {\n          player.onStart(() => eraseStyles(element, instruction.fromStyles));\n          player.onDestroy(() => setStyles(element, instruction.toStyles));\n          skippedPlayers.push(player);\n          return;\n        }\n\n        // if a unmatched transition is queued to go then it SHOULD NOT render\n        // an animation and cancel the previously running animations.\n        if (entry.isFallbackTransition) {\n          player.onStart(() => eraseStyles(element, instruction.fromStyles));\n          player.onDestroy(() => setStyles(element, instruction.toStyles));\n          skippedPlayers.push(player);\n          return;\n        }\n\n        // this means that if a parent animation uses this animation as a sub trigger\n        // then it will instruct the timeline builder to not add a player delay, but\n        // instead stretch the first keyframe gap up until the animation starts. The\n        // reason this is important is to prevent extra initialization styles from being\n        // required by the user in the animation.\n        instruction.timelines.forEach(tl => tl.stretchStartingKeyframe = true);\n\n        subTimelines.append(element, instruction.timelines);\n\n        const tuple = {instruction, player, element};\n\n        queuedInstructions.push(tuple);\n\n        instruction.queriedElements.forEach(\n            element => getOrSetAsInMap(queriedElements, element, []).push(player));\n\n        instruction.preStyleProps.forEach((stringMap, element) => {\n          const props = Object.keys(stringMap);\n          if (props.length) {\n            let setVal: Set<string> = allPreStyleElements.get(element)!;\n            if (!setVal) {\n              allPreStyleElements.set(element, setVal = new Set<string>());\n            }\n            props.forEach(prop => setVal.add(prop));\n          }\n        });\n\n        instruction.postStyleProps.forEach((stringMap, element) => {\n          const props = Object.keys(stringMap);\n          let setVal: Set<string> = allPostStyleElements.get(element)!;\n          if (!setVal) {\n            allPostStyleElements.set(element, setVal = new Set<string>());\n          }\n          props.forEach(prop => setVal.add(prop));\n        });\n      });\n    }\n\n    if (erroneousTransitions.length) {\n      const errors: string[] = [];\n      erroneousTransitions.forEach(instruction => {\n        errors.push(`@${instruction.triggerName} has failed due to:\\n`);\n        instruction.errors!.forEach(error => errors.push(`- ${error}\\n`));\n      });\n\n      allPlayers.forEach(player => player.destroy());\n      this.reportError(errors);\n    }\n\n    const allPreviousPlayersMap = new Map<any, TransitionAnimationPlayer[]>();\n    // this map works to tell which element in the DOM tree is contained by\n    // which animation. Further down below this map will get populated once\n    // the players are built and in doing so it can efficiently figure out\n    // if a sub player is skipped due to a parent player having priority.\n    const animationElementMap = new Map<any, any>();\n    queuedInstructions.forEach(entry => {\n      const element = entry.element;\n      if (subTimelines.has(element)) {\n        animationElementMap.set(element, element);\n        this._beforeAnimationBuild(\n            entry.player.namespaceId, entry.instruction, allPreviousPlayersMap);\n      }\n    });\n\n    skippedPlayers.forEach(player => {\n      const element = player.element;\n      const previousPlayers =\n          this._getPreviousPlayers(element, false, player.namespaceId, player.triggerName, null);\n      previousPlayers.forEach(prevPlayer => {\n        getOrSetAsInMap(allPreviousPlayersMap, element, []).push(prevPlayer);\n        prevPlayer.destroy();\n      });\n    });\n\n    // this is a special case for nodes that will be removed (either by)\n    // having their own leave animations or by being queried in a container\n    // that will be removed once a parent animation is complete. The idea\n    // here is that * styles must be identical to ! styles because of\n    // backwards compatibility (* is also filled in by default in many places).\n    // Otherwise * styles will return an empty value or auto since the element\n    // that is being getComputedStyle'd will not be visible (since * = destination)\n    const replaceNodes = allLeaveNodes.filter(node => {\n      return replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements);\n    });\n\n    // POST STAGE: fill the * styles\n    const postStylesMap = new Map<any, ɵStyleData>();\n    const allLeaveQueriedNodes = cloakAndComputeStyles(\n        postStylesMap, this.driver, leaveNodesWithoutAnimations, allPostStyleElements, AUTO_STYLE);\n\n    allLeaveQueriedNodes.forEach(node => {\n      if (replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements)) {\n        replaceNodes.push(node);\n      }\n    });\n\n    // PRE STAGE: fill the ! styles\n    const preStylesMap = new Map<any, ɵStyleData>();\n    enterNodeMap.forEach((nodes, root) => {\n      cloakAndComputeStyles(\n          preStylesMap, this.driver, new Set(nodes), allPreStyleElements, PRE_STYLE);\n    });\n\n    replaceNodes.forEach(node => {\n      const post = postStylesMap.get(node);\n      const pre = preStylesMap.get(node);\n      postStylesMap.set(node, {...post, ...pre} as any);\n    });\n\n    const rootPlayers: TransitionAnimationPlayer[] = [];\n    const subPlayers: TransitionAnimationPlayer[] = [];\n    const NO_PARENT_ANIMATION_ELEMENT_DETECTED = {};\n    queuedInstructions.forEach(entry => {\n      const {element, player, instruction} = entry;\n      // this means that it was never consumed by a parent animation which\n      // means that it is independent and therefore should be set for animation\n      if (subTimelines.has(element)) {\n        if (disabledElementsSet.has(element)) {\n          player.onDestroy(() => setStyles(element, instruction.toStyles));\n          player.disabled = true;\n          player.overrideTotalTime(instruction.totalTime);\n          skippedPlayers.push(player);\n          return;\n        }\n\n        // this will flow up the DOM and query the map to figure out\n        // if a parent animation has priority over it. In the situation\n        // that a parent is detected then it will cancel the loop. If\n        // nothing is detected, or it takes a few hops to find a parent,\n        // then it will fill in the missing nodes and signal them as having\n        // a detected parent (or a NO_PARENT value via a special constant).\n        let parentWithAnimation: any = NO_PARENT_ANIMATION_ELEMENT_DETECTED;\n        if (animationElementMap.size > 1) {\n          let elm = element;\n          const parentsToAdd: any[] = [];\n          while (elm = elm.parentNode) {\n            const detectedParent = animationElementMap.get(elm);\n            if (detectedParent) {\n              parentWithAnimation = detectedParent;\n              break;\n            }\n            parentsToAdd.push(elm);\n          }\n          parentsToAdd.forEach(parent => animationElementMap.set(parent, parentWithAnimation));\n        }\n\n        const innerPlayer = this._buildAnimation(\n            player.namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap,\n            postStylesMap);\n\n        player.setRealPlayer(innerPlayer);\n\n        if (parentWithAnimation === NO_PARENT_ANIMATION_ELEMENT_DETECTED) {\n          rootPlayers.push(player);\n        } else {\n          const parentPlayers = this.playersByElement.get(parentWithAnimation);\n          if (parentPlayers && parentPlayers.length) {\n            player.parentPlayer = optimizeGroupPlayer(parentPlayers);\n          }\n          skippedPlayers.push(player);\n        }\n      } else {\n        eraseStyles(element, instruction.fromStyles);\n        player.onDestroy(() => setStyles(element, instruction.toStyles));\n        // there still might be a ancestor player animating this\n        // element therefore we will still add it as a sub player\n        // even if its animation may be disabled\n        subPlayers.push(player);\n        if (disabledElementsSet.has(element)) {\n          skippedPlayers.push(player);\n        }\n      }\n    });\n\n    // find all of the sub players' corresponding inner animation player\n    subPlayers.forEach(player => {\n      // even if any players are not found for a sub animation then it\n      // will still complete itself after the next tick since it's Noop\n      const playersForElement = skippedPlayersMap.get(player.element);\n      if (playersForElement && playersForElement.length) {\n        const innerPlayer = optimizeGroupPlayer(playersForElement);\n        player.setRealPlayer(innerPlayer);\n      }\n    });\n\n    // the reason why we don't actually play the animation is\n    // because all that a skipped player is designed to do is to\n    // fire the start/done transition callback events\n    skippedPlayers.forEach(player => {\n      if (player.parentPlayer) {\n        player.syncPlayerEvents(player.parentPlayer);\n      } else {\n        player.destroy();\n      }\n    });\n\n    // run through all of the queued removals and see if they\n    // were picked up by a query. If not then perform the removal\n    // operation right away unless a parent animation is ongoing.\n    for (let i = 0; i < allLeaveNodes.length; i++) {\n      const element = allLeaveNodes[i];\n      const details = element[REMOVAL_FLAG] as ElementAnimationState;\n      removeClass(element, LEAVE_CLASSNAME);\n\n      // this means the element has a removal animation that is being\n      // taken care of and therefore the inner elements will hang around\n      // until that animation is over (or the parent queried animation)\n      if (details && details.hasAnimation) continue;\n\n      let players: TransitionAnimationPlayer[] = [];\n\n      // if this element is queried or if it contains queried children\n      // then we want for the element not to be removed from the page\n      // until the queried animations have finished\n      if (queriedElements.size) {\n        let queriedPlayerResults = queriedElements.get(element);\n        if (queriedPlayerResults && queriedPlayerResults.length) {\n          players.push(...queriedPlayerResults);\n        }\n\n        let queriedInnerElements = this.driver.query(element, NG_ANIMATING_SELECTOR, true);\n        for (let j = 0; j < queriedInnerElements.length; j++) {\n          let queriedPlayers = queriedElements.get(queriedInnerElements[j]);\n          if (queriedPlayers && queriedPlayers.length) {\n            players.push(...queriedPlayers);\n          }\n        }\n      }\n\n      const activePlayers = players.filter(p => !p.destroyed);\n      if (activePlayers.length) {\n        removeNodesAfterAnimationDone(this, element, activePlayers);\n      } else {\n        this.processLeaveNode(element);\n      }\n    }\n\n    // this is required so the cleanup method doesn't remove them\n    allLeaveNodes.length = 0;\n\n    rootPlayers.forEach(player => {\n      this.players.push(player);\n      player.onDone(() => {\n        player.destroy();\n\n        const index = this.players.indexOf(player);\n        this.players.splice(index, 1);\n      });\n      player.play();\n    });\n\n    return rootPlayers;\n  }\n\n  elementContainsData(namespaceId: string, element: any) {\n    let containsData = false;\n    const details = element[REMOVAL_FLAG] as ElementAnimationState;\n    if (details && details.setForRemoval) containsData = true;\n    if (this.playersByElement.has(element)) containsData = true;\n    if (this.playersByQueriedElement.has(element)) containsData = true;\n    if (this.statesByElement.has(element)) containsData = true;\n    return this._fetchNamespace(namespaceId).elementContainsData(element) || containsData;\n  }\n\n  afterFlush(callback: () => any) {\n    this._flushFns.push(callback);\n  }\n\n  afterFlushAnimationsDone(callback: () => any) {\n    this._whenQuietFns.push(callback);\n  }\n\n  private _getPreviousPlayers(\n      element: string, isQueriedElement: boolean, namespaceId?: string, triggerName?: string,\n      toStateValue?: any): TransitionAnimationPlayer[] {\n    let players: TransitionAnimationPlayer[] = [];\n    if (isQueriedElement) {\n      const queriedElementPlayers = this.playersByQueriedElement.get(element);\n      if (queriedElementPlayers) {\n        players = queriedElementPlayers;\n      }\n    } else {\n      const elementPlayers = this.playersByElement.get(element);\n      if (elementPlayers) {\n        const isRemovalAnimation = !toStateValue || toStateValue == VOID_VALUE;\n        elementPlayers.forEach(player => {\n          if (player.queued) return;\n          if (!isRemovalAnimation && player.triggerName != triggerName) return;\n          players.push(player);\n        });\n      }\n    }\n    if (namespaceId || triggerName) {\n      players = players.filter(player => {\n        if (namespaceId && namespaceId != player.namespaceId) return false;\n        if (triggerName && triggerName != player.triggerName) return false;\n        return true;\n      });\n    }\n    return players;\n  }\n\n  private _beforeAnimationBuild(\n      namespaceId: string, instruction: AnimationTransitionInstruction,\n      allPreviousPlayersMap: Map<any, TransitionAnimationPlayer[]>) {\n    const triggerName = instruction.triggerName;\n    const rootElement = instruction.element;\n\n    // when a removal animation occurs, ALL previous players are collected\n    // and destroyed (even if they are outside of the current namespace)\n    const targetNameSpaceId: string|undefined =\n        instruction.isRemovalTransition ? undefined : namespaceId;\n    const targetTriggerName: string|undefined =\n        instruction.isRemovalTransition ? undefined : triggerName;\n\n    for (const timelineInstruction of instruction.timelines) {\n      const element = timelineInstruction.element;\n      const isQueriedElement = element !== rootElement;\n      const players = getOrSetAsInMap(allPreviousPlayersMap, element, []);\n      const previousPlayers = this._getPreviousPlayers(\n          element, isQueriedElement, targetNameSpaceId, targetTriggerName, instruction.toState);\n      previousPlayers.forEach(player => {\n        const realPlayer = (player as TransitionAnimationPlayer).getRealPlayer() as any;\n        if (realPlayer.beforeDestroy) {\n          realPlayer.beforeDestroy();\n        }\n        player.destroy();\n        players.push(player);\n      });\n    }\n\n    // this needs to be done so that the PRE/POST styles can be\n    // computed properly without interfering with the previous animation\n    eraseStyles(rootElement, instruction.fromStyles);\n  }\n\n  private _buildAnimation(\n      namespaceId: string, instruction: AnimationTransitionInstruction,\n      allPreviousPlayersMap: Map<any, TransitionAnimationPlayer[]>,\n      skippedPlayersMap: Map<any, AnimationPlayer[]>, preStylesMap: Map<any, ɵStyleData>,\n      postStylesMap: Map<any, ɵStyleData>): AnimationPlayer {\n    const triggerName = instruction.triggerName;\n    const rootElement = instruction.element;\n\n    // we first run this so that the previous animation player\n    // data can be passed into the successive animation players\n    const allQueriedPlayers: TransitionAnimationPlayer[] = [];\n    const allConsumedElements = new Set<any>();\n    const allSubElements = new Set<any>();\n    const allNewPlayers = instruction.timelines.map(timelineInstruction => {\n      const element = timelineInstruction.element;\n      allConsumedElements.add(element);\n\n      // FIXME (matsko): make sure to-be-removed animations are removed properly\n      const details = element[REMOVAL_FLAG];\n      if (details && details.removedBeforeQueried)\n        return new NoopAnimationPlayer(timelineInstruction.duration, timelineInstruction.delay);\n\n      const isQueriedElement = element !== rootElement;\n      const previousPlayers =\n          flattenGroupPlayers((allPreviousPlayersMap.get(element) || EMPTY_PLAYER_ARRAY)\n                                  .map(p => p.getRealPlayer()))\n              .filter(p => {\n                // the `element` is not apart of the AnimationPlayer definition, but\n                // Mock/WebAnimations\n                // use the element within their implementation. This will be added in Angular5 to\n                // AnimationPlayer\n                const pp = p as any;\n                return pp.element ? pp.element === element : false;\n              });\n\n      const preStyles = preStylesMap.get(element);\n      const postStyles = postStylesMap.get(element);\n      const keyframes = normalizeKeyframes(\n          this.driver, this._normalizer, element, timelineInstruction.keyframes, preStyles,\n          postStyles);\n      const player = this._buildPlayer(timelineInstruction, keyframes, previousPlayers);\n\n      // this means that this particular player belongs to a sub trigger. It is\n      // important that we match this player up with the corresponding (@trigger.listener)\n      if (timelineInstruction.subTimeline && skippedPlayersMap) {\n        allSubElements.add(element);\n      }\n\n      if (isQueriedElement) {\n        const wrappedPlayer = new TransitionAnimationPlayer(namespaceId, triggerName, element);\n        wrappedPlayer.setRealPlayer(player);\n        allQueriedPlayers.push(wrappedPlayer);\n      }\n\n      return player;\n    });\n\n    allQueriedPlayers.forEach(player => {\n      getOrSetAsInMap(this.playersByQueriedElement, player.element, []).push(player);\n      player.onDone(() => deleteOrUnsetInMap(this.playersByQueriedElement, player.element, player));\n    });\n\n    allConsumedElements.forEach(element => addClass(element, NG_ANIMATING_CLASSNAME));\n    const player = optimizeGroupPlayer(allNewPlayers);\n    player.onDestroy(() => {\n      allConsumedElements.forEach(element => removeClass(element, NG_ANIMATING_CLASSNAME));\n      setStyles(rootElement, instruction.toStyles);\n    });\n\n    // this basically makes all of the callbacks for sub element animations\n    // be dependent on the upper players for when they finish\n    allSubElements.forEach(element => {\n      getOrSetAsInMap(skippedPlayersMap, element, []).push(player);\n    });\n\n    return player;\n  }\n\n  private _buildPlayer(\n      instruction: AnimationTimelineInstruction, keyframes: ɵStyleData[],\n      previousPlayers: AnimationPlayer[]): AnimationPlayer {\n    if (keyframes.length > 0) {\n      return this.driver.animate(\n          instruction.element, keyframes, instruction.duration, instruction.delay,\n          instruction.easing, previousPlayers);\n    }\n\n    // special case for when an empty transition|definition is provided\n    // ... there is no point in rendering an empty animation\n    return new NoopAnimationPlayer(instruction.duration, instruction.delay);\n  }\n}\n\nexport class TransitionAnimationPlayer implements AnimationPlayer {\n  private _player: AnimationPlayer = new NoopAnimationPlayer();\n  private _containsRealPlayer = false;\n\n  private _queuedCallbacks: {[name: string]: (() => any)[]} = {};\n  public readonly destroyed = false;\n  // TODO(issue/24571): remove '!'.\n  public parentPlayer!: AnimationPlayer;\n\n  public markedForDestroy: boolean = false;\n  public disabled = false;\n\n  readonly queued: boolean = true;\n  public readonly totalTime: number = 0;\n\n  constructor(public namespaceId: string, public triggerName: string, public element: any) {}\n\n  setRealPlayer(player: AnimationPlayer) {\n    if (this._containsRealPlayer) return;\n\n    this._player = player;\n    Object.keys(this._queuedCallbacks).forEach(phase => {\n      this._queuedCallbacks[phase].forEach(\n          callback => listenOnPlayer(player, phase, undefined, callback));\n    });\n    this._queuedCallbacks = {};\n    this._containsRealPlayer = true;\n    this.overrideTotalTime(player.totalTime);\n    (this as {queued: boolean}).queued = false;\n  }\n\n  getRealPlayer() {\n    return this._player;\n  }\n\n  overrideTotalTime(totalTime: number) {\n    (this as any).totalTime = totalTime;\n  }\n\n  syncPlayerEvents(player: AnimationPlayer) {\n    const p = this._player as any;\n    if (p.triggerCallback) {\n      player.onStart(() => p.triggerCallback!('start'));\n    }\n    player.onDone(() => this.finish());\n    player.onDestroy(() => this.destroy());\n  }\n\n  private _queueEvent(name: string, callback: (event: any) => any): void {\n    getOrSetAsInMap(this._queuedCallbacks, name, []).push(callback);\n  }\n\n  onDone(fn: () => void): void {\n    if (this.queued) {\n      this._queueEvent('done', fn);\n    }\n    this._player.onDone(fn);\n  }\n\n  onStart(fn: () => void): void {\n    if (this.queued) {\n      this._queueEvent('start', fn);\n    }\n    this._player.onStart(fn);\n  }\n\n  onDestroy(fn: () => void): void {\n    if (this.queued) {\n      this._queueEvent('destroy', fn);\n    }\n    this._player.onDestroy(fn);\n  }\n\n  init(): void {\n    this._player.init();\n  }\n\n  hasStarted(): boolean {\n    return this.queued ? false : this._player.hasStarted();\n  }\n\n  play(): void {\n    !this.queued && this._player.play();\n  }\n\n  pause(): void {\n    !this.queued && this._player.pause();\n  }\n\n  restart(): void {\n    !this.queued && this._player.restart();\n  }\n\n  finish(): void {\n    this._player.finish();\n  }\n\n  destroy(): void {\n    (this as {destroyed: boolean}).destroyed = true;\n    this._player.destroy();\n  }\n\n  reset(): void {\n    !this.queued && this._player.reset();\n  }\n\n  setPosition(p: any): void {\n    if (!this.queued) {\n      this._player.setPosition(p);\n    }\n  }\n\n  getPosition(): number {\n    return this.queued ? 0 : this._player.getPosition();\n  }\n\n  /** @internal */\n  triggerCallback(phaseName: string): void {\n    const p = this._player as any;\n    if (p.triggerCallback) {\n      p.triggerCallback(phaseName);\n    }\n  }\n}\n\nfunction deleteOrUnsetInMap(map: Map<any, any[]>|{[key: string]: any}, key: any, value: any) {\n  let currentValues: any[]|null|undefined;\n  if (map instanceof Map) {\n    currentValues = map.get(key);\n    if (currentValues) {\n      if (currentValues.length) {\n        const index = currentValues.indexOf(value);\n        currentValues.splice(index, 1);\n      }\n      if (currentValues.length == 0) {\n        map.delete(key);\n      }\n    }\n  } else {\n    currentValues = map[key];\n    if (currentValues) {\n      if (currentValues.length) {\n        const index = currentValues.indexOf(value);\n        currentValues.splice(index, 1);\n      }\n      if (currentValues.length == 0) {\n        delete map[key];\n      }\n    }\n  }\n  return currentValues;\n}\n\nfunction normalizeTriggerValue(value: any): any {\n  // we use `!= null` here because it's the most simple\n  // way to test against a \"falsy\" value without mixing\n  // in empty strings or a zero value. DO NOT OPTIMIZE.\n  return value != null ? value : null;\n}\n\nfunction isElementNode(node: any) {\n  return node && node['nodeType'] === 1;\n}\n\nfunction isTriggerEventValid(eventName: string): boolean {\n  return eventName == 'start' || eventName == 'done';\n}\n\nfunction cloakElement(element: any, value?: string) {\n  const oldValue = element.style.display;\n  element.style.display = value != null ? value : 'none';\n  return oldValue;\n}\n\nfunction cloakAndComputeStyles(\n    valuesMap: Map<any, ɵStyleData>, driver: AnimationDriver, elements: Set<any>,\n    elementPropsMap: Map<any, Set<string>>, defaultStyle: string): any[] {\n  const cloakVals: string[] = [];\n  elements.forEach(element => cloakVals.push(cloakElement(element)));\n\n  const failedElements: any[] = [];\n\n  elementPropsMap.forEach((props: Set<string>, element: any) => {\n    const styles: ɵStyleData = {};\n    props.forEach(prop => {\n      const value = styles[prop] = driver.computeStyle(element, prop, defaultStyle);\n\n      // there is no easy way to detect this because a sub element could be removed\n      // by a parent animation element being detached.\n      if (!value || value.length == 0) {\n        element[REMOVAL_FLAG] = NULL_REMOVED_QUERIED_STATE;\n        failedElements.push(element);\n      }\n    });\n    valuesMap.set(element, styles);\n  });\n\n  // we use a index variable here since Set.forEach(a, i) does not return\n  // an index value for the closure (but instead just the value)\n  let i = 0;\n  elements.forEach(element => cloakElement(element, cloakVals[i++]));\n\n  return failedElements;\n}\n\n/*\nSince the Angular renderer code will return a collection of inserted\nnodes in all areas of a DOM tree, it's up to this algorithm to figure\nout which nodes are roots for each animation @trigger.\n\nBy placing each inserted node into a Set and traversing upwards, it\nis possible to find the @trigger elements and well any direct *star\ninsertion nodes, if a @trigger root is found then the enter element\nis placed into the Map[@trigger] spot.\n */\nfunction buildRootMap(roots: any[], nodes: any[]): Map<any, any[]> {\n  const rootMap = new Map<any, any[]>();\n  roots.forEach(root => rootMap.set(root, []));\n\n  if (nodes.length == 0) return rootMap;\n\n  const NULL_NODE = 1;\n  const nodeSet = new Set(nodes);\n  const localRootMap = new Map<any, any>();\n\n  function getRoot(node: any): any {\n    if (!node) return NULL_NODE;\n\n    let root = localRootMap.get(node);\n    if (root) return root;\n\n    const parent = node.parentNode;\n    if (rootMap.has(parent)) {  // ngIf inside @trigger\n      root = parent;\n    } else if (nodeSet.has(parent)) {  // ngIf inside ngIf\n      root = NULL_NODE;\n    } else {  // recurse upwards\n      root = getRoot(parent);\n    }\n\n    localRootMap.set(node, root);\n    return root;\n  }\n\n  nodes.forEach(node => {\n    const root = getRoot(node);\n    if (root !== NULL_NODE) {\n      rootMap.get(root)!.push(node);\n    }\n  });\n\n  return rootMap;\n}\n\nconst CLASSES_CACHE_KEY = '$$classes';\nfunction containsClass(element: any, className: string): boolean {\n  if (element.classList) {\n    return element.classList.contains(className);\n  } else {\n    const classes = element[CLASSES_CACHE_KEY];\n    return classes && classes[className];\n  }\n}\n\nfunction addClass(element: any, className: string) {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    let classes: {[className: string]: boolean} = element[CLASSES_CACHE_KEY];\n    if (!classes) {\n      classes = element[CLASSES_CACHE_KEY] = {};\n    }\n    classes[className] = true;\n  }\n}\n\nfunction removeClass(element: any, className: string) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else {\n    let classes: {[className: string]: boolean} = element[CLASSES_CACHE_KEY];\n    if (classes) {\n      delete classes[className];\n    }\n  }\n}\n\nfunction removeNodesAfterAnimationDone(\n    engine: TransitionAnimationEngine, element: any, players: AnimationPlayer[]) {\n  optimizeGroupPlayer(players).onDone(() => engine.processLeaveNode(element));\n}\n\nfunction flattenGroupPlayers(players: AnimationPlayer[]): AnimationPlayer[] {\n  const finalPlayers: AnimationPlayer[] = [];\n  _flattenGroupPlayersRecur(players, finalPlayers);\n  return finalPlayers;\n}\n\nfunction _flattenGroupPlayersRecur(players: AnimationPlayer[], finalPlayers: AnimationPlayer[]) {\n  for (let i = 0; i < players.length; i++) {\n    const player = players[i];\n    if (player instanceof AnimationGroupPlayer) {\n      _flattenGroupPlayersRecur(player.players, finalPlayers);\n    } else {\n      finalPlayers.push(player);\n    }\n  }\n}\n\nfunction objEquals(a: {[key: string]: any}, b: {[key: string]: any}): boolean {\n  const k1 = Object.keys(a);\n  const k2 = Object.keys(b);\n  if (k1.length != k2.length) return false;\n  for (let i = 0; i < k1.length; i++) {\n    const prop = k1[i];\n    if (!b.hasOwnProperty(prop) || a[prop] !== b[prop]) return false;\n  }\n  return true;\n}\n\nfunction replacePostStylesAsPre(\n    element: any, allPreStyleElements: Map<any, Set<string>>,\n    allPostStyleElements: Map<any, Set<string>>): boolean {\n  const postEntry = allPostStyleElements.get(element);\n  if (!postEntry) return false;\n\n  let preEntry = allPreStyleElements.get(element);\n  if (preEntry) {\n    postEntry.forEach(data => preEntry!.add(data));\n  } else {\n    allPreStyleElements.set(element, postEntry);\n  }\n\n  allPostStyleElements.delete(element);\n  return true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationMetadata, AnimationPlayer, AnimationTriggerMetadata} from '@angular/animations';\nimport {TriggerAst} from '../dsl/animation_ast';\nimport {buildAnimationAst} from '../dsl/animation_ast_builder';\nimport {AnimationTrigger, buildTrigger} from '../dsl/animation_trigger';\nimport {AnimationStyleNormalizer} from '../dsl/style_normalization/animation_style_normalizer';\n\nimport {AnimationDriver} from './animation_driver';\nimport {parseTimelineCommand} from './shared';\nimport {TimelineAnimationEngine} from './timeline_animation_engine';\nimport {TransitionAnimationEngine} from './transition_animation_engine';\n\nexport class AnimationEngine {\n  private _transitionEngine: TransitionAnimationEngine;\n  private _timelineEngine: TimelineAnimationEngine;\n\n  private _triggerCache: {[key: string]: AnimationTrigger} = {};\n\n  // this method is designed to be overridden by the code that uses this engine\n  public onRemovalComplete = (element: any, context: any) => {};\n\n  constructor(\n      private bodyNode: any, private _driver: AnimationDriver,\n      normalizer: AnimationStyleNormalizer) {\n    this._transitionEngine = new TransitionAnimationEngine(bodyNode, _driver, normalizer);\n    this._timelineEngine = new TimelineAnimationEngine(bodyNode, _driver, normalizer);\n\n    this._transitionEngine.onRemovalComplete = (element: any, context: any) =>\n        this.onRemovalComplete(element, context);\n  }\n\n  registerTrigger(\n      componentId: string, namespaceId: string, hostElement: any, name: string,\n      metadata: AnimationTriggerMetadata): void {\n    const cacheKey = componentId + '-' + name;\n    let trigger = this._triggerCache[cacheKey];\n    if (!trigger) {\n      const errors: any[] = [];\n      const ast =\n          buildAnimationAst(this._driver, metadata as AnimationMetadata, errors) as TriggerAst;\n      if (errors.length) {\n        throw new Error(`The animation trigger \"${\n            name}\" has failed to build due to the following errors:\\n - ${errors.join('\\n - ')}`);\n      }\n      trigger = buildTrigger(name, ast);\n      this._triggerCache[cacheKey] = trigger;\n    }\n    this._transitionEngine.registerTrigger(namespaceId, name, trigger);\n  }\n\n  register(namespaceId: string, hostElement: any) {\n    this._transitionEngine.register(namespaceId, hostElement);\n  }\n\n  destroy(namespaceId: string, context: any) {\n    this._transitionEngine.destroy(namespaceId, context);\n  }\n\n  onInsert(namespaceId: string, element: any, parent: any, insertBefore: boolean): void {\n    this._transitionEngine.insertNode(namespaceId, element, parent, insertBefore);\n  }\n\n  onRemove(namespaceId: string, element: any, context: any, isHostElement?: boolean): void {\n    this._transitionEngine.removeNode(namespaceId, element, isHostElement || false, context);\n  }\n\n  disableAnimations(element: any, disable: boolean) {\n    this._transitionEngine.markElementAsDisabled(element, disable);\n  }\n\n  process(namespaceId: string, element: any, property: string, value: any) {\n    if (property.charAt(0) == '@') {\n      const [id, action] = parseTimelineCommand(property);\n      const args = value as any[];\n      this._timelineEngine.command(id, element, action, args);\n    } else {\n      this._transitionEngine.trigger(namespaceId, element, property, value);\n    }\n  }\n\n  listen(\n      namespaceId: string, element: any, eventName: string, eventPhase: string,\n      callback: (event: any) => any): () => any {\n    // @@listen\n    if (eventName.charAt(0) == '@') {\n      const [id, action] = parseTimelineCommand(eventName);\n      return this._timelineEngine.listen(id, element, action, callback);\n    }\n    return this._transitionEngine.listen(namespaceId, element, eventName, eventPhase, callback);\n  }\n\n  flush(microtaskId: number = -1): void {\n    this._transitionEngine.flush(microtaskId);\n  }\n\n  get players(): AnimationPlayer[] {\n    return (this._transitionEngine.players as AnimationPlayer[])\n        .concat(this._timelineEngine.players as AnimationPlayer[]);\n  }\n\n  whenRenderingDone(): Promise<any> {\n    return this._transitionEngine.whenRenderingDone();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {eraseStyles, setStyles} from '../util';\n\n/**\n * Returns an instance of `SpecialCasedStyles` if and when any special (non animateable) styles are\n * detected.\n *\n * In CSS there exist properties that cannot be animated within a keyframe animation\n * (whether it be via CSS keyframes or web-animations) and the animation implementation\n * will ignore them. This function is designed to detect those special cased styles and\n * return a container that will be executed at the start and end of the animation.\n *\n * @returns an instance of `SpecialCasedStyles` if any special styles are detected otherwise `null`\n */\nexport function packageNonAnimatableStyles(\n    element: any, styles: {[key: string]: any}|{[key: string]: any}[]): SpecialCasedStyles|null {\n  let startStyles: {[key: string]: any}|null = null;\n  let endStyles: {[key: string]: any}|null = null;\n  if (Array.isArray(styles) && styles.length) {\n    startStyles = filterNonAnimatableStyles(styles[0]);\n    if (styles.length > 1) {\n      endStyles = filterNonAnimatableStyles(styles[styles.length - 1]);\n    }\n  } else if (styles) {\n    startStyles = filterNonAnimatableStyles(styles);\n  }\n\n  return (startStyles || endStyles) ? new SpecialCasedStyles(element, startStyles, endStyles) :\n                                      null;\n}\n\n/**\n * Designed to be executed during a keyframe-based animation to apply any special-cased styles.\n *\n * When started (when the `start()` method is run) then the provided `startStyles`\n * will be applied. When finished (when the `finish()` method is called) the\n * `endStyles` will be applied as well any any starting styles. Finally when\n * `destroy()` is called then all styles will be removed.\n */\nexport class SpecialCasedStyles {\n  static initialStylesByElement = new WeakMap<any, {[key: string]: any}>();\n\n  private _state = SpecialCasedStylesState.Pending;\n  private _initialStyles!: {[key: string]: any};\n\n  constructor(\n      private _element: any, private _startStyles: {[key: string]: any}|null,\n      private _endStyles: {[key: string]: any}|null) {\n    let initialStyles = SpecialCasedStyles.initialStylesByElement.get(_element);\n    if (!initialStyles) {\n      SpecialCasedStyles.initialStylesByElement.set(_element, initialStyles = {});\n    }\n    this._initialStyles = initialStyles;\n  }\n\n  start() {\n    if (this._state < SpecialCasedStylesState.Started) {\n      if (this._startStyles) {\n        setStyles(this._element, this._startStyles, this._initialStyles);\n      }\n      this._state = SpecialCasedStylesState.Started;\n    }\n  }\n\n  finish() {\n    this.start();\n    if (this._state < SpecialCasedStylesState.Finished) {\n      setStyles(this._element, this._initialStyles);\n      if (this._endStyles) {\n        setStyles(this._element, this._endStyles);\n        this._endStyles = null;\n      }\n      this._state = SpecialCasedStylesState.Started;\n    }\n  }\n\n  destroy() {\n    this.finish();\n    if (this._state < SpecialCasedStylesState.Destroyed) {\n      SpecialCasedStyles.initialStylesByElement.delete(this._element);\n      if (this._startStyles) {\n        eraseStyles(this._element, this._startStyles);\n        this._endStyles = null;\n      }\n      if (this._endStyles) {\n        eraseStyles(this._element, this._endStyles);\n        this._endStyles = null;\n      }\n      setStyles(this._element, this._initialStyles);\n      this._state = SpecialCasedStylesState.Destroyed;\n    }\n  }\n}\n\n/**\n * An enum of states reflective of what the status of `SpecialCasedStyles` is.\n *\n * Depending on how `SpecialCasedStyles` is interacted with, the start and end\n * styles may not be applied in the same way. This enum ensures that if and when\n * the ending styles are applied then the starting styles are applied. It is\n * also used to reflect what the current status of the special cased styles are\n * which helps prevent the starting/ending styles not be applied twice. It is\n * also used to cleanup the styles once `SpecialCasedStyles` is destroyed.\n */\nconst enum SpecialCasedStylesState {\n  Pending = 0,\n  Started = 1,\n  Finished = 2,\n  Destroyed = 3,\n}\n\nfunction filterNonAnimatableStyles(styles: {[key: string]: any}) {\n  let result: {[key: string]: any}|null = null;\n  const props = Object.keys(styles);\n  for (let i = 0; i < props.length; i++) {\n    const prop = props[i];\n    if (isNonAnimatableStyle(prop)) {\n      result = result || {};\n      result[prop] = styles[prop];\n    }\n  }\n  return result;\n}\n\nfunction isNonAnimatableStyle(prop: string) {\n  return prop === 'display' || prop === 'position';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;\nconst ANIMATION_PROP = 'animation';\nconst ANIMATIONEND_EVENT = 'animationend';\nconst ONE_SECOND = 1000;\n\nexport class ElementAnimationStyleHandler {\n  private readonly _eventFn: (e: any) => any;\n  private _finished = false;\n  private _destroyed = false;\n  private _startTime = 0;\n  private _position = 0;\n\n  constructor(\n      private readonly _element: any, private readonly _name: string,\n      private readonly _duration: number, private readonly _delay: number,\n      private readonly _easing: string, private readonly _fillMode: ''|'both'|'forwards',\n      private readonly _onDoneFn: () => any) {\n    this._eventFn = (e) => this._handleCallback(e);\n  }\n\n  apply() {\n    applyKeyframeAnimation(\n        this._element,\n        `${this._duration}ms ${this._easing} ${this._delay}ms 1 normal ${this._fillMode} ${\n            this._name}`);\n    addRemoveAnimationEvent(this._element, this._eventFn, false);\n    this._startTime = Date.now();\n  }\n\n  pause() {\n    playPauseAnimation(this._element, this._name, 'paused');\n  }\n\n  resume() {\n    playPauseAnimation(this._element, this._name, 'running');\n  }\n\n  setPosition(position: number) {\n    const index = findIndexForAnimation(this._element, this._name);\n    this._position = position * this._duration;\n    setAnimationStyle(this._element, 'Delay', `-${this._position}ms`, index);\n  }\n\n  getPosition() {\n    return this._position;\n  }\n\n  private _handleCallback(event: any) {\n    const timestamp = event._ngTestManualTimestamp || Date.now();\n    const elapsedTime =\n        parseFloat(event.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES)) * ONE_SECOND;\n    if (event.animationName == this._name &&\n        Math.max(timestamp - this._startTime, 0) >= this._delay && elapsedTime >= this._duration) {\n      this.finish();\n    }\n  }\n\n  finish() {\n    if (this._finished) return;\n    this._finished = true;\n    this._onDoneFn();\n    addRemoveAnimationEvent(this._element, this._eventFn, true);\n  }\n\n  destroy() {\n    if (this._destroyed) return;\n    this._destroyed = true;\n    this.finish();\n    removeKeyframeAnimation(this._element, this._name);\n  }\n}\n\nfunction playPauseAnimation(element: any, name: string, status: 'running'|'paused') {\n  const index = findIndexForAnimation(element, name);\n  setAnimationStyle(element, 'PlayState', status, index);\n}\n\nfunction applyKeyframeAnimation(element: any, value: string): number {\n  const anim = getAnimationStyle(element, '').trim();\n  let index = 0;\n  if (anim.length) {\n    index = countChars(anim, ',') + 1;\n    value = `${anim}, ${value}`;\n  }\n  setAnimationStyle(element, '', value);\n  return index;\n}\n\nfunction removeKeyframeAnimation(element: any, name: string) {\n  const anim = getAnimationStyle(element, '');\n  const tokens = anim.split(',');\n  const index = findMatchingTokenIndex(tokens, name);\n  if (index >= 0) {\n    tokens.splice(index, 1);\n    const newValue = tokens.join(',');\n    setAnimationStyle(element, '', newValue);\n  }\n}\n\nfunction findIndexForAnimation(element: any, value: string) {\n  const anim = getAnimationStyle(element, '');\n  if (anim.indexOf(',') > 0) {\n    const tokens = anim.split(',');\n    return findMatchingTokenIndex(tokens, value);\n  }\n  return findMatchingTokenIndex([anim], value);\n}\n\nfunction findMatchingTokenIndex(tokens: string[], searchToken: string): number {\n  for (let i = 0; i < tokens.length; i++) {\n    if (tokens[i].indexOf(searchToken) >= 0) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction addRemoveAnimationEvent(element: any, fn: (e: any) => any, doRemove: boolean) {\n  doRemove ? element.removeEventListener(ANIMATIONEND_EVENT, fn) :\n             element.addEventListener(ANIMATIONEND_EVENT, fn);\n}\n\nfunction setAnimationStyle(element: any, name: string, value: string, index?: number) {\n  const prop = ANIMATION_PROP + name;\n  if (index != null) {\n    const oldValue = element.style[prop];\n    if (oldValue.length) {\n      const tokens = oldValue.split(',');\n      tokens[index] = value;\n      value = tokens.join(',');\n    }\n  }\n  element.style[prop] = value;\n}\n\nexport function getAnimationStyle(element: any, name: string) {\n  return element.style[ANIMATION_PROP + name] || '';\n}\n\nfunction countChars(value: string, char: string): number {\n  let count = 0;\n  for (let i = 0; i < value.length; i++) {\n    const c = value.charAt(i);\n    if (c === char) count++;\n  }\n  return count;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationPlayer} from '@angular/animations';\n\nimport {computeStyle} from '../../util';\nimport {SpecialCasedStyles} from '../special_cased_styles';\nimport {ElementAnimationStyleHandler} from './element_animation_style_handler';\n\nconst DEFAULT_FILL_MODE = 'forwards';\nconst DEFAULT_EASING = 'linear';\n\nexport const enum AnimatorControlState {\n  INITIALIZED = 1,\n  STARTED = 2,\n  FINISHED = 3,\n  DESTROYED = 4\n}\n\nexport class CssKeyframesPlayer implements AnimationPlayer {\n  private _onDoneFns: Function[] = [];\n  private _onStartFns: Function[] = [];\n  private _onDestroyFns: Function[] = [];\n\n  private _started = false;\n  // TODO(issue/24571): remove '!'.\n  private _styler!: ElementAnimationStyleHandler;\n\n  // TODO(issue/24571): remove '!'.\n  public parentPlayer!: AnimationPlayer;\n  public readonly totalTime: number;\n  public readonly easing: string;\n  public currentSnapshot: {[key: string]: string} = {};\n\n  private _state: AnimatorControlState = 0;\n\n  constructor(\n      public readonly element: any, public readonly keyframes: {[key: string]: string|number}[],\n      public readonly animationName: string, private readonly _duration: number,\n      private readonly _delay: number, easing: string,\n      private readonly _finalStyles: {[key: string]: any},\n      private readonly _specialStyles?: SpecialCasedStyles|null) {\n    this.easing = easing || DEFAULT_EASING;\n    this.totalTime = _duration + _delay;\n    this._buildStyler();\n  }\n\n  onStart(fn: () => void): void {\n    this._onStartFns.push(fn);\n  }\n\n  onDone(fn: () => void): void {\n    this._onDoneFns.push(fn);\n  }\n\n  onDestroy(fn: () => void): void {\n    this._onDestroyFns.push(fn);\n  }\n\n  destroy() {\n    this.init();\n    if (this._state >= AnimatorControlState.DESTROYED) return;\n    this._state = AnimatorControlState.DESTROYED;\n    this._styler.destroy();\n    this._flushStartFns();\n    this._flushDoneFns();\n    if (this._specialStyles) {\n      this._specialStyles.destroy();\n    }\n    this._onDestroyFns.forEach(fn => fn());\n    this._onDestroyFns = [];\n  }\n\n  private _flushDoneFns() {\n    this._onDoneFns.forEach(fn => fn());\n    this._onDoneFns = [];\n  }\n\n  private _flushStartFns() {\n    this._onStartFns.forEach(fn => fn());\n    this._onStartFns = [];\n  }\n\n  finish() {\n    this.init();\n    if (this._state >= AnimatorControlState.FINISHED) return;\n    this._state = AnimatorControlState.FINISHED;\n    this._styler.finish();\n    this._flushStartFns();\n    if (this._specialStyles) {\n      this._specialStyles.finish();\n    }\n    this._flushDoneFns();\n  }\n\n  setPosition(value: number) {\n    this._styler.setPosition(value);\n  }\n\n  getPosition(): number {\n    return this._styler.getPosition();\n  }\n\n  hasStarted(): boolean {\n    return this._state >= AnimatorControlState.STARTED;\n  }\n  init(): void {\n    if (this._state >= AnimatorControlState.INITIALIZED) return;\n    this._state = AnimatorControlState.INITIALIZED;\n    const elm = this.element;\n    this._styler.apply();\n    if (this._delay) {\n      this._styler.pause();\n    }\n  }\n\n  play(): void {\n    this.init();\n    if (!this.hasStarted()) {\n      this._flushStartFns();\n      this._state = AnimatorControlState.STARTED;\n      if (this._specialStyles) {\n        this._specialStyles.start();\n      }\n    }\n    this._styler.resume();\n  }\n\n  pause(): void {\n    this.init();\n    this._styler.pause();\n  }\n  restart(): void {\n    this.reset();\n    this.play();\n  }\n  reset(): void {\n    this._styler.destroy();\n    this._buildStyler();\n    this._styler.apply();\n  }\n\n  private _buildStyler() {\n    this._styler = new ElementAnimationStyleHandler(\n        this.element, this.animationName, this._duration, this._delay, this.easing,\n        DEFAULT_FILL_MODE, () => this.finish());\n  }\n\n  /** @internal */\n  triggerCallback(phaseName: string): void {\n    const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n    methods.forEach(fn => fn());\n    methods.length = 0;\n  }\n\n  beforeDestroy() {\n    this.init();\n    const styles: {[key: string]: string} = {};\n    if (this.hasStarted()) {\n      const finished = this._state >= AnimatorControlState.FINISHED;\n      Object.keys(this._finalStyles).forEach(prop => {\n        if (prop != 'offset') {\n          styles[prop] = finished ? this._finalStyles[prop] : computeStyle(this.element, prop);\n        }\n      });\n    }\n    this.currentSnapshot = styles;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NoopAnimationPlayer} from '@angular/animations';\nimport {hypenatePropsObject} from '../shared';\n\nexport class DirectStylePlayer extends NoopAnimationPlayer {\n  private _startingStyles: {[key: string]: any}|null = {};\n  private __initialized = false;\n  private _styles: {[key: string]: any};\n\n  constructor(public element: any, styles: {[key: string]: any}) {\n    super();\n    this._styles = hypenatePropsObject(styles);\n  }\n\n  init() {\n    if (this.__initialized || !this._startingStyles) return;\n    this.__initialized = true;\n    Object.keys(this._styles).forEach(prop => {\n      this._startingStyles![prop] = this.element.style[prop];\n    });\n    super.init();\n  }\n\n  play() {\n    if (!this._startingStyles) return;\n    this.init();\n    Object.keys(this._styles)\n        .forEach(prop => this.element.style.setProperty(prop, this._styles[prop]));\n    super.play();\n  }\n\n  destroy() {\n    if (!this._startingStyles) return;\n    Object.keys(this._startingStyles).forEach(prop => {\n      const value = this._startingStyles![prop];\n      if (value) {\n        this.element.style.setProperty(prop, value);\n      } else {\n        this.element.style.removeProperty(prop);\n      }\n    });\n    this._startingStyles = null;\n    super.destroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationPlayer, ɵStyleData} from '@angular/animations';\n\nimport {allowPreviousPlayerStylesMerge, balancePreviousStylesIntoKeyframes, computeStyle} from '../../util';\nimport {AnimationDriver} from '../animation_driver';\nimport {containsElement, hypenatePropsObject, invokeQuery, matchesElement, validateStyleProperty} from '../shared';\nimport {packageNonAnimatableStyles} from '../special_cased_styles';\n\nimport {CssKeyframesPlayer} from './css_keyframes_player';\nimport {DirectStylePlayer} from './direct_style_player';\n\nconst KEYFRAMES_NAME_PREFIX = 'gen_css_kf_';\nconst TAB_SPACE = ' ';\n\nexport class CssKeyframesDriver implements AnimationDriver {\n  private _count = 0;\n  private readonly _head: any = document.querySelector('head');\n\n  validateStyleProperty(prop: string): boolean {\n    return validateStyleProperty(prop);\n  }\n\n  matchesElement(element: any, selector: string): boolean {\n    return matchesElement(element, selector);\n  }\n\n  containsElement(elm1: any, elm2: any): boolean {\n    return containsElement(elm1, elm2);\n  }\n\n  query(element: any, selector: string, multi: boolean): any[] {\n    return invokeQuery(element, selector, multi);\n  }\n\n  computeStyle(element: any, prop: string, defaultValue?: string): string {\n    return (window.getComputedStyle(element) as any)[prop] as string;\n  }\n\n  buildKeyframeElement(element: any, name: string, keyframes: {[key: string]: any}[]): any {\n    keyframes = keyframes.map(kf => hypenatePropsObject(kf));\n    let keyframeStr = `@keyframes ${name} {\\n`;\n    let tab = '';\n    keyframes.forEach(kf => {\n      tab = TAB_SPACE;\n      const offset = parseFloat(kf['offset']);\n      keyframeStr += `${tab}${offset * 100}% {\\n`;\n      tab += TAB_SPACE;\n      Object.keys(kf).forEach(prop => {\n        const value = kf[prop];\n        switch (prop) {\n          case 'offset':\n            return;\n          case 'easing':\n            if (value) {\n              keyframeStr += `${tab}animation-timing-function: ${value};\\n`;\n            }\n            return;\n          default:\n            keyframeStr += `${tab}${prop}: ${value};\\n`;\n            return;\n        }\n      });\n      keyframeStr += `${tab}}\\n`;\n    });\n    keyframeStr += `}\\n`;\n\n    const kfElm = document.createElement('style');\n    kfElm.textContent = keyframeStr;\n    return kfElm;\n  }\n\n  animate(\n      element: any, keyframes: ɵStyleData[], duration: number, delay: number, easing: string,\n      previousPlayers: AnimationPlayer[] = [], scrubberAccessRequested?: boolean): AnimationPlayer {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && scrubberAccessRequested) {\n      notifyFaultyScrubber();\n    }\n\n    const previousCssKeyframePlayers = <CssKeyframesPlayer[]>previousPlayers.filter(\n        player => player instanceof CssKeyframesPlayer);\n\n    const previousStyles: {[key: string]: any} = {};\n\n    if (allowPreviousPlayerStylesMerge(duration, delay)) {\n      previousCssKeyframePlayers.forEach(player => {\n        let styles = player.currentSnapshot;\n        Object.keys(styles).forEach(prop => previousStyles[prop] = styles[prop]);\n      });\n    }\n\n    keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);\n    const finalStyles = flattenKeyframesIntoStyles(keyframes);\n\n    // if there is no animation then there is no point in applying\n    // styles and waiting for an event to get fired. This causes lag.\n    // It's better to just directly apply the styles to the element\n    // via the direct styling animation player.\n    if (duration == 0) {\n      return new DirectStylePlayer(element, finalStyles);\n    }\n\n    const animationName = `${KEYFRAMES_NAME_PREFIX}${this._count++}`;\n    const kfElm = this.buildKeyframeElement(element, animationName, keyframes);\n    document.querySelector('head')!.appendChild(kfElm);\n\n    const specialStyles = packageNonAnimatableStyles(element, keyframes);\n    const player = new CssKeyframesPlayer(\n        element, keyframes, animationName, duration, delay, easing, finalStyles, specialStyles);\n\n    player.onDestroy(() => removeElement(kfElm));\n    return player;\n  }\n}\n\nfunction flattenKeyframesIntoStyles(keyframes: null|{[key: string]: any}|\n                                    {[key: string]: any}[]): {[key: string]: any} {\n  let flatKeyframes: {[key: string]: any} = {};\n  if (keyframes) {\n    const kfs = Array.isArray(keyframes) ? keyframes : [keyframes];\n    kfs.forEach(kf => {\n      Object.keys(kf).forEach(prop => {\n        if (prop == 'offset' || prop == 'easing') return;\n        flatKeyframes[prop] = kf[prop];\n      });\n    });\n  }\n  return flatKeyframes;\n}\n\nfunction removeElement(node: any) {\n  node.parentNode.removeChild(node);\n}\n\nlet warningIssued = false;\nfunction notifyFaultyScrubber(): void {\n  if (warningIssued) return;\n  console.warn(\n      '@angular/animations: please load the web-animations.js polyfill to allow programmatic access...\\n',\n      '  visit https://bit.ly/IWukam to learn more about using the web-animation-js polyfill.');\n  warningIssued = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationPlayer} from '@angular/animations';\n\nimport {computeStyle} from '../../util';\nimport {SpecialCasedStyles} from '../special_cased_styles';\n\nimport {DOMAnimation} from './dom_animation';\n\nexport class WebAnimationsPlayer implements AnimationPlayer {\n  private _onDoneFns: Function[] = [];\n  private _onStartFns: Function[] = [];\n  private _onDestroyFns: Function[] = [];\n  private _duration: number;\n  private _delay: number;\n  private _initialized = false;\n  private _finished = false;\n  private _started = false;\n  private _destroyed = false;\n  // TODO(issue/24571): remove '!'.\n  private _finalKeyframe!: {[key: string]: string|number};\n\n  // TODO(issue/24571): remove '!'.\n  public readonly domPlayer!: DOMAnimation;\n  public time = 0;\n\n  public parentPlayer: AnimationPlayer|null = null;\n  public currentSnapshot: {[styleName: string]: string|number} = {};\n\n  constructor(\n      public element: any, public keyframes: {[key: string]: string|number}[],\n      public options: {[key: string]: string|number},\n      private _specialStyles?: SpecialCasedStyles|null) {\n    this._duration = <number>options['duration'];\n    this._delay = <number>options['delay'] || 0;\n    this.time = this._duration + this._delay;\n  }\n\n  private _onFinish() {\n    if (!this._finished) {\n      this._finished = true;\n      this._onDoneFns.forEach(fn => fn());\n      this._onDoneFns = [];\n    }\n  }\n\n  init(): void {\n    this._buildPlayer();\n    this._preparePlayerBeforeStart();\n  }\n\n  private _buildPlayer(): void {\n    if (this._initialized) return;\n    this._initialized = true;\n\n    const keyframes = this.keyframes;\n    (this as {domPlayer: DOMAnimation}).domPlayer =\n        this._triggerWebAnimation(this.element, keyframes, this.options);\n    this._finalKeyframe = keyframes.length ? keyframes[keyframes.length - 1] : {};\n    this.domPlayer.addEventListener('finish', () => this._onFinish());\n  }\n\n  private _preparePlayerBeforeStart() {\n    // this is required so that the player doesn't start to animate right away\n    if (this._delay) {\n      this._resetDomPlayerState();\n    } else {\n      this.domPlayer.pause();\n    }\n  }\n\n  /** @internal */\n  _triggerWebAnimation(element: any, keyframes: any[], options: any): DOMAnimation {\n    // jscompiler doesn't seem to know animate is a native property because it's not fully\n    // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]\n    return element['animate'](keyframes, options) as DOMAnimation;\n  }\n\n  onStart(fn: () => void): void {\n    this._onStartFns.push(fn);\n  }\n\n  onDone(fn: () => void): void {\n    this._onDoneFns.push(fn);\n  }\n\n  onDestroy(fn: () => void): void {\n    this._onDestroyFns.push(fn);\n  }\n\n  play(): void {\n    this._buildPlayer();\n    if (!this.hasStarted()) {\n      this._onStartFns.forEach(fn => fn());\n      this._onStartFns = [];\n      this._started = true;\n      if (this._specialStyles) {\n        this._specialStyles.start();\n      }\n    }\n    this.domPlayer.play();\n  }\n\n  pause(): void {\n    this.init();\n    this.domPlayer.pause();\n  }\n\n  finish(): void {\n    this.init();\n    if (this._specialStyles) {\n      this._specialStyles.finish();\n    }\n    this._onFinish();\n    this.domPlayer.finish();\n  }\n\n  reset(): void {\n    this._resetDomPlayerState();\n    this._destroyed = false;\n    this._finished = false;\n    this._started = false;\n  }\n\n  private _resetDomPlayerState() {\n    if (this.domPlayer) {\n      this.domPlayer.cancel();\n    }\n  }\n\n  restart(): void {\n    this.reset();\n    this.play();\n  }\n\n  hasStarted(): boolean {\n    return this._started;\n  }\n\n  destroy(): void {\n    if (!this._destroyed) {\n      this._destroyed = true;\n      this._resetDomPlayerState();\n      this._onFinish();\n      if (this._specialStyles) {\n        this._specialStyles.destroy();\n      }\n      this._onDestroyFns.forEach(fn => fn());\n      this._onDestroyFns = [];\n    }\n  }\n\n  setPosition(p: number): void {\n    if (this.domPlayer === undefined) {\n      this.init();\n    }\n    this.domPlayer.currentTime = p * this.time;\n  }\n\n  getPosition(): number {\n    return this.domPlayer.currentTime / this.time;\n  }\n\n  get totalTime(): number {\n    return this._delay + this._duration;\n  }\n\n  beforeDestroy() {\n    const styles: {[key: string]: string|number} = {};\n    if (this.hasStarted()) {\n      Object.keys(this._finalKeyframe).forEach(prop => {\n        if (prop != 'offset') {\n          styles[prop] =\n              this._finished ? this._finalKeyframe[prop] : computeStyle(this.element, prop);\n        }\n      });\n    }\n    this.currentSnapshot = styles;\n  }\n\n  /** @internal */\n  triggerCallback(phaseName: string): void {\n    const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n    methods.forEach(fn => fn());\n    methods.length = 0;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationPlayer, ɵStyleData} from '@angular/animations';\n\nimport {allowPreviousPlayerStylesMerge, balancePreviousStylesIntoKeyframes, copyStyles} from '../../util';\nimport {AnimationDriver} from '../animation_driver';\nimport {CssKeyframesDriver} from '../css_keyframes/css_keyframes_driver';\nimport {containsElement, invokeQuery, isBrowser, matchesElement, validateStyleProperty} from '../shared';\nimport {packageNonAnimatableStyles} from '../special_cased_styles';\n\nimport {WebAnimationsPlayer} from './web_animations_player';\n\nexport class WebAnimationsDriver implements AnimationDriver {\n  private _isNativeImpl = /\\{\\s*\\[native\\s+code\\]\\s*\\}/.test(getElementAnimateFn().toString());\n  private _cssKeyframesDriver = new CssKeyframesDriver();\n\n  validateStyleProperty(prop: string): boolean {\n    return validateStyleProperty(prop);\n  }\n\n  matchesElement(element: any, selector: string): boolean {\n    return matchesElement(element, selector);\n  }\n\n  containsElement(elm1: any, elm2: any): boolean {\n    return containsElement(elm1, elm2);\n  }\n\n  query(element: any, selector: string, multi: boolean): any[] {\n    return invokeQuery(element, selector, multi);\n  }\n\n  computeStyle(element: any, prop: string, defaultValue?: string): string {\n    return (window.getComputedStyle(element) as any)[prop] as string;\n  }\n\n  overrideWebAnimationsSupport(supported: boolean) {\n    this._isNativeImpl = supported;\n  }\n\n  animate(\n      element: any, keyframes: ɵStyleData[], duration: number, delay: number, easing: string,\n      previousPlayers: AnimationPlayer[] = [], scrubberAccessRequested?: boolean): AnimationPlayer {\n    const useKeyframes = !scrubberAccessRequested && !this._isNativeImpl;\n    if (useKeyframes) {\n      return this._cssKeyframesDriver.animate(\n          element, keyframes, duration, delay, easing, previousPlayers);\n    }\n\n    const fill = delay == 0 ? 'both' : 'forwards';\n    const playerOptions: {[key: string]: string|number} = {duration, delay, fill};\n    // we check for this to avoid having a null|undefined value be present\n    // for the easing (which results in an error for certain browsers #9752)\n    if (easing) {\n      playerOptions['easing'] = easing;\n    }\n\n    const previousStyles: {[key: string]: any} = {};\n    const previousWebAnimationPlayers = <WebAnimationsPlayer[]>previousPlayers.filter(\n        player => player instanceof WebAnimationsPlayer);\n\n    if (allowPreviousPlayerStylesMerge(duration, delay)) {\n      previousWebAnimationPlayers.forEach(player => {\n        let styles = player.currentSnapshot;\n        Object.keys(styles).forEach(prop => previousStyles[prop] = styles[prop]);\n      });\n    }\n\n    keyframes = keyframes.map(styles => copyStyles(styles, false));\n    keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);\n    const specialStyles = packageNonAnimatableStyles(element, keyframes);\n    return new WebAnimationsPlayer(element, keyframes, playerOptions, specialStyles);\n  }\n}\n\nexport function supportsWebAnimations() {\n  return typeof getElementAnimateFn() === 'function';\n}\n\nfunction getElementAnimateFn(): any {\n  return (isBrowser() && (<any>Element).prototype['animate']) || {};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationBuilder, AnimationFactory, AnimationMetadata, AnimationOptions, AnimationPlayer, sequence} from '@angular/animations';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, RendererFactory2, RendererType2, ViewEncapsulation} from '@angular/core';\n\nimport {AnimationRenderer} from './animation_renderer';\n\n@Injectable()\nexport class BrowserAnimationBuilder extends AnimationBuilder {\n  private _nextAnimationId = 0;\n  private _renderer: AnimationRenderer;\n\n  constructor(rootRenderer: RendererFactory2, @Inject(DOCUMENT) doc: any) {\n    super();\n    const typeData =\n        {id: '0', encapsulation: ViewEncapsulation.None, styles: [], data: {animation: []}} as\n        RendererType2;\n    this._renderer = rootRenderer.createRenderer(doc.body, typeData) as AnimationRenderer;\n  }\n\n  build(animation: AnimationMetadata|AnimationMetadata[]): AnimationFactory {\n    const id = this._nextAnimationId.toString();\n    this._nextAnimationId++;\n    const entry = Array.isArray(animation) ? sequence(animation) : animation;\n    issueAnimationCommand(this._renderer, null, id, 'register', [entry]);\n    return new BrowserAnimationFactory(id, this._renderer);\n  }\n}\n\nexport class BrowserAnimationFactory extends AnimationFactory {\n  constructor(private _id: string, private _renderer: AnimationRenderer) {\n    super();\n  }\n\n  create(element: any, options?: AnimationOptions): AnimationPlayer {\n    return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);\n  }\n}\n\nexport class RendererAnimationPlayer implements AnimationPlayer {\n  public parentPlayer: AnimationPlayer|null = null;\n  private _started = false;\n\n  constructor(\n      public id: string, public element: any, options: AnimationOptions,\n      private _renderer: AnimationRenderer) {\n    this._command('create', options);\n  }\n\n  private _listen(eventName: string, callback: (event: any) => any): () => void {\n    return this._renderer.listen(this.element, `@@${this.id}:${eventName}`, callback);\n  }\n\n  private _command(command: string, ...args: any[]) {\n    return issueAnimationCommand(this._renderer, this.element, this.id, command, args);\n  }\n\n  onDone(fn: () => void): void {\n    this._listen('done', fn);\n  }\n\n  onStart(fn: () => void): void {\n    this._listen('start', fn);\n  }\n\n  onDestroy(fn: () => void): void {\n    this._listen('destroy', fn);\n  }\n\n  init(): void {\n    this._command('init');\n  }\n\n  hasStarted(): boolean {\n    return this._started;\n  }\n\n  play(): void {\n    this._command('play');\n    this._started = true;\n  }\n\n  pause(): void {\n    this._command('pause');\n  }\n\n  restart(): void {\n    this._command('restart');\n  }\n\n  finish(): void {\n    this._command('finish');\n  }\n\n  destroy(): void {\n    this._command('destroy');\n  }\n\n  reset(): void {\n    this._command('reset');\n  }\n\n  setPosition(p: number): void {\n    this._command('setPosition', p);\n  }\n\n  getPosition(): number {\n    return this._renderer.engine.players[+this.id]?.getPosition() ?? 0;\n  }\n\n  public totalTime = 0;\n}\n\nfunction issueAnimationCommand(\n    renderer: AnimationRenderer, element: any, id: string, command: string, args: any[]): any {\n  return renderer.setProperty(element, `@@${id}:${command}`, args);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationTriggerMetadata} from '@angular/animations';\nimport {ɵAnimationEngine as AnimationEngine} from '@angular/animations/browser';\nimport {Injectable, NgZone, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2} from '@angular/core';\n\nconst ANIMATION_PREFIX = '@';\nconst DISABLE_ANIMATIONS_FLAG = '@.disabled';\n\n// Define a recursive type to allow for nested arrays of `AnimationTriggerMetadata`. Note that an\n// interface declaration is used as TypeScript prior to 3.7 does not support recursive type\n// references, see https://github.com/microsoft/TypeScript/pull/33050 for details.\ntype NestedAnimationTriggerMetadata = AnimationTriggerMetadata|RecursiveAnimationTriggerMetadata;\ninterface RecursiveAnimationTriggerMetadata extends Array<NestedAnimationTriggerMetadata> {}\n\n@Injectable()\nexport class AnimationRendererFactory implements RendererFactory2 {\n  private _currentId: number = 0;\n  private _microtaskId: number = 1;\n  private _animationCallbacksBuffer: [(e: any) => any, any][] = [];\n  private _rendererCache = new Map<Renderer2, BaseAnimationRenderer>();\n  private _cdRecurDepth = 0;\n  private promise: Promise<any> = Promise.resolve(0);\n\n  constructor(\n      private delegate: RendererFactory2, private engine: AnimationEngine, private _zone: NgZone) {\n    engine.onRemovalComplete = (element: any, delegate: Renderer2) => {\n      // Note: if an component element has a leave animation, and the component\n      // a host leave animation, the view engine will call `removeChild` for the parent\n      // component renderer as well as for the child component renderer.\n      // Therefore, we need to check if we already removed the element.\n      if (delegate && delegate.parentNode(element)) {\n        delegate.removeChild(element.parentNode, element);\n      }\n    };\n  }\n\n  createRenderer(hostElement: any, type: RendererType2): Renderer2 {\n    const EMPTY_NAMESPACE_ID = '';\n\n    // cache the delegates to find out which cached delegate can\n    // be used by which cached renderer\n    const delegate = this.delegate.createRenderer(hostElement, type);\n    if (!hostElement || !type || !type.data || !type.data['animation']) {\n      let renderer: BaseAnimationRenderer|undefined = this._rendererCache.get(delegate);\n      if (!renderer) {\n        renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine);\n        // only cache this result when the base renderer is used\n        this._rendererCache.set(delegate, renderer);\n      }\n      return renderer;\n    }\n\n    const componentId = type.id;\n    const namespaceId = type.id + '-' + this._currentId;\n    this._currentId++;\n\n    this.engine.register(namespaceId, hostElement);\n\n    const registerTrigger = (trigger: NestedAnimationTriggerMetadata) => {\n      if (Array.isArray(trigger)) {\n        trigger.forEach(registerTrigger);\n      } else {\n        this.engine.registerTrigger(componentId, namespaceId, hostElement, trigger.name, trigger);\n      }\n    };\n    const animationTriggers = type.data['animation'] as NestedAnimationTriggerMetadata[];\n    animationTriggers.forEach(registerTrigger);\n\n    return new AnimationRenderer(this, namespaceId, delegate, this.engine);\n  }\n\n  begin() {\n    this._cdRecurDepth++;\n    if (this.delegate.begin) {\n      this.delegate.begin();\n    }\n  }\n\n  private _scheduleCountTask() {\n    // always use promise to schedule microtask instead of use Zone\n    this.promise.then(() => {\n      this._microtaskId++;\n    });\n  }\n\n  /** @internal */\n  scheduleListenerCallback(count: number, fn: (e: any) => any, data: any) {\n    if (count >= 0 && count < this._microtaskId) {\n      this._zone.run(() => fn(data));\n      return;\n    }\n\n    if (this._animationCallbacksBuffer.length == 0) {\n      Promise.resolve(null).then(() => {\n        this._zone.run(() => {\n          this._animationCallbacksBuffer.forEach(tuple => {\n            const [fn, data] = tuple;\n            fn(data);\n          });\n          this._animationCallbacksBuffer = [];\n        });\n      });\n    }\n\n    this._animationCallbacksBuffer.push([fn, data]);\n  }\n\n  end() {\n    this._cdRecurDepth--;\n\n    // this is to prevent animations from running twice when an inner\n    // component does CD when a parent component instead has inserted it\n    if (this._cdRecurDepth == 0) {\n      this._zone.runOutsideAngular(() => {\n        this._scheduleCountTask();\n        this.engine.flush(this._microtaskId);\n      });\n    }\n    if (this.delegate.end) {\n      this.delegate.end();\n    }\n  }\n\n  whenRenderingDone(): Promise<any> {\n    return this.engine.whenRenderingDone();\n  }\n}\n\nexport class BaseAnimationRenderer implements Renderer2 {\n  constructor(\n      protected namespaceId: string, public delegate: Renderer2, public engine: AnimationEngine) {\n    this.destroyNode = this.delegate.destroyNode ? (n) => delegate.destroyNode!(n) : null;\n  }\n\n  get data() {\n    return this.delegate.data;\n  }\n\n  destroyNode: ((n: any) => void)|null;\n\n  destroy(): void {\n    this.engine.destroy(this.namespaceId, this.delegate);\n    this.delegate.destroy();\n  }\n\n  createElement(name: string, namespace?: string|null|undefined) {\n    return this.delegate.createElement(name, namespace);\n  }\n\n  createComment(value: string) {\n    return this.delegate.createComment(value);\n  }\n\n  createText(value: string) {\n    return this.delegate.createText(value);\n  }\n\n  appendChild(parent: any, newChild: any): void {\n    this.delegate.appendChild(parent, newChild);\n    this.engine.onInsert(this.namespaceId, newChild, parent, false);\n  }\n\n  insertBefore(parent: any, newChild: any, refChild: any, isMove: boolean = true): void {\n    this.delegate.insertBefore(parent, newChild, refChild);\n    // If `isMove` true than we should animate this insert.\n    this.engine.onInsert(this.namespaceId, newChild, parent, isMove);\n  }\n\n  removeChild(parent: any, oldChild: any, isHostElement: boolean): void {\n    this.engine.onRemove(this.namespaceId, oldChild, this.delegate, isHostElement);\n  }\n\n  selectRootElement(selectorOrNode: any, preserveContent?: boolean) {\n    return this.delegate.selectRootElement(selectorOrNode, preserveContent);\n  }\n\n  parentNode(node: any) {\n    return this.delegate.parentNode(node);\n  }\n\n  nextSibling(node: any) {\n    return this.delegate.nextSibling(node);\n  }\n\n  setAttribute(el: any, name: string, value: string, namespace?: string|null|undefined): void {\n    this.delegate.setAttribute(el, name, value, namespace);\n  }\n\n  removeAttribute(el: any, name: string, namespace?: string|null|undefined): void {\n    this.delegate.removeAttribute(el, name, namespace);\n  }\n\n  addClass(el: any, name: string): void {\n    this.delegate.addClass(el, name);\n  }\n\n  removeClass(el: any, name: string): void {\n    this.delegate.removeClass(el, name);\n  }\n\n  setStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2|undefined): void {\n    this.delegate.setStyle(el, style, value, flags);\n  }\n\n  removeStyle(el: any, style: string, flags?: RendererStyleFlags2|undefined): void {\n    this.delegate.removeStyle(el, style, flags);\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {\n      this.disableAnimations(el, !!value);\n    } else {\n      this.delegate.setProperty(el, name, value);\n    }\n  }\n\n  setValue(node: any, value: string): void {\n    this.delegate.setValue(node, value);\n  }\n\n  listen(target: any, eventName: string, callback: (event: any) => boolean | void): () => void {\n    return this.delegate.listen(target, eventName, callback);\n  }\n\n  protected disableAnimations(element: any, value: boolean) {\n    this.engine.disableAnimations(element, value);\n  }\n}\n\nexport class AnimationRenderer extends BaseAnimationRenderer implements Renderer2 {\n  constructor(\n      public factory: AnimationRendererFactory, namespaceId: string, delegate: Renderer2,\n      engine: AnimationEngine) {\n    super(namespaceId, delegate, engine);\n    this.namespaceId = namespaceId;\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    if (name.charAt(0) == ANIMATION_PREFIX) {\n      if (name.charAt(1) == '.' && name == DISABLE_ANIMATIONS_FLAG) {\n        value = value === undefined ? true : !!value;\n        this.disableAnimations(el, value as boolean);\n      } else {\n        this.engine.process(this.namespaceId, el, name.substr(1), value);\n      }\n    } else {\n      this.delegate.setProperty(el, name, value);\n    }\n  }\n\n  listen(target: 'window'|'document'|'body'|any, eventName: string, callback: (event: any) => any):\n      () => void {\n    if (eventName.charAt(0) == ANIMATION_PREFIX) {\n      const element = resolveElementFromTarget(target);\n      let name = eventName.substr(1);\n      let phase = '';\n      // @listener.phase is for trigger animation callbacks\n      // @@listener is for animation builder callbacks\n      if (name.charAt(0) != ANIMATION_PREFIX) {\n        [name, phase] = parseTriggerCallbackName(name);\n      }\n      return this.engine.listen(this.namespaceId, element, name, phase, event => {\n        const countId = (event as any)['_data'] || -1;\n        this.factory.scheduleListenerCallback(countId, callback, event);\n      });\n    }\n    return this.delegate.listen(target, eventName, callback);\n  }\n}\n\nfunction resolveElementFromTarget(target: 'window'|'document'|'body'|any): any {\n  switch (target) {\n    case 'body':\n      return document.body;\n    case 'document':\n      return document;\n    case 'window':\n      return window;\n    default:\n      return target;\n  }\n}\n\nfunction parseTriggerCallbackName(triggerName: string) {\n  const dotIndex = triggerName.indexOf('.');\n  const trigger = triggerName.substring(0, dotIndex);\n  const phase = triggerName.substr(dotIndex + 1);\n  return [trigger, phase];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationBuilder} from '@angular/animations';\nimport {AnimationDriver, ɵAnimationEngine as AnimationEngine, ɵAnimationStyleNormalizer as AnimationStyleNormalizer, ɵCssKeyframesDriver as CssKeyframesDriver, ɵNoopAnimationDriver as NoopAnimationDriver, ɵsupportsWebAnimations as supportsWebAnimations, ɵWebAnimationsDriver as WebAnimationsDriver, ɵWebAnimationsStyleNormalizer as WebAnimationsStyleNormalizer} from '@angular/animations/browser';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, NgZone, Provider, RendererFactory2} from '@angular/core';\nimport {ɵDomRendererFactory2 as DomRendererFactory2} from '@angular/platform-browser';\n\nimport {BrowserAnimationBuilder} from './animation_builder';\nimport {AnimationRendererFactory} from './animation_renderer';\n\n@Injectable()\nexport class InjectableAnimationEngine extends AnimationEngine {\n  constructor(\n      @Inject(DOCUMENT) doc: any, driver: AnimationDriver, normalizer: AnimationStyleNormalizer) {\n    super(doc.body, driver, normalizer);\n  }\n}\n\nexport function instantiateSupportedAnimationDriver() {\n  return supportsWebAnimations() ? new WebAnimationsDriver() : new CssKeyframesDriver();\n}\n\nexport function instantiateDefaultStyleNormalizer() {\n  return new WebAnimationsStyleNormalizer();\n}\n\nexport function instantiateRendererFactory(\n    renderer: DomRendererFactory2, engine: AnimationEngine, zone: NgZone) {\n  return new AnimationRendererFactory(renderer, engine, zone);\n}\n\n/**\n * @publicApi\n */\nexport const ANIMATION_MODULE_TYPE =\n    new InjectionToken<'NoopAnimations'|'BrowserAnimations'>('AnimationModuleType');\n\nconst SHARED_ANIMATION_PROVIDERS: Provider[] = [\n  {provide: AnimationBuilder, useClass: BrowserAnimationBuilder},\n  {provide: AnimationStyleNormalizer, useFactory: instantiateDefaultStyleNormalizer},\n  {provide: AnimationEngine, useClass: InjectableAnimationEngine}, {\n    provide: RendererFactory2,\n    useFactory: instantiateRendererFactory,\n    deps: [DomRendererFactory2, AnimationEngine, NgZone]\n  }\n];\n\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserModule.\n */\nexport const BROWSER_ANIMATIONS_PROVIDERS: Provider[] = [\n  {provide: AnimationDriver, useFactory: instantiateSupportedAnimationDriver},\n  {provide: ANIMATION_MODULE_TYPE, useValue: 'BrowserAnimations'}, ...SHARED_ANIMATION_PROVIDERS\n];\n\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserTestingModule.\n */\nexport const BROWSER_NOOP_ANIMATIONS_PROVIDERS: Provider[] = [\n  {provide: AnimationDriver, useClass: NoopAnimationDriver},\n  {provide: ANIMATION_MODULE_TYPE, useValue: 'NoopAnimations'}, ...SHARED_ANIMATION_PROVIDERS\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {BROWSER_ANIMATIONS_PROVIDERS, BROWSER_NOOP_ANIMATIONS_PROVIDERS} from './providers';\n\n/**\n * Exports `BrowserModule` with additional [dependency-injection providers](guide/glossary#provider)\n * for use with animations. See [Animations](guide/animations).\n * @publicApi\n */\n@NgModule({\n  exports: [BrowserModule],\n  providers: BROWSER_ANIMATIONS_PROVIDERS,\n})\nexport class BrowserAnimationsModule {\n}\n\n/**\n * A null player that must be imported to allow disabling of animations.\n * @publicApi\n */\n@NgModule({\n  exports: [BrowserModule],\n  providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,\n})\nexport class NoopAnimationsModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HighContrastModeDetector} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {Inject, InjectionToken, isDevMode, NgModule, Optional, Version} from '@angular/core';\nimport {VERSION as CDK_VERSION} from '@angular/cdk';\nimport {DOCUMENT} from '@angular/common';\n\n// Private version constant to circumvent test/build issues,\n// i.e. avoid core to depend on the @angular/material primary entry-point\n// Can be removed once the Material primary entry-point no longer\n// re-exports all secondary entry-points\nconst VERSION = new Version('11.2.2');\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): SanityChecks {\n  return true;\n}\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<SanityChecks>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/**\n * Possible sanity checks that can be enabled. If set to\n * true/false, all checks will be enabled/disabled.\n */\nexport type SanityChecks = boolean | GranularSanityChecks;\n\n/** Object that can be used to configure the sanity checks granularly. */\nexport interface GranularSanityChecks {\n  doctype: boolean;\n  theme: boolean;\n  version: boolean;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Configured sanity checks. */\n  private _sanityChecks: SanityChecks;\n\n  /** Used to reference correct document/window */\n  protected _document: Document;\n\n  constructor(\n      highContrastModeDetector: HighContrastModeDetector,\n      @Optional() @Inject(MATERIAL_SANITY_CHECKS) sanityChecks: any,\n      @Inject(DOCUMENT) document: any) {\n    this._document = document;\n\n    // While A11yModule also does this, we repeat it here to avoid importing A11yModule\n    // in MatCommonModule.\n    highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n\n    // Note that `_sanityChecks` is typed to `any`, because AoT\n    // throws an error if we use the `SanityChecks` type directly.\n    this._sanityChecks = sanityChecks;\n\n    if (!this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._checkCdkVersionMatch();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window | null {\n    const win = this._document.defaultView || window;\n    return typeof win === 'object' && win ? win : null;\n  }\n\n  /** Whether any sanity checks are enabled. */\n  private _checksAreEnabled(): boolean {\n    // TODO(crisbeto): we can't use `ngDevMode` here yet, because ViewEngine apps might not support\n    // it. Since these checks can have performance implications and they aren't tree shakeable\n    // in their current form, we can leave the `isDevMode` check in for now.\n    // tslint:disable-next-line:ban\n    return isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._getWindow() as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    const isEnabled = this._checksAreEnabled() &&\n      (this._sanityChecks === true || (this._sanityChecks as GranularSanityChecks).doctype);\n\n    if (isEnabled && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    const isDisabled = !this._checksAreEnabled() ||\n      (this._sanityChecks === false || !(this._sanityChecks as GranularSanityChecks).theme);\n\n    if (isDisabled || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether the material version matches the cdk version */\n  private _checkCdkVersionMatch(): void {\n    const isEnabled = this._checksAreEnabled() &&\n      (this._sanityChecks === true || (this._sanityChecks as GranularSanityChecks).version);\n\n    if (isEnabled && VERSION.full !== CDK_VERSION.full) {\n      console.warn(\n          'The Angular Material version (' + VERSION.full + ') does not match ' +\n          'the Angular CDK version (' + CDK_VERSION.full + ').\\n' +\n          'Please ensure the versions of these two packages exactly match.'\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from its utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // Check for invalid month and date (except upper bound on date which we have to check after\n      // creating the Date).\n      if (month < 0 || month > 11) {\n        throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n      }\n\n      if (date < 1) {\n        throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n      }\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setFullYear` and `setHours` instead.\n    const d = new Date();\n    d.setFullYear(year, month, date);\n    d.setHours(0, 0, 0, 0);\n    return d;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n    // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\n    const d = new Date();\n    d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n\n  /** Default color to fall back to if no value is set. */\n  defaultColor: ThemePalette | undefined;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n    defaultColor = defaultColor;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || this.defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor, AbstractConstructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends AbstractConstructor<{}>>(\n  base: T): CanDisableRippleCtor & T {\n  abstract class Mixin extends (base as unknown as Constructor<{}>) {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  }\n\n  // Since we don't directly extend from `base` with it's original types, and we instruct\n  // TypeScript that `T` actually is instantiatable through `new`, the types don't overlap.\n  // This is a limitation in TS as abstract classes cannot be typed properly dynamically.\n  return Mixin as unknown as T & CanDisableRippleCtor;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Possible states for a ripple element. */\nexport const enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: {fadeOutRipple(ref: RippleRef): void},\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleAnimationConfig, RippleConfig, RippleRef} from './ripple-ref';\nimport {RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse or touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {\n        ...this._globalOptions.animation,\n        ...(this._animationMode === 'NoopAnimations' ? {enterDuration: 0, exitDuration: 0} : {}),\n        ...this.animation\n      },\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n  AfterViewInit,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Add a class for disabled button styling instead of the using attribute\n    // selector or pseudo-selector.  This allows users to create focusabled\n    // disabled buttons without recreating the styles.\n    '[class.mat-button-disabled]': 'disabled',\n    'class': 'mat-focus-indicator',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements AfterViewInit, OnDestroy, CanDisable, CanColor, CanDisableRipple, FocusableOption {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (this._getHostElement() as HTMLElement).classList.add(attr);\n      }\n    }\n\n    // Add a class that applies to all buttons. This makes it easier to target if somebody\n    // wants to target all Material buttons. We do it here rather than `host` to ensure that\n    // the class is applied to derived classes.\n    elementRef.nativeElement.classList.add('mat-button-base');\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(origin?: FocusOrigin, options?: FocusOptions): void {\n    if (origin) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-button-disabled]': 'disabled',\n    'class': 'mat-focus-indicator',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {RippleRef, RippleState, RippleConfig} from './ripple-ref';\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Events that signal that the pointer is down. */\nconst pointerDownEvents = ['mousedown', 'touchstart'];\n\n/** Events that signal that the pointer is up. */\nconst pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer implements EventListenerObject {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Whether pointer-up event listeners have been registered. */\n  private _pointerUpEventsRegistered = false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementOrElementRef: HTMLElement | ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = coerceElement(elementOrElementRef);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If a custom color has been specified, set it as inline style. If no color is\n    // set, the default color will be applied through the ripple theme styles.\n    if (config.color != null) {\n      ripple.style.backgroundColor = config.color;\n    }\n\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this._runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this._runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(elementOrElementRef: HTMLElement | ElementRef<HTMLElement>) {\n    const element = coerceElement(elementOrElementRef);\n\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._triggerElement = element;\n    this._registerEvents(pointerDownEvents);\n  }\n\n  /**\n   * Handles all registered events.\n   * @docs-private\n   */\n  handleEvent(event: Event) {\n    if (event.type === 'mousedown') {\n      this._onMousedown(event as MouseEvent);\n    } else if (event.type === 'touchstart') {\n      this._onTouchStart(event as TouchEvent);\n    } else {\n      this._onPointerUp();\n    }\n\n    // If pointer-up events haven't been registered yet, do so now.\n    // We do this on-demand in order to reduce the total number of event listeners\n    // registered by the ripples, which speeds up the rendering time for large UIs.\n    if (!this._pointerUpEventsRegistered) {\n      this._registerEvents(pointerUpEvents);\n      this._pointerUpEventsRegistered = true;\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown(event: MouseEvent) {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart(event: TouchEvent) {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp() {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private _runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Registers event listeners for a given list of events. */\n  private _registerEvents(eventTypes: string[]) {\n    this._ngZone.runOutsideAngular(() => {\n      eventTypes.forEach((type) => {\n        this._triggerElement!.addEventListener(type, this, passiveEventOptions);\n      });\n    });\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      pointerDownEvents.forEach((type) => {\n        this._triggerElement!.removeEventListener(type, this, passiveEventOptions);\n      });\n\n      if (this._pointerUpEventsRegistered) {\n        pointerUpEvents.forEach((type) => {\n          this._triggerElement!.removeEventListener(type, this, passiveEventOptions);\n        });\n      }\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * ![](throw.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then emit an error\n * ```ts\n * import { throwError, concat, of } from 'rxjs';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Logs:\n * // 7\n * // Error: oops!\n * ```\n *\n * ---\n *\n * ### Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 2\n * ```ts\n * import { throwError, interval, of } from 'rxjs';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 2\n *     ? throwError('Twos are bad')\n *     : of('a', 'b', 'c')\n *   ),\n * ).subscribe(x => console.log(x), e => console.error(e));\n *\n * // Logs:\n * // a\n * // b\n * // c\n * // a\n * // b\n * // c\n * // Twos are bad\n * ```\n *\n * @see {@link Observable}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throwError\n * @owner Observable\n */\nexport function throwError(error: any, scheduler?: SchedulerLike): Observable<never> {\n  if (!scheduler) {\n    return new Observable(subscriber => subscriber.error(error));\n  } else {\n    return new Observable(subscriber => scheduler.schedule(dispatch, 0, { error, subscriber }));\n  }\n}\n\ninterface DispatchArg {\n  error: any;\n  subscriber: Subscriber<any>;\n}\n\nfunction dispatch({ error, subscriber }: DispatchArg) {\n  subscriber.error(error);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, ObservedValuesFromArray, ObservedValueOf, SubscribableOrPromise } from '../types';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { isObservable } from '../util/isObservable';\nimport { from } from './from';\n\n/* tslint:disable:max-line-length */\n\n// forkJoin(a$, b$, c$)\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T>(v1: SubscribableOrPromise<T>): Observable<[T]>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n// forkJoin([a$, b$, c$]);\n// TODO(benlesh): Uncomment for TS 3.0\n// export function forkJoin(sources: []): Observable<never>;\nexport function forkJoin<A>(sources: [ObservableInput<A>]): Observable<[A]>;\nexport function forkJoin<A, B>(sources: [ObservableInput<A>, ObservableInput<B>]): Observable<[A, B]>;\nexport function forkJoin<A, B, C>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>]): Observable<[A, B, C]>;\nexport function forkJoin<A, B, C, D>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>]): Observable<[A, B, C, D]>;\nexport function forkJoin<A, B, C, D, E>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>, ObservableInput<E>]): Observable<[A, B, C, D, E]>;\nexport function forkJoin<A, B, C, D, E, F>(sources: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>, ObservableInput<E>, ObservableInput<F>]): Observable<[A, B, C, D, E, F]>;\nexport function forkJoin<A extends ObservableInput<any>[]>(sources: A): Observable<ObservedValuesFromArray<A>[]>;\n\n// forkJoin({})\nexport function forkJoin(sourcesObject: {}): Observable<never>;\nexport function forkJoin<T, K extends keyof T>(sourcesObject: T): Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>;\n\n/** @deprecated resultSelector is deprecated, pipe to map instead */\nexport function forkJoin(...args: Array<ObservableInput<any>|Function>): Observable<any>;\n/** @deprecated Use the version that takes an array of Observables instead */\nexport function forkJoin<T>(...sources: ObservableInput<T>[]): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Accepts an `Array` of {@link ObservableInput} or a dictionary `Object` of {@link ObservableInput} and returns\n * an {@link Observable} that emits either an array of values in the exact same order as the passed array,\n * or a dictionary of values in the same shape as the passed dictionary.\n *\n * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n *\n * ![](forkJoin.png)\n *\n * `forkJoin` is an operator that takes any number of input observables which can be passed either as an array\n * or a dictionary of input observables. If no input observables are provided, resulting stream will complete\n * immediately.\n *\n * `forkJoin` will wait for all passed observables to complete and then it will emit an array or an object with last\n * values from corresponding observables.\n *\n * If you pass an array of `n` observables to the operator, resulting\n * array will have `n` values, where first value is the last thing emitted by the first observable,\n * second value is the last thing emitted by the second observable and so on.\n *\n * If you pass a dictionary of observables to the operator, resulting\n * objects will have the same keys as the dictionary passed, with their last values they've emitted\n * located at the corresponding key.\n *\n * That means `forkJoin` will not emit more than once and it will complete after that. If you need to emit combined\n * values not only at the end of lifecycle of passed observables, but also throughout it, try out {@link combineLatest}\n * or {@link zip} instead.\n *\n * In order for resulting array to have the same length as the number of input observables, whenever any of\n * that observables completes without emitting any value, `forkJoin` will complete at that moment as well\n * and it will not emit anything either, even if it already has some last values from other observables.\n * Conversely, if there is an observable that never completes, `forkJoin` will never complete as well,\n * unless at any point some other observable completes without emitting value, which brings us back to\n * the previous case. Overall, in order for `forkJoin` to emit a value, all observables passed as arguments\n * have to emit something at least once and complete.\n *\n * If any input observable errors at some point, `forkJoin` will error as well and all other observables\n * will be immediately unsubscribed.\n *\n * Optionally `forkJoin` accepts project function, that will be called with values which normally\n * would land in emitted array. Whatever is returned by project function, will appear in output\n * observable instead. This means that default project can be thought of as a function that takes\n * all its arguments and puts them into an array. Note that project function will be called only\n * when output observable is supposed to emit a result.\n *\n * ## Examples\n *\n * ### Use forkJoin with a dictionary of observable inputs\n * ```ts\n * import { forkJoin, of, timer } from 'rxjs';\n *\n * const observable = forkJoin({\n *   foo: of(1, 2, 3, 4),\n *   bar: Promise.resolve(8),\n *   baz: timer(4000),\n * });\n * observable.subscribe({\n *  next: value => console.log(value),\n *  complete: () => console.log('This is how it ends!'),\n * });\n *\n * // Logs:\n * // { foo: 4, bar: 8, baz: 0 } after 4 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * ### Use forkJoin with an array of observable inputs\n * ```ts\n * import { forkJoin, of } from 'rxjs';\n *\n * const observable = forkJoin([\n *   of(1, 2, 3, 4),\n *   Promise.resolve(8),\n *   timer(4000),\n * ]);\n * observable.subscribe({\n *  next: value => console.log(value),\n *  complete: () => console.log('This is how it ends!'),\n * });\n *\n * // Logs:\n * // [4, 8, 0] after 4 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n *\n * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments\n * passed directly to the operator.\n * @param {function} [project] Function that takes values emitted by input Observables and returns value\n * that will appear in resulting Observable instead of default array.\n * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n * or value from project function.\n */\nexport function forkJoin(\n  ...sources: any[]\n): Observable<any> {\n  if (sources.length === 1) {\n    const first = sources[0];\n    if (isArray(first)) {\n      return forkJoinInternal(first, null);\n    }\n    // TODO(benlesh): isObservable check will not be necessary when deprecated path is removed.\n    if (isObject(first) && Object.getPrototypeOf(first) === Object.prototype) {\n      const keys = Object.keys(first);\n      return forkJoinInternal(keys.map(key => first[key]), keys);\n    }\n  }\n\n  // DEPRECATED PATHS BELOW HERE\n  if (typeof sources[sources.length - 1] === 'function') {\n    const resultSelector = sources.pop() as Function;\n    sources = (sources.length === 1 && isArray(sources[0])) ? sources[0] : sources;\n    return forkJoinInternal(sources, null).pipe(\n      map((args: any[]) => resultSelector(...args))\n    );\n  }\n\n  return forkJoinInternal(sources, null);\n}\n\nfunction forkJoinInternal(sources: ObservableInput<any>[], keys: string[] | null): Observable<any> {\n  return new Observable(subscriber => {\n    const len = sources.length;\n    if (len === 0) {\n      subscriber.complete();\n      return;\n    }\n    const values = new Array(len);\n    let completed = 0;\n    let emitted = 0;\n    for (let i = 0; i < len; i++) {\n      const source = from(sources[i]);\n      let hasValue = false;\n      subscriber.add(source.subscribe({\n        next: value => {\n          if (!hasValue) {\n            hasValue = true;\n            emitted++;\n          }\n          values[i] = value;\n        },\n        error: err => subscriber.error(err),\n        complete: () => {\n          completed++;\n          if (completed === len || !hasValue) {\n            if (emitted === len) {\n              subscriber.next(keys ?\n                keys.reduce((result, key, i) => (result[key] = values[i], result), {}) :\n                values);\n            }\n            subscriber.complete();\n          }\n        }\n      }));\n    }\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nexport abstract class HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nexport abstract class HttpBackend implements HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface Update {\n  name: string;\n  value?: string|string[];\n  op: 'a'|'s'|'d';\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nexport class HttpHeaders {\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  // TODO(issue/24571): remove '!'.\n  private headers!: Map<string, string[]>;\n\n\n  /**\n   * Internal map of lowercased header names to the normalized\n   * form of the name (the form seen first).\n   */\n  private normalizedNames: Map<string, string> = new Map();\n\n  /**\n   * Complete the lazy initialization of this object (needed before reading).\n   */\n  private lazyInit!: HttpHeaders|Function|null;\n\n  /**\n   * Queued updates to be materialized the next initialization.\n   */\n  private lazyUpdate: Update[]|null = null;\n\n  /**  Constructs a new HTTP header object with the given values.*/\n\n  constructor(headers?: string|{[name: string]: string | string[]}) {\n    if (!headers) {\n      this.headers = new Map<string, string[]>();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n            if (this.headers.has(key)) {\n              this.headers.get(key)!.push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        Object.keys(headers).forEach(name => {\n          let values: string|string[] = headers[name];\n          const key = name.toLowerCase();\n          if (typeof values === 'string') {\n            values = [values];\n          }\n          if (values.length > 0) {\n            this.headers.set(key, values);\n            this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n  has(name: string): boolean {\n    this.init();\n\n    return this.headers.has(name.toLowerCase());\n  }\n\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n  get(name: string): string|null {\n    this.init();\n\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n  keys(): string[] {\n    this.init();\n\n    return Array.from(this.normalizedNames.values());\n  }\n\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n  getAll(name: string): string[]|null {\n    this.init();\n\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the values.\n   * @param value The value to append.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n\n  append(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'a'});\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or overide for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n  set(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 's'});\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n  delete(name: string, value?: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'd'});\n  }\n\n  private maybeSetNormalizedName(name: string, lcName: string): void {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  private init(): void {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  private copyFrom(other: HttpHeaders) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key)!);\n      this.normalizedNames.set(key, other.normalizedNames.get(key)!);\n    });\n  }\n\n  private clone(update: Update): HttpHeaders {\n    const clone = new HttpHeaders();\n    clone.lazyInit =\n        (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  private applyUpdate(update: Update): void {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value!;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value as string | undefined;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  forEach(fn: (name: string, values: string[]) => void) {\n    this.init();\n    Array.from(this.normalizedNames.keys())\n        .forEach(key => fn(this.normalizedNames.get(key)!, this.headers.get(key)!));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * @publicApi\n **/\nexport interface HttpParameterCodec {\n  encodeKey(key: string): string;\n  encodeValue(value: string): string;\n\n  decodeKey(key: string): string;\n  decodeValue(value: string): string;\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nexport class HttpUrlEncodingCodec implements HttpParameterCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key: string): string {\n    return standardEncoding(key);\n  }\n\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n  encodeValue(value: string): string {\n    return standardEncoding(value);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n  decodeValue(value: string) {\n    return decodeURIComponent(value);\n  }\n}\n\n\nfunction paramParser(rawParams: string, codec: HttpParameterCodec): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    const params: string[] = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] = eqIdx == -1 ?\n          [codec.decodeKey(param), ''] :\n          [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n\ninterface Update {\n  param: string;\n  value?: string;\n  op: 'a'|'d'|'s';\n}\n\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * @publicApi\n */\nexport interface HttpParamsOptions {\n  /**\n   * String representation of the HTTP parameters in URL-query-string format.\n   * Mutually exclusive with `fromObject`.\n   */\n  fromString?: string;\n\n  /** Object map of the HTTP parameters. Mutually exclusive with `fromString`. */\n  fromObject?: {[param: string]: string|ReadonlyArray<string>};\n\n  /** Encoding codec used to parse and serialize the parameters. */\n  encoder?: HttpParameterCodec;\n}\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nexport class HttpParams {\n  private map: Map<string, string[]>|null;\n  private encoder: HttpParameterCodec;\n  private updates: Update[]|null = null;\n  private cloneFrom: HttpParams|null = null;\n\n  constructor(options: HttpParamsOptions = {} as HttpParamsOptions) {\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map<string, string[]>();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = (options.fromObject as any)[key];\n        this.map!.set(key, Array.isArray(value) ? value : [value]);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n  has(param: string): boolean {\n    this.init();\n    return this.map!.has(param);\n  }\n\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n  get(param: string): string|null {\n    this.init();\n    const res = this.map!.get(param);\n    return !!res ? res[0] : null;\n  }\n\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n  getAll(param: string): string[]|null {\n    this.init();\n    return this.map!.get(param) || null;\n  }\n\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n  keys(): string[] {\n    this.init();\n    return Array.from(this.map!.keys());\n  }\n\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n  append(param: string, value: string): HttpParams {\n    return this.clone({param, value, op: 'a'});\n  }\n\n  /**\n   * Constructs a new body with appended values for the given parameter name.\n   * @param params parameters and values\n   * @return A new body with the new value.\n   */\n  appendAll(params: {[param: string]: string|string[]}): HttpParams {\n    const updates: Update[] = [];\n    Object.keys(params).forEach(param => {\n      const value = params[param];\n      if (Array.isArray(value)) {\n        value.forEach(_value => {\n          updates.push({param, value: _value, op: 'a'});\n        });\n      } else {\n        updates.push({param, value, op: 'a'});\n      }\n    });\n    return this.clone(updates);\n  }\n\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n  set(param: string, value: string): HttpParams {\n    return this.clone({param, value, op: 's'});\n  }\n\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n  delete(param: string, value?: string): HttpParams {\n    return this.clone({param, value, op: 'd'});\n  }\n\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n  toString(): string {\n    this.init();\n    return this.keys()\n        .map(key => {\n          const eKey = this.encoder.encodeKey(key);\n          // `a: ['1']` produces `'a=1'`\n          // `b: []` produces `''`\n          // `c: ['1', '2']` produces `'c=1&c=2'`\n          return this.map!.get(key)!.map(value => eKey + '=' + this.encoder.encodeValue(value))\n              .join('&');\n        })\n        // filter out empty values because `b: []` produces `''`\n        // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n        .filter(param => param !== '')\n        .join('&');\n  }\n\n  private clone(update: Update|Update[]): HttpParams {\n    const clone = new HttpParams({encoder: this.encoder} as HttpParamsOptions);\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat(update);\n    return clone;\n  }\n\n  private init() {\n    if (this.map === null) {\n      this.map = new Map<string, string[]>();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map!.set(key, this.cloneFrom!.map!.get(key)!));\n      this.updates!.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map!.get(update.param) : undefined) || [];\n            base.push(update.value!);\n            this.map!.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map!.get(update.param) || [];\n              const idx = base.indexOf(update.value);\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map!.set(update.param, base);\n              } else {\n                this.map!.delete(update.param);\n              }\n            } else {\n              this.map!.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from './headers';\nimport {HttpParams} from './params';\n\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n */\ninterface HttpRequestInit {\n  headers?: HttpHeaders;\n  reportProgress?: boolean;\n  params?: HttpParams;\n  responseType?: 'arraybuffer'|'blob'|'json'|'text';\n  withCredentials?: boolean;\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method: string): boolean {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value: any): value is ArrayBuffer {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value: any): value is Blob {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value: any): value is FormData {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nexport class HttpRequest<T> {\n  /**\n   * The request body, or `null` if one isn't set.\n   *\n   * Bodies are not enforced to be immutable, as they can include a reference to any\n   * user-defined data type. However, interceptors should take care to preserve\n   * idempotence by treating them as such.\n   */\n  readonly body: T|null = null;\n\n  /**\n   * Outgoing headers for this request.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly headers!: HttpHeaders;\n\n  /**\n   * Whether this request should be made in a way that exposes progress events.\n   *\n   * Progress events are expensive (change detection runs on each event) and so\n   * they should only be requested if the consumer intends to monitor them.\n   */\n  readonly reportProgress: boolean = false;\n\n  /**\n   * Whether this request should be sent with outgoing credentials (cookies).\n   */\n  readonly withCredentials: boolean = false;\n\n  /**\n   * The expected response type of the server.\n   *\n   * This is used to parse the response appropriately before returning it to\n   * the requestee.\n   */\n  readonly responseType: 'arraybuffer'|'blob'|'json'|'text' = 'json';\n\n  /**\n   * The outgoing HTTP request method.\n   */\n  readonly method: string;\n\n  /**\n   * Outgoing URL parameters.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly params!: HttpParams;\n\n  /**\n   * The outgoing URL with all URL parameters set.\n   */\n  readonly urlWithParams: string;\n\n  constructor(method: 'DELETE'|'GET'|'HEAD'|'JSONP'|'OPTIONS', url: string, init?: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: 'POST'|'PUT'|'PATCH', url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: string, url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(\n      method: string, readonly url: string, third?: T|{\n        headers?: HttpHeaders,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }|null,\n      fourth?: {\n        headers?: HttpHeaders,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }) {\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options: HttpRequestInit|undefined;\n\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = (third !== undefined) ? third as T : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third as HttpRequestInit;\n    }\n\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    }\n\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    }\n\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const sep: string = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n  serializeBody(): ArrayBuffer|Blob|FormData|string|null {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n        typeof this.body === 'string') {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n        Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return (this.body as any).toString();\n  }\n\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n  detectContentTypeHeader(): string|null {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, and numbers will be encoded as JSON.\n    if (typeof this.body === 'object' || typeof this.body === 'number' ||\n        Array.isArray(this.body)) {\n      return 'application/json';\n    }\n    // No type could be inferred.\n    return null;\n  }\n\n  clone(): HttpRequest<T>;\n  clone(update: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: T|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<T>;\n  clone<V>(update: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: V|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<V>;\n  clone(update: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: any|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string};\n  } = {}): HttpRequest<any> {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType;\n\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const body = (update.body !== undefined) ? update.body : this.body;\n\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const withCredentials =\n        (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n    const reportProgress =\n        (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params;\n\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers =\n          Object.keys(update.setHeaders)\n              .reduce((headers, name) => headers.set(name, update.setHeaders![name]), headers);\n    }\n\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams)\n                   .reduce((params, param) => params.set(param, update.setParams![param]), params);\n    }\n\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      reportProgress,\n      responseType,\n      withCredentials,\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from './headers';\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nexport enum HttpEventType {\n  /**\n   * The request was sent out over the wire.\n   */\n  Sent,\n\n  /**\n   * An upload progress event was received.\n   */\n  UploadProgress,\n\n  /**\n   * The response status code and headers were received.\n   */\n  ResponseHeader,\n\n  /**\n   * A download progress event was received.\n   */\n  DownloadProgress,\n\n  /**\n   * The full response including the body was received.\n   */\n  Response,\n\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  User,\n}\n\n/**\n * Base interface for progress events.\n *\n * @publicApi\n */\nexport interface HttpProgressEvent {\n  /**\n   * Progress event type is either upload or download.\n   */\n  type: HttpEventType.DownloadProgress|HttpEventType.UploadProgress;\n\n  /**\n   * Number of bytes uploaded or downloaded.\n   */\n  loaded: number;\n\n  /**\n   * Total number of bytes to upload or download. Depending on the request or\n   * response, this may not be computable and thus may not be present.\n   */\n  total?: number;\n}\n\n/**\n * A download progress event.\n *\n * @publicApi\n */\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.DownloadProgress;\n\n  /**\n   * The partial response body as downloaded so far.\n   *\n   * Only present if the responseType was `text`.\n   */\n  partialText?: string;\n}\n\n/**\n * An upload progress event.\n *\n * @publicApi\n */\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.UploadProgress;\n}\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * @publicApi\n */\nexport interface HttpSentEvent {\n  type: HttpEventType.Sent;\n}\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * @publicApi\n */\nexport interface HttpUserEvent<T> {\n  type: HttpEventType.User;\n}\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n */\nexport interface HttpJsonParseError {\n  error: Error;\n  text: string;\n}\n\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n *\n * @publicApi\n */\nexport type HttpEvent<T> =\n    HttpSentEvent|HttpHeaderResponse|HttpResponse<T>|HttpProgressEvent|HttpUserEvent<T>;\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nexport abstract class HttpResponseBase {\n  /**\n   * All response headers.\n   */\n  readonly headers: HttpHeaders;\n\n  /**\n   * Response status code.\n   */\n  readonly status: number;\n\n  /**\n   * Textual description of response status code, defaults to OK.\n   *\n   * Do not depend on this.\n   */\n  readonly statusText: string;\n\n  /**\n   * URL of the resource retrieved, or null if not available.\n   */\n  readonly url: string|null;\n\n  /**\n   * Whether the status code falls in the 2xx range.\n   */\n  readonly ok: boolean;\n\n  /**\n   * Type of the response, narrowed to either the full response or the header.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly type!: HttpEventType.Response|HttpEventType.ResponseHeader;\n\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(\n      init: {\n        headers?: HttpHeaders,\n        status?: number,\n        statusText?: string,\n        url?: string,\n      },\n      defaultStatus: number = 200, defaultStatusText: string = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nexport class HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(init: {\n    headers?: HttpHeaders,\n    status?: number,\n    statusText?: string,\n    url?: string,\n  } = {}) {\n    super(init);\n  }\n\n  readonly type: HttpEventType.ResponseHeader = HttpEventType.ResponseHeader;\n\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;} = {}):\n      HttpHeaderResponse {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nexport class HttpResponse<T> extends HttpResponseBase {\n  /**\n   * The response body, or `null` if one was not returned.\n   */\n  readonly body: T|null;\n\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(init: {\n    body?: T|null,\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  } = {}) {\n    super(init);\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  readonly type: HttpEventType.Response = HttpEventType.Response;\n\n  clone(): HttpResponse<T>;\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;}):\n      HttpResponse<T>;\n  clone<V>(update: {\n    body?: V|null,\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }): HttpResponse<V>;\n  clone(update: {\n    body?: any|null;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  } = {}): HttpResponse<any> {\n    return new HttpResponse<any>({\n      body: (update.body !== undefined) ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: (update.status !== undefined) ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nexport class HttpErrorResponse extends HttpResponseBase implements Error {\n  readonly name = 'HttpErrorResponse';\n  readonly message: string;\n  readonly error: any|null;\n\n  /**\n   * Errors are never okay, even when the status code is in the 2xx success range.\n   */\n  readonly ok = false;\n\n  constructor(init: {\n    error?: any;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${\n          init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {concatMap, filter, map} from 'rxjs/operators';\n\nimport {HttpHandler} from './backend';\nimport {HttpHeaders} from './headers';\nimport {HttpParams, HttpParamsOptions} from './params';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\n\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody<T>(\n    options: {\n      headers?: HttpHeaders|{[header: string]: string | string[]},\n      observe?: 'body'|'events'|'response',\n      params?: HttpParams|{[param: string]: string | string[]},\n      reportProgress?: boolean,\n      responseType?: 'arraybuffer'|'blob'|'json'|'text',\n      withCredentials?: boolean,\n    },\n    body: T|null): any {\n  return {\n    body,\n    headers: options.headers,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials,\n  };\n}\n\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpClient {\n  constructor(private handler: HttpHandler) {}\n\n  /**\n   * Sends an `HttpRequest` and returns a stream of `HttpEvent`s.\n   *\n   * @return An `Observable` of the response, with the response body as a stream of `HttpEvent`s.\n   */\n  request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the response in\n   * an `ArrayBuffer`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a request that interprets the body as a blob and returns\n   * the response as a blob.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an array of `HttpEvent`s for\n   * the request.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    params?: HttpParams|{[param: string]: string | string[]}, observe: 'events',\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a request that interprets the body as a `Blob` and returns\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns the full event\n   * stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the  request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    reportProgress?: boolean, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<any>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns the full event\n   * stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    reportProgress?: boolean, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request which interprets the body as an `ArrayBuffer`\n   * and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a request which interprets the body as a `Blob` and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text stream and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the HTTP response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    reportProgress?: boolean, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns\n   * the full `HttpResponse` with the response body in the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the full `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    reportProgress?: boolean, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<R>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns the full\n   * `HttpResponse` as a JSON object.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object\n   * with the response body of the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n  }): Observable<R>;\n\n  /**\n   * Constructs a request where response type and requested observable are not known statically.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the reuested response, wuth body of type `any`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    params?: HttpParams|{[param: string]: string | string[]},\n    observe?: 'body'|'events'|'response',\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  }): Observable<any>;\n\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n  request(first: string|HttpRequest<any>, url?: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    let req: HttpRequest<any>;\n    // First, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n\n      // Figure out the headers.\n      let headers: HttpHeaders|undefined = undefined;\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      }\n\n      // Sort out parameters.\n      let params: HttpParams|undefined = undefined;\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({fromObject: options.params} as HttpParamsOptions);\n        }\n      }\n\n      // Construct the request.\n      req = new HttpRequest(first, url!, (options.body !== undefined ? options.body : null), {\n        headers,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials,\n      });\n    }\n\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$: Observable<HttpEvent<any>> =\n        of(req).pipe(concatMap((req: HttpRequest<any>) => this.handler.handle(req)));\n\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    const res$: Observable<HttpResponse<any>> = <Observable<HttpResponse<any>>>events$.pipe(\n        filter((event: HttpEvent<any>) => event instanceof HttpResponse));\n\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new Error('Response is not an ArrayBuffer.');\n              }\n              return res.body;\n            }));\n          case 'blob':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new Error('Response is not a Blob.');\n              }\n              return res.body;\n            }));\n          case 'text':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new Error('Response is not a string.');\n              }\n              return res.body;\n            }));\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map((res: HttpResponse<any>) => res.body));\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response body as a `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string and returns\n   * a string.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the response body as a\n   * `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with response body of\n   * type `Object`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `DELETE`request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a response\n   * body in the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text stream and\n   *  returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `DELETE` request the interprets the body as a JSON object and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   *\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a JSON object\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a JSON object and\n   * returns the response body as a JSON object.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  delete(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a DELETE request that interprets the body as a JSON object and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with response body in the requested type.\n   */\n  delete<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `DELETE` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('DELETE', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns the\n   * response in an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob`\n   * and returns the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string\n   * and returns the response as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string and returns\n   * the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and returns the full event\n   * stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text stream and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and\n   * returns the response body as a JSON object.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response body as a JSON object.\n   */\n  get(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and returns\n   * the response body in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body in the requested type.\n   */\n  get<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `GET` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('GET', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer` and\n   * returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response, with the response body as a `Blob`.\n   */\n\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string and returns the response\n   * as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an  `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body of type\n   * string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object\n   * and returns the full HTTP event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object and\n   * returns the full event stream.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a blob.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a responmse body of the requested type.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object and\n   * returns the response body as a JSON object.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  head(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the given type.\n   */\n  head<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `HEAD` request to execute on the server. The `HEAD` method returns\n   * meta information about the resource without transferring the\n   * resource itself. See the individual overloads for\n   * details on the return type.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('HEAD', url, options as any);\n  }\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * @return An `Observable` of the response object, with response body as an object.\n   */\n  jsonp(url: string, callbackParam: string): Observable<Object>;\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * You must install a suitable interceptor, such as one provided by `HttpClientJsonpModule`.\n   * If no such interceptor is reached,\n   * then the `JSONP` request can be rejected by the configured backend.\n   *\n   * @return An `Observable` of the response object, with response body in the requested type.\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\n   * `JSONP` to be dispatched via the interceptor pipeline.\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n   * API endpoints that don't support newer,\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n   * application making the request.\n   * The endpoint API must support JSONP callback for JSONP requests to work.\n   * The resource API returns the JSON response wrapped in a callback function.\n   * You can pass the callback function name as one of the query parameters.\n   * Note that JSONP requests can only be used with `GET` requests.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T> {\n    return this.request<any>('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json',\n    });\n  }\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an\n   * `ArrayBuffer` and returns the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request with the response\n   * body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object and\n   * returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object and returns the\n   * response body as a JSON object.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  options(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object and returns the\n   * response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body of the given type.\n   */\n  options<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes the configured\n   * `OPTIONS` request to execute on the server. This method allows the client\n   * to determine the supported HTTP methods and other capabilites of an endpoint,\n   * without implying a resource action. See the individual overloads for\n   * details on the return type.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('OPTIONS', url, options as any);\n  }\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and returns\n   * the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the response\n   * as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and\n   *  returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the\n   * response body as `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a\n   * response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text stream and returns the\n   * full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object and\n   * returns the response body as a JSON object.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  patch(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PATCH` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PATCH', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and returns\n   * an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the\n   * response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob`\n   * and returns the response in an observable of the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body as `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a POST request that interprets the body as a JSON object and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a POST request that interprets the body as a JSON object and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a POST request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text stream and returns\n   * the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a JSON object\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a JSON object and returns the full\n   * `HttpResponse`.\n   *\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a\n   * JSON object and returns the response body as a JSON object.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  post(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a JSON object\n   * and returns an observable of the response.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `POST` request to execute on the server. The server responds with the location of\n   * the replaced resource. See the individual overloads for\n   * details on the return type.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('POST', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and returns the\n   * response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body\n   * of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object and returns the\n   * full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an\n   * `ArrayBuffer` and returns an observable of the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text stream and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object and returns the full HTTP\n   * response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body\n   * of type 'Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type and\n   * returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object\n   * and returns an observable of JSON object.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response as a JSON object.\n   */\n  put(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type\n   * and returns an observable of the requested type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the requested type.\n   */\n  put<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n   * with a new set of values.\n   * See the individual overloads for details on the return type.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PUT', url, addBody(options, body));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n *\n * @usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector .\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the\n * interceptors provided in the root module.\n *\n */\nexport interface HttpInterceptor {\n  /**\n   * Identifies and handles a given HTTP request.\n   * @param req The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nexport class HttpInterceptorHandler implements HttpHandler {\n  constructor(private next: HttpHandler, private interceptor: HttpInterceptor) {}\n\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return this.interceptor.intercept(req, this.next);\n  }\n}\n\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nexport const HTTP_INTERCEPTORS = new InjectionToken<HttpInterceptor[]>('HTTP_INTERCEPTORS');\n\n@Injectable()\nexport class NoopInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend} from './backend';\nimport {HttpHeaders} from './headers';\nimport {HttpRequest} from './request';\nimport {HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpJsonParseError, HttpResponse, HttpUploadProgressEvent} from './response';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr: any): string|null {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n */\nexport abstract class XhrFactory {\n  abstract build(): XMLHttpRequest;\n}\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\n@Injectable()\nexport class BrowserXhr implements XhrFactory {\n  constructor() {}\n  build(): any {\n    return <any>(new XMLHttpRequest());\n  }\n}\n\n/**\n * Tracks a response from the server that does not yet have a body.\n */\ninterface PartialResponse {\n  headers: HttpHeaders;\n  status: number;\n  statusText: string;\n  url: string;\n}\n\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpXhrBackend implements HttpBackend {\n  constructor(private xhrFactory: XhrFactory) {}\n\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\n    if (req.method === 'JSONP') {\n      throw new Error(\n          `Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n    }\n\n    // Everything happens on Observable subscription.\n    return new Observable((observer: Observer<HttpEvent<any>>) => {\n      // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n      const xhr = this.xhrFactory.build();\n      xhr.open(req.method, req.urlWithParams);\n      if (!!req.withCredentials) {\n        xhr.withCredentials = true;\n      }\n\n      // Add all the requested headers.\n      req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n\n      // Add an Accept header if one isn't present already.\n      if (!req.headers.has('Accept')) {\n        xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n      }\n\n      // Auto-detect the Content-Type header if one isn't present already.\n      if (!req.headers.has('Content-Type')) {\n        const detectedType = req.detectContentTypeHeader();\n        // Sometimes Content-Type detection fails.\n        if (detectedType !== null) {\n          xhr.setRequestHeader('Content-Type', detectedType);\n        }\n      }\n\n      // Set the responseType if one was requested.\n      if (req.responseType) {\n        const responseType = req.responseType.toLowerCase();\n\n        // JSON responses need to be processed as text. This is because if the server\n        // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n        // xhr.response will be null, and xhr.responseText cannot be accessed to\n        // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n        // is parsed by first requesting text and then applying JSON.parse.\n        xhr.responseType = ((responseType !== 'json') ? responseType : 'text') as any;\n      }\n\n      // Serialize the request body if one is present. If not, this will be set to null.\n      const reqBody = req.serializeBody();\n\n      // If progress events are enabled, response headers will be delivered\n      // in two events - the HttpHeaderResponse event and the full HttpResponse\n      // event. However, since response headers don't change in between these\n      // two events, it doesn't make sense to parse them twice. So headerResponse\n      // caches the data extracted from the response whenever it's first parsed,\n      // to ensure parsing isn't duplicated.\n      let headerResponse: HttpHeaderResponse|null = null;\n\n      // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n      // state, and memoizes it into headerResponse.\n      const partialFromXhr = (): HttpHeaderResponse => {\n        if (headerResponse !== null) {\n          return headerResponse;\n        }\n\n        // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).\n        const status: number = xhr.status === 1223 ? 204 : xhr.status;\n        const statusText = xhr.statusText || 'OK';\n\n        // Parse headers from XMLHttpRequest - this step is lazy.\n        const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n\n        // Read the response URL from the XMLHttpResponse instance and fall back on the\n        // request URL.\n        const url = getResponseUrl(xhr) || req.url;\n\n        // Construct the HttpHeaderResponse and memoize it.\n        headerResponse = new HttpHeaderResponse({headers, status, statusText, url});\n        return headerResponse;\n      };\n\n      // Next, a few closures are defined for the various events which XMLHttpRequest can\n      // emit. This allows them to be unregistered as event listeners later.\n\n      // First up is the load event, which represents a response being fully available.\n      const onLoad = () => {\n        // Read response state from the memoized partial data.\n        let {headers, status, statusText, url} = partialFromXhr();\n\n        // The body will be read out if present.\n        let body: any|null = null;\n\n        if (status !== 204) {\n          // Use XMLHttpRequest.response if set, responseText otherwise.\n          body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n        }\n\n        // Normalize another potential bug (this one comes from CORS).\n        if (status === 0) {\n          status = !!body ? 200 : 0;\n        }\n\n        // ok determines whether the response will be transmitted on the event or\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n        // but a successful status code can still result in an error if the user\n        // asked for JSON data and the body cannot be parsed as such.\n        let ok = status >= 200 && status < 300;\n\n        // Check whether the body needs to be parsed as JSON (in many cases the browser\n        // will have done that already).\n        if (req.responseType === 'json' && typeof body === 'string') {\n          // Save the original body, before attempting XSSI prefix stripping.\n          const originalBody = body;\n          body = body.replace(XSSI_PREFIX, '');\n          try {\n            // Attempt the parse. If it fails, a parse error should be delivered to the user.\n            body = body !== '' ? JSON.parse(body) : null;\n          } catch (error) {\n            // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n            // JSON response. Restore the original body (including any XSSI prefix) to deliver\n            // a better error response.\n            body = originalBody;\n\n            // If this was an error request to begin with, leave it as a string, it probably\n            // just isn't JSON. Otherwise, deliver the parsing error to the user.\n            if (ok) {\n              // Even though the response status was 2xx, this is still an error.\n              ok = false;\n              // The parse error contains the text of the body that failed to parse.\n              body = {error, text: body} as HttpJsonParseError;\n            }\n          }\n        }\n\n        if (ok) {\n          // A successful response is delivered on the event stream.\n          observer.next(new HttpResponse({\n            body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined,\n          }));\n          // The full body has been received and delivered, no further events\n          // are possible. This request is complete.\n          observer.complete();\n        } else {\n          // An unsuccessful request is delivered on the error channel.\n          observer.error(new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined,\n          }));\n        }\n      };\n\n      // The onError callback is called when something goes wrong at the network level.\n      // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n      // transmitted on the error channel.\n      const onError = (error: ProgressEvent) => {\n        const {url} = partialFromXhr();\n        const res = new HttpErrorResponse({\n          error,\n          status: xhr.status || 0,\n          statusText: xhr.statusText || 'Unknown Error',\n          url: url || undefined,\n        });\n        observer.error(res);\n      };\n\n      // The sentHeaders flag tracks whether the HttpResponseHeaders event\n      // has been sent on the stream. This is necessary to track if progress\n      // is enabled since the event will be sent on only the first download\n      // progerss event.\n      let sentHeaders = false;\n\n      // The download progress event handler, which is only registered if\n      // progress events are enabled.\n      const onDownProgress = (event: ProgressEvent) => {\n        // Send the HttpResponseHeaders event if it hasn't been sent already.\n        if (!sentHeaders) {\n          observer.next(partialFromXhr());\n          sentHeaders = true;\n        }\n\n        // Start building the download progress event to deliver on the response\n        // event stream.\n        let progressEvent: HttpDownloadProgressEvent = {\n          type: HttpEventType.DownloadProgress,\n          loaded: event.loaded,\n        };\n\n        // Set the total number of bytes in the event if it's available.\n        if (event.lengthComputable) {\n          progressEvent.total = event.total;\n        }\n\n        // If the request was for text content and a partial response is\n        // available on XMLHttpRequest, include it in the progress event\n        // to allow for streaming reads.\n        if (req.responseType === 'text' && !!xhr.responseText) {\n          progressEvent.partialText = xhr.responseText;\n        }\n\n        // Finally, fire the event.\n        observer.next(progressEvent);\n      };\n\n      // The upload progress event handler, which is only registered if\n      // progress events are enabled.\n      const onUpProgress = (event: ProgressEvent) => {\n        // Upload progress events are simpler. Begin building the progress\n        // event.\n        let progress: HttpUploadProgressEvent = {\n          type: HttpEventType.UploadProgress,\n          loaded: event.loaded,\n        };\n\n        // If the total number of bytes being uploaded is available, include\n        // it.\n        if (event.lengthComputable) {\n          progress.total = event.total;\n        }\n\n        // Send the event.\n        observer.next(progress);\n      };\n\n      // By default, register for load and error events.\n      xhr.addEventListener('load', onLoad);\n      xhr.addEventListener('error', onError);\n      xhr.addEventListener('timeout', onError);\n      xhr.addEventListener('abort', onError);\n\n      // Progress events are only enabled if requested.\n      if (req.reportProgress) {\n        // Download progress is always enabled if requested.\n        xhr.addEventListener('progress', onDownProgress);\n\n        // Upload progress depends on whether there is a body to upload.\n        if (reqBody !== null && xhr.upload) {\n          xhr.upload.addEventListener('progress', onUpProgress);\n        }\n      }\n\n      // Fire the request, and notify the event stream that it was fired.\n      xhr.send(reqBody!);\n      observer.next({type: HttpEventType.Sent});\n\n      // This is the return from the Observable function, which is the\n      // request cancellation handler.\n      return () => {\n        // On a cancellation, remove all registered event listeners.\n        xhr.removeEventListener('error', onError);\n        xhr.removeEventListener('abort', onError);\n        xhr.removeEventListener('load', onLoad);\n        xhr.removeEventListener('timeout', onError);\n        if (req.reportProgress) {\n          xhr.removeEventListener('progress', onDownProgress);\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.removeEventListener('progress', onUpProgress);\n          }\n        }\n\n        // Finally, abort the in-flight request.\n        if (xhr.readyState !== xhr.DONE) {\n          xhr.abort();\n        }\n      };\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Injector, ModuleWithProviders, NgModule} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpClient} from './client';\nimport {HTTP_INTERCEPTORS, HttpInterceptor, HttpInterceptorHandler, NoopInterceptor} from './interceptor';\nimport {JsonpCallbackContext, JsonpClientBackend, JsonpInterceptor} from './jsonp';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\nimport {BrowserXhr, HttpXhrBackend, XhrFactory} from './xhr';\nimport {HttpXsrfCookieExtractor, HttpXsrfInterceptor, HttpXsrfTokenExtractor, XSRF_COOKIE_NAME, XSRF_HEADER_NAME} from './xsrf';\n\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\n@Injectable()\nexport class HttpInterceptingHandler implements HttpHandler {\n  private chain: HttpHandler|null = null;\n\n  constructor(private backend: HttpBackend, private injector: Injector) {}\n\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    if (this.chain === null) {\n      const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n      this.chain = interceptors.reduceRight(\n          (next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n    }\n    return this.chain.handle(req);\n  }\n}\n\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nexport function interceptingHandler(\n    backend: HttpBackend, interceptors: HttpInterceptor[]|null = []): HttpHandler {\n  if (!interceptors) {\n    return backend;\n  }\n  return interceptors.reduceRight(\n      (next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nexport function jsonpCallbackContext(): Object {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    HttpXsrfInterceptor,\n    {provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n    {provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN'},\n    {provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN'},\n  ],\n})\nexport class HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   */\n  static disable(): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        {provide: HttpXsrfInterceptor, useClass: NoopInterceptor},\n      ],\n    };\n  }\n\n  /**\n   * Configure XSRF protection.\n   * @param options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   */\n  static withOptions(options: {\n    cookieName?: string,\n    headerName?: string,\n  } = {}): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        options.cookieName ? {provide: XSRF_COOKIE_NAME, useValue: options.cookieName} : [],\n        options.headerName ? {provide: XSRF_HEADER_NAME, useValue: options.headerName} : [],\n      ],\n    };\n  }\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n@NgModule({\n  /**\n   * Optional configuration for XSRF protection.\n   */\n  imports: [\n    HttpClientXsrfModule.withOptions({\n      cookieName: 'XSRF-TOKEN',\n      headerName: 'X-XSRF-TOKEN',\n    }),\n  ],\n  /**\n   * Configures the [dependency injector](guide/glossary#injector) where it is imported\n   * with supporting services for HTTP communications.\n   */\n  providers: [\n    HttpClient,\n    {provide: HttpHandler, useClass: HttpInterceptingHandler},\n    HttpXhrBackend,\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    BrowserXhr,\n    {provide: XhrFactory, useExisting: BrowserXhr},\n  ],\n})\nexport class HttpClientModule {\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    JsonpClientBackend,\n    {provide: JsonpCallbackContext, useFactory: jsonpCallbackContext},\n    {provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true},\n  ],\n})\nexport class HttpClientJsonpModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵparseCookieValue as parseCookieValue} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, PLATFORM_ID} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpInterceptor} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\nexport const XSRF_COOKIE_NAME = new InjectionToken<string>('XSRF_COOKIE_NAME');\nexport const XSRF_HEADER_NAME = new InjectionToken<string>('XSRF_HEADER_NAME');\n\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nexport abstract class HttpXsrfTokenExtractor {\n  /**\n   * Get the XSRF token to use with an outgoing request.\n   *\n   * Will be called for every request, so the token may change between requests.\n   */\n  abstract getToken(): string|null;\n}\n\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n@Injectable()\nexport class HttpXsrfCookieExtractor implements HttpXsrfTokenExtractor {\n  private lastCookieString: string = '';\n  private lastToken: string|null = null;\n\n  /**\n   * @internal for testing\n   */\n  parseCount: number = 0;\n\n  constructor(\n      @Inject(DOCUMENT) private doc: any, @Inject(PLATFORM_ID) private platform: string,\n      @Inject(XSRF_COOKIE_NAME) private cookieName: string) {}\n\n  getToken(): string|null {\n    if (this.platform === 'server') {\n      return null;\n    }\n    const cookieString = this.doc.cookie || '';\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = parseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n    return this.lastToken;\n  }\n}\n\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n@Injectable()\nexport class HttpXsrfInterceptor implements HttpInterceptor {\n  constructor(\n      private tokenService: HttpXsrfTokenExtractor,\n      @Inject(XSRF_HEADER_NAME) private headerName: string) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const lcUrl = req.url.toLowerCase();\n    // Skip both non-mutating requests and absolute URLs.\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\n    // anyway as the cookie set\n    // on our origin is not the same as the token expected by another origin.\n    if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n        lcUrl.startsWith('https://')) {\n      return next.handle(req);\n    }\n    const token = this.tokenService.getToken();\n\n    // Be careful not to overwrite an existing header of the same name.\n    if (token !== null && !req.headers.has(this.headerName)) {\n      req = req.clone({headers: req.headers.set(this.headerName, token)});\n    }\n    return next.handle(req);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  ErrorHandler,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n/** Options that can be used to configure how an icon or the icons in an icon set are presented. */\nexport interface IconOptions {\n  /** View box to set on the icon. */\n  viewBox?: string;\n\n  /** Whether or not to fetch the icon or icon set using HTTP credentials. */\n  withCredentials?: boolean;\n}\n\n/**\n * Function that will be invoked by the icon registry when trying to resolve the\n * URL from which to fetch an icon. The returned URL will be used to make a request for the icon.\n */\nexport type IconResolver = (name: string, namespace: string) =>\n    (SafeResourceUrl | SafeResourceUrlWithIconOptions | null);\n\n/** Object that specifies a URL from which to fetch an icon and the options to use for it. */\nexport interface SafeResourceUrlWithIconOptions {\n  url: SafeResourceUrl;\n  options: IconOptions;\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null;\n\n  constructor(\n    public url: SafeResourceUrl,\n    public svgText: string | null,\n    public options?: IconOptions) {}\n}\n\n/** Icon configuration whose content has already been loaded. */\ntype LoadedSvgIconConfig = SvgIconConfig & {svgText: string};\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /** Registered icon resolver functions. */\n  private _resolvers: IconResolver[] = [];\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any,\n    private readonly _errorHandler: ErrorHandler) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconInNamespace('', iconName, url, options);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl,\n                        options?: IconOptions): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n  }\n\n  /**\n   * Registers an icon resolver function with the registry. The function will be invoked with the\n   * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n   * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n   * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n   * will be invoked in the order in which they have been registered.\n   * @param resolver Resolver function to be registered.\n   */\n  addSvgIconResolver(resolver: IconResolver): this {\n    this._resolvers.push(resolver);\n    return this;\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml,\n                               options?: IconOptions): this {\n    const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    // TODO: add an ngDevMode check\n    if (!cleanLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    return this._addSvgIconConfig(namespace, iconName,\n        new SvgIconConfig('', cleanLiteral, options));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl, options?: IconOptions): this {\n    return this.addSvgIconSetInNamespace('', url, options);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml, options?: IconOptions): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal, options);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl, options?: IconOptions): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml,\n                                  options?: IconOptions): this {\n    const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!cleanLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', cleanLiteral, options));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    const key = iconKey(namespace, name);\n    let config = this._svgIconConfigs.get(key);\n\n    // Return (copy of) cached icon if possible.\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // Otherwise try to resolve the config from one of the resolver functions.\n    config = this._getIconConfigFromResolvers(namespace, name);\n\n    if (config) {\n      this._svgIconConfigs.set(key, config);\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n    this._resolvers = [];\n    this._svgIconConfigs.clear();\n    this._iconSetConfigs.clear();\n    this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgText) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(this._svgElementFromConfig(config as LoadedSvgIconConfig)));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<string | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgText)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse) => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n            this._errorHandler.handleError(new Error(errorMessage));\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      // TODO: add an ngDevMode check\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n\n      // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n      // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n      // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n      // some of the parsing.\n      if (config.svgText && config.svgText.indexOf(iconName) > -1) {\n        const svg = this._svgElementFromConfig(config as LoadedSvgIconConfig);\n        const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchIcon(config).pipe(\n      tap(svgText => config.svgText = svgText),\n      map(() => this._svgElementFromConfig(config as LoadedSvgIconConfig))\n    );\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the\n   * SvgIconConfig and attaches it to the config.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<string | null> {\n    if (config.svgText) {\n      return observableOf(null);\n    }\n\n    return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText));\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string,\n                                 options?: IconOptions): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement, options);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg, options);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    // TODO: add an ngDevMode check\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    const svg = this._svgElementFromString('<svg></svg>');\n    const attributes = element.attributes;\n\n    // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n    for (let i = 0; i < attributes.length; i++) {\n      const {name, value} = attributes[i];\n\n      if (name !== 'id') {\n        svg.setAttribute(name, value);\n      }\n    }\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement, options?: IconOptions): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n    if (options && options.viewBox) {\n      svg.setAttribute('viewBox', options.viewBox);\n    }\n\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given icon. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchIcon(iconConfig: SvgIconConfig): Observable<string> {\n    const {url: safeUrl, options} = iconConfig;\n    const withCredentials = options?.withCredentials ?? false;\n\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    // TODO: add an ngDevMode check\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    // TODO: add an ngDevMode check\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    const req = this._httpClient.get(url, {responseType: 'text', withCredentials}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n\n  /** Parses a config's text into an SVG element. */\n  private _svgElementFromConfig(config: LoadedSvgIconConfig): SVGElement {\n    if (!config.svgElement) {\n      const svg = this._svgElementFromString(config.svgText);\n      this._setSvgAttributes(svg, config.options);\n      config.svgElement = svg;\n    }\n\n    return config.svgElement;\n  }\n\n  /** Tries to create an icon config through the registered resolver functions. */\n  private _getIconConfigFromResolvers(namespace: string, name: string): SvgIconConfig | undefined {\n    for (let i = 0; i < this._resolvers.length; i++) {\n      const result = this._resolvers[i](name, namespace);\n\n      if (result) {\n        return isSafeUrlWithOptions(result) ?\n          new SvgIconConfig(result.url, null, result.options) :\n          new SvgIconConfig(result, null);\n      }\n    }\n\n    return undefined;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  errorHandler: ErrorHandler,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    ErrorHandler,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n\nfunction isSafeUrlWithOptions(value: any): value is SafeResourceUrlWithIconOptions {\n  return !!(value.url && value.options);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewChecked,\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ErrorHandler,\n  inject,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n    '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n    '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnInit, AfterViewChecked, CanColor,\n  OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input()\n  get svgIcon(): string { return this._svgIcon; }\n  set svgIcon(value: string) {\n    if (value !== this._svgIcon) {\n      if (value) {\n        this._updateSvgIcon(value);\n      } else if (this._svgIcon) {\n        this._clearSvgElement();\n      }\n      this._svgIcon = value;\n    }\n  }\n  private _svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    const newValue = this._cleanupFontValue(value);\n\n    if (newValue !== this._fontSet) {\n      this._fontSet = newValue;\n      this._updateFontIconClasses();\n    }\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    const newValue = this._cleanupFontValue(value);\n\n    if (newValue !== this._fontIcon) {\n      this._fontIcon = newValue;\n      this._updateFontIconClasses();\n    }\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  _svgName: string | null;\n  _svgNamespace: string | null;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  /** Subscription to the current in-progress SVG icon request. */\n  private _currentIconFetch = Subscription.EMPTY;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>, private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      @Inject(MAT_ICON_LOCATION) private _location: MatIconLocation,\n      private readonly _errorHandler: ErrorHandler) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    this._updateFontIconClasses();\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._currentIconFetch.unsubscribe();\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    const path = this._location.getPathname();\n    this._previousPath = path;\n    this._cacheChildrenWithExternalReferences(svg);\n    this._prependPathToReferences(path);\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n\n  /** Sets a new SVG icon with a particular name. */\n  private _updateSvgIcon(rawName: string|undefined) {\n    this._svgNamespace = null;\n    this._svgName = null;\n    this._currentIconFetch.unsubscribe();\n\n    if (rawName) {\n      const [namespace, iconName] = this._splitIconName(rawName);\n\n      if (namespace) {\n        this._svgNamespace = namespace;\n      }\n\n      if (iconName) {\n        this._svgName = iconName;\n      }\n\n      this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n          .pipe(take(1))\n          .subscribe(svg => this._setSvgElement(svg), (err: Error) => {\n            const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n            this._errorHandler.handleError(new Error(errorMessage));\n          });\n    }\n  }\n\n  static ngAcceptInputType_inline: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","let nextHandle = 1;\nconst RESOLVED = (() => Promise.resolve())();\nconst activeHandles: { [key: number]: any } = {};\n\n/**\n * Finds the handle in the list of active handles, and removes it.\n * Returns `true` if found, `false` otherwise. Used both to clear\n * Immediate scheduled tasks, and to identify if a task should be scheduled.\n */\nfunction findAndClearHandle(handle: number): boolean {\n  if (handle in activeHandles) {\n    delete activeHandles[handle];\n    return true;\n  }\n  return false;\n}\n\n/**\n * Helper functions to schedule and unschedule microtasks.\n */\nexport const Immediate = {\n  setImmediate(cb: () => void): number {\n    const handle = nextHandle++;\n    activeHandles[handle] = true;\n    RESOLVED.then(() => findAndClearHandle(handle) && cb());\n    return handle;\n  },\n\n  clearImmediate(handle: number): void {\n    findAndClearHandle(handle);\n  },\n};\n\n/**\n * Used for internal testing purposes only. Do not export from library.\n */\nexport const TestTools = {\n  pending() {\n    return Object.keys(activeHandles).length;\n  }\n};\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link asyncScheduler} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * ## Example\n * Compare async and asap scheduler<\n * ```ts\n * import { asapScheduler, asyncScheduler } from 'rxjs';\n *\n * asyncScheduler.schedule(() => console.log('async')); // scheduling 'async' first...\n * asapScheduler.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n * ```\n */\nexport const asapScheduler = new AsapScheduler(AsapAction);\n\n/**\n * @deprecated renamed. Use {@link asapScheduler}\n */\nexport const asap = asapScheduler;\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { innerSubscribe, SimpleInnerSubscriber, SimpleOuterSubscriber } from '../innerSubscribe';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * ![](takeUntil.png)\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * ## Example\n * Tick every second until the first click happens\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { takeUntil } from 'rxjs/operators';\n *\n * const source = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = source.pipe(takeUntil(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n    const notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));\n    if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n      takeUntilSubscriber.add(notifierSubscription);\n      return source.subscribe(takeUntilSubscriber);\n    }\n    return takeUntilSubscriber;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  seenValue = false;\n\n  constructor(destination: Subscriber<any>, ) {\n    super(destination);\n  }\n\n  notifyNext(): void {\n    this.seenValue = true;\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { PartialObserver } from './types';\nimport { Observable } from './Observable';\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\nimport { deprecate } from 'util';\n\n// TODO: When this enum is removed, replace it with a type alias. See #4556.\n/**\n * @deprecated NotificationKind is deprecated as const enums are not compatible with isolated modules. Use a string literal instead.\n */\nexport enum NotificationKind {\n  NEXT = 'N',\n  ERROR = 'E',\n  COMPLETE = 'C',\n}\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: 'N' | 'E' | 'C', public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return of(this.value);\n      case 'E':\n        return throwError(this.error);\n      case 'C':\n        return empty();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   * @nocollapse\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * ![](delay.png)\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * ## Examples\n * Delay each click by one second\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { delay } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const delayedClicks = clicks.pipe(delay(1000)); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * Delay all clicks until a future date happens\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { delay } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const date = new Date('March 15, 2050 12:00:00'); // in the future\n * const delayedClicks = clicks.pipe(delay(date)); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: SchedulerLike) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: SchedulerLike;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: SchedulerAction<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      this.unsubscribe();\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: SchedulerLike) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: SchedulerLike): void {\n    this.active = true;\n    const destination = this.destination as Subscription;\n    destination.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n    this.unsubscribe();\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  NgModule,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewContainerRef,\n  Inject,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {BasePortalOutlet, ComponentPortal, Portal, TemplatePortal, DomPortal} from './portal';\n\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\n@Directive({\n  selector: '[cdkPortal]',\n  exportAs: 'cdkPortal',\n})\nexport class CdkPortal extends TemplatePortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\n@Directive({\n  selector: '[cdk-portal], [portal]',\n  exportAs: 'cdkPortal',\n  providers: [{\n    provide: CdkPortal,\n    useExisting: TemplatePortalDirective\n  }]\n})\nexport class TemplatePortalDirective extends CdkPortal {}\n\n/**\n * Possible attached references to the CdkPortalOutlet.\n */\nexport type CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\n\n\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\n@Directive({\n  selector: '[cdkPortalOutlet]',\n  exportAs: 'cdkPortalOutlet',\n  inputs: ['portal: cdkPortalOutlet']\n})\nexport class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\n  private _document: Document;\n\n  /** Whether the portal component is initialized. */\n  private _isInitialized = false;\n\n  /** Reference to the currently-attached component/view ref. */\n  private _attachedRef: CdkPortalOutletAttachedRef;\n\n  constructor(\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _viewContainerRef: ViewContainerRef,\n\n      /**\n       * @deprecated `_document` parameter to be made required.\n       * @breaking-change 9.0.0\n       */\n      @Inject(DOCUMENT) _document?: any) {\n    super();\n    this._document = _document;\n  }\n\n  /** Portal associated with the Portal outlet. */\n  get portal(): Portal<any> | null {\n    return this._attachedPortal;\n  }\n\n  set portal(portal: Portal<any> | null) {\n    // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n    // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n    // and attach a portal programmatically in the parent component. When Angular does the first CD\n    // round, it will fire the setter with empty string, causing the user's content to be cleared.\n    if (this.hasAttached() && !portal && !this._isInitialized) {\n      return;\n    }\n\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._attachedPortal = portal;\n  }\n\n  /** Emits when a portal is attached to the outlet. */\n  @Output() attached: EventEmitter<CdkPortalOutletAttachedRef> =\n      new EventEmitter<CdkPortalOutletAttachedRef>();\n\n  /** Component or view reference that is attached to the portal. */\n  get attachedRef(): CdkPortalOutletAttachedRef {\n    return this._attachedRef;\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    super.dispose();\n    this._attachedPortal = null;\n    this._attachedRef = null;\n  }\n\n  /**\n   * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n   *\n   * @param portal Portal to be attached to the portal outlet.\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalOutlet.\n    const viewContainerRef = portal.viewContainerRef != null ?\n        portal.viewContainerRef :\n        this._viewContainerRef;\n\n    const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n    const componentFactory = resolver.resolveComponentFactory(portal.component);\n    const ref = viewContainerRef.createComponent(\n        componentFactory, viewContainerRef.length,\n        portal.injector || viewContainerRef.injector);\n\n    // If we're using a view container that's different from the injected one (e.g. when the portal\n    // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n    // inside of the alternate view container.\n    if (viewContainerRef !== this._viewContainerRef) {\n      this._getRootNode().appendChild((ref.hostView as EmbeddedViewRef<any>).rootNodes[0]);\n    }\n\n    super.setDisposeFn(() => ref.destroy());\n    this._attachedPortal = portal;\n    this._attachedRef = ref;\n    this.attached.emit(ref);\n\n    return ref;\n  }\n\n  /**\n   * Attach the given TemplatePortal to this PortalHost as an embedded View.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    portal.setAttachedHost(this);\n    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._attachedPortal = portal;\n    this._attachedRef = viewRef;\n    this.attached.emit(viewRef);\n\n    return viewRef;\n  }\n\n  /**\n   * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  attachDomPortal = (portal: DomPortal) => {\n    // @breaking-change 9.0.0 Remove check and error once the\n    // `_document` constructor parameter is required.\n    if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Cannot attach DOM portal without _document constructor parameter');\n    }\n\n    const element = portal.element;\n    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('DOM portal content must be attached to a parent node.');\n    }\n\n    // Anchor used to save the element's previous position so\n    // that we can restore it when the portal is detached.\n    const anchorNode = this._document.createComment('dom-portal');\n\n    portal.setAttachedHost(this);\n    element.parentNode!.insertBefore(anchorNode, element);\n    this._getRootNode().appendChild(element);\n\n    super.setDisposeFn(() => {\n      if (anchorNode.parentNode) {\n        anchorNode.parentNode!.replaceChild(element, anchorNode);\n      }\n    });\n  }\n\n  /** Gets the root node of the portal outlet. */\n  private _getRootNode(): HTMLElement {\n    const nativeElement: Node = this._viewContainerRef.element.nativeElement;\n\n    // The directive could be set on a template which will result in a comment\n    // node being the root. Use the comment's parent node if that is the case.\n    return (nativeElement.nodeType === nativeElement.ELEMENT_NODE ?\n           nativeElement : nativeElement.parentNode!) as HTMLElement;\n  }\n\n  static ngAcceptInputType_portal: Portal<any> | null | undefined | '';\n}\n\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\n@Directive({\n  selector: '[cdkPortalHost], [portalHost]',\n  exportAs: 'cdkPortalHost',\n  inputs: ['portal: cdkPortalHost'],\n  providers: [{\n    provide: CdkPortalOutlet,\n    useExisting: PortalHostDirective\n  }]\n})\nexport class PortalHostDirective extends CdkPortalOutlet {}\n\n\n@NgModule({\n  exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n  declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n})\nexport class PortalModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n    TemplateRef,\n    ViewContainerRef,\n    ElementRef,\n    ComponentRef,\n    EmbeddedViewRef,\n    Injector,\n    ComponentFactoryResolver,\n} from '@angular/core';\nimport {\n    throwNullPortalOutletError,\n    throwPortalAlreadyAttachedError,\n    throwNoPortalAttachedError,\n    throwNullPortalError,\n    throwPortalOutletAlreadyDisposedError,\n    throwUnknownPortalTypeError\n} from './portal-errors';\n\n/** Interface that can be used to generically type a class. */\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nexport abstract class Portal<T> {\n  private _attachedHost: PortalOutlet | null;\n\n  /** Attach this portal to a host. */\n  attach(host: PortalOutlet): T {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (host == null) {\n        throwNullPortalOutletError();\n      }\n\n      if (host.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n    }\n\n    this._attachedHost = host;\n    return <T> host.attach(this);\n  }\n\n  /** Detach this portal from its host */\n  detach(): void {\n    let host = this._attachedHost;\n\n    if (host != null) {\n      this._attachedHost = null;\n      host.detach();\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throwNoPortalAttachedError();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n   * the PortalOutlet when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host: PortalOutlet | null) {\n    this._attachedHost = host;\n  }\n}\n\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalOutlet.\n   * The origin is necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef?: ViewContainerRef | null;\n\n  /** [Optional] Injector used for the instantiation of the component. */\n  injector?: Injector | null;\n\n  /**\n   * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n   * Defaults to using the resolver from the outlet that the portal is attached to.\n   */\n  componentFactoryResolver?: ComponentFactoryResolver | null;\n\n  constructor(\n      component: ComponentType<T>,\n      viewContainerRef?: ViewContainerRef | null,\n      injector?: Injector | null,\n      componentFactoryResolver?: ComponentFactoryResolver | null) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n    this.componentFactoryResolver = componentFactoryResolver;\n  }\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal<C = any> extends Portal<EmbeddedViewRef<C>> {\n  /** The embedded template that will be used to instantiate an embedded View in the host. */\n  templateRef: TemplateRef<C>;\n\n  /** Reference to the ViewContainer into which the template will be stamped out. */\n  viewContainerRef: ViewContainerRef;\n\n  /** Contextual data to be passed in to the embedded view. */\n  context: C | undefined;\n\n  constructor(template: TemplateRef<C>, viewContainerRef: ViewContainerRef, context?: C) {\n    super();\n    this.templateRef = template;\n    this.viewContainerRef = viewContainerRef;\n    this.context = context;\n  }\n\n  get origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n\n  /**\n   * Attach the portal to the provided `PortalOutlet`.\n   * When a context is provided it will override the `context` property of the `TemplatePortal`\n   * instance.\n   */\n  attach(host: PortalOutlet, context: C | undefined = this.context): EmbeddedViewRef<C> {\n    this.context = context;\n    return super.attach(host);\n  }\n\n  detach(): void {\n    this.context = undefined;\n    return super.detach();\n  }\n}\n\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nexport class DomPortal<T = HTMLElement> extends Portal<T> {\n  /** DOM node hosting the portal's content. */\n  readonly element: T;\n\n  constructor(element: T | ElementRef<T>) {\n    super();\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n}\n\n\n/** A `PortalOutlet` is an space that can contain a single `Portal`. */\nexport interface PortalOutlet {\n  /** Attaches a portal to this outlet. */\n  attach(portal: Portal<any>): any;\n\n  /** Detaches the currently attached portal from this outlet. */\n  detach(): any;\n\n  /** Performs cleanup before the outlet is destroyed. */\n  dispose(): void;\n\n  /** Whether there is currently a portal attached to this outlet. */\n  hasAttached(): boolean;\n}\n\n/**\n * @deprecated Use `PortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport type PortalHost = PortalOutlet;\n\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nexport abstract class BasePortalOutlet implements PortalOutlet {\n  /** The portal currently attached to the host. */\n  protected _attachedPortal: Portal<any> | null;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn: (() => void) | null;\n\n  /** Whether this host has already been permanently disposed. */\n  private _isDisposed: boolean = false;\n\n  /** Whether this host has an attached portal. */\n  hasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /** Attaches a portal. */\n  attach(portal: Portal<any>): any {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!portal) {\n        throwNullPortalError();\n      }\n\n      if (this.hasAttached()) {\n        throwPortalAlreadyAttachedError();\n      }\n\n      if (this._isDisposed) {\n        throwPortalOutletAlreadyDisposedError();\n      }\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n      // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n    } else if (this.attachDomPortal && portal instanceof DomPortal) {\n      this._attachedPortal = portal;\n      return this.attachDomPortal(portal);\n    }\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throwUnknownPortalTypeError();\n    }\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n\n  abstract attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n\n  // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n  readonly attachDomPortal: null | ((portal: DomPortal) => any) = null;\n\n  /** Detaches a previously attached portal. */\n  detach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n\n  /** Permanently dispose of this portal host. */\n  dispose(): void {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n\n  /** @docs-private */\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n\n  private _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport abstract class BasePortalHost extends BasePortalOutlet {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  ApplicationRef,\n  Injector,\n} from '@angular/core';\nimport {BasePortalOutlet, ComponentPortal, TemplatePortal, DomPortal} from './portal';\n\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nexport class DomPortalOutlet extends BasePortalOutlet {\n  private _document: Document;\n\n  constructor(\n      /** Element into which the content is projected. */\n      public outletElement: Element,\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _appRef: ApplicationRef,\n      private _defaultInjector: Injector,\n\n      /**\n       * @deprecated `_document` Parameter to be made required.\n       * @breaking-change 10.0.0\n       */\n      _document?: any) {\n    super();\n    this._document = _document;\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   * @returns Reference to the created component.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n    const componentFactory = resolver.resolveComponentFactory(portal.component);\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(\n          componentFactory,\n          portal.viewContainerRef.length,\n          portal.injector || portal.viewContainerRef.injector);\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n      this._appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        this._appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n\n    return componentRef;\n  }\n\n  /**\n   * Attaches a template portal to the DOM as an embedded view.\n   * @param portal Portal to be attached.\n   * @returns Reference to the created embedded view.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    let viewContainer = portal.viewContainerRef;\n    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalOutlet the view can be added everywhere in the DOM\n    // (e.g Overlay Container) To move the view to the specified host element. We just\n    // re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n\n    // Note that we want to detect changes after the nodes have been moved so that\n    // any directives inside the portal that are looking at the DOM inside a lifecycle\n    // hook won't be invoked too early.\n    viewRef.detectChanges();\n\n    this.setDisposeFn((() => {\n      let index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    }));\n\n    // TODO(jelbourn): Return locals from view.\n    return viewRef;\n  }\n\n  /**\n   * Attaches a DOM portal by transferring its content into the outlet.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  attachDomPortal = (portal: DomPortal) => {\n    // @breaking-change 10.0.0 Remove check and error once the\n    // `_document` constructor parameter is required.\n    if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Cannot attach DOM portal without _document constructor parameter');\n    }\n\n    const element = portal.element;\n    if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('DOM portal content must be attached to a parent node.');\n    }\n\n    // Anchor used to save the element's previous position so\n    // that we can restore it when the portal is detached.\n    const anchorNode = this._document.createComment('dom-portal');\n\n    element.parentNode!.insertBefore(anchorNode, element);\n    this.outletElement.appendChild(element);\n\n    super.setDisposeFn(() => {\n      // We can't use `replaceWith` here because IE doesn't support it.\n      if (anchorNode.parentNode) {\n        anchorNode.parentNode.replaceChild(element, anchorNode);\n      }\n    });\n  }\n\n  /**\n   * Clears out a portal from the DOM.\n   */\n  dispose(): void {\n    super.dispose();\n    if (this.outletElement.parentNode != null) {\n      this.outletElement.parentNode.removeChild(this.outletElement);\n    }\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nexport class DomPortalHost extends DomPortalOutlet {}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { Subscriber } from '../Subscriber';\nimport { map } from '../operators/map';\n\nconst toString: Function = (() => Object.prototype.toString)();\n\nexport interface NodeStyleEventEmitter {\n  addListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n  removeListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n}\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\n// For APIs that implement `addListener` and `removeListener` methods that may\n// not use the same arguments or return EventEmitter values\n// such as React Native\nexport interface NodeCompatibleEventEmitter {\n  addListener: (eventName: string, handler: NodeEventHandler) => void | {};\n  removeListener: (eventName: string, handler: NodeEventHandler) => void | {};\n}\n\nexport interface JQueryStyleEventEmitter {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n}\n\nexport interface HasEventTargetAddRemove<E> {\n  addEventListener(type: string, listener: ((evt: E) => void) | null, options?: boolean | AddEventListenerOptions): void;\n  removeEventListener(type: string, listener?: ((evt: E) => void) | null, options?: EventListenerOptions | boolean): void;\n}\n\nexport type EventTargetLike<T> = HasEventTargetAddRemove<T> | NodeStyleEventEmitter | NodeCompatibleEventEmitter | JQueryStyleEventEmitter;\n\nexport type FromEventTarget<T> = EventTargetLike<T> | ArrayLike<EventTargetLike<T>>;\n\nexport interface EventListenerOptions {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n}\n\nexport interface AddEventListenerOptions extends EventListenerOptions {\n  once?: boolean;\n  passive?: boolean;\n}\n\n/* tslint:disable:max-line-length */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, resultSelector: (...args: any[]) => T): Observable<T>;\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions, resultSelector: (...args: any[]) => T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an Observable that emits events of a specific type coming from the\n * given event target.\n *\n * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n * EventEmitter events or others.</span>\n *\n * ![](fromEvent.png)\n *\n * `fromEvent` accepts as a first argument event target, which is an object with methods\n * for registering event handler functions. As a second argument it takes string that indicates\n * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n * which are described in detail below. If your event target does not match any of the ones listed,\n * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n * handler functions have different names, but they all accept a string describing event type\n * and function itself, which will be called whenever said event happens.\n *\n * Every time resulting Observable is subscribed, event handler function will be registered\n * to event target on given event type. When that event fires, value\n * passed as a first argument to registered function will be emitted by output Observable.\n * When Observable is unsubscribed, function will be unregistered from event target.\n *\n * Note that if event target calls registered function with more than one argument, second\n * and following arguments will not appear in resulting stream. In order to get access to them,\n * you can pass to `fromEvent` optional project function, which will be called with all arguments\n * passed to event handler. Output Observable will then emit value returned by project function,\n * instead of the usual value.\n *\n * Remember that event targets listed below are checked via duck typing. It means that\n * no matter what kind of object you have and no matter what environment you work in,\n * you can safely use `fromEvent` on that object if it exposes described methods (provided\n * of course they behave as was described above). So for example if Node.js library exposes\n * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n * a good choice.\n *\n * If the API you use is more callback then event handler oriented (subscribed\n * callback function fires only once and thus there is no need to manually\n * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n * instead.\n *\n * `fromEvent` supports following types of event targets:\n *\n * **DOM EventTarget**\n *\n * This is an object with `addEventListener` and `removeEventListener` methods.\n *\n * In the browser, `addEventListener` accepts - apart from event type string and event\n * handler function arguments - optional third parameter, which is either an object or boolean,\n * both used for additional configuration how and when passed function will be called. When\n * `fromEvent` is used with event target of that type, you can provide this values\n * as third parameter as well.\n *\n * **Node.js EventEmitter**\n *\n * An object with `addListener` and `removeListener` methods.\n *\n * **JQuery-style event target**\n *\n * An object with `on` and `off` methods\n *\n * **DOM NodeList**\n *\n * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n *\n * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n * it contains and install event handler function in every of them. When returned Observable\n * is unsubscribed, function will be removed from all Nodes.\n *\n * **DOM HtmlCollection**\n *\n * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n * installed and removed in each of elements.\n *\n *\n * ## Examples\n * ### Emits clicks happening on the DOM document\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * clicks.subscribe(x => console.log(x));\n *\n * // Results in:\n * // MouseEvent object logged to console every time a click\n * // occurs on the document.\n * ```\n *\n * ### Use addEventListener with capture option\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicksInDocument = fromEvent(document, 'click', true); // note optional configuration parameter\n *                                                              // which will be passed to addEventListener\n * const clicksInDiv = fromEvent(someDivInDocument, 'click');\n *\n * clicksInDocument.subscribe(() => console.log('document'));\n * clicksInDiv.subscribe(() => console.log('div'));\n *\n * // By default events bubble UP in DOM tree, so normally\n * // when we would click on div in document\n * // \"div\" would be logged first and then \"document\".\n * // Since we specified optional `capture` option, document\n * // will catch event when it goes DOWN DOM tree, so console\n * // will log \"document\" and then \"div\".\n * ```\n *\n * @see {@link bindCallback}\n * @see {@link bindNodeCallback}\n * @see {@link fromEventPattern}\n *\n * @param {FromEventTarget<T>} target The DOM EventTarget, Node.js\n * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n * @param {string} eventName The event name of interest, being emitted by the\n * `target`.\n * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n * @return {Observable<T>}\n * @name fromEvent\n */\nexport function fromEvent<T>(\n  target: FromEventTarget<T>,\n  eventName: string,\n  options?: EventListenerOptions | ((...args: any[]) => T),\n  resultSelector?: ((...args: any[]) => T)\n): Observable<T> {\n\n  if (isFunction(options)) {\n    // DEPRECATED PATH\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return fromEvent<T>(target, eventName, <EventListenerOptions | undefined>options).pipe(\n      map(args => isArray(args) ? resultSelector(...args) : resultSelector(args))\n    );\n  }\n\n  return new Observable<T>(subscriber => {\n    function handler(e: T) {\n      if (arguments.length > 1) {\n        subscriber.next(Array.prototype.slice.call(arguments));\n      } else {\n        subscriber.next(e);\n      }\n    }\n    setupSubscription(target, eventName, handler, subscriber, options as EventListenerOptions);\n  });\n}\n\nfunction setupSubscription<T>(sourceObj: FromEventTarget<T>, eventName: string,\n                              handler: (...args: any[]) => void, subscriber: Subscriber<T>,\n                              options?: EventListenerOptions) {\n  let unsubscribe: () => void;\n  if (isEventTarget(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.addEventListener(eventName, handler, options);\n    unsubscribe = () => source.removeEventListener(eventName, handler, options);\n  } else if (isJQueryStyleEventEmitter(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.on(eventName, handler);\n    unsubscribe = () => source.off(eventName, handler);\n  } else if (isNodeStyleEventEmitter(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.addListener(eventName, handler as NodeEventHandler);\n    unsubscribe = () => source.removeListener(eventName, handler as NodeEventHandler);\n  } else if (sourceObj && (sourceObj as any).length) {\n    for (let i = 0, len = (sourceObj as any).length; i < len; i++) {\n      setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n    }\n  } else {\n    throw new TypeError('Invalid event target');\n  }\n\n  subscriber.add(unsubscribe);\n}\n\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is HasEventTargetAddRemove<any> {\n  return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubscribableOrPromise, TeardownLogic } from '../types';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](audit.png)\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { audit } from 'rxjs/operators'\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(audit(ev => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n\n  private value?: T;\n  private hasValue: boolean = false;\n  private throttled?: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      let duration;\n      try {\n        const { durationSelector } = this;\n        duration = durationSelector(value);\n      } catch (err) {\n        return this.destination.error!(err);\n      }\n      const innerSubscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\n      if (!innerSubscription || innerSubscription.closed) {\n        this.clearThrottle();\n      } else {\n        this.add(this.throttled = innerSubscription);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = undefined;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = undefined;\n      this.hasValue = false;\n      this.destination.next!(value);\n    }\n  }\n\n  notifyNext(): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { isArray } from './isArray';\n\nexport function isNumeric(val: any): val is number | string {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n","import { Observable } from '../Observable';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that starts emitting after an `dueTime` and\n * emits ever increasing numbers after each `period` of time thereafter.\n *\n * <span class=\"informal\">Its like {@link index/interval}, but you can specify when\n * should the emissions start.</span>\n *\n * ![](timer.png)\n *\n * `timer` returns an Observable that emits an infinite sequence of ascending\n * integers, with a constant interval of time, `period` of your choosing\n * between those emissions. The first emission happens after the specified\n * `dueTime`. The initial delay may be a `Date`. By default, this\n * operator uses the {@link asyncScheduler} {@link SchedulerLike} to provide a notion of time, but you\n * may pass any {@link SchedulerLike} to it. If `period` is not specified, the output\n * Observable emits only one value, `0`. Otherwise, it emits an infinite\n * sequence.\n *\n * ## Examples\n * ### Emits ascending numbers, one every second (1000ms), starting after 3 seconds\n * ```ts\n * import { timer } from 'rxjs';\n *\n * const numbers = timer(3000, 1000);\n * numbers.subscribe(x => console.log(x));\n * ```\n *\n * ### Emits one number after five seconds\n * ```ts\n * import { timer } from 'rxjs';\n *\n * const numbers = timer(5000);\n * numbers.subscribe(x => console.log(x));\n * ```\n * @see {@link index/interval}\n * @see {@link delay}\n *\n * @param {number|Date} [dueTime] The initial delay time specified as a Date object or as an integer denoting\n * milliseconds to wait before emitting the first value of 0`.\n * @param {number|SchedulerLike} [periodOrScheduler] The period of time between emissions of the\n * subsequent numbers.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a `0` after the\n * `dueTime` and ever increasing numbers after each `period` of time\n * thereafter.\n * @static true\n * @name timer\n * @owner Observable\n */\nexport function timer(dueTime: number | Date = 0,\n                      periodOrScheduler?: number | SchedulerLike,\n                      scheduler?: SchedulerLike): Observable<number> {\n  let period = -1;\n  if (isNumeric(periodOrScheduler)) {\n    period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n  } else if (isScheduler(periodOrScheduler)) {\n    scheduler = periodOrScheduler as any;\n  }\n\n  if (!isScheduler(scheduler)) {\n    scheduler = async;\n  }\n\n  return new Observable(subscriber => {\n    const due = isNumeric(dueTime)\n      ? (dueTime as number)\n      : (+dueTime - scheduler.now());\n\n    return scheduler.schedule(dispatch, due, {\n      index: 0, period, subscriber\n    });\n  });\n}\n\ninterface TimerState {\n  index: number;\n  period: number;\n  subscriber: Subscriber<number>;\n}\n\nfunction dispatch(this: SchedulerAction<TimerState>, state: TimerState) {\n  const { index, period, subscriber } = state;\n  subscriber.next(index);\n\n  if (subscriber.closed) {\n    return;\n  } else if (period === -1) {\n    return subscriber.complete();\n  }\n\n  state.index = index + 1;\n  this.schedule(state, period);\n}\n","import { async } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source value, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * ![](auditTime.png)\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link SchedulerLike} for managing timers.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { auditTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(auditTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {CdkFixedSizeVirtualScroll} from './fixed-size-virtual-scroll';\nimport {CdkScrollable} from './scrollable';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n@NgModule({\n  exports: [CdkScrollable],\n  declarations: [CdkScrollable]\n})\nexport class CdkScrollableModule {}\n\n/**\n * @docs-primary-export\n */\n@NgModule({\n  imports: [\n    BidiModule,\n    PlatformModule,\n    CdkScrollableModule\n  ],\n  exports: [\n    BidiModule,\n    CdkScrollableModule,\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n  ],\n  declarations: [\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n  ],\n})\nexport class ScrollingModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Injectable, NgZone, OnDestroy, Optional, Inject} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {auditTime} from 'rxjs/operators';\nimport {DOCUMENT} from '@angular/common';\n\n/** Time in ms to throttle the resize events by default. */\nexport const DEFAULT_RESIZE_TIME = 20;\n\n/** Object that holds the scroll position of the viewport in each direction. */\nexport interface ViewportScrollPosition {\n  top: number;\n  left: number;\n}\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class ViewportRuler implements OnDestroy {\n  /** Cached viewport dimensions. */\n  private _viewportSize: {width: number; height: number};\n\n  /** Stream of viewport change events. */\n  private _change = new Subject<Event>();\n\n  /** Event listener that will be used to handle the viewport change events. */\n  private _changeListener = (event: Event) => {\n    this._change.next(event);\n  }\n\n  /** Used to reference correct document/window */\n  protected _document: Document;\n\n  constructor(private _platform: Platform,\n              ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    this._document = document;\n\n    ngZone.runOutsideAngular(() => {\n      if (_platform.isBrowser) {\n        const window = this._getWindow();\n\n        // Note that bind the events ourselves, rather than going through something like RxJS's\n        // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n        window.addEventListener('resize', this._changeListener);\n        window.addEventListener('orientationchange', this._changeListener);\n      }\n\n      // We don't need to keep track of the subscription,\n      // because we complete the `change` stream on destroy.\n      this.change().subscribe(() => this._updateViewportSize());\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._platform.isBrowser) {\n      const window = this._getWindow();\n      window.removeEventListener('resize', this._changeListener);\n      window.removeEventListener('orientationchange', this._changeListener);\n    }\n\n    this._change.complete();\n  }\n\n  /** Returns the viewport's width and height. */\n  getViewportSize(): Readonly<{width: number, height: number}> {\n    if (!this._viewportSize) {\n      this._updateViewportSize();\n    }\n\n    const output = {width: this._viewportSize.width, height: this._viewportSize.height};\n\n    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n    if (!this._platform.isBrowser) {\n      this._viewportSize = null!;\n    }\n\n    return output;\n  }\n\n  /** Gets a ClientRect for the viewport's bounds. */\n  getViewportRect(): ClientRect {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const scrollPosition = this.getViewportScrollPosition();\n    const {width, height} = this.getViewportSize();\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n\n  /** Gets the (top, left) scroll position of the viewport. */\n  getViewportScrollPosition(): ViewportScrollPosition {\n    // While we can get a reference to the fake document\n    // during SSR, it doesn't have getBoundingClientRect.\n    if (!this._platform.isBrowser) {\n      return {top: 0, left: 0};\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const document = this._document;\n    const window = this._getWindow();\n    const documentElement = document.documentElement!;\n    const documentRect = documentElement.getBoundingClientRect();\n\n    const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n                 documentElement.scrollTop || 0;\n\n    const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n                  documentElement.scrollLeft || 0;\n\n    return {top, left};\n  }\n\n  /**\n   * Returns a stream that emits whenever the size of the viewport changes.\n   * @param throttleTime Time in milliseconds to throttle the stream.\n   */\n  change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    return this._document.defaultView || window;\n  }\n\n  /** Updates the cached viewport size. */\n  private _updateViewportSize() {\n    const window = this._getWindow();\n    this._viewportSize = this._platform.isBrowser ?\n        {width: window.innerWidth, height: window.innerHeight} :\n        {width: 0, height: 0};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ElementRef, Injectable, NgZone, OnDestroy, Optional, Inject} from '@angular/core';\nimport {fromEvent, of as observableOf, Subject, Subscription, Observable, Observer} from 'rxjs';\nimport {auditTime, filter} from 'rxjs/operators';\nimport {CdkScrollable} from './scrollable';\nimport {DOCUMENT} from '@angular/common';\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const DEFAULT_SCROLL_TIME = 20;\n\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollDispatcher implements OnDestroy {\n  /** Used to reference correct document/window */\n  protected _document: Document;\n\n  constructor(private _ngZone: NgZone,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n  private _scrolled = new Subject<CdkScrollable|void>();\n\n  /** Keeps track of the global `scroll` and `resize` subscriptions. */\n  _globalSubscription: Subscription | null = null;\n\n  /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n  private _scrolledCount = 0;\n\n  /**\n   * Map of all the scrollable references that are registered with the service and their\n   * scroll event subscriptions.\n   */\n  scrollContainers: Map<CdkScrollable, Subscription> = new Map();\n\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param scrollable Scrollable instance to be registered.\n   */\n  register(scrollable: CdkScrollable): void {\n    if (!this.scrollContainers.has(scrollable)) {\n      this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n          .subscribe(() => this._scrolled.next(scrollable)));\n    }\n  }\n\n  /**\n   * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n   * @param scrollable Scrollable instance to be deregistered.\n   */\n  deregister(scrollable: CdkScrollable): void {\n    const scrollableReference = this.scrollContainers.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollContainers.delete(scrollable);\n    }\n  }\n\n  /**\n   * Returns an observable that emits an event whenever any of the registered Scrollable\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n   * to override the default \"throttle\" time.\n   *\n   * **Note:** in order to avoid hitting change detection for every scroll event,\n   * all of the events emitted from this stream will be run outside the Angular zone.\n   * If you need to update any data bindings as a result of a scroll event, you have\n   * to run the callback using `NgZone.run`.\n   */\n  scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable|void> {\n    if (!this._platform.isBrowser) {\n      return observableOf<void>();\n    }\n\n    return new Observable((observer: Observer<CdkScrollable|void>) => {\n      if (!this._globalSubscription) {\n        this._addGlobalListener();\n      }\n\n      // In the case of a 0ms delay, use an observable without auditTime\n      // since it does add a perceptible delay in processing overhead.\n      const subscription = auditTimeInMs > 0 ?\n        this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n        this._scrolled.subscribe(observer);\n\n      this._scrolledCount++;\n\n      return () => {\n        subscription.unsubscribe();\n        this._scrolledCount--;\n\n        if (!this._scrolledCount) {\n          this._removeGlobalListener();\n        }\n      };\n    });\n  }\n\n  ngOnDestroy() {\n    this._removeGlobalListener();\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\n    this._scrolled.complete();\n  }\n\n  /**\n   * Returns an observable that emits whenever any of the\n   * scrollable ancestors of an element are scrolled.\n   * @param elementOrElementRef Element whose ancestors to listen for.\n   * @param auditTimeInMs Time to throttle the scroll events.\n   */\n  ancestorScrolled(\n      elementOrElementRef: ElementRef|HTMLElement,\n      auditTimeInMs?: number): Observable<CdkScrollable|void> {\n    const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n\n    return this.scrolled(auditTimeInMs).pipe(filter(target => {\n      return !target || ancestors.indexOf(target) > -1;\n    }));\n  }\n\n  /** Returns all registered Scrollables that contain the provided element. */\n  getAncestorScrollContainers(elementOrElementRef: ElementRef|HTMLElement): CdkScrollable[] {\n    const scrollingContainers: CdkScrollable[] = [];\n\n    this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\n      if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    return this._document.defaultView || window;\n  }\n\n  /** Returns true if the element is contained within the provided Scrollable. */\n  private _scrollableContainsElement(\n      scrollable: CdkScrollable,\n      elementOrElementRef: ElementRef|HTMLElement): boolean {\n    let element: HTMLElement | null = coerceElement(elementOrElementRef);\n    let scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element!.parentElement);\n\n    return false;\n  }\n\n  /** Sets up the global scroll listeners. */\n  private _addGlobalListener() {\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      const window = this._getWindow();\n      return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n    });\n  }\n\n  /** Cleans up the global scroll listener. */\n  private _removeGlobalListener() {\n    if (this._globalSubscription) {\n      this._globalSubscription.unsubscribe();\n      this._globalSubscription = null;\n    }\n  }\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link asyncScheduler} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * ## Examples\n * Schedule recursively first, then do something\n * ```ts\n * import { queueScheduler } from 'rxjs';\n *\n * queueScheduler.schedule(() => {\n *   queueScheduler.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n * ```\n *\n * Reschedule itself recursively\n * ```ts\n * import { queueScheduler } from 'rxjs';\n *\n * queueScheduler.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n * ```\n */\nexport const queueScheduler = new QueueScheduler(QueueAction);\n\n/**\n * @deprecated renamed. Use {@link queueScheduler}\n */\nexport const queue = queueScheduler;\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Notification } from '../Notification';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n * Ensure values in subscribe are called just before browser repaint.\n * ```ts\n * import { interval } from 'rxjs';\n * import { observeOn } from 'rxjs/operators';\n *\n * const intervals = interval(10);                // Intervals are scheduled\n *                                                // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler),          // ...but we will observe on animationFrame\n * )                                              // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: SchedulerLike, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  /** @nocollapse */\n  static dispatch(this: SchedulerAction<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: SchedulerLike,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    const destination = this.destination as Subscription;\n    destination.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n    this.unsubscribe();\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { Subject } from './Subject';\nimport { SchedulerLike } from './types';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * A variant of Subject that \"replays\" or emits old values to new subscribers.\n * It buffers a set number of values and will emit those values immediately to\n * any new subscribers in addition to emitting new values to existing subscribers.\n *\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: (ReplayEvent<T> | T)[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n  private _infiniteTimeWindow: boolean = false;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: SchedulerLike) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n\n    if (windowTime === Number.POSITIVE_INFINITY) {\n      this._infiniteTimeWindow = true;\n      this.next = this.nextInfiniteTimeWindow;\n    } else {\n      this.next = this.nextTimeWindow;\n    }\n  }\n\n  private nextInfiniteTimeWindow(value: T): void {\n    if (!this.isStopped) {\n      const _events = this._events;\n      _events.push(value);\n      // Since this method is invoked in every next() call than the buffer\n      // can overgrow the max size only by one item\n      if (_events.length > this._bufferSize) {\n        _events.shift();\n      }\n    }\n    super.next(value);\n  }\n\n  private nextTimeWindow(value: T): void {\n    if (!this.isStopped) {\n      this._events.push(new ReplayEvent(this._getNow(), value));\n      this._trimBufferThenGetEvents();\n    }\n    super.next(value);\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    // When `_infiniteTimeWindow === true` then the buffer is already trimmed\n    const _infiniteTimeWindow = this._infiniteTimeWindow;\n    const _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    const len = _events.length;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.isStopped || this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    if (_infiniteTimeWindow) {\n      for (let i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next(<T>_events[i]);\n      }\n    } else {\n      for (let i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next((<ReplayEvent<T>>_events[i]).value);\n      }\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = <ReplayEvent<T>[]>this._events;\n\n    const eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\nimport {supportsScrollBehavior} from '@angular/cdk/platform';\n\nconst scrollBehaviorSupported = supportsScrollBehavior();\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = {top: '', left: ''};\n  private _previousScrollPosition: {top: number, left: number};\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() {}\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement!;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement!;\n      const body = this._document.body!;\n      const htmlStyle = html.style;\n      const bodyStyle = body.style;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n\n      this._isEnabled = false;\n\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n      // because it can throw off feature detections in `supportsScrollBehavior` which\n      // checks for `'scrollBehavior' in documentElement.style`.\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n      }\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n        bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n      }\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement!;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgZone} from '@angular/core';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {Subscription} from 'rxjs';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface CloseScrollStrategyConfig {\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\n  threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n  private _initialScrollPosition: number;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _config?: CloseScrollStrategyConfig) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0);\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n\n  /** Detaches the overlay ref and disables the scroll strategy. */\n  private _detach = () => {\n    this.disable();\n\n    if (this._overlayRef.hasAttached()) {\n      this._ngZone.run(() => this._overlayRef.detach());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements ScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig) { }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n      this._ngZone, this._viewportRuler, config)\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {OverlayReference} from '../overlay-reference';\nimport {Platform} from '@angular/cdk/platform';\nimport {BaseOverlayDispatcher} from './base-overlay-dispatcher';\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n  private _cursorOriginalValue: string;\n  private _cursorStyleIsSet = false;\n\n  constructor(@Inject(DOCUMENT) document: any, private _platform: Platform) {\n    super(document);\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayReference): void {\n    super.add(overlayRef);\n\n    // tslint:disable: max-line-length\n    // Safari on iOS does not generate click events for non-interactive\n    // elements. However, we want to receive a click for any element outside\n    // the overlay. We can force a \"clickable\" state by setting\n    // `cursor: pointer` on the document body.\n    // See https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n    // and https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n    // tslint:enable: max-line-length\n    if (!this._isAttached) {\n      this._document.body.addEventListener('click', this._clickListener, true);\n      this._document.body.addEventListener('contextmenu', this._clickListener, true);\n\n      // click event is not fired on iOS. To make element \"clickable\" we are\n      // setting the cursor to pointer\n      if (this._platform.IOS && !this._cursorStyleIsSet) {\n        this._cursorOriginalValue = this._document.body.style.cursor;\n        this._document.body.style.cursor = 'pointer';\n        this._cursorStyleIsSet = true;\n      }\n\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  protected detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('click', this._clickListener, true);\n      this._document.body.removeEventListener('contextmenu', this._clickListener, true);\n      if (this._platform.IOS && this._cursorStyleIsSet) {\n        this._document.body.style.cursor = this._cursorOriginalValue;\n        this._cursorStyleIsSet = false;\n      }\n      this._isAttached = false;\n    }\n  }\n\n  /** Click event listener that will be attached to the body propagate phase. */\n  private _clickListener = (event: MouseEvent) => {\n    // Get the target through the `composedPath` if possible to account for shadow DOM.\n    const target = event.composedPath ? event.composedPath()[0] : event.target;\n    // We copy the array because the original may be modified asynchronously if the\n    // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n    // the for loop.\n    const overlays = this._attachedOverlays.slice();\n\n    // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n    // We want to target all overlays for which the click could be considered as outside click.\n    // As soon as we reach an overlay for which the click is not outside click we break off\n    // the loop.\n    for (let i = overlays.length - 1; i > -1; i--) {\n      const overlayRef = overlays[i];\n      if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n        continue;\n      }\n\n      // If it's a click inside the overlay, just break - we should do nothing\n      // If it's an outside click dispatch the mouse event, and proceed with the next overlay\n      if (overlayRef.overlayElement.contains(target as Node)) {\n        break;\n      }\n\n      overlayRef._outsidePointerEvents.next(event);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {OverlayReference} from '../overlay-reference';\nimport {BaseOverlayDispatcher} from './base-overlay-dispatcher';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    super(document);\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayReference): void {\n    super.add(overlayRef);\n\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener);\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  protected detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    const overlays = this._attachedOverlays;\n\n    for (let i = overlays.length - 1; i > -1; i--) {\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n      // We want to target the most recent overlay, rather than trying to match where the event came\n      // from, because some components might open an overlay, but keep focus on a trigger element\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n      // because we don't want overlays that don't handle keyboard events to block the ones below\n      // them that do.\n      if (overlays[i]._keydownEvents.observers.length > 0) {\n        overlays[i]._keydownEvents.next(event);\n        break;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {OverlayReference} from '../overlay-reference';\n\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport abstract class BaseOverlayDispatcher implements OnDestroy {\n\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayReference[] = [];\n\n  protected _document: Document;\n  protected _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy(): void {\n    this.detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayReference): void {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayReference): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this.detach();\n    }\n  }\n\n  /** Detaches the global event listener. */\n  protected abstract detach(): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n\n/**\n * Whether we're in a testing environment.\n * TODO(crisbeto): remove this once we have an overlay testing module.\n */\nconst isTestEnvironment: boolean = typeof window !== 'undefined' && !!window &&\n  !!((window as any).__karma__ || (window as any).jasmine);\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n  protected _document: Document;\n\n  constructor(@Inject(DOCUMENT) document: any, protected _platform: Platform) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    const container = this._containerElement;\n\n    if (container && container.parentNode) {\n      container.parentNode.removeChild(container);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const containerClass = 'cdk-overlay-container';\n\n    if (this._platform.isBrowser || isTestEnvironment) {\n      const oppositePlatformContainers =\n          this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` +\n                                          `.${containerClass}[platform=\"test\"]`);\n\n      // Remove any old containers from the opposite platform.\n      // This can happen when transitioning from the server to the client.\n      for (let i = 0; i < oppositePlatformContainers.length; i++) {\n        oppositePlatformContainers[i].parentNode!.removeChild(oppositePlatformContainers[i]);\n      }\n    }\n\n    const container = this._document.createElement('div');\n    container.classList.add(containerClass);\n\n    // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n    // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n    // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n    // To mitigate the problem we made it so that only containers from a different platform are\n    // cleared, but the side-effect was that people started depending on the overly-aggressive\n    // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n    // module which does the cleanup, we try to detect that we're in a test environment and we\n    // always clear the container. See #17006.\n    // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n    if (isTestEnvironment) {\n      container.setAttribute('platform', 'test');\n    } else if (!this._platform.isBrowser) {\n      container.setAttribute('platform', 'server');\n    }\n\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ScrollStrategy, NoopScrollStrategy} from './scroll/index';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /**\n   * Direction of the text in the overlay panel. If a `Directionality` instance\n   * is passed in, the overlay will handle changes to its value automatically.\n   */\n  direction?: Direction | Directionality;\n\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  disposeOnNavigation?: boolean = false;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n      const configKeys =\n          Object.keys(config) as Iterable<keyof OverlayConfig> & (keyof OverlayConfig)[];\n      for (const key of configKeys) {\n        if (config[key] !== undefined) {\n          // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n          // as \"I don't know *which* key this is, so the only valid value is the intersection\n          // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n          // is not smart enough to see that the right-hand-side is actually an access of the same\n          // exact type with the same exact key, meaning that the value type must be identical.\n          // So we use `any` to work around this.\n          this[key] = config[key] as any;\n        }\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    /** Offset along the X axis. */\n    public offsetX?: number,\n    /** Offset along the Y axis. */\n    public offsetY?: number,\n    /** Class(es) to be applied to the panel while this position is active. */\n    public panelClass?: string | string[]) {\n\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n      /** The position used as a result of this change. */\n      public connectionPair: ConnectionPositionPair,\n      /** @docs-private */\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, merge, SubscriptionLike, Subscription} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {OverlayKeyboardDispatcher} from './dispatchers/overlay-keyboard-dispatcher';\nimport {OverlayOutsideClickDispatcher} from './dispatchers/overlay-outside-click-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {OverlayReference} from './overlay-reference';\nimport {PositionStrategy} from './position/position-strategy';\nimport {ScrollStrategy} from './scroll';\n\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalOutlet, OverlayReference {\n  private _backdropElement: HTMLElement | null = null;\n  private _backdropClick: Subject<MouseEvent> = new Subject();\n  private _attachments = new Subject<void>();\n  private _detachments = new Subject<void>();\n  private _positionStrategy: PositionStrategy | undefined;\n  private _scrollStrategy: ScrollStrategy | undefined;\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n  private _backdropClickHandler = (event: MouseEvent) => this._backdropClick.next(event);\n\n  /**\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\n   * the `_host` to its original position in the DOM when it gets re-attached.\n   */\n  private _previousHostParent: HTMLElement;\n\n  /** Stream of keydown events dispatched to this overlay. */\n  _keydownEvents = new Subject<KeyboardEvent>();\n\n  /** Stream of mouse outside events dispatched to this overlay. */\n  _outsidePointerEvents = new Subject<MouseEvent>();\n\n  constructor(\n      private _portalOutlet: PortalOutlet,\n      private _host: HTMLElement,\n      private _pane: HTMLElement,\n      private _config: ImmutableObject<OverlayConfig>,\n      private _ngZone: NgZone,\n      private _keyboardDispatcher: OverlayKeyboardDispatcher,\n      private _document: Document,\n      private _location: Location,\n      private _outsideClickDispatcher: OverlayOutsideClickDispatcher) {\n\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n      this._scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement(): HTMLElement {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement(): HTMLElement | null {\n    return this._backdropElement;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement(): HTMLElement {\n    return this._host;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal: Portal<any>): any {\n    let attachResult = this._portalOutlet.attach(portal);\n\n    // Update the pane element with the given configuration.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.enable();\n    }\n\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable\n      .pipe(take(1))\n      .subscribe(() => {\n        // The overlay could've been detached before the zone has stabilized.\n        if (this.hasAttached()) {\n          this.updatePosition();\n        }\n      });\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n\n    if (this._config.disposeOnNavigation) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n\n    this._outsideClickDispatcher.add(this);\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach(): any {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n\n    // Keeping the host element in the DOM can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n    this._detachContentWhenStable();\n    this._locationChanges.unsubscribe();\n    this._outsideClickDispatcher.remove(this);\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose(): void {\n    const isAttached = this.hasAttached();\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._disposeScrollStrategy();\n    this.detachBackdrop();\n    this._locationChanges.unsubscribe();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n    this._outsidePointerEvents.complete();\n    this._outsideClickDispatcher.remove(this);\n\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n      this._host = null!;\n    }\n\n    this._previousHostParent = this._pane = null!;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached(): boolean {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._backdropClick;\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments(): Observable<void> {\n    return this._attachments;\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments(): Observable<void> {\n    return this._detachments;\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._keydownEvents;\n  }\n\n  /** Gets an observable of pointer events targeted outside this overlay. */\n  outsidePointerEvents(): Observable<MouseEvent> {\n    return this._outsidePointerEvents;\n  }\n\n  /** Gets the current overlay configuration, which is immutable. */\n  getConfig(): OverlayConfig {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition(): void {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n\n  /** Switches to a new position strategy and updates the overlay position. */\n  updatePositionStrategy(strategy: PositionStrategy): void {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._positionStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig: OverlaySizeConfig): void {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir: Direction | Directionality): void {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, true);\n    }\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, false);\n    }\n  }\n\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n  getDirection(): Direction {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n\n  /** Switches to a new scroll strategy. */\n  updateScrollStrategy(strategy: ScrollStrategy): void {\n    if (strategy === this._scrollStrategy) {\n      return;\n    }\n\n    this._disposeScrollStrategy();\n    this._scrollStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      strategy.enable();\n    }\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  private _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  private _updateElementSize() {\n    if (!this._pane) {\n      return;\n    }\n\n    const style = this._pane.style;\n\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  private _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    }\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', this._backdropClickHandler);\n\n    // Add class to fade-in the backdrop after one frame.\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  private _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode!.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop(): void {\n    let backdropToDetach = this._backdropElement;\n\n    if (!backdropToDetach) {\n      return;\n    }\n\n    let timeoutId: number;\n    let finishDetach = () => {\n      // It may not be attached to anything in certain cases (e.g. unit tests).\n      if (backdropToDetach) {\n        backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n        backdropToDetach.removeEventListener('transitionend', finishDetach);\n\n        if (backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n      }\n\n      // It is possible that a new portal has been attached to this overlay since we started\n      // removing the backdrop. If that is the case, only clear the backdrop reference if it\n      // is still the same instance that we started to remove.\n      if (this._backdropElement == backdropToDetach) {\n        this._backdropElement = null;\n      }\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(backdropToDetach!, this._config.backdropClass, false);\n      }\n\n      clearTimeout(timeoutId);\n    };\n\n    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n    this._ngZone.runOutsideAngular(() => {\n      backdropToDetach!.addEventListener('transitionend', finishDetach);\n    });\n\n    // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n    // In this case we make it unclickable and we try to remove it after a delay.\n    backdropToDetach.style.pointerEvents = 'none';\n\n    // Run this outside the Angular zone because there's nothing that Angular cares about.\n    // If it were to run inside the Angular zone, every test that used Overlay would have to be\n    // either async or fakeAsync.\n    timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n  }\n\n  /** Toggles a single CSS class or an array of classes on an element. */\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n    const classList = element.classList;\n\n    coerceArray(cssClasses).forEach(cssClass => {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      // Also trying to add an empty string to a DOMTokenList will throw.\n      if (cssClass) {\n        isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n      }\n    });\n  }\n\n  /** Detaches the overlay content next time the zone stabilizes. */\n  private _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._ngZone.onStable\n        .pipe(takeUntil(merge(this._attachments, this._detachments)))\n        .subscribe(() => {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!this._pane || !this._host || this._pane.children.length === 0) {\n            if (this._pane && this._config.panelClass) {\n              this._toggleClasses(this._pane, this._config.panelClass, false);\n            }\n\n            if (this._host && this._host.parentElement) {\n              this._previousHostParent = this._host.parentElement;\n              this._previousHostParent.removeChild(this._host);\n            }\n\n            subscription.unsubscribe();\n          }\n        });\n    });\n  }\n\n  /** Disposes of a scroll strategy. */\n  private _disposeScrollStrategy() {\n    const scrollStrategy = this._scrollStrategy;\n\n    if (scrollStrategy) {\n      scrollStrategy.disable();\n\n      if (scrollStrategy.detach) {\n        scrollStrategy.detach();\n      }\n    }\n  }\n}\n\n\n/** Size properties for an overlay. */\nexport interface OverlaySizeConfig {\n  width?: number | string;\n  height?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler, CdkScrollable, ViewportScrollPosition} from '@angular/cdk/scrolling';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  ScrollingVisibility,\n  validateHorizontalPosition,\n  validateVerticalPosition,\n} from './connected-position';\nimport {Observable, Subscription, Subject} from 'rxjs';\nimport {OverlayReference} from '../overlay-reference';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n\n/** Possible values that can be set as the origin of a FlexibleConnectedPositionStrategy. */\nexport type FlexibleConnectedPositionStrategyOrigin = ElementRef | Element | Point & {\n  width?: number;\n  height?: number;\n};\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  /** Whether we're performing the very first positioning of the overlay. */\n  private _isInitialRender: boolean;\n\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n  private _lastBoundingBoxSize = {width: 0, height: 0};\n\n  /** Whether the overlay was pushed in a previous positioning. */\n  private _isPushed = false;\n\n  /** Whether the overlay can be pushed on-screen on the initial open. */\n  private _canPush = true;\n\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\n  private _growAfterOpen = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  private _hasFlexibleDimensions = true;\n\n  /** Whether the overlay position is locked. */\n  private _positionLocked = false;\n\n  /** Cached origin dimensions */\n  private _originRect: ClientRect;\n\n  /** Cached overlay dimensions */\n  private _overlayRect: ClientRect;\n\n  /** Cached viewport dimensions */\n  private _viewportRect: ClientRect;\n\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n  private _viewportMargin = 0;\n\n  /** The Scrollable containers used to check scrollable view properties on position change. */\n  private _scrollables: CdkScrollable[] = [];\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** The origin element against which the overlay will be positioned. */\n  private _origin: FlexibleConnectedPositionStrategyOrigin;\n\n  /** The overlay pane element. */\n  private _pane: HTMLElement;\n\n  /** Whether the strategy has been disposed of already. */\n  private _isDisposed: boolean;\n\n  /**\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n   * within the viewport.\n   */\n  private _boundingBox: HTMLElement | null;\n\n  /** The last position to have been calculated as the best fit position. */\n  private _lastPosition: ConnectedPosition | null;\n\n  /** Subject that emits whenever the position changes. */\n  private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n  /** Subscription to viewport size changes. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /** Default offset for the overlay along the x axis. */\n  private _offsetX = 0;\n\n  /** Default offset for the overlay along the y axis. */\n  private _offsetY = 0;\n\n  /** Selector to be used when finding the elements on which to set the transform origin. */\n  private _transformOriginSelector: string;\n\n  /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n  private _appliedPanelClasses: string[] = [];\n\n  /** Amount by which the overlay was pushed in each axis during the last time it was positioned. */\n  private _previousPushAmount: {x: number, y: number} | null;\n\n  /** Observable sequence of position changes. */\n  positionChanges: Observable<ConnectedOverlayPositionChange> = this._positionChanges;\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  constructor(\n      connectedTo: FlexibleConnectedPositionStrategyOrigin, private _viewportRuler: ViewportRuler,\n      private _document: Document, private _platform: Platform,\n      private _overlayContainer: OverlayContainer) {\n    this.setOrigin(connectedTo);\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    if (this._overlayRef && overlayRef !== this._overlayRef &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply(): void {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._clearPanelClasses();\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._getOriginRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits: FlexibleFit[] = [];\n\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback: FallbackPosition | undefined;\n\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, pos);\n\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n\n        continue;\n      }\n\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit: FlexibleFit | null = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score =\n            fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n      this._applyPosition(bestFit!.position, bestFit!.origin);\n      return;\n    }\n\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback!.position, fallback!.originPoint);\n      return;\n    }\n\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback!.position, fallback!.originPoint);\n  }\n\n  detach(): void {\n    this._clearPanelClasses();\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n\n    // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: '',\n      } as CSSStyleDeclaration);\n    }\n\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n\n    this.detach();\n    this._positionChanges.complete();\n    this._overlayRef = this._boundingBox = null!;\n    this._isDisposed = true;\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition(): void {\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]): this {\n    this._scrollables = scrollables;\n    return this;\n  }\n\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions: ConnectedPosition[]): this {\n    this._preferredPositions = positions;\n\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition!) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin: number): this {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true): this {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true): this {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true): this {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true): this {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin, relative to which to position the overlay.\n   * Using an element origin is useful for building components that need to be positioned\n   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n   * used for cases like contextual menus which open relative to the user's pointer.\n   * @param origin Reference to the new origin.\n   */\n  setOrigin(origin: FlexibleConnectedPositionStrategyOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n  withTransformOriginOn(selector: string): this {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  private _getOriginPoint(originRect: ClientRect, pos: ConnectedPosition): Point {\n    let x: number;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + (originRect.width / 2);\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    let y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  private _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      pos: ConnectedPosition): Point {\n\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  private _getOverlayFit(point: Point, rawOverlayRect: ClientRect, viewport: ClientRect,\n    position: ConnectedPosition): OverlayFit {\n\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    let {x, y} = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    }\n\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = (x + overlay.width) - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = (y + overlay.height) - viewport.height;\n\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlat at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: ClientRect) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n      const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n\n      const verticalFit = fit.fitsInViewportVertically ||\n          (minHeight != null && minHeight <= availableHeight);\n      const horizontalFit = fit.fitsInViewportHorizontally ||\n          (minWidth != null && minWidth <= availableWidth);\n\n      return verticalFit && horizontalFit;\n    }\n    return false;\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param overlay Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  private _pushOverlayOnScreen(start: Point,\n                               rawOverlayRect: ClientRect,\n                               scrollPosition: ViewportScrollPosition): Point {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y\n      };\n    }\n\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    const viewport = this._viewportRect;\n\n    // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n\n    // Amount by which to push the overlay in each axis such that it remains on-screen.\n    let pushX = 0;\n    let pushY = 0;\n\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n    }\n\n    this._previousPushAmount = {x: pushX, y: pushY};\n\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    }\n\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculcations can be somewhat expensive.\n    if (this._positionChanges.observers.length) {\n      const scrollableViewProperties = this._getScrollVisibility();\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n  private _setTransformOrigin(position: ConnectedPosition) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements: NodeListOf<HTMLElement> =\n        this._boundingBox!.querySelectorAll(this._transformOriginSelector);\n    let xOrigin: 'left' | 'right' | 'center';\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height: number, top: number, bottom: number;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.height - top + this._viewportMargin;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n\n      const previousHeight = this._lastBoundingBoxSize.height;\n\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - (previousHeight / 2);\n      }\n    }\n\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge =\n        (position.overlayX === 'start' && !isRtl) ||\n        (position.overlayX === 'end' && isRtl);\n\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge =\n        (position.overlayX === 'end' && !isRtl) ||\n        (position.overlayX === 'start' && isRtl);\n\n    let width: number, left: number, right: number;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.width - origin.x + this._viewportMargin;\n      width = origin.x - this._viewportMargin;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.right - origin.x + viewport.left, origin.x);\n      const previousWidth = this._lastBoundingBoxSize.width;\n\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - (previousWidth / 2);\n      }\n    }\n\n    return {top: top!, left: left!, bottom: bottom!, right: right!, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n\n    extendStyles(this._boundingBox!.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  private _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox!.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  private _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n      transform: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\n    const styles = {} as CSSStyleDeclaration;\n    const hasExactPosition = this._hasExactPosition();\n    const hasFlexibleDimensions = this._hasFlexibleDimensions;\n    const config = this._overlayRef.getConfig();\n\n    if (hasExactPosition) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    }\n\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim();\n\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    // Note that this doesn't apply when we have an exact position, in which case we do want to\n    // apply them because they'll be cleared from the bounding box.\n    if (config.maxHeight) {\n      if (hasExactPosition) {\n        styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n      } else if (hasFlexibleDimensions) {\n        styles.maxHeight = '';\n      }\n    }\n\n    if (config.maxWidth) {\n      if (hasExactPosition) {\n        styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n      } else if (hasFlexibleDimensions) {\n        styles.maxWidth = '';\n      }\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayY(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: '', bottom: ''} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    let virtualKeyboardOffset =\n        this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n\n    // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    overlayPoint.y -= virtualKeyboardOffset;\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement!.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayX(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: '', right: ''} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty: 'left' | 'right';\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement!.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  private _getScrollVisibility(): ScrollingVisibility {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._getOriginRect();\n    const overlayBounds =  this._pane.getBoundingClientRect();\n\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this._scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from its length. */\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  private _getNarrowedViewportRect(): ClientRect {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement!.clientWidth;\n    const height = this._document.documentElement!.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top:    scrollPosition.top + this._viewportMargin,\n      left:   scrollPosition.left + this._viewportMargin,\n      right:  scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width:  width  - (2 * this._viewportMargin),\n      height: height - (2 * this._viewportMargin),\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  private _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  private _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n\n  /** Validates that the current position match the expected values. */\n  private _validatePositions(): void {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._preferredPositions.length) {\n        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n      }\n\n      // TODO(crisbeto): remove these once Angular's template type\n      // checking is advanced enough to catch these cases.\n      this._preferredPositions.forEach(pair => {\n        validateHorizontalPosition('originX', pair.originX);\n        validateVerticalPosition('originY', pair.originY);\n        validateHorizontalPosition('overlayX', pair.overlayX);\n        validateVerticalPosition('overlayY', pair.overlayY);\n      });\n    }\n  }\n\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n  private _addPanelClasses(cssClasses: string | string[]) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n  private _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => {\n        this._pane.classList.remove(cssClass);\n      });\n      this._appliedPanelClasses = [];\n    }\n  }\n\n  /** Returns the ClientRect of the current origin. */\n  private _getOriginRect(): ClientRect {\n    const origin = this._origin;\n\n    if (origin instanceof ElementRef) {\n      return origin.nativeElement.getBoundingClientRect();\n    }\n\n    // Check for Element so SVG elements are also supported.\n    if (origin instanceof Element) {\n      return origin.getBoundingClientRect();\n    }\n\n    const width = origin.width || 0;\n    const height = origin.height || 0;\n\n    // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n    return {\n      top: origin.y,\n      bottom: origin.y + height,\n      left: origin.x,\n      right: origin.x + width,\n      height,\n      width\n    };\n  }\n}\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface OverlayFit {\n  /** Whether the overlay fits completely in the viewport. */\n  isCompletelyWithinViewport: boolean;\n\n  /** Whether the overlay fits in the viewport on the y-axis. */\n  fitsInViewportVertically: boolean;\n\n  /** Whether the overlay fits in the viewport on the x-axis. */\n  fitsInViewportHorizontally: boolean;\n\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\n  visibleArea: number;\n}\n\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\ninterface FallbackPosition {\n  position: ConnectedPosition;\n  originPoint: Point;\n  overlayPoint: Point;\n  overlayFit: OverlayFit;\n  overlayRect: ClientRect;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface BoundingBoxRect {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface FlexibleFit {\n  position: ConnectedPosition;\n  origin: Point;\n  overlayRect: ClientRect;\n  boundingBoxRect: BoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface ConnectedPosition {\n  originX: 'start' | 'center' | 'end';\n  originY: 'top' | 'center' | 'bottom';\n\n  overlayX: 'start' | 'center' | 'end';\n  overlayY: 'top' | 'center' | 'bottom';\n\n  weight?: number;\n  offsetX?: number;\n  offsetY?: number;\n  panelClass?: string | string[];\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination: CSSStyleDeclaration,\n                      source: CSSStyleDeclaration): CSSStyleDeclaration {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      destination[key] = source[key];\n    }\n  }\n\n  return destination;\n}\n\n\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input: number|string|null|undefined): number|null {\n  if (typeof input !== 'number' && input != null) {\n    const [value, units] = input.split(cssUnitPattern);\n    return (!units || units === 'px') ? parseFloat(value) : null;\n  }\n\n  return input || null;\n}\n\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect: ClientRect): ClientRect {\n  return {\n    top: Math.floor(clientRect.top),\n    right: Math.floor(clientRect.right),\n    bottom: Math.floor(clientRect.bottom),\n    left: Math.floor(clientRect.left),\n    width: Math.floor(clientRect.width),\n    height: Math.floor(clientRect.height)\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ViewportRuler} from '@angular/cdk/scrolling';\nimport {ElementRef} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {OverlayContainer} from '../overlay-container';\nimport {OverlayReference} from '../overlay-reference';\n\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n} from './connected-position';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {PositionStrategy} from './position-strategy';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\n  /**\n   * Reference to the underlying position strategy to which all the API calls are proxied.\n   * @docs-private\n   */\n  _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  private _direction: Direction | null;\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** Emits an event when the connection point changes. */\n  readonly onPositionChange: Observable<ConnectedOverlayPositionChange>;\n\n  constructor(\n      originPos: OriginConnectionPosition, overlayPos: OverlayConnectionPosition,\n      connectedTo: ElementRef<HTMLElement>, viewportRuler: ViewportRuler, document: Document,\n      platform: Platform, overlayContainer: OverlayContainer) {\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n    this._positionStrategy = new FlexibleConnectedPositionStrategy(\n                                 connectedTo, viewportRuler, document, platform, overlayContainer)\n                                 .withFlexibleDimensions(false)\n                                 .withPush(false)\n                                 .withViewportMargin(0);\n\n    this.withFallbackPosition(originPos, overlayPos);\n    this.onPositionChange = this._positionStrategy.positionChanges;\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  /** Attach this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    this._overlayRef = overlayRef;\n    this._positionStrategy.attach(overlayRef);\n\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n\n  /** Disposes all resources used by the position strategy. */\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n\n  /** @docs-private */\n  detach() {\n    this._positionStrategy.detach();\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * @docs-private\n   */\n  apply(): void {\n    this._positionStrategy.apply();\n  }\n\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  recalculateLastPosition(): void {\n    this._positionStrategy.reapplyLastPosition();\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n\n  /**\n   * Adds a new preferred fallback position.\n   * @param originPos\n   * @param overlayPos\n   */\n  withFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      offsetX?: number,\n      offsetY?: number): this {\n\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n    this._preferredPositions.push(position);\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @param dir New layout direction.\n   */\n  withDirection(dir: 'ltr' | 'rtl'): this {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (this._overlayRef) {\n      this._overlayRef.setDirection(dir);\n    } else {\n      this._direction = dir;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @param offset New offset in the X axis.\n   */\n  withOffsetX(offset: number): this {\n    this._positionStrategy.withDefaultOffsetX(offset);\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @param  offset New offset in the Y axis.\n   */\n  withOffsetY(offset: number): this {\n    this._positionStrategy.withDefaultOffsetY(offset);\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked: boolean): this {\n    this._positionStrategy.withLockedPosition(isLocked);\n    return this;\n  }\n\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @param positions Position pairs to be set on the strategy.\n   */\n  withPositions(positions: ConnectionPositionPair[]): this {\n    this._preferredPositions = positions.slice();\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef): this {\n    this._positionStrategy.setOrigin(origin);\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT, Location} from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n} from '@angular/core';\nimport {OverlayKeyboardDispatcher} from './dispatchers/overlay-keyboard-dispatcher';\nimport {OverlayOutsideClickDispatcher} from './dispatchers/overlay-outside-click-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable()\nexport class Overlay {\n  private _appRef: ApplicationRef;\n\n  constructor(\n              /** Scrolling strategies that can be used when creating an overlay. */\n              public scrollStrategies: ScrollStrategyOptions,\n              private _overlayContainer: OverlayContainer,\n              private _componentFactoryResolver: ComponentFactoryResolver,\n              private _positionBuilder: OverlayPositionBuilder,\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\n              private _injector: Injector,\n              private _ngZone: NgZone,\n              @Inject(DOCUMENT) private _document: any,\n              private _directionality: Directionality,\n              private _location: Location,\n              private _outsideClickDispatcher: OverlayOutsideClickDispatcher) { }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\n      this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector,\n                               this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {ElementRef, Inject, Injectable} from '@angular/core';\n\nimport {OverlayContainer} from '../overlay-container';\n\nimport {OriginConnectionPosition, OverlayConnectionPosition} from './connected-position';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {\n  FlexibleConnectedPositionStrategy,\n  FlexibleConnectedPositionStrategyOrigin,\n} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  constructor(\n      private _viewportRuler: ViewportRuler, @Inject(DOCUMENT) private _document: any,\n      private _platform: Platform, private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a relative position strategy.\n   * @param elementRef\n   * @param originPos\n   * @param overlayPos\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * @breaking-change 8.0.0\n   */\n  connectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n    return new ConnectedPositionStrategy(\n        originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform,\n        this._overlayContainer);\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param origin Origin relative to which to position the overlay.\n   */\n  flexibleConnectedTo(origin: FlexibleConnectedPositionStrategyOrigin):\n    FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document,\n        this._platform, this._overlayContainer);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {NgModule} from '@angular/core';\nimport {Overlay} from './overlay';\nimport {\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n} from './overlay-directives';\n\n\n@NgModule({\n  imports: [BidiModule, PortalModule, ScrollingModule],\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n  declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n  providers: [\n    Overlay,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  ],\n})\nexport class OverlayModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {OverlayReference} from '../overlay-reference';\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n  private _cssPosition: string = 'static';\n  private _topOffset: string = '';\n  private _bottomOffset: string = '';\n  private _leftOffset: string = '';\n  private _rightOffset: string = '';\n  private _alignItems: string = '';\n  private _justifyContent: string = '';\n  private _width: string = '';\n  private _height: string = '';\n  private _isDisposed: boolean;\n\n  attach(overlayRef: OverlayReference): void {\n    const config = overlayRef.getConfig();\n\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value: string = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value: string = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value: string = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value: string = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  width(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  height(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset: string = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset: string = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply(): void {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n    const {width, height, maxWidth, maxHeight} = config;\n    const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n                                      (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n    const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n                                    (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n    styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n\n    if (shouldBeFlushHorizontally) {\n      parentStyles.justifyContent = 'flex-start';\n    } else if (this._justifyContent === 'center') {\n      parentStyles.justifyContent = 'center';\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n      // don't want that because our positioning is explicitly `left` and `right`, hence\n      // why we do another inversion to ensure that the overlay stays in the same position.\n      // TODO: reconsider this if we add `start` and `end` methods.\n      if (this._justifyContent === 'flex-start') {\n        parentStyles.justifyContent = 'flex-end';\n      } else if (this._justifyContent === 'flex-end') {\n        parentStyles.justifyContent = 'flex-start';\n      }\n    } else {\n      parentStyles.justifyContent = this._justifyContent;\n    }\n\n    parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n  dispose(): void {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n      styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n\n    this._overlayRef = null!;\n    this._isDisposed = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {takeWhile} from 'rxjs/operators';\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n} from './position/flexible-connected-position-strategy';\nimport {\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from './scroll/index';\n\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: ConnectedPosition[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top'\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top'\n  }\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('cdk-connected-overlay-scroll-strategy');\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n})\nexport class CdkOverlayOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef) { }\n}\n\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n  private _overlayRef: OverlayRef;\n  private _templatePortal: TemplatePortal;\n  private _hasBackdrop = false;\n  private _lockPosition = false;\n  private _growAfterOpen = false;\n  private _flexibleDimensions = false;\n  private _push = false;\n  private _backdropSubscription = Subscription.EMPTY;\n  private _attachSubscription = Subscription.EMPTY;\n  private _detachSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _offsetX: number;\n  private _offsetY: number;\n  private _position: FlexibleConnectedPositionStrategy;\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Origin for the connected overlay. */\n  @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\n\n  /** Registered connected position pairs. */\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\n\n  /**\n   * This input overrides the positions input if specified. It lets users pass\n   * in arbitrary positioning strategies.\n   */\n  @Input('cdkConnectedOverlayPositionStrategy') positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  @Input('cdkConnectedOverlayOffsetX')\n  get offsetX(): number { return this._offsetX; }\n  set offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  @Input('cdkConnectedOverlayOffsetY')\n  get offsetY() { return this._offsetY; }\n  set offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The width of the overlay panel. */\n  @Input('cdkConnectedOverlayWidth') width: number | string;\n\n  /** The height of the overlay panel. */\n  @Input('cdkConnectedOverlayHeight') height: number | string;\n\n  /** The min width of the overlay panel. */\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\n\n  /** The custom class to add to the overlay pane element. */\n  @Input('cdkConnectedOverlayPanelClass') panelClass: string | string[];\n\n  /** Margin between the overlay and the viewport edges. */\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy;\n\n  /** Whether the overlay is open. */\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n  /** Whether the overlay can be closed by user interaction. */\n  @Input('cdkConnectedOverlayDisableClose') disableClose: boolean = false;\n\n  /** CSS selector which to set the transform origin. */\n  @Input('cdkConnectedOverlayTransformOriginOn') transformOriginSelector: string;\n\n  /** Whether or not the overlay should attach a backdrop. */\n  @Input('cdkConnectedOverlayHasBackdrop')\n  get hasBackdrop() { return this._hasBackdrop; }\n  set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  @Input('cdkConnectedOverlayLockPosition')\n  get lockPosition() { return this._lockPosition; }\n  set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  @Input('cdkConnectedOverlayFlexibleDimensions')\n  get flexibleDimensions() { return this._flexibleDimensions; }\n  set flexibleDimensions(value: boolean) {\n    this._flexibleDimensions = coerceBooleanProperty(value);\n  }\n\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n  @Input('cdkConnectedOverlayGrowAfterOpen')\n  get growAfterOpen() { return this._growAfterOpen; }\n  set growAfterOpen(value: boolean) { this._growAfterOpen = coerceBooleanProperty(value); }\n\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  @Input('cdkConnectedOverlayPush')\n  get push() { return this._push; }\n  set push(value: boolean) { this._push = coerceBooleanProperty(value); }\n\n  /** Event emitted when the backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<MouseEvent>();\n\n  /** Event emitted when the position has changed. */\n  @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n  @Output() attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n  @Output() detach = new EventEmitter<void>();\n\n  /** Emits when there are keyboard events that are targeted at the overlay. */\n  @Output() overlayKeydown = new EventEmitter<KeyboardEvent>();\n\n  /** Emits when there are mouse outside click events that are targeted at the overlay. */\n  @Output() overlayOutsideClick = new EventEmitter<MouseEvent>();\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  constructor(\n      private _overlay: Overlay,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\n      @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) scrollStrategyFactory: any,\n      @Optional() private _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n\n  /** The element's layout direction. */\n  get dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    this._attachSubscription.unsubscribe();\n    this._detachSubscription.unsubscribe();\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  private _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n    this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n    this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n    overlayRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      this.overlayKeydown.next(event);\n\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n        this._detachOverlay();\n      }\n    });\n\n    this._overlayRef.outsidePointerEvents().subscribe((event: MouseEvent) => {\n      this.overlayOutsideClick.next(event);\n    });\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  private _buildConfig(): OverlayConfig {\n    const positionStrategy = this._position =\n      this.positionStrategy || this._createPositionStrategy();\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n\n    return overlayConfig;\n  }\n\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\n  private _updatePositionStrategy(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const positions: ConnectedPosition[] = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY,\n      panelClass: currentPosition.panelClass || undefined,\n    }));\n\n    return positionStrategy\n      .setOrigin(this.origin.elementRef)\n      .withPositions(positions)\n      .withFlexibleDimensions(this.flexibleDimensions)\n      .withPush(this.push)\n      .withGrowAfterOpen(this.growAfterOpen)\n      .withViewportMargin(this.viewportMargin)\n      .withLockedPosition(this.lockPosition)\n      .withTransformOriginOn(this.transformOriginSelector);\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n    const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n    this._updatePositionStrategy(strategy);\n    return strategy;\n  }\n\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n  private _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    } else {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    this._positionSubscription.unsubscribe();\n\n    // Only subscribe to `positionChanges` if requested, because putting\n    // together all the information for it can be expensive.\n    if (this.positionChange.observers.length > 0) {\n      this._positionSubscription = this._position.positionChanges\n        .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n        .subscribe(position => {\n          this.positionChange.emit(position);\n\n          if (this.positionChange.observers.length === 0) {\n            this._positionSubscription.unsubscribe();\n          }\n        });\n    }\n  }\n\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n  private _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n    }\n\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n  }\n\n  static ngAcceptInputType_hasBackdrop: BooleanInput;\n  static ngAcceptInputType_lockPosition: BooleanInput;\n  static ngAcceptInputType_flexibleDimensions: BooleanInput;\n  static ngAcceptInputType_growAfterOpen: BooleanInput;\n  static ngAcceptInputType_push: BooleanInput;\n}\n\n\n/** @docs-private */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1)'\n    }))),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n  AfterViewInit,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\n@Component({\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    '[class.mat-menu-item]': 'true',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    'class': 'mat-focus-indicator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, AfterViewInit, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Stream that emits when the menu item is focused. */\n  readonly _focused = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    /**\n     * @deprecated `_document` parameter is no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    @Inject(DOCUMENT) _document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() public _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n  }\n\n  /** Focuses the menu item. */\n  focus(origin?: FocusOrigin, options?: FocusOptions): void {\n    if (this._focusMonitor && origin) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n\n    this._focused.next(this);\n  }\n\n  ngAfterViewInit() {\n    if (this._focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      this._focusMonitor.monitor(this._elementRef, false);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n    this._focused.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const clone = this._elementRef.nativeElement.cloneNode(true) as HTMLElement;\n    const icons = clone.querySelectorAll('mat-icon, .material-icons');\n\n    // Strip away icons so they don't show up in the text.\n    for (let i = 0; i < icons.length; i++) {\n      const icon = icons[i];\n      icon.parentNode?.removeChild(icon);\n    }\n\n    return clone.textContent?.trim() || '';\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MAT_MENU_CONTENT, MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Class or list of classes to be applied to the menu's overlay panel. */\n  overlayPanelClass?: string | string[];\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\nlet menuPanelUid = 0;\n\n\n/** Reason why the menu was closed. */\nexport type MenuCloseReason = void | 'click' | 'keydown' | 'tab';\n\n\n/** Base class with all of the `MatMenu` functionality. */\n@Directive()\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** All items inside the menu. Includes items nested inside another menu. */\n  @ContentChildren(MatMenuItem, {descendants: true}) _allItems: QueryList<MatMenuItem>;\n\n  /** Only the direct descendant menu items. */\n  private _directDescendantItems = new QueryList<MatMenuItem>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class or list of classes to be added to the overlay panel. */\n  overlayPanelClass: string|string[] = this._defaultOptions.overlayPanelClass || '';\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** aria-label for the menu panel. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** aria-labelledby for the menu panel. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** aria-describedby for the menu panel. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after' &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem, {descendants: false}) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MAT_MENU_CONTENT) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<MenuCloseReason> = new EventEmitter<MenuCloseReason>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close: EventEmitter<MenuCloseReason> = this.closed;\n\n  readonly panelId = `mat-menu-panel-${menuPanelUid++}`;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n    this._keyManager = new FocusKeyManager(this._directDescendantItems)\n      .withWrap()\n      .withTypeAhead()\n      .withHomeAndEnd();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n\n    // If a user manually (programatically) focuses a menu item, we need to reflect that focus\n    // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n    // is internal and we know that it gets completed on destroy.\n    this._directDescendantItems.changes.pipe(\n      startWith(this._directDescendantItems),\n      switchMap(items => merge<MatMenuItem>(...items.map((item: MatMenuItem) => item._focused)))\n    ).subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n  }\n\n  ngOnDestroy() {\n    this._directDescendantItems.destroy();\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    const itemChanges = this._directDescendantItems.changes as Observable<QueryList<MatMenuItem>>;\n    return itemChanges.pipe(\n      startWith(this._directDescendantItems),\n      switchMap(items => merge(...items.map((item: MatMenuItem) => item._hovered)))\n    ) as Observable<MatMenuItem>;\n  }\n\n  /*\n   * Registers a menu item with the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  addItem(_item: MatMenuItem) {}\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  removeItem(_item: MatMenuItem) {}\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable\n        .pipe(take(1))\n        .subscribe(() => this._focusFirstItem(origin));\n    } else {\n      this._focusFirstItem(origin);\n    }\n  }\n\n  /**\n   * Actual implementation that focuses the first item. Needs to be separated\n   * out so we don't repeat the same logic in the public `focusFirstItem` method.\n   */\n  private _focusFirstItem(origin: FocusOrigin) {\n    const manager = this._keyManager;\n\n    manager.setFocusOrigin(origin).setFirstItemActive();\n\n    // If there's no active item at this point, it means that all the items are disabled.\n    // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n    // give _some_ feedback to screen readers.\n    if (!manager.activeItem && this._directDescendantItems.length) {\n      let element = this._directDescendantItems.first._getHostElement().parentElement;\n\n      // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n      // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n      // because the panel is inside an `ng-template`. We work around it by starting from one of\n      // the items and walking up the DOM.\n      while (element) {\n        if (element.getAttribute('role') === 'menu') {\n          element.focus();\n          break;\n        } else {\n          element = element.parentElement;\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n    const elevation = Math.min(MAT_MENU_BASE_ELEVATION + depth, 24);\n    const newElevation = `mat-elevation-z${elevation}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   */\n  private _updateDirectDescendants() {\n    this._allItems.changes\n      .pipe(startWith(this._allItems))\n      .subscribe((items: QueryList<MatMenuItem>) => {\n        this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n        this._directDescendantItems.notifyOnChanges();\n      });\n  }\n\n  static ngAcceptInputType_overlapTrigger: BooleanInput;\n  static ngAcceptInputType_hasBackdrop: BooleanInput;\n}\n\n/** @docs-public MatMenu */\n@Component({\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  host: {\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[attr.aria-describedby]': 'null',\n  },\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n  ]\n})\nexport class MatMenu extends _MatMenuBase {\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {MatMenu} from './menu';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MatMenuTrigger} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [\n    MatMenuTrigger,\n    MatMenuContent,\n  ],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [CdkScrollableModule, MatCommonModule, MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MenuCloseReason, _MatMenuBase} from './menu';\nimport {throwMatMenuMissingError, throwMatMenuRecursiveError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel, MAT_MENU_PANEL} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Directive applied to an element that should trigger a `mat-menu`. */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'class': 'mat-menu-trigger',\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * We're specifically looking for a `MatMenu` here since the generic `MatMenuPanel`\n   * interface lacks some functionality around nested menus and animations.\n   */\n  private _parentMaterialMenu: _MatMenuBase | undefined;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: Exclude<FocusOrigin, 'program' | null> | undefined = undefined;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatMenuRecursiveError();\n      }\n\n      this._menuCloseSubscription = menu.close.subscribe((reason: MenuCloseReason) => {\n        this._destroyMenu(reason);\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n          this._parentMaterialMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Inject(MAT_MENU_PANEL) @Optional() parentMenu: MatMenuPanel,\n              // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n              // tslint:disable-next-line: lightweight-tokens\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n    this._scrollStrategy = scrollStrategy;\n    this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMaterialMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof _MatMenuBase) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin?: FocusOrigin, options?: FocusOptions) {\n    if (this._focusMonitor && origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu(reason: MenuCloseReason) {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    // Always restore focus if the user is navigating using the keyboard or the menu was opened\n    // programmatically. We don't restore for non-root triggers, because it can prevent focus\n    // from making it back to the root trigger when closing a long chain of menus by clicking\n    // on the backdrop.\n    if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = undefined;\n\n    if (menu instanceof _MatMenuBase) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe({\n            next: () => menu.lazyContent!.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._setIsMenuOpen(false)\n          });\n      } else {\n        this._setIsMenuOpen(false);\n      }\n    } else {\n      this._setIsMenuOpen(false);\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this.menu.focusFirstItem(this._openedBy || 'program');\n    this._setIsMenuOpen(true);\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withGrowAfterOpen()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      panelClass: this.menu.overlayPanelClass,\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : observableOf();\n    const hover = this._parentMaterialMenu ? this._parentMaterialMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : undefined;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Pressing enter on the trigger will trigger the click handler later.\n    if (keyCode === ENTER || keyCode === SPACE) {\n      this._openedBy = 'keyboard';\n    }\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this._openedBy = 'keyboard';\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMaterialMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu!._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow, {descendants: true}) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._checkToolbarMixedModes();\n      this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n    }\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      // Check if there are any other DOM nodes that can display content but aren't inside of\n      // a <mat-toolbar-row> element.\n      const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n        .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n        .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n        .some(node => !!(node.textContent && node.textContent.trim()));\n\n      if (isCombinedUsage) {\n        throwToolbarMixedModesError();\n      }\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility: Set<string> = new Set<string>();\n\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode: HTMLStyleElement | undefined;\n\n/** A utility for calling matchMedia queries. */\n@Injectable({providedIn: 'root'})\nexport class MediaMatcher {\n  /** The internal matchMedia method to return back a MediaQueryList like object. */\n  private _matchMedia: (query: string) => MediaQueryList;\n\n  constructor(private _platform: Platform) {\n    this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n      // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n      // call it from a different scope.\n      window.matchMedia.bind(window) :\n      noopMatchMedia;\n  }\n\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   */\n  matchMedia(query: string): MediaQueryList {\n    if (this._platform.WEBKIT) {\n      createEmptyStyleRule(query);\n    }\n    return this._matchMedia(query);\n  }\n}\n\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n */\nfunction createEmptyStyleRule(query: string) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head!.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      (mediaQueryStyleNode.sheet as CSSStyleSheet)\n          .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query: string): MediaQueryList {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {}\n  } as any;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DomPortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ChangeDetectorRef,\n  ComponentFactoryResolver,\n  Directive,\n  Inject,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_MENU_CONTENT = new InjectionToken<MatMenuContent>('MatMenuContent');\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]',\n  providers: [{provide: MAT_MENU_CONTENT, useExisting: MatMenuContent}],\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any,\n    private _changeDetectorRef?: ChangeDetectorRef) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n\n    // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n    // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n    // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n    // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n    // @breaking-change 9.0.0 Make change detector ref required\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  overlayPanelClass?: string|string[];\n  hasBackdrop?: boolean;\n  readonly panelId?: string;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  addItem?: (item: T) => void;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  removeItem?: (item: T) => void;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * ![](skip.png)\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray} from '@angular/cdk/coercion';\nimport {Injectable, NgZone, OnDestroy} from '@angular/core';\nimport {combineLatest, concat, Observable, Observer, Subject} from 'rxjs';\nimport {debounceTime, map, skip, startWith, take, takeUntil} from 'rxjs/operators';\nimport {MediaMatcher} from './media-matcher';\n\n\n/** The current state of a layout breakpoint. */\nexport interface BreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /**\n   * A key boolean pair for each query provided to the observe method,\n   * with its current matched state.\n   */\n  breakpoints: {\n    [key: string]: boolean;\n  };\n}\n\n/** The current state of a layout breakpoint. */\ninterface InternalBreakpointState {\n  /** Whether the breakpoint is currently matching. */\n  matches: boolean;\n  /** The media query being to be matched */\n  query: string;\n}\n\ninterface Query {\n  observable: Observable<InternalBreakpointState>;\n  mql: MediaQueryList;\n}\n\n/** Utility for checking the matching state of @media queries. */\n@Injectable({providedIn: 'root'})\nexport class BreakpointObserver implements OnDestroy {\n  /**  A map of all media queries currently being listened for. */\n  private _queries = new Map<string, Query>();\n  /** A subject for all other observables to takeUntil based on. */\n  private _destroySubject = new Subject<void>();\n\n  constructor(private _mediaMatcher: MediaMatcher, private _zone: NgZone) {}\n\n  /** Completes the active subject, signalling to all other observables to complete. */\n  ngOnDestroy() {\n    this._destroySubject.next();\n    this._destroySubject.complete();\n  }\n\n  /**\n   * Whether one or more media queries match the current viewport size.\n   * @param value One or more media queries to check.\n   * @returns Whether any of the media queries match.\n   */\n  isMatched(value: string | readonly string[]): boolean {\n    const queries = splitQueries(coerceArray(value));\n    return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n  }\n\n  /**\n   * Gets an observable of results for the given queries that will emit new results for any changes\n   * in matching of the given queries.\n   * @param value One or more media queries to check.\n   * @returns A stream of matches for the given queries.\n   */\n  observe(value: string | readonly string[]): Observable<BreakpointState> {\n    const queries = splitQueries(coerceArray(value));\n    const observables = queries.map(query => this._registerQuery(query).observable);\n\n    let stateObservable = combineLatest(observables);\n    // Emit the first state immediately, and then debounce the subsequent emissions.\n    stateObservable = concat(\n      stateObservable.pipe(take(1)),\n      stateObservable.pipe(skip(1), debounceTime(0)));\n    return stateObservable.pipe(map(breakpointStates => {\n      const response: BreakpointState = {\n        matches: false,\n        breakpoints: {},\n      };\n      breakpointStates.forEach(({matches, query}) => {\n        response.matches = response.matches || matches;\n        response.breakpoints[query] = matches;\n      });\n      return response;\n    }));\n  }\n\n  /** Registers a specific query to be listened for. */\n  private _registerQuery(query: string): Query {\n    // Only set up a new MediaQueryList if it is not already being listened for.\n    if (this._queries.has(query)) {\n      return this._queries.get(query)!;\n    }\n\n    const mql = this._mediaMatcher.matchMedia(query);\n\n    // Create callback for match changes and add it is as a listener.\n    const queryObservable = new Observable((observer: Observer<MediaQueryList>) => {\n      // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      const handler = (e: any) => this._zone.run(() => observer.next(e));\n      mql.addListener(handler);\n\n      return () => {\n        mql.removeListener(handler);\n      };\n    }).pipe(\n      startWith(mql),\n      map(({matches}) => ({query, matches})),\n      takeUntil(this._destroySubject)\n    );\n\n    // Add the MediaQueryList to the set of queries.\n    const output = {observable: queryObservable, mql};\n    this._queries.set(query, output);\n    return output;\n  }\n}\n\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries: readonly string[]): readonly string[] {\n  return queries.map(query => query.split(','))\n                .reduce((a1, a2) => a1.concat(a2))\n                .map(query => query.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nexport const Breakpoints = {\n  XSmall: '(max-width: 599.98px)',\n  Small: '(min-width: 600px) and (max-width: 959.98px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n  XLarge: '(min-width: 1920px)',\n\n  Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n           '(max-width: 959.98px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n          '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' +\n       '(min-width: 1280px) and (orientation: landscape)',\n\n  HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n\n  HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n","/*****************************************************************************************************************************************************\n * Copyright 2021 Evan H. Harding. All Rights Reserved.\n *\n * This module contains all commonly used components, directives, modules, and pipes that are used across the application.\n *\n * {@link https://angular.io/guide/sharing-ngmodules#sharing-modules | Angular Sharing Modules Guide}\n ****************************************************************************************************************************************************/\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  exports : [BrowserAnimationsModule, CommonModule, FormsModule, HttpClientModule, RouterModule]\n})\nexport class SharedModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {InternalFormsSharedModule, NG_MODEL_WITH_FORM_CONTROL_WARNING, REACTIVE_DRIVEN_DIRECTIVES, TEMPLATE_DRIVEN_DIRECTIVES} from './directives';\nimport {RadioControlRegistry} from './directives/radio_control_value_accessor';\nimport {FormBuilder} from './form_builder';\n\n/**\n * Exports the required providers and directives for template-driven forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Overview](/guide/forms-overview)\n * @see [Template-driven Forms Guide](/guide/forms)\n *\n * @publicApi\n */\n@NgModule({\n  declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n  providers: [RadioControlRegistry],\n  exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n})\nexport class FormsModule {\n}\n\n/**\n * Exports the required infrastructure and directives for reactive forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Overview](guide/forms-overview)\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * @publicApi\n */\n@NgModule({\n  declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n  providers: [FormBuilder, RadioControlRegistry],\n  exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n})\nexport class ReactiveFormsModule {\n  /**\n   * @description\n   * Provides options for configuring the reactive forms module.\n   *\n   * @param opts An object of configuration options\n   * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`\n   * binding is used with reactive form directives.\n   */\n  static withConfig(opts: {\n    /** @deprecated as of v6 */ warnOnNgModelWithFormControl: 'never'|'once'|'always'\n  }): ModuleWithProviders<ReactiveFormsModule> {\n    return {\n      ngModule: ReactiveFormsModule,\n      providers: [\n        {provide: NG_MODEL_WITH_FORM_CONTROL_WARNING, useValue: opts.warnOnNgModelWithFormControl}\n      ]\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, Type} from '@angular/core';\n\nimport {CheckboxControlValueAccessor} from './directives/checkbox_value_accessor';\nimport {DefaultValueAccessor} from './directives/default_value_accessor';\nimport {NgControlStatus, NgControlStatusGroup} from './directives/ng_control_status';\nimport {NgForm} from './directives/ng_form';\nimport {NgModel} from './directives/ng_model';\nimport {NgModelGroup} from './directives/ng_model_group';\nimport {NgNoValidate} from './directives/ng_no_validate_directive';\nimport {NumberValueAccessor} from './directives/number_value_accessor';\nimport {RadioControlValueAccessor} from './directives/radio_control_value_accessor';\nimport {RangeValueAccessor} from './directives/range_value_accessor';\nimport {FormControlDirective} from './directives/reactive_directives/form_control_directive';\nimport {FormControlName} from './directives/reactive_directives/form_control_name';\nimport {FormGroupDirective} from './directives/reactive_directives/form_group_directive';\nimport {FormArrayName, FormGroupName} from './directives/reactive_directives/form_group_name';\nimport {NgSelectOption, SelectControlValueAccessor} from './directives/select_control_value_accessor';\nimport {NgSelectMultipleOption, SelectMultipleControlValueAccessor} from './directives/select_multiple_control_value_accessor';\nimport {CheckboxRequiredValidator, EmailValidator, MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator} from './directives/validators';\n\nexport {CheckboxControlValueAccessor} from './directives/checkbox_value_accessor';\nexport {ControlValueAccessor} from './directives/control_value_accessor';\nexport {DefaultValueAccessor} from './directives/default_value_accessor';\nexport {NgControl} from './directives/ng_control';\nexport {NgControlStatus, NgControlStatusGroup} from './directives/ng_control_status';\nexport {NgForm} from './directives/ng_form';\nexport {NgModel} from './directives/ng_model';\nexport {NgModelGroup} from './directives/ng_model_group';\nexport {NumberValueAccessor} from './directives/number_value_accessor';\nexport {RadioControlValueAccessor} from './directives/radio_control_value_accessor';\nexport {RangeValueAccessor} from './directives/range_value_accessor';\nexport {FormControlDirective, NG_MODEL_WITH_FORM_CONTROL_WARNING} from './directives/reactive_directives/form_control_directive';\nexport {FormControlName} from './directives/reactive_directives/form_control_name';\nexport {FormGroupDirective} from './directives/reactive_directives/form_group_directive';\nexport {FormArrayName, FormGroupName} from './directives/reactive_directives/form_group_name';\nexport {NgSelectOption, SelectControlValueAccessor} from './directives/select_control_value_accessor';\nexport {NgSelectMultipleOption, SelectMultipleControlValueAccessor} from './directives/select_multiple_control_value_accessor';\n\nexport const SHARED_FORM_DIRECTIVES: Type<any>[] = [\n  NgNoValidate,\n  NgSelectOption,\n  NgSelectMultipleOption,\n  DefaultValueAccessor,\n  NumberValueAccessor,\n  RangeValueAccessor,\n  CheckboxControlValueAccessor,\n  SelectControlValueAccessor,\n  SelectMultipleControlValueAccessor,\n  RadioControlValueAccessor,\n  NgControlStatus,\n  NgControlStatusGroup,\n  RequiredValidator,\n  MinLengthValidator,\n  MaxLengthValidator,\n  PatternValidator,\n  CheckboxRequiredValidator,\n  EmailValidator,\n];\n\nexport const TEMPLATE_DRIVEN_DIRECTIVES: Type<any>[] = [NgModel, NgModelGroup, NgForm];\n\nexport const REACTIVE_DRIVEN_DIRECTIVES: Type<any>[] =\n    [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\n@NgModule({\n  declarations: SHARED_FORM_DIRECTIVES,\n  exports: SHARED_FORM_DIRECTIVES,\n})\nexport class ɵInternalFormsSharedModule {\n}\n\nexport {ɵInternalFormsSharedModule as InternalFormsSharedModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, forwardRef, Injectable, Injector, Input, OnDestroy, OnInit, Renderer2} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\n\nexport const RADIO_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RadioControlValueAccessor),\n  multi: true\n};\n\nfunction throwNameError() {\n  throw new Error(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n}\n\n/**\n * @description\n * Class used by Angular to track radio buttons. For internal use only.\n */\n@Injectable()\nexport class RadioControlRegistry {\n  private _accessors: any[] = [];\n\n  /**\n   * @description\n   * Adds a control to the internal registry. For internal use only.\n   */\n  add(control: NgControl, accessor: RadioControlValueAccessor) {\n    this._accessors.push([control, accessor]);\n  }\n\n  /**\n   * @description\n   * Removes a control from the internal registry. For internal use only.\n   */\n  remove(accessor: RadioControlValueAccessor) {\n    for (let i = this._accessors.length - 1; i >= 0; --i) {\n      if (this._accessors[i][1] === accessor) {\n        this._accessors.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @description\n   * Selects a radio button. For internal use only.\n   */\n  select(accessor: RadioControlValueAccessor) {\n    this._accessors.forEach((c) => {\n      if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n        c[1].fireUncheck(accessor.value);\n      }\n    });\n  }\n\n  private _isSameGroup(\n      controlPair: [NgControl, RadioControlValueAccessor],\n      accessor: RadioControlValueAccessor): boolean {\n    if (!controlPair[0].control) return false;\n    return controlPair[0]._parent === accessor._control._parent &&\n        controlPair[1].name === accessor.name;\n  }\n}\n\n/**\n * @description\n * The `ControlValueAccessor` for writing radio control values and listening to radio control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using radio buttons with reactive form directives\n *\n * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in\n * a reactive form, radio buttons in the same group should have the same `formControlName`.\n * Providing a `name` attribute is optional.\n *\n * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\n@Directive({\n  selector:\n      'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n  host: {'(change)': 'onChange()', '(blur)': 'onTouched()'},\n  providers: [RADIO_VALUE_ACCESSOR]\n})\nexport class RadioControlValueAccessor implements ControlValueAccessor, OnDestroy, OnInit {\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _state!: boolean;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _control!: NgControl;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _fn!: Function;\n\n  /**\n   * The registered callback function called when a change event occurs on the input element.\n   * @nodoc\n   */\n  onChange = () => {};\n\n  /**\n   * The registered callback function called when a blur event occurs on the input element.\n   * @nodoc\n   */\n  onTouched = () => {};\n\n  /**\n   * @description\n   * Tracks the name of the radio input element.\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input() name!: string;\n\n  /**\n   * @description\n   * Tracks the name of the `FormControl` bound to the directive. The name corresponds\n   * to a key in the parent `FormGroup` or `FormArray`.\n   */\n  // TODO(issue/24571): remove '!'.\n  @Input() formControlName!: string;\n\n  /**\n   * @description\n   * Tracks the value of the radio input element\n   */\n  @Input() value: any;\n\n  constructor(\n      private _renderer: Renderer2, private _elementRef: ElementRef,\n      private _registry: RadioControlRegistry, private _injector: Injector) {}\n\n  /** @nodoc */\n  ngOnInit(): void {\n    this._control = this._injector.get(NgControl);\n    this._checkName();\n    this._registry.add(this._control, this);\n  }\n\n  /** @nodoc */\n  ngOnDestroy(): void {\n    this._registry.remove(this);\n  }\n\n  /**\n   * Sets the \"checked\" property value on the radio input element.\n   * @nodoc\n   */\n  writeValue(value: any): void {\n    this._state = value === this.value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n  }\n\n  /**\n   * Registers a function called when the control value changes.\n   * @nodoc\n   */\n  registerOnChange(fn: (_: any) => {}): void {\n    this._fn = fn;\n    this.onChange = () => {\n      fn(this.value);\n      this._registry.select(this);\n    };\n  }\n\n  /**\n   * Sets the \"value\" on the radio input element and unchecks it.\n   *\n   * @param value\n   */\n  fireUncheck(value: any): void {\n    this.writeValue(value);\n  }\n\n  /**\n   * Registers a function called when the control is touched.\n   * @nodoc\n   */\n  registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the \"disabled\" property on the input element.\n   * @nodoc\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  private _checkName(): void {\n    if (this.name && this.formControlName && this.name !== this.formControlName &&\n        (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwNameError();\n    }\n    if (!this.name && this.formControlName) this.name = this.formControlName;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty, NumberInput} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\n/** Possible positions for a tooltip. */\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/**\n * Options for how the tooltip trigger should handle touch gestures.\n * See `MatTooltip.touchGestures` for more information.\n */\nexport type TooltipTouchGestures = 'auto' | 'on' | 'off';\n\n/** Possible visibility states of a tooltip. */\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  touchGestures?: TooltipTouchGestures;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    'class': 'mat-tooltip-trigger'\n  }\n})\nexport class MatTooltip implements OnDestroy, AfterViewInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n  private _viewInitialized = false;\n  private _pointerExitEventsInitialized = false;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay: number = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay: number = this._defaultOptions.hideDelay;\n\n  /**\n   * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n   * uses a long press gesture to show and hide, however it can conflict with the native browser\n   * gestures. To work around the conflict, Angular Material disables native gestures on the\n   * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n   * elements). The different values for this option configure the touch event handling as follows:\n   * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n   *   browser gestures on particular elements. In particular, it allows text selection on inputs\n   *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n   * - `on` - Enables touch gestures for all elements and disables native\n   *   browser gestures with no exceptions.\n   * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n   *   showing on touch devices.\n   */\n  @Input('matTooltipTouchGestures') touchGestures: TooltipTouchGestures = 'auto';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n    // away the string-conversion: https://github.com/angular/components/issues/20684\n    this._message = value != null ? String(value).trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n      this._updateTooltipMessage();\n      this._ngZone.runOutsideAngular(() => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(() => {\n          this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n        });\n      });\n    }\n  }\n  private _message = '';\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  /** Manually-bound passive event listeners. */\n  private readonly _passiveListeners:\n      (readonly [string, EventListenerOrEventListenerObject])[] = [];\n\n  /**\n   * Reference to the current document.\n   * @breaking-change 11.0.0 Remove `| null` typing for `document`.\n   */\n  private _document: Document | null;\n\n  /** Timer started at the last `touchstart` event. */\n  private _touchstartTimeout: number;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n\n    /** @breaking-change 11.0.0 _document argument to become required. */\n    @Inject(DOCUMENT) _document: any) {\n\n    this._scrollStrategy = scrollStrategy;\n\n    if (_defaultOptions) {\n      if (_defaultOptions.position) {\n        this.position = _defaultOptions.position;\n      }\n\n      if (_defaultOptions.touchGestures) {\n        this.touchGestures = _defaultOptions.touchGestures;\n      }\n    }\n\n    _ngZone.runOutsideAngular(() => {\n      _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n    });\n  }\n\n  ngAfterViewInit() {\n    // This needs to happen after view init so the initial values for all inputs have been set.\n    this._viewInitialized = true;\n    this._setupPointerEnterEventsIfNeeded();\n\n    this._focusMonitor.monitor(this._elementRef)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(origin => {\n        // Note that the focus monitor runs outside the Angular zone.\n        if (!origin) {\n          this._ngZone.run(() => this.hide(0));\n        } else if (origin === 'keyboard') {\n          this._ngZone.run(() => this.show());\n        }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    const nativeElement = this._elementRef.nativeElement;\n\n    clearTimeout(this._touchstartTimeout);\n\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    nativeElement.removeEventListener('keydown', this._handleKeydown);\n    this._passiveListeners.forEach(([event, listener]) => {\n      nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n    });\n    this._passiveListeners.length = 0;\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n    this._focusMonitor.stopMonitoring(nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /**\n   * Handles the keydown events on the host element.\n   * Needs to be an arrow function so that we can use it in addEventListener.\n   */\n  private _handleKeydown = (event: KeyboardEvent) => {\n    if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n      event.preventDefault();\n      event.stopPropagation();\n      this._ngZone.run(() => this.hide(0));\n    }\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition!.originX, originPosition!.originY);\n\n    return {\n      main: originPosition!,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition!.overlayX, overlayPosition!.overlayY);\n\n    return {\n      main: overlayPosition!,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n\n  /** Binds the pointer events to the tooltip trigger. */\n  private _setupPointerEnterEventsIfNeeded() {\n    // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n    if (this._disabled || !this.message || !this._viewInitialized ||\n        this._passiveListeners.length) {\n      return;\n    }\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (this._platformSupportsMouseEvents()) {\n      this._passiveListeners\n          .push(['mouseenter', () => {\n            this._setupPointerExitEventsIfNeeded();\n            this.show();\n          }]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n\n      this._passiveListeners\n          .push(['touchstart', () => {\n            // Note that it's important that we don't `preventDefault` here,\n            // because it can prevent click events from firing on the element.\n            this._setupPointerExitEventsIfNeeded();\n            clearTimeout(this._touchstartTimeout);\n            this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n          }]);\n    }\n\n    this._addListeners(this._passiveListeners);\n  }\n\n  private _setupPointerExitEventsIfNeeded() {\n    if (this._pointerExitEventsInitialized) {\n      return;\n    }\n    this._pointerExitEventsInitialized = true;\n\n    const exitListeners: (readonly [string, EventListenerOrEventListenerObject])[] = [];\n    if (this._platformSupportsMouseEvents()) {\n      exitListeners.push(\n        ['mouseleave', () => this.hide()],\n        ['wheel', event => this._wheelListener(event as WheelEvent)]\n      );\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n      const touchendListener = () => {\n        clearTimeout(this._touchstartTimeout);\n        this.hide(this._defaultOptions.touchendHideDelay);\n      };\n\n      exitListeners.push(\n        ['touchend', touchendListener],\n        ['touchcancel', touchendListener],\n      );\n    }\n\n    this._addListeners(exitListeners);\n    this._passiveListeners.push(...exitListeners);\n  }\n\n  private _addListeners(\n      listeners: ReadonlyArray<readonly [string, EventListenerOrEventListenerObject]>) {\n    listeners.forEach(([event, listener]) => {\n      this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n    });\n  }\n\n  private _platformSupportsMouseEvents() {\n    return !this._platform.IOS && !this._platform.ANDROID;\n  }\n\n  /** Listener for the `wheel` event on the element. */\n  private _wheelListener(event: WheelEvent) {\n    if (this._isTooltipVisible()) {\n      // @breaking-change 11.0.0 Remove `|| document` once the document is a required param.\n      const doc = this._document || document;\n      const elementUnderPointer = doc.elementFromPoint(event.clientX, event.clientY);\n      const element = this._elementRef.nativeElement;\n\n      // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n      // won't fire if the user scrolls away using the wheel without moving their cursor. We\n      // work around it by finding the element under the user's cursor and closing the tooltip\n      // if it's not the trigger.\n      if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n        this.hide();\n      }\n    }\n  }\n\n  /** Disables the native browser gestures, based on how the tooltip has been configured. */\n  private _disableNativeGesturesIfNecessary() {\n    const gestures = this.touchGestures;\n\n    if (gestures !== 'off') {\n      const element = this._elementRef.nativeElement;\n      const style = element.style;\n\n      // If gestures are set to `auto`, we don't disable text selection on inputs and\n      // textareas, because it prevents the user from typing into them on iOS Safari.\n      if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n        style.userSelect = (style as any).msUserSelect = style.webkitUserSelect =\n            (style as any).MozUserSelect = 'none';\n      }\n\n      // If we have `auto` gestures and the element uses native HTML dragging,\n      // we don't set `-webkit-user-drag` because it prevents the native behavior.\n      if (gestures === 'on' || !element.draggable) {\n        (style as any).webkitUserDrag = 'none';\n      }\n\n      style.touchAction = 'none';\n      style.webkitTapHighlightColor = 'transparent';\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_hideDelay: NumberInput;\n  static ngAcceptInputType_showDelay: NumberInput;\n}\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    '(body:auxclick)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<void> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide;\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/*****************************************************************************************************************************************************\n * Copyright 2021 Evan H. Harding. All Rights Reserved.\n *\n * This module serves as the repository for the applications singleton core services. All services provided here have only one instance at any point\n * in time across the entire application, in other words.\n ****************************************************************************************************************************************************/\n\nimport { BrowserModule, Title } from '@angular/platform-browser';\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nimport { SharedModule } from '@shared/shared.module';\n\nimport { throwIfAlreadyLoaded } from '@core/guards/module-import.guard';\n\nimport { ThemeService } from '@core/services/theme/theme.service';\n\nimport { ToolbarComponent } from '@core/components/toolbar/toolbar.component';\n\n@NgModule({\n  declarations : [ToolbarComponent],\n  exports : [ToolbarComponent],\n  imports : [BrowserModule, SharedModule, MatButtonModule, MatIconModule, MatMenuModule, MatToolbarModule, MatTooltipModule],\n  providers : [ThemeService, Title]\n})\nexport class CoreModule {\n  public constructor(@Optional() @SkipSelf() parentModule : CoreModule) {\n    throwIfAlreadyLoaded(parentModule, 'CoreModule');\n  }\n}\n","/*****************************************************************************************************************************************************\n * Copyright 2021 Evan H. Harding. All Rights Reserved.\n *\n * This service holds the currently active application theme and provides functionality for loading four pre-built Angular Material themes and also\n * provides logic for assigning an arbitrary CSS class to an HTML tag.\n *\n * {@link https://material.angular.io | Angular Material}\n *\n * @remarks There are currently four material themes available to the user:\n *   1) Deep Purple & Amber\n *   2) Indigo & Pink\n *   3) Pink & Blue Grey\n *   4) Purple & Green\n ****************************************************************************************************************************************************/\n\nimport { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { AVAILABLE_THEMES, ThemeBundles } from '@core/services/theme/theme.configuration';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({ providedIn : 'root' })\nexport class ThemeService {\n  private readonly _activeThemeBundleName$ : BehaviorSubject<ThemeBundles> = new BehaviorSubject<ThemeBundles>(AVAILABLE_THEMES[0].bundleName);\n\n  public constructor(@Inject(DOCUMENT) private readonly _document : Document) {\n    this.loadClientTheme(AVAILABLE_THEMES[0].bundleName); // Load The First Theme By Default\n  }\n\n  /**\n   * Provides an Observable for the currently active application theme to interested subscribers.\n   *\n   * @returns a stream for the bundleName of the currently active application theme\n   */\n  public getActiveThemeBundleName() : Observable<ThemeBundles> {\n    return this._activeThemeBundleName$.asObservable();\n  }\n\n  /**\n   * This method assigns the provided CSS class names to the element specified by elementID. Use this if you are wanting to achieve some kind of\n   * programmatic styling effect on a particular HTML element. The element ID here is referring to the ID set by using <input id=\"foo\"/>, as an\n   * example.\n   *\n   * @param cssClassList - A list of CSS class names to assign to an existing HTML element\n   * @param elementID - The unique HTML ID of the element you would like to apply CSS classes to\n   */\n  public assignCSSClassesToID(cssClassList : readonly string[], elementID : string) : void {\n    const HTML_ELEMENT : HTMLElement | null = this._document.getElementById(elementID);\n\n    // If The Element Already Exists, We Set Its `class` Attribute To The List Of Provided CSS Class Names\n    if (HTML_ELEMENT) {\n      HTML_ELEMENT.setAttribute('class', cssClassList.join(' '));\n      // Otherwise, If The Element Does Not Exist, We'll Throw An Error Since That Essentially Means Programmer Mistake\n    } else {\n      throw new ReferenceError(`The HTML ID '${ elementID }' Does Not Exist In The DOM.`);\n    }\n  }\n\n  /**\n   * This method assigns the provided CSS class names to the element specified by tagName. Use this if you are wanting to achieve some kind of\n   * programmatic styling effect on an entire tag name. For example, this is used to set the `background` attribute of <body></body>, depending\n   * on the current application theme.\n   *\n   * @param cssClassList - A list of CSS class names to assign to an existing HTML element\n   * @param tagName - The qualified HTML tag name that you would like to apply CSS classes to\n   */\n  public assignCSSClassesToTag(cssClassList : readonly string[], tagName : keyof HTMLElementTagNameMap) : void {\n    const HTML_ELEMENT : HTMLElement | null = this._document.querySelector(tagName);\n\n    // If The Element Already Exists, We Set Its `class` Attribute To The List Of Provided CSS Class Names\n    if (HTML_ELEMENT) {\n        HTML_ELEMENT.setAttribute('class', cssClassList.join(' '));\n      // Otherwise, If The Element Does Not Exist, We'll Throw An Error Since That Essentially Means Programmer Mistake\n    } else {\n      throw new ReferenceError(`The HTML Tag '${ tagName }' Does Not Exist In The DOM.`);\n    }\n  }\n\n  /**\n   * This method loads a style name that exists in the ThemeBundles enumeration, injecting the requested theme into the index.html as a <link/>. This\n   * allows for simple style switching at runtime.\n   *\n   * @param themeBundleName - A theme bundleName from one of the available application themes defined in the ThemeBundles enumeration\n   */\n  public loadClientTheme(themeBundleName : ThemeBundles) : void {\n    const HTML_LINK_ELEMENT_ID : string = 'client-theme';\n    const HTML_LINK_ELEMENT : HTMLElement | null = this._document.getElementById(HTML_LINK_ELEMENT_ID);\n    const THEME_STYLES : string = `assets/themes/${ themeBundleName }.css`;\n\n    // If The <link/> Element Already Exists, We Simply Modify Its `href` Attribute\n    if (HTML_LINK_ELEMENT) {\n      (HTML_LINK_ELEMENT as HTMLLinkElement).setAttribute('href', THEME_STYLES);\n      // Otherwise, If We're In Startup, We Create It With All The Necessary Attribute Settings\n    } else {\n      const LINK_ELEMENT : HTMLLinkElement = this._document.createElement('link');\n      LINK_ELEMENT.setAttribute('href', THEME_STYLES);\n      LINK_ELEMENT.setAttribute('id', HTML_LINK_ELEMENT_ID);\n      LINK_ELEMENT.setAttribute('rel', 'stylesheet');\n      LINK_ELEMENT.setAttribute('type', 'text/css');\n\n      // This Adds <link href=\"assets/themes/foo.css\" id=\"client-theme\" rel=\"stylesheet\" type=\"text/css\"/> To index.html's <head></head> Section\n      window.onload = () : void => {\n        this._document.head.appendChild(LINK_ELEMENT);\n      };\n    }\n\n    this._activeThemeBundleName$.next(themeBundleName);\n\n    // We'll Set The `background` Attribute Of <body></body> To `ff-bg-white` For Two Themes And `ff-bg-grey` For The Other Two\n    const BODY_TAG : keyof HTMLElementTagNameMap = 'body';\n\n    if (themeBundleName === ThemeBundles.DeepPurpleAmber || themeBundleName === ThemeBundles.IndigoPink) {\n      this.assignCSSClassesToTag(['ff-bg-white'], BODY_TAG);\n    } else {\n      this.assignCSSClassesToTag(['ff-bg-grey'], BODY_TAG);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/*****************************************************************************************************************************************************\n * Copyright 2021 Evan H. Harding. All Rights Reserved.\n ****************************************************************************************************************************************************/\n\nexport enum ThemeBundles {\n  DeepPurpleAmber = 'deeppurple-amber',\n  IndigoPink = 'indigo-pink',\n  PinkBlueGrey = 'pink-bluegrey',\n  PurpleGreen = 'purple-green'\n}\n\nexport interface Theme {\n  bundleName : ThemeBundles;\n  labelName : string;\n  backgroundColor : string;\n  buttonColor : string;\n  headerColor : string;\n}\n\nexport const AVAILABLE_THEMES : Theme[] = [\n  { bundleName : ThemeBundles.DeepPurpleAmber, labelName : 'Deep Purple & Amber', backgroundColor : '#FFFFFF', buttonColor : '#FFC107', headerColor : '#673AB7' },\n  { bundleName : ThemeBundles.IndigoPink, labelName : 'Indigo & Pink', backgroundColor : '#FFFFFF', buttonColor : '#FF4081', headerColor : '#3F51B5' },\n  { bundleName : ThemeBundles.PinkBlueGrey, labelName : 'Pink & Blue Grey', backgroundColor : '#303030', buttonColor : '#607D8B', headerColor : '#E91E63' },\n  { bundleName : ThemeBundles.PurpleGreen, labelName : 'Purple & Green', backgroundColor : '#303030', buttonColor : '#4CAF50', headerColor : '#9C27B0' }\n];\n","/*****************************************************************************************************************************************************\n * Copyright 2021 Evan H. Harding. All Rights Reserved.\n *\n * Call functions in this file whenever you'd like to protect against a certain module being imported to more than one module, or want some altogether\n * similar functionality.\n ****************************************************************************************************************************************************/\n\nimport { CoreModule } from '@core/core.module';\n\n/**\n * Throws an error if the provided parent NgModule has already been imported by another NgModule. This ensures that the module is imported a single\n * time.\n *\n * @param parentModule - The NgModule that you would like to prevent being loaded more than once in the place you call this function\n * @param moduleName - The name of the NgModule provided above\n *\n * @remarks For example, CoreModule should only be loaded a single time in app/app.module.ts. So, in core.module.ts:\n * ```typescript\n *   import { Optional, SkipSelf } from '@angular/core';\n *\n *   import { throwIfAlreadyLoaded } from '@core/guards/module-import.guard';\n *   ...\n *   export class CoreModule {\n *     constructor(@Optional() @SkipSelf() parentModule : CoreModule) {\n *       throwIfAlreadyLoaded(parentModule, 'CoreModule')\n *     }\n *   }\n * ```\n */\nexport function throwIfAlreadyLoaded(parentModule : CoreModule, moduleName : string) : void {\n  if (parentModule) { // eslint-disable-line @typescript-eslint/no-unnecessary-condition\n    throw new Error(`${ moduleName } Has Already Been Loaded. Import Such Modules Only Once.`);\n  }\n}\n","<!----------------------------------------------------------------------------------------------------------------------------------------------------\n ~ Copyright 2021 Evan H. Harding. All Rights Reserved.\n ~\n ~ This file serves as the template for the always-visible toolbar that lies at the top of the screen and stretches across its length. It has a button\n ~ on the left which, when clicked, takes the user home. On the right is a material theme switching menu and a link to the GitHub repository.\n ---------------------------------------------------------------------------------------------------------------------------------------------------->\n\n<nav aria-label=\"Top Toolbar\" class=\"ff-navbar\">\n  <mat-toolbar class=\"justify-content-between\" color=\"primary\">\n    <!-- Left Group Of Toolbar Items -->\n    <div>\n      <!-- The First Item In The Left Group Is The `Fan Fiction` Button Which Links The User To The Home Page -->\n      <a routerLink=\"/about\">\n        <button mat-button aria-label=\"Toolbar Home Page Button\">\n          <mat-icon aria-hidden=\"true\" class=\"mr-2\">language</mat-icon>\n          {{ applicationTitle }}\n        </button>\n      </a>\n\n      <!-- The Second Item In The Left Group Is The `About` Button Which Links The User To The About Page -->\n      <a routerLink=\"/about\">\n        <button mat-button aria-label=\"Toolbar About Page Button\">About</button>\n      </a>\n    </div>\n\n    <!-- Right Group Of Toolbar Items -->\n    <div>\n      <!-- The First Item In The Right Group Is The Theme Switcher Menu -->\n      <button mat-icon-button aria-label=\"Toolbar Theme Selection Button\" matTooltip=\"Select A Theme For The Application\" [matMenuTriggerFor]=\"menu\">\n        <mat-icon aria-hidden=\"true\">palette</mat-icon>\n      </button>\n      <mat-menu #menu=\"matMenu\">\n        <button mat-menu-item *ngFor=\"let theme of availableThemes\" [disabled]=\"theme.bundleName === activeTheme\" (click)=\"setApplicationTheme(theme.bundleName)\">\n          <!-- Display A Checkmark Next To The Active Theme -->\n          <mat-icon *ngIf=\"theme.bundleName === activeTheme\" aria-hidden=\"true\" class=\"mr-2\">check</mat-icon>\n          <!-- Display An Empty Icon Which Acts Like A Spacer Next To All Of The Other Themes -->\n          <mat-icon *ngIf=\"!(theme.bundleName === activeTheme)\" aria-hidden=\"true\" class=\"mr-2\"></mat-icon>\n\n          <mat-icon aria-hidden=\"true\" class=\"mr-2\">\n            <svg viewBox=\"0 0 80 80\">\n              <defs>\n                <path id=\"a\" d=\"M77.87 0C79.05 0 80 .95 80 2.13v75.74c0 1.17-.95 2.13-2.13 2.13H2.13C.96 80 0 79.04 0 77.87V2.13C0 .95.96 0 2.13 0h75.74z\"></path>\n                <path id=\"b\" d=\"M54 40c3.32 0 6 2.69 6 6 0 1.2 0-1.2 0 0 0 3.31-2.68 6-6 6H26c-3.31 0-6-2.69-6-6 0-1.2 0 1.2 0 0 0-3.31 2.69-6 6-6h28z\"></path>\n                <path id=\"c\" d=\"M0 0h80v17.24H0V0z\"></path>\n              </defs>\n              <use xlink:href=\"#a\" [attr.fill]=\"theme.backgroundColor\"></use>\n              <use xlink:href=\"#b\" [attr.fill]=\"theme.buttonColor\"></use>\n              <use xlink:href=\"#c\" [attr.fill]=\"theme.headerColor\"></use>\n            </svg>\n          </mat-icon>\n          {{ theme.labelName }}\n        </button>\n      </mat-menu>\n\n      <!-- The Second Item In The Right Group Is A Button Which Links To The GitHub Repository -->\n      <a href=\"{{ gitHubURL }}\" target=\"_blank\">\n        <button mat-button aria-label=\"Toolbar GitHub Repository Button\">\n          <img alt=\"GitHub Repository\" aria-hidden=\"true\" class=\"ff-github-logo mr-2\" src=\"assets/icons/github-logo.svg\">\n          GitHub\n        </button>\n      </a>\n    </div>\n  </mat-toolbar>\n</nav>\n","/*****************************************************************************************************************************************************\n * Copyright 2021 Evan H. Harding. All Rights Reserved.\n ****************************************************************************************************************************************************/\n\nimport { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\n\nimport { AVAILABLE_THEMES, Theme, ThemeBundles } from '@core/services/theme/theme.configuration';\nimport { ThemeService } from '@core/services/theme/theme.service';\n\nimport { ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  changeDetection : ChangeDetectionStrategy.OnPush,\n  selector : 'ff-toolbar',\n  styleUrls : ['toolbar.component.scss'],\n  templateUrl : 'toolbar.component.html'\n})\nexport class ToolbarComponent implements OnInit, OnDestroy {\n  public readonly applicationTitle : string = this._titleService.getTitle();\n  public readonly gitHubURL : string = 'https://github.com/ehharding/FanFiction.com';\n  public readonly availableThemes : Theme[] = AVAILABLE_THEMES;\n\n  public activeTheme : ThemeBundles | undefined;\n\n  private readonly _componentDestroyed$ : ReplaySubject<boolean> = new ReplaySubject<boolean>(1);\n\n  public constructor(private readonly _themeService : ThemeService, private readonly _titleService : Title) { }\n\n  public ngOnInit() : void {\n    this._themeService.getActiveThemeBundleName().pipe(takeUntil(this._componentDestroyed$)).subscribe((activeTheme : ThemeBundles) : void => {\n      this.activeTheme = activeTheme;\n    });\n  }\n\n  public ngOnDestroy() : void {\n    this._componentDestroyed$.next(true);\n    this._componentDestroyed$.complete();\n  }\n\n  /**\n   * Sets the application theme using the Theme Service.\n   *\n   * @param themeBundleName - The themeBundleName of the theme to set from one of the available defined in the ThemeBundles enumeration\n   *\n   * @see ThemeService\n   */\n  public setApplicationTheme(themeBundleName : ThemeBundles) : void {\n    this._themeService.loadClientTheme(themeBundleName);\n  }\n}\n","/*****************************************************************************************************************************************************\n * Copyright 2021 Evan H. Harding. All Rights Reserved.\n *\n * This module serves as the core, or root, module and is bootstrapped to start the application. It imports all other feature modules to aid in\n * application modularity and scalability, often asynchronously.\n *\n * {@link https://angular.io/guide/architecture#modules | Angular Module Guide}\n ****************************************************************************************************************************************************/\n\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from 'app/app-routing.module';\nimport { CoreModule } from '@core/core.module';\nimport { SharedModule } from '@shared/shared.module';\n\nimport { AppComponent } from 'app/app.component';\n\n@NgModule({\n  bootstrap : [AppComponent],\n  declarations : [AppComponent],\n  imports : [AppRoutingModule, CoreModule, SharedModule]\n})\nexport class AppModule { }\n","/*****************************************************************************************************************************************************\n * Copyright 2021 Evan H. Harding. All Rights Reserved.\n *\n * This component serves as the core, or root, component. It is always present and forms the main application view.\n *\n * {@link https://angular.io/guide/architecture#components | Angular Component Guide}\n ****************************************************************************************************************************************************/\n\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  changeDetection : ChangeDetectionStrategy.OnPush,\n  selector : 'ff-root',\n  styleUrls : ['app.component.scss'],\n  templateUrl : 'app.component.html'\n})\nexport class AppComponent { }\n","<!----------------------------------------------------------------------------------------------------------------------------------------------------\n ~ Copyright 2021 Evan H. Harding. All Rights Reserved.\n ~\n ~ This file serves as the core, or root, component template. It is always present and forms the main application template.\n ~\n ~ {@link https://angular.io/guide/architecture#components Angular Component Guide}\n ---------------------------------------------------------------------------------------------------------------------------------------------------->\n\n<div class=\"ff-app\">\n  <ff-toolbar class=\"ff-toolbar mat-elevation-z6\"></ff-toolbar>\n\n  <router-outlet></router-outlet>\n</div>\n","/*****************************************************************************************************************************************************\n * Copyright 2021 Evan H. Harding. All Rights Reserved.\n *\n * This file serves as the main entry point for the application. It compiles the application and bootstraps the root module, conventionally called\n * AppModule, to run in the browser.\n *\n * {@link https://angular.io/guide/file-structure#application-source-files | Angular File Structure Guide}\n ****************************************************************************************************************************************************/\n\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { ENVIRONMENT } from '@environment/environment';\n\nimport { AppModule } from 'app/app.module';\n\nif (ENVIRONMENT.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule).catch((genericError : unknown) : void => {\n  console.error(genericError);\n});\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";","/** @prettier */\nimport { Subscription } from './Subscription';\nimport { Subscriber } from './Subscriber';\nimport { Observable } from './Observable';\nimport { subscribeTo } from './util/subscribeTo';\n\ninterface SimpleOuterSubscriberLike<T> {\n  /**\n   * A handler for inner next notifications from the inner subscription\n   * @param innerValue the value nexted by the inner producer\n   */\n  notifyNext(innerValue: T): void;\n  /**\n   * A handler for inner error notifications from the inner subscription\n   * @param err the error from the inner producer\n   */\n  notifyError(err: any): void;\n  /**\n   * A handler for inner complete notifications from the inner subscription.\n   */\n  notifyComplete(): void;\n}\n\nexport class SimpleInnerSubscriber<T> extends Subscriber<T> {\n  constructor(private parent: SimpleOuterSubscriberLike<any>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this.parent.notifyNext(value);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete();\n    this.unsubscribe();\n  }\n}\n\nexport class ComplexInnerSubscriber<T, R> extends Subscriber<R> {\n  constructor(private parent: ComplexOuterSubscriber<T, R>, public outerValue: T, public outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n\nexport class SimpleOuterSubscriber<T, R> extends Subscriber<T> implements SimpleOuterSubscriberLike<R> {\n  notifyNext(innerValue: R): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.destination.complete();\n  }\n}\n\n/**\n * DO NOT USE (formerly \"OuterSubscriber\")\n * TODO: We want to refactor this and remove it. It is retaining values it shouldn't for long\n * periods of time.\n */\nexport class ComplexOuterSubscriber<T, R> extends Subscriber<T> {\n  /**\n   * @param _outerValue Used by: bufferToggle, delayWhen, windowToggle\n   * @param innerValue Used by: subclass default, combineLatest, race, bufferToggle, windowToggle, withLatestFrom\n   * @param _outerIndex Used by: combineLatest, race, withLatestFrom\n   * @param _innerSub Used by: delayWhen\n   */\n  notifyNext(_outerValue: T, innerValue: R, _outerIndex: number, _innerSub: ComplexInnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any): void {\n    this.destination.error(error);\n  }\n\n  /**\n   * @param _innerSub Used by: race, bufferToggle, delayWhen, windowToggle, windowWhen\n   */\n  notifyComplete(_innerSub: ComplexInnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n\nexport function innerSubscribe(result: any, innerSubscriber: Subscriber<any>): Subscription | undefined {\n  if (innerSubscriber.closed) {\n    return undefined;\n  }\n  if (result instanceof Observable) {\n    return result.subscribe(innerSubscriber);\n  }\n  return subscribeTo(result)(innerSubscriber) as Subscription;\n}\n"]}