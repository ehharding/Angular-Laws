{"version":3,"file":"ContributorsModule.js","mappings":"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","names":["nextId","CDK_ACCORDION","InjectionToken","CdkAccordion","constructor","this","Subject","_multi","multi","coerceBooleanProperty","openAll","_openCloseAllActions","next","closeAll","ngOnChanges","changes","_stateChanges","ngOnDestroy","complete","provide","useExisting","e","CdkAccordionItem","accordion","_changeDetectorRef","_expansionDispatcher","t","i","r","Subscription","EventEmitter","_expanded","_disabled","_removeUniqueSelectionListener","listen","id","accordionId","expanded","_openCloseAllSubscription","_subscribeToOpenCloseAllActions","expandedChange","emit","opened","notify","closed","markForCheck","disabled","destroyed","unsubscribe","toggle","close","open","subscribe","i0","i1","useValue","undefined","CdkAccordionModule","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","B","indicatorRotate","trigger","state","style","transform","transition","animate","bodyExpansion","height","visibility","MAT_EXPANSION_PANEL","MatExpansionPanelContent","_expansionPanel","_template","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","super","s","O","_hideToggle","_bodyAnimationDone","pipe","distinctUntilChanged","x","y","fromState","toState","event","afterExpand","afterCollapse","hideToggle","value","togglePosition","_togglePosition","_hasSpacing","displayMode","_getExpandedState","ngAfterContentInit","_lazyContent","startWith","filter","_portal","take","TemplatePortal","_inputChanges","_containsFocus","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","DOCUMENT","ANIMATION_MODULE_TYPE","ie","ngContentSelectors","re","dependencies","i2","styles","matExpansionAnimations","changeDetection","MatExpansionPanelHeaderBase","_MatExpansionPanelHeaderMixinBase","mixinTabIndex","MatExpansionPanelHeader","panel","_element","_focusMonitor","tabIndex","accordionHideToggleChange","EMPTY","parseInt","_parentChangeSubscription","merge","focusVia","expandedHeight","collapsedHeight","_toggle","_isExpanded","_getPanelId","_getTogglePosition","_showToggle","_getHeaderHeight","isExpanded","_keydown","keyCode","SPACE","ENTER","hasModifierKey","preventDefault","_handleHeaderKeydown","focus","origin","options","ngAfterViewInit","monitor","_handleHeaderFocus","stopMonitoring","i1.MatExpansionPanel","le","i3","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","QueryList","show","_headers","headers","_ownHeaders","reset","header","notifyOnChanges","_keyManager","FocusKeyManager","withWrap","withHomeAndEnd","onKeydown","updateActiveItem","destroy","MatExpansionModule","CommonModule","MatCommonModule","PortalModule","ContributorService","_httpClient","Object","BehaviorSubject","fetchAllContributors","get","ConfigService","allContributors","_allContributors$","_contributorsFetchError$","error","getAllContributors$","asObservable","getContributorsFetchError$","factory","ContributorsComponent","_contributorService","AppRoute","ReplaySubject","_onResize","$windowResizeEvent","initialize","mobileView","window","innerWidth","ngOnInit","takeUntil","_componentDestroyed$","contributorsFetchError","contributorsFetchErrorInfo","CONTRIBUTOR","contributorNamesKebab","push","firstName","lastName","toLowerCase","replace","detectChanges","status","APP_CONSTANTS","httpStatusText","selectors","ctx","ROUTES","path","component","ContributorsRoutingModule","RouterModule","ContributorsModule","imports","MatButtonModule","MatCardModule","MatFormFieldModule","MatIconModule","MatTooltipModule","SharedModule"],"sourceRoot":"webpack:///","sources":["../src/cdk/accordion/accordion.ts","../src/cdk/accordion/accordion-item.ts","../src/cdk/accordion/accordion-module.ts","../src/material/expansion/expansion-panel-content.ts","../src/material/expansion/expansion-panel-header.html","../src/material/expansion/accordion-base.ts","../src/material/expansion/expansion-animations.ts","../src/material/expansion/expansion-panel-base.ts","../src/material/expansion/expansion-panel.ts","../src/material/expansion/expansion-panel.html","../src/material/expansion/expansion-panel-header.ts","../src/material/expansion/accordion.ts","../src/material/expansion/expansion-module.ts","./src/app/contributors/services/contributor/contributor.service.ts","./src/app/contributors/contributors.component.html","./src/app/contributors/contributors.component.ts","./src/app/contributors/contributors-routing.module.ts","./src/app/contributors/contributors.module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, InjectionToken, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_ACCORDION = new InjectionToken<CdkAccordion>('CdkAccordion');\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n  providers: [{provide: CDK_ACCORDION, useExisting: CdkAccordion}],\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id: string = `cdk-accordion-${nextId++}`;\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input()\n  get multi(): boolean {\n    return this._multi;\n  }\n  set multi(multi: BooleanInput) {\n    this._multi = coerceBooleanProperty(multi);\n  }\n  private _multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    if (this._multi) {\n      this._openCloseAllActions.next(true);\n    }\n  }\n\n  /** Closes all enabled accordion items in an accordion where multi is enabled. */\n  closeAll(): void {\n    this._openCloseAllActions.next(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._openCloseAllActions.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CDK_ACCORDION, CdkAccordion} from './accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs';\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n    // registering to the same accordion.\n    {provide: CDK_ACCORDION, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnDestroy {\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() readonly destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() readonly expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\n\n  /** Whether the AccordionItem is expanded. */\n  @Input()\n  get expanded(): boolean {\n    return this._expanded;\n  }\n  set expanded(expanded: BooleanInput) {\n    expanded = coerceBooleanProperty(expanded);\n\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(disabled: BooleanInput) {\n    this._disabled = coerceBooleanProperty(disabled);\n  }\n  private _disabled = false;\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(\n    @Optional() @Inject(CDK_ACCORDION) @SkipSelf() public accordion: CdkAccordion,\n    private _changeDetectorRef: ChangeDetectorRef,\n    protected _expansionDispatcher: UniqueSelectionDispatcher,\n  ) {\n    this._removeUniqueSelectionListener = _expansionDispatcher.listen(\n      (id: string, accordionId: string) => {\n        if (\n          this.accordion &&\n          !this.accordion.multi &&\n          this.accordion.id === accordionId &&\n          this.id !== id\n        ) {\n          this.expanded = false;\n        }\n      },\n    );\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAccordion} from './accordion';\nimport {CdkAccordionItem} from './accordion-item';\n\n@NgModule({\n  exports: [CdkAccordion, CdkAccordionItem],\n  declarations: [CdkAccordion, CdkAccordionItem],\n})\nexport class CdkAccordionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Inject, Optional} from '@angular/core';\nimport {MAT_EXPANSION_PANEL, MatExpansionPanelBase} from './expansion-panel-base';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]',\n})\nexport class MatExpansionPanelContent {\n  constructor(\n    public _template: TemplateRef<any>,\n    @Inject(MAT_EXPANSION_PANEL) @Optional() public _expansionPanel?: MatExpansionPanelBase,\n  ) {}\n}\n","<span class=\"mat-content\">\n  <ng-content select=\"mat-panel-title\"></ng-content>\n  <ng-content select=\"mat-panel-description\"></ng-content>\n  <ng-content></ng-content>\n</span>\n<span [@indicatorRotate]=\"_getExpandedState()\" *ngIf=\"_showToggle()\"\n      class=\"mat-expansion-indicator\"></span>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition(\n      'expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ),\n  ]),\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition(\n      'expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ),\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\n\n/**\n * Base interface for a `MatExpansionPanel`.\n * @docs-private\n */\nexport interface MatExpansionPanelBase extends CdkAccordionItem {\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Token used to provide a `MatExpansionPanel` to `MatExpansionPanelContent`.\n * Used to avoid circular imports between `MatExpansionPanel` and `MatExpansionPanelContent`.\n */\nexport const MAT_EXPANSION_PANEL = new InjectionToken<MatExpansionPanelBase>('MAT_EXPANSION_PANEL');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {distinctUntilChanged, filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordionBase, MatAccordionTogglePosition, MAT_ACCORDION} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MAT_EXPANSION_PANEL} from './expansion-panel-base';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n  new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  styleUrls: ['expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: 'expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n    {provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n})\nexport class MatExpansionPanel\n  extends CdkAccordionItem\n  implements AfterContentInit, OnChanges, OnDestroy\n{\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: BooleanInput) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() readonly afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() readonly afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  override accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  readonly _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(\n    @Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n    _changeDetectorRef: ChangeDetectorRef,\n    _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) _document: any,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n    @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS)\n    @Optional()\n    defaultOptions?: MatExpansionPanelDefaultOptions,\n  ) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone\n      .pipe(\n        distinctUntilChanged((x, y) => {\n          return x.fromState === y.fromState && x.toState === y.toState;\n        }),\n      )\n      .subscribe(event => {\n        if (event.fromState !== 'void') {\n          if (event.toState === 'expanded') {\n            this.afterExpand.emit();\n          } else if (event.toState === 'collapsed') {\n            this.afterCollapse.emit();\n          }\n        }\n      });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  /** Toggles the expanded state of the expansion panel. */\n  override toggle(): void {\n    this.expanded = !this.expanded;\n  }\n\n  /** Sets the expanded state of the expansion panel to false. */\n  override close(): void {\n    this.expanded = false;\n  }\n\n  /** Sets the expanded state of the expansion panel to true. */\n  override open(): void {\n    this.expanded = true;\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent && this._lazyContent._expansionPanel === this) {\n      // Render the content as soon as the panel becomes open.\n      this.opened\n        .pipe(\n          startWith(null),\n          filter(() => this.expanded && !this._portal),\n          take(1),\n        )\n        .subscribe(() => {\n          this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n        });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row',\n  },\n})\nexport class MatExpansionPanelActionRow {}\n","<ng-content select=\"mat-expansion-panel-header\"></ng-content>\n<div class=\"mat-expansion-panel-content\"\n     role=\"region\"\n     [@bodyExpansion]=\"_getExpandedState()\"\n     (@bodyExpansion.done)=\"_bodyAnimationDone.next($event)\"\n     [attr.aria-labelledby]=\"_headerId\"\n     [id]=\"id\"\n     #body>\n  <div class=\"mat-expansion-panel-body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"_portal\"></ng-template>\n  </div>\n  <ng-content select=\"mat-action-row\"></ng-content>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {HasTabIndex, mixinTabIndex} from '@angular/material/core';\nimport {EMPTY, merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {MatAccordionTogglePosition} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n/** @docs-private */\nabstract class MatExpansionPanelHeaderBase {\n  abstract readonly disabled: boolean;\n}\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\n@Component({\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['expansion-panel-header.css'],\n  templateUrl: 'expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['tabIndex'],\n  animations: [matExpansionAnimations.indicatorRotate],\n  host: {\n    'class': 'mat-expansion-panel-header mat-focus-indicator',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[style.height]': '_getHeaderHeight()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n  },\n})\nexport class MatExpansionPanelHeader\n  extends _MatExpansionPanelHeaderMixinBase\n  implements AfterViewInit, OnDestroy, FocusableOption, HasTabIndex\n{\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS)\n    @Optional()\n    defaultOptions?: MatExpansionPanelDefaultOptions,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n    @Attribute('tabindex') tabIndex?: string,\n  ) {\n    super();\n    const accordionHideToggleChange = panel.accordion\n      ? panel.accordion._stateChanges.pipe(\n          filter(changes => !!(changes['hideToggle'] || changes['togglePosition'])),\n        )\n      : EMPTY;\n    this.tabIndex = parseInt(tabIndex || '') || 0;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(\n        filter(changes => {\n          return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n        }),\n      ),\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled(): boolean {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /**\n   * Gets the current height of the header. Null if no custom height has been\n   * specified, and if the default height from the stylesheet should be used.\n   */\n  _getHeaderHeight(): string | null {\n    const isExpanded = this._isExpanded();\n    if (isExpanded && this.expandedHeight) {\n      return this.expandedHeight;\n    } else if (!isExpanded && this.collapsedHeight) {\n      return this.collapsedHeight;\n    }\n    return null;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin?: FocusOrigin, options?: FocusOptions) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._element).subscribe(origin => {\n      if (origin && this.panel.accordion) {\n        this.panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description',\n  },\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title',\n  },\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  OnDestroy,\n} from '@angular/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {startWith} from 'rxjs/operators';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition,\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [\n    {\n      provide: MAT_ACCORDION,\n      useExisting: MatAccordion,\n    },\n  ],\n  host: {\n    class: 'mat-accordion',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if multiple panel support is enabled.\n    '[class.mat-accordion-multi]': 'this.multi',\n  },\n})\nexport class MatAccordion\n  extends CdkAccordion\n  implements MatAccordionBase, AfterContentInit, OnDestroy\n{\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  /** Headers belonging to this accordion. */\n  private _ownHeaders = new QueryList<MatExpansionPanelHeader>();\n\n  /** All headers inside the accordion. Includes headers inside nested accordions. */\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle;\n  }\n  set hideToggle(show: BooleanInput) {\n    this._hideToggle = coerceBooleanProperty(show);\n  }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._headers.changes\n      .pipe(startWith(this._headers))\n      .subscribe((headers: QueryList<MatExpansionPanelHeader>) => {\n        this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n        this._ownHeaders.notifyOnChanges();\n      });\n\n    this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    this._keyManager.onKeydown(event);\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this._ownHeaders.destroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\r\n * This service handles the retrieval of contributor-related data.\r\n */\r\n\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { BehaviorSubject, Observable, distinctUntilChanged } from 'rxjs';\r\n\r\nimport { Contributor } from '@contributors/services/contributor/contributor.model';\r\n\r\nimport { ConfigService } from '@core/services/config/config.service';\r\n\r\n@Injectable({ providedIn : 'any' })\r\nclass ContributorService {\r\n  private readonly _allContributors$ : BehaviorSubject<Contributor[]> = new BehaviorSubject<Contributor[]>([] as Contributor[]);\r\n  private readonly _contributorsFetchError$ : BehaviorSubject<HttpErrorResponse | undefined> = new BehaviorSubject<HttpErrorResponse | undefined>(undefined);\r\n\r\n  public constructor(private readonly _httpClient : HttpClient) {\r\n    this.fetchAllContributors();\r\n  }\r\n\r\n  /**\r\n   * Fetches all contributors from the database and updates the class's data with the new values, or error handles.\r\n   */\r\n  public fetchAllContributors() : void {\r\n    this._httpClient.get<Contributor[]>(ConfigService.appConfiguration.apiServer.paths.contributors.allContributors).pipe(distinctUntilChanged()).subscribe({\r\n      next : (allContributors : Contributor[]) : void => {\r\n        this._allContributors$.next(allContributors);\r\n        this._contributorsFetchError$.next(undefined);\r\n      },\r\n      error : (error : HttpErrorResponse) : void => {\r\n        this._contributorsFetchError$.next(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Provides a Contributor[]-typed Observable stream for interested subscribers to receive all contributors from the database.\r\n   *\r\n   * @returns a Contributor[]-typed Observable stream. Subscribe to the stream to receive the object type specified asynchronously.\r\n   */\r\n  public getAllContributors$() : Observable<Contributor[]> {\r\n    return this._allContributors$.asObservable().pipe(distinctUntilChanged());\r\n  }\r\n\r\n  /**\r\n   * Provides a HttpErrorResponse | undefined-typed Observable stream for interested subscribers to receive the latest error, if any, when the HTTP request to retrieve all\r\n   * contributors from the database was made.\r\n   *\r\n   * @returns a HttpErrorResponse | undefined-typed Observable stream. Subscribe to the stream to receive the object type specified asynchronously.\r\n   */\r\n  public getContributorsFetchError$() : Observable<HttpErrorResponse | undefined> {\r\n    return this._contributorsFetchError$.asObservable().pipe(distinctUntilChanged());\r\n  }\r\n}\r\n\r\nexport {\r\n  ContributorService\r\n};\r\n","<header>\n  <div class=\"m-3 row\">\n    <div class=\"mx-auto\" [ngClass]=\"{ 'pf-w-70' : !mobileView, 'w-100' : mobileView }\">\n      <h1 class=\"fs-4 mt-2\"><strong>Contributors</strong></h1>\n\n      <p>This page lists the current contributors to the project.</p>\n    </div>\n  </div>\n</header>\n\n<main>\n  <div class=\"m-3\">\n    <div class=\"mx-auto\" [ngClass]=\"{ 'pf-w-70' : !mobileView, 'w-100' : mobileView }\">\n      <mat-accordion *ngIf=\"!contributorsFetchError\" class=\"pf-headers-align\">\n        <mat-expansion-panel *ngFor=\"let contributor of allContributors; let index = index\" [expanded]=\"index === 0\">\n          <mat-expansion-panel-header>\n            <mat-panel-title>\n              <mat-icon class=\"me-3\">account_circle</mat-icon>\n              <strong>{{ contributor.firstName }} {{ contributor.lastName }}</strong>\n            </mat-panel-title>\n\n            <mat-panel-description>{{ contributor.jobTitle }}</mat-panel-description>\n          </mat-expansion-panel-header>\n\n          <ng-template matExpansionPanelContent>\n            <div class=\"d-flex justify-content-center\">\n              <mat-card class=\"mat-elevation-z0\">\n                <mat-card-header>\n                  <img mat-card-avatar alt=\"{{ contributor.firstName }} {{ contributor.lastName }}'s Avatar\" src=\"assets/avatars/{{ contributorNamesKebab[index] }}.jpg\"/>\n\n                  <mat-card-subtitle>\n                    <a routerLink=\"/{{ AppRoute.Users }}/{{ contributor.id }}\">\n                      <button mat-stroked-button matTooltipPosition=\"right\" [matTooltip]=\"contributor.pocketFicUserName ?? 'undefined'\">\n                        <mat-icon class=\"me-2\" color=\"primary\">import_contacts</mat-icon>\n                        <span>POCKET FIC PROFILE</span>\n                      </button>\n                    </a>\n                  </mat-card-subtitle>\n                </mat-card-header>\n\n                <mat-card-content>{{ contributor.personalSummary }}</mat-card-content>\n\n                <mat-card-actions>\n                  <!-- The First Contributor Card Action Button Is An Email Link -->\n                  <a href=\"mailto:{{ contributor.email }}?subject=Subject&body=Hi%20{{ contributor.firstName }}\">\n                    <button mat-button [matTooltip]=\"contributor.email\">\n                      <mat-icon class=\"me-2\">email</mat-icon>\n                      <span>E-MAIL</span>\n                    </button>\n                  </a>\n\n                  <!-- The Second Contributor Card Action Button Is A Link To The Respective Contributors' Resume (Optional) -->\n                  <a *ngIf=\"contributor.resume\" target=\"_blank\" [href]=\"contributor.resume\">\n                    <button mat-button>\n                      <mat-icon class=\"me-2\">contact_page</mat-icon>\n                      <span>RESUM&Eacute;</span>\n                    </button>\n                  </a>\n\n                  <!-- The Third Contributor Card Action Button Is A Link To The Respective Contributors' GitHub (Optional) -->\n                  <a *ngIf=\"contributor.gitHub\" target=\"_blank\" [href]=\"contributor.gitHub\">\n                    <button mat-button>\n                      <img alt=\"GitHub Logo\" class=\"me-2 pf-card-footer-logo\" src=\"assets/images/other-logos/github.svg\"/>\n                      <span>GITHUB</span>\n                    </button>\n                  </a>\n\n                  <!-- The Fourth Contributor Card Action Button Is A Link To The Respective Contributors' LinkedIn (Optional) -->\n                  <a *ngIf=\"contributor.linkedIn\" target=\"_blank\" [href]=\"contributor.linkedIn\">\n                    <button mat-button>\n                      <img alt=\"LinkedIn Logo\" class=\"me-2 pf-card-footer-logo\" src=\"assets/images/other-logos/linkedin.svg\"/>\n                      <span>LINKEDIN</span>\n                    </button>\n                  </a>\n                </mat-card-actions>\n              </mat-card>\n            </div>\n          </ng-template>\n        </mat-expansion-panel>\n      </mat-accordion>\n\n      <div *ngIf=\"contributorsFetchError\" class=\"row\">\n        <div class=\"col\">\n          <h1 class=\"fs-4 row\">\n            <strong>An Error Occurred Fetching the List of Contributors. Sorry About That!</strong>\n            <mat-hint class=\"fs-5\">{{ contributorsFetchErrorInfo }}</mat-hint>\n          </h1>\n\n          <div>\n            <button mat-raised-button (click)=\"fetchAllContributors()\">\n              <mat-icon class=\"me-2\">refresh</mat-icon>\n              <span>RETRY</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</main>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostListener, OnDestroy, OnInit } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nimport { ReplaySubject, takeUntil } from 'rxjs';\r\n\r\nimport { AppRoute } from 'app/app-routing.module';\r\n\r\nimport { APP_CONSTANTS } from '@core/services/config/config.model';\r\nimport { Contributor } from '@contributors/services/contributor/contributor.model';\r\n\r\nimport { ConfigService } from '@core/services/config/config.service';\r\nimport { ContributorService } from '@contributors/services/contributor/contributor.service';\r\n\r\n@Component({\r\n  changeDetection : ChangeDetectionStrategy.OnPush,\r\n  selector : 'pf-contributors',\r\n  styleUrls : ['contributors.component.scss'],\r\n  templateUrl : 'contributors.component.html'\r\n})\r\nclass ContributorsComponent implements OnInit, OnDestroy {\r\n  public allContributors : Contributor[] = [];\r\n  public contributorsFetchError : HttpErrorResponse | undefined = undefined;\r\n  public contributorsFetchErrorInfo : string | undefined = undefined;\r\n  public mobileView : boolean = false;\r\n\r\n  public readonly AppRoute = AppRoute;\r\n  public readonly contributorNamesKebab : string[] = [];\r\n\r\n  private readonly _componentDestroyed$ : ReplaySubject<boolean> = new ReplaySubject<boolean>(1);\r\n\r\n  public constructor(private readonly _changeDetectorRef : ChangeDetectorRef, private readonly _contributorService : ContributorService) { }\r\n\r\n  /**\r\n   * Executes certain actions whenever the window changes size. In this case, we set a flag that indicates if we should show a mobile-centric view or not.\r\n   *\r\n   * @param $windowResizeEvent - the resize event that triggered the function call (unless we are called when initializing)\r\n   * @param initialize - a flag that indicates we are in startup and should set the mobile view flag after the view is initialized\r\n   */\r\n  @HostListener('window:resize', ['$event.target'])\r\n  private _onResize($windowResizeEvent : typeof window, initialize : boolean = false) : void {\r\n    if (initialize) {\r\n      this.mobileView = window.innerWidth < ConfigService.appConfiguration.constants.mobileViewThresholdWidthPX;\r\n    } else {\r\n      this.mobileView = $windowResizeEvent.innerWidth < ConfigService.appConfiguration.constants.mobileViewThresholdWidthPX;\r\n    }\r\n  }\r\n\r\n  public ngOnInit() : void {\r\n    this._onResize(window, true);\r\n\r\n    this._contributorService.getAllContributors$().pipe(takeUntil(this._componentDestroyed$)).subscribe({\r\n      next : (allContributors : Contributor[]) : void => {\r\n        this.allContributors = allContributors;\r\n        this.contributorsFetchError = undefined;\r\n        this.contributorsFetchErrorInfo = undefined;\r\n\r\n        for (const CONTRIBUTOR of allContributors) {\r\n          // We'll Convert The Contributors Name To Kebab-Case To Match The File Name (e.g., 'Evan Harding' -> evan-harding)\r\n          this.contributorNamesKebab.push(`${ CONTRIBUTOR.firstName } ${ CONTRIBUTOR.lastName }`.toLowerCase().replace(' ', '-'));\r\n        }\r\n\r\n        this._changeDetectorRef.detectChanges();\r\n      }\r\n    });\r\n\r\n    this._contributorService.getContributorsFetchError$().pipe(takeUntil(this._componentDestroyed$)).subscribe({\r\n      next : (contributorsFetchError : HttpErrorResponse | undefined) : void => {\r\n        if (contributorsFetchError) {\r\n          this.contributorsFetchError = contributorsFetchError;\r\n          this.contributorsFetchErrorInfo = `HTTP ${ contributorsFetchError.status }: ${ APP_CONSTANTS.httpResponseCodes[contributorsFetchError.status].httpStatusText }`;\r\n        }\r\n\r\n        this._changeDetectorRef.detectChanges();\r\n      }\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() : void {\r\n    this._componentDestroyed$.next(true);\r\n    this._componentDestroyed$.complete();\r\n  }\r\n\r\n  /**\r\n   * Triggers a new HTTP request for the retrieval of the list of contributors from the database.\r\n   */\r\n  public fetchAllContributors() : void {\r\n    this._contributorService.fetchAllContributors();\r\n  }\r\n}\r\n\r\nexport {\r\n  ContributorsComponent\r\n};\r\n","/**\r\n * This file handles navigation for the \"Contributors\" module. The URLs defined here are children of the \"/contributors\" route.\r\n */\r\n\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { ContributorsComponent } from '@contributors/contributors.component';\r\n\r\nconst ROUTES : Routes = [\r\n  { path : '', component : ContributorsComponent }\r\n];\r\n\r\n@NgModule({\r\n  exports : [RouterModule],\r\n  imports : [RouterModule.forChild(ROUTES)]\r\n})\r\nclass ContributorsRoutingModule { }\r\n\r\nexport {\r\n  ContributorsRoutingModule\r\n};\r\n","/**\r\n * This module serves as the repository for all modules and components associated with the \"Contributors\" module of the application.\r\n */\r\n\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { ContributorsRoutingModule } from '@contributors/contributors-routing.module';\r\nimport { SharedModule } from '@shared/shared.module';\r\n\r\nimport { ContributorService } from '@contributors/services/contributor/contributor.service';\r\n\r\nimport { ContributorsComponent } from '@contributors/contributors.component';\r\n\r\n@NgModule({\r\n  declarations : [ContributorsComponent],\r\n  imports : [MatButtonModule, MatCardModule, MatExpansionModule, MatFormFieldModule, MatIconModule, MatTooltipModule, ContributorsRoutingModule, SharedModule],\r\n  providers : [ContributorService]\r\n})\r\nclass ContributorsModule { }\r\n\r\nexport {\r\n  ContributorsModule\r\n};\r\n"]}