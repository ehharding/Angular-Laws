{"version":3,"file":"ContributorsModule.js","mappings":"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","names":["ContributorService","constructor","Object","BehaviorSubject","undefined","this","fetchAllContributors","ConfigService","ALL_CONTRIBUTORS","getDocs","collection","then","allContributorsSnapshot","forEach","contributorSnapshot","push","data","_allContributors$","next","catch","error","console","message","_contributorsFetchError$","getAllContributors$","asObservable","pipe","distinctUntilChanged","getContributorsFetchError$","factory","i0","ContributorsComponent","_changeDetectorRef","_contributorService","AppRoute","ReplaySubject","_onResize","$windowResizeEvent","initialize","mobileView","window","innerWidth","ngOnInit","takeUntil","_componentDestroyed$","subscribe","allContributors","contributorsFetchError","CONTRIBUTOR","contributorNamesKebab","firstName","lastName","toLowerCase","replace","detectChanges","ngOnDestroy","complete","getUserNameFromUserId","userId","String","selectors","ctx","ROUTES","path","component","ContributorsRoutingModule","RouterModule","ContributorsModule","imports","MatButtonModule","MatCardModule","MatExpansionModule","MatFormFieldModule","MatIconModule","MatTooltipModule","SharedModule"],"sourceRoot":"webpack:///","sources":["./src/app/contributors/services/contributor/contributor.service.ts","./src/app/contributors/contributors.component.html","./src/app/contributors/contributors.component.ts","./src/app/contributors/contributors-routing.module.ts","./src/app/contributors/contributors.module.ts"],"sourcesContent":["/**\r\n * This service handles the retrieval of contributor-related data.\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { QueryDocumentSnapshot, QuerySnapshot, collection, getDocs } from 'firebase/firestore';\r\n\r\nimport { BehaviorSubject, Observable, distinctUntilChanged } from 'rxjs';\r\n\r\nimport { Contributor } from '@contributors/services/contributor/contributor.model';\r\n\r\nimport { ConfigService } from '@core/services/config/config.service';\r\n\r\n@Injectable({ providedIn : 'any' })\r\nclass ContributorService {\r\n  private readonly _allContributors$ : BehaviorSubject<Contributor[]> = new BehaviorSubject<Contributor[]>([] as Contributor[]);\r\n  private readonly _contributorsFetchError$ : BehaviorSubject<string | undefined> = new BehaviorSubject<string | undefined>(undefined);\r\n\r\n  public constructor() {\r\n    this.fetchAllContributors();\r\n  }\r\n\r\n  /**\r\n   * Fetches all contributors from the database and updates the class's data with the new values, or error handles.\r\n   */\r\n  public fetchAllContributors() : void {\r\n    if (ConfigService.firestore) {\r\n      const ALL_CONTRIBUTORS : Contributor[] = [];\r\n\r\n      getDocs(collection(ConfigService.firestore, 'contributors')).then((allContributorsSnapshot : QuerySnapshot) : void => {\r\n        allContributorsSnapshot.forEach((contributorSnapshot : QueryDocumentSnapshot) : void => {\r\n          ALL_CONTRIBUTORS.push(contributorSnapshot.data() as Contributor);\r\n          this._allContributors$.next(ALL_CONTRIBUTORS);\r\n        });\r\n      }).catch((error : Error) : void => {\r\n        console.error(error.message);\r\n        this._contributorsFetchError$.next(error.message);\r\n      });\r\n    } else {\r\n      console.error('Firebase Firestore seems to be unavailable.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Provides a Contributor[]-typed Observable stream for interested subscribers to receive all contributors from the database.\r\n   *\r\n   * @returns a Contributor[]-typed Observable stream. Subscribe to the stream to receive the object type specified asynchronously.\r\n   */\r\n  public getAllContributors$() : Observable<Contributor[]> {\r\n    return this._allContributors$.asObservable().pipe(distinctUntilChanged());\r\n  }\r\n\r\n  /**\r\n   * Provides a string | undefined-typed Observable stream for interested subscribers to receive the latest error, if any, associated with a request to retrieve contributors\r\n   * from the database.\r\n   *\r\n   * @returns a string | undefined-typed Observable stream. Subscribe to the stream to receive the object type specified asynchronously.\r\n   */\r\n  public getContributorsFetchError$() : Observable<string | undefined> {\r\n    return this._contributorsFetchError$.asObservable().pipe(distinctUntilChanged());\r\n  }\r\n}\r\n\r\nexport {\r\n  ContributorService\r\n};\r\n","<header>\n  <div class=\"m-3 row\">\n    <div class=\"mx-auto\" [ngClass]=\"{ 'pf-w-70' : !mobileView, 'w-100' : mobileView }\">\n      <h1 class=\"fs-4 mt-2\"><strong>Contributors</strong></h1>\n\n      <p>This page lists the current contributors to the project.</p>\n    </div>\n  </div>\n</header>\n\n<div class=\"m-3\">\n  <div class=\"mx-auto\" [ngClass]=\"{ 'pf-w-70' : !mobileView, 'w-100' : mobileView }\">\n    <mat-accordion *ngIf=\"!contributorsFetchError\" class=\"pf-headers-align\">\n      <mat-expansion-panel *ngFor=\"let contributor of allContributors; let index = index\" [expanded]=\"index === 0\">\n        <mat-expansion-panel-header>\n          <mat-panel-title>\n            <mat-icon class=\"me-3\">account_circle</mat-icon>\n            <strong>{{ contributor.firstName }} {{ contributor.lastName }}</strong>\n          </mat-panel-title>\n\n          <mat-panel-description>{{ contributor.jobTitle }}</mat-panel-description>\n        </mat-expansion-panel-header>\n\n        <ng-template matExpansionPanelContent>\n          <div class=\"d-flex justify-content-center\">\n            <mat-card class=\"mat-elevation-z0\">\n              <mat-card-header>\n                <img mat-card-avatar alt=\"{{ contributor.firstName }} {{ contributor.lastName }}'s Avatar\" src=\"assets/avatars/{{ contributorNamesKebab[index] }}.jpg\"/>\n\n                <!-- If The Contributor Has A Pocket Fic Profile We Display A Button To Link To That User Profile -->\n                <mat-card-subtitle *ngIf=\"contributor.pocketFicUserId\">\n                  <a mat-stroked-button href=\"/{{ AppRoute.Users }}/{{ contributor.pocketFicUserId }}\" routerLink=\"/{{ AppRoute.Users }}/{{ contributor.pocketFicUserId }}\"\n                     matTooltipPosition=\"right\" [matTooltip]=\"getUserNameFromUserId(contributor.pocketFicUserId)\" [matTooltipShowDelay]=\"matTooltipShowDelay\">\n                    <mat-icon class=\"me-2\" color=\"primary\">import_contacts</mat-icon>\n                    <span>PROFILE</span>\n                  </a>\n                </mat-card-subtitle>\n              </mat-card-header>\n\n              <mat-card-content>{{ contributor.personalSummary }}</mat-card-content>\n\n              <mat-card-actions>\n                <a mat-button href=\"mailto:{{ contributor.email }}?subject=Subject&body=Hi%20{{ contributor.firstName }}\" [matTooltip]=\"contributor.email\"\n                   [matTooltipShowDelay]=\"matTooltipShowDelay\">\n                  <mat-icon class=\"me-2\">email</mat-icon>\n                  <span>E-MAIL</span>\n                </a>\n\n                <a *ngIf=\"contributor.resume\" mat-button target=\"_blank\" [href]=\"contributor.resume\">\n                  <mat-icon class=\"me-2\">contact_page</mat-icon>\n                  <span>RESUM&Eacute;</span>\n                </a>\n\n                <a *ngIf=\"contributor.gitHub\" mat-button target=\"_blank\" [href]=\"contributor.gitHub\">\n                  <img alt=\"GitHub Logo\" class=\"me-2 pf-card-footer-logo\" src=\"assets/images/other-logos/github.svg\"/>\n                  <span>GITHUB</span>\n                </a>\n\n                <a *ngIf=\"contributor.linkedIn\" mat-button target=\"_blank\" [href]=\"contributor.linkedIn\">\n                  <img alt=\"LinkedIn Logo\" class=\"me-2 pf-card-footer-logo\" src=\"assets/images/other-logos/linkedin.svg\"/>\n                  <span>LINKEDIN</span>\n                </a>\n              </mat-card-actions>\n            </mat-card>\n          </div>\n        </ng-template>\n      </mat-expansion-panel>\n    </mat-accordion>\n\n    <div *ngIf=\"contributorsFetchError\" class=\"row\">\n      <div class=\"col\">\n        <h1 class=\"fs-4 row\">\n          <strong>An Error Occurred Fetching The List Of Contributors. Sorry About That!</strong>\n          <mat-hint class=\"fs-5\">{{ contributorsFetchError }}</mat-hint>\n        </h1>\n\n        <div>\n          <button mat-raised-button (click)=\"fetchAllContributors()\">\n            <mat-icon class=\"me-2\">refresh</mat-icon>\n            <span>RETRY</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostListener, OnDestroy, OnInit } from '@angular/core';\r\n\r\nimport { ReplaySubject, takeUntil } from 'rxjs';\r\n\r\nimport { AppRoute } from 'app/app-routing.module';\r\n\r\nimport { Contributor } from '@contributors/services/contributor/contributor.model';\r\n\r\nimport { ConfigService } from '@core/services/config/config.service';\r\nimport { ContributorService } from '@contributors/services/contributor/contributor.service';\r\n\r\n@Component({\r\n  selector : 'pf-contributors',\r\n  changeDetection : ChangeDetectionStrategy.OnPush,\r\n  styleUrls : ['contributors.component.scss'],\r\n  templateUrl : 'contributors.component.html'\r\n})\r\nclass ContributorsComponent implements OnInit, OnDestroy {\r\n  public allContributors : Contributor[] = [];\r\n  public contributorsFetchError : string | undefined = undefined;\r\n  public mobileView : boolean = false;\r\n\r\n  public readonly AppRoute = AppRoute;\r\n  public readonly contributorNamesKebab : string[] = [];\r\n  public readonly matTooltipShowDelay : number = ConfigService.appConfiguration.constants.tooltipShowDelayMS;\r\n\r\n  private readonly _componentDestroyed$ : ReplaySubject<boolean> = new ReplaySubject<boolean>(1);\r\n\r\n  public constructor(private readonly _changeDetectorRef : ChangeDetectorRef, private readonly _contributorService : ContributorService) { }\r\n\r\n  /**\r\n   * Executes certain actions whenever the window changes size. In this case, we set a flag that indicates if we should show a mobile-centric view or not.\r\n   *\r\n   * @param $windowResizeEvent - the resize event that triggered the function call (unless we are called when initializing)\r\n   * @param initialize - a flag that indicates we are in startup and should set the mobile view flag after the view is initialized\r\n   */\r\n  @HostListener('window:resize', ['$event.target'])\r\n  private _onResize($windowResizeEvent : typeof window, initialize : boolean = false) : void {\r\n    if (initialize) {\r\n      this.mobileView = window.innerWidth < ConfigService.appConfiguration.constants.mobileViewThresholdWidthPX;\r\n    } else {\r\n      this.mobileView = $windowResizeEvent.innerWidth < ConfigService.appConfiguration.constants.mobileViewThresholdWidthPX;\r\n    }\r\n  }\r\n\r\n  public ngOnInit() : void {\r\n    this._onResize(window, true);\r\n\r\n    this._contributorService.getAllContributors$().pipe(takeUntil(this._componentDestroyed$)).subscribe({\r\n      next : (allContributors : Contributor[]) : void => {\r\n        this.allContributors = allContributors;\r\n        this.contributorsFetchError = undefined;\r\n\r\n        for (const CONTRIBUTOR of allContributors) {\r\n          // We'll Convert The Contributors Name To Kebab-Case To Match The File Name (e.g., 'Evan Harding' -> evan-harding)\r\n          this.contributorNamesKebab.push(`${ CONTRIBUTOR.firstName } ${ CONTRIBUTOR.lastName }`.toLowerCase().replace(' ', '-'));\r\n        }\r\n\r\n        this._changeDetectorRef.detectChanges();\r\n      }\r\n    });\r\n\r\n    this._contributorService.getContributorsFetchError$().pipe(takeUntil(this._componentDestroyed$)).subscribe({\r\n      next : (contributorsFetchError : string | undefined) : void => {\r\n        if (contributorsFetchError) {\r\n          this.contributorsFetchError = contributorsFetchError;\r\n        }\r\n\r\n        this._changeDetectorRef.detectChanges();\r\n      }\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy() : void {\r\n    this._componentDestroyed$.next(true);\r\n    this._componentDestroyed$.complete();\r\n  }\r\n\r\n  /**\r\n   * Triggers a new HTTP request for the retrieval of the list of contributors from the database.\r\n   */\r\n  public fetchAllContributors() : void {\r\n    this._contributorService.fetchAllContributors();\r\n  }\r\n\r\n  public getUserNameFromUserId(userId : number) : string {\r\n    return String(userId);\r\n  }\r\n}\r\n\r\nexport {\r\n  ContributorsComponent\r\n};\r\n","/**\r\n * This file handles navigation for the \"Contributors\" module. The URLs defined here are children of the \"/contributors\" route.\r\n */\r\n\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { ContributorsComponent } from '@contributors/contributors.component';\r\n\r\nconst ROUTES : Routes = [\r\n  { path : '', component : ContributorsComponent }\r\n];\r\n\r\n@NgModule({\r\n  exports : [RouterModule],\r\n  imports : [RouterModule.forChild(ROUTES)]\r\n})\r\nclass ContributorsRoutingModule { }\r\n\r\nexport {\r\n  ContributorsRoutingModule\r\n};\r\n","/**\r\n * This module serves as the repository for all modules and components associated with the \"Contributors\" module of the application.\r\n */\r\n\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { ContributorsRoutingModule } from '@contributors/contributors-routing.module';\r\nimport { SharedModule } from '@shared/shared.module';\r\n\r\nimport { ContributorService } from '@contributors/services/contributor/contributor.service';\r\n\r\nimport { ContributorsComponent } from '@contributors/contributors.component';\r\n\r\n@NgModule({\r\n  declarations : [ContributorsComponent],\r\n  imports : [MatButtonModule, MatCardModule, MatExpansionModule, MatFormFieldModule, MatIconModule, MatTooltipModule, ContributorsRoutingModule, SharedModule],\r\n  providers : [ContributorService]\r\n})\r\nclass ContributorsModule { }\r\n\r\nexport {\r\n  ContributorsModule\r\n};\r\n"]}