{"version":3,"sources":["../src/cdk/accordion/accordion.ts","../src/cdk/accordion/accordion-item.ts","../src/cdk/accordion/accordion-module.ts","../src/material/expansion/accordion-base.ts","../src/material/expansion/expansion-animations.ts","../src/material/expansion/expansion-panel-content.ts","../src/material/expansion/expansion-panel.ts","../src/material/expansion/expansion-panel-header.ts","../src/material/expansion/accordion.ts","../src/material/expansion/expansion-module.ts","./src/app/contributors/contributors.model.ts","./src/app/contributors/contributors.component.html","./src/app/contributors/contributors-routing.module.ts","./src/app/contributors/contributors.component.ts","./src/app/contributors/contributors.module.ts"],"names":["nextId","CDK_ACCORDION","CdkAccordion","_stateChanges","Subject","_openCloseAllActions","id","_multi","this","multi","next","changes","complete","CdkAccordionItem","accordion","_changeDetectorRef","_expansionDispatcher","_openCloseAllSubscription","Subscription","closed","opened","destroyed","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","listen","accordionId","expanded","_subscribeToOpenCloseAllActions","emit","notify","markForCheck","disabled","unsubscribe","subscribe","undefined","CdkAccordionModule","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","transform","bodyExpansion","height","visibility","MatExpansionPanelContent","_template","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","super","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","pipe","distinctUntilChanged","x","y","fromState","toState","event","hideToggle","value","_togglePosition","togglePosition","displayMode","_lazyContent","startWith","filter","_portal","take","ngOnDestroy","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","MatExpansionPanelHeaderBase","_MatExpansionPanelHeaderMixinBase","MatExpansionPanelHeader","panel","_element","_focusMonitor","tabIndex","_parentChangeSubscription","accordionHideToggleChange","E","parseInt","merge","_containsFocus","focusVia","expandedHeight","collapsedHeight","toggle","_getExpandedState","isExpanded","_isExpanded","keyCode","preventDefault","_toggle","_handleHeaderKeydown","origin","options","focus","monitor","_handleHeaderFocus","stopMonitoring","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_ownHeaders","show","_headers","headers","reset","header","notifyOnChanges","_keyManager","withWrap","withHomeAndEnd","onKeydown","updateActiveItem","destroy","MatExpansionModule","JobTitles","CONTRIBUTORS","firstName","lastName","title","SoftwareEngineer","email","personalSummary","gitHub","linkedIn","CONTRIBUTORS_ANIMATIONS","opacity","ROUTES","path","component","ContributorsComponent","contributors","contributorNamesKebab","panelHovered","panelOpen","CONTRIBUTOR","push","toLowerCase","replace","ContributorsRoutingModule","ContributorsModule"],"mappings":"yNAaA,IAAIA,EAAS,EAOb,MAAaC,EAAgB,IAAI,MAA6B,gB,IAUjDC,E,MALb,MAKaA,EALb,cAOW,KAAAC,cAAgB,IAAIC,EAAA,EAGpB,KAAAC,qBAAyC,IAAID,EAAA,EAG7C,KAAAE,GAAK,iBAAiBN,IAMvB,KAAAO,QAAkB,EAFjB,YAAc,OAAOC,KAAKD,OAC1B,UAACE,GAAkBD,KAAKD,QAAS,QAAsBE,GAIhE,UACMD,KAAKD,QACPC,KAAKH,qBAAqBK,MAAK,GAKnC,WACEF,KAAKH,qBAAqBK,MAAK,GAGjC,YAAYC,GACVH,KAAKL,cAAcO,KAAKC,GAG1B,cACEH,KAAKL,cAAcS,WACnBJ,KAAKH,qBAAqBO,Y,4BAvCpB,UAAC,W,YACgC,MAC/B,MAAc,YACxB,EAAS,iBAAa,mBAAe,KAAa,QAAY,MAAE,SACjE,gFACYV,G,GCLTF,EAAS,EAeAa,E,MATb,MASaA,EA2DX,YAAkEC,EAC9CC,EACEC,GAF4C,KAAAF,YAC9C,KAAAC,qBACE,KAAAC,uBA3Dd,KAAAC,0BAA4BC,EAAA,SAEjB,KAAAC,OAA6B,IAAI,MAEjC,KAAAC,OAA6B,IAAI,MAEjC,KAAAC,UAAgC,IAAI,MAOpC,KAAAC,eAAwC,IAAI,MAGtD,KAAAhB,GAAa,uBAAuBN,IA8BrC,KAAAuB,WAAY,EAMZ,KAAAC,WAAY,EAGZ,KAAAC,+BAA6C,OAKnDjB,KAAKiB,+BACHT,EAAqBU,OAAO,CAACpB,EAAYqB,KACnCnB,KAAKM,YAAcN,KAAKM,UAAUL,OAClCD,KAAKM,UAAUR,KAAOqB,GAAenB,KAAKF,KAAOA,IACnDE,KAAKoB,UAAW,KAKlBpB,KAAKM,YACPN,KAAKS,0BAA4BT,KAAKqB,mCAlD9B,eAAc,OAAOrB,KAAKe,UAC1B,aAACK,GACXA,GAAW,QAAsBA,GAG7BpB,KAAKe,YAAcK,IACrBpB,KAAKe,UAAYK,EACjBpB,KAAKc,eAAeQ,KAAKF,GAErBA,GACFpB,KAAKY,OAAOU,OAMZtB,KAAKQ,qBAAqBe,OAAOvB,KAAKF,GADlBE,KAAKM,UAAYN,KAAKM,UAAUR,GAAKE,KAAKF,KAG9DE,KAAKW,OAAOW,OAKdtB,KAAKO,mBAAmBiB,gBAOhB,eAAc,OAAOxB,KAAKgB,UAC1B,aAACS,GAAqBzB,KAAKgB,WAAY,QAAsBS,GAwBzE,cACEzB,KAAKY,OAAOR,WACZJ,KAAKW,OAAOP,WACZJ,KAAKa,UAAUS,OACftB,KAAKa,UAAUT,WACfJ,KAAKiB,iCACLjB,KAAKS,0BAA0BiB,cAIjC,SACO1B,KAAKyB,WACRzB,KAAKoB,UAAYpB,KAAKoB,UAK1B,QACOpB,KAAKyB,WACRzB,KAAKoB,UAAW,GAKpB,OACOpB,KAAKyB,WACRzB,KAAKoB,UAAW,GAIZ,kCACN,OAAOpB,KAAKM,UAAUT,qBAAqB8B,UAAUP,IAE9CpB,KAAKyB,WACRzB,KAAKoB,SAAWA,M,4BAxHd,GAAC,cACT,GAAU,QAAwC,UACxC,OACV,MAAW,Q,4DAGT,IAAC,mBAAsB,KAAE,OAAmB,CAAC,oBAC9C,qBACF,+I,yBAFsCQ,QAG1BvB,G,GCvBAwB,E,MAVb,MAUaA,G,4BAJJ,GAAC,cACR,IAAwC,EAAC,UACzC,MAA6B,U,sBAElBA,G,ugBC0BAC,EAAgB,IAAI,MAAiC,iBCzBrDC,EAAmC,oCAwBnCC,EAGT,CAEFC,iBAAiB,QAAQ,kBAAmB,EAC1C,QAAM,mBAAmB,QAAM,CAACC,UAAW,mBAC3C,QAAM,YAAY,QAAM,CAACA,UAAW,qBACpC,QAAW,6CACT,QAAQH,MAGZI,eAAe,QAAQ,gBAAiB,EACtC,QAAM,mBAAmB,QAAM,CAACC,OAAQ,MAAOC,WAAY,aAC3D,QAAM,YAAY,QAAM,CAACD,OAAQ,IAAKC,WAAY,cAClD,QAAW,6CACT,QAAQN,O,ICzCDO,E,MAHb,MAGaA,EACX,YAAmBC,GAAA,KAAAA,a,4BAJV,cACT,GAAQ,GAAE,MAAuC,S,+EAE9C,OAAQD,G,GC8BTE,EAAW,EAqBf,MAAaC,EACT,IAAI,MAAgD,uC,IA4B3CC,E,MAtBb,MAsBaA,UAA0BrC,EAmDrC,YAA2DC,EAC/CC,EACAoC,EACQC,EACUC,EACgCC,EAE9CC,GACdC,MAAM1C,EAAWC,EAAoBoC,GALnB,KAAAC,oBAE0C,KAAAE,iBArDtD,KAAAG,aAAc,EAsBH,KAAAC,YAAc,IAAI,MAGlB,KAAAC,cAAgB,IAAI,MAG9B,KAAAC,cAAgB,IAAIxD,EAAA,EAe7B,KAAAyD,UAAY,8BAA8Bb,IAGjC,KAAAc,mBAAqB,IAAI1D,EAAA,EAWhCI,KAAKM,UAAYA,EACjBN,KAAK6C,UAAYA,EAIjB7C,KAAKsD,mBAAmBC,MAAK,EAAAC,EAAA,GAAqB,CAACC,EAAGC,IAC7CD,EAAEE,YAAcD,EAAEC,WAAaF,EAAEG,UAAYF,EAAEE,UACpDjC,UAAUkC,IACY,SAApBA,EAAMF,YACc,aAAlBE,EAAMD,QACR5D,KAAKkD,YAAY5B,OACU,cAAlBuC,EAAMD,SACf5D,KAAKmD,cAAc7B,UAKrByB,IACF/C,KAAK8D,WAAaf,EAAee,YAtEvB,iBACZ,OAAO9D,KAAKiD,aAAgBjD,KAAKM,WAAaN,KAAKM,UAAUwD,WAEjD,eAACC,GACb/D,KAAKiD,aAAc,QAAsBc,GAKzB,qBAChB,OAAO/D,KAAKgE,iBAAoBhE,KAAKM,WAAaN,KAAKM,UAAU2D,eAEjD,mBAACF,GACjB/D,KAAKgE,gBAAkBD,EA8DzB,cACE,QAAI/D,KAAKM,WACAN,KAAKoB,UAA2C,YAA/BpB,KAAKM,UAAU4D,YAM3C,oBACE,OAAOlE,KAAKoB,SAAW,WAAa,YAI7B,SACPpB,KAAKoB,UAAYpB,KAAKoB,SAIf,QACPpB,KAAKoB,UAAW,EAIT,OACPpB,KAAKoB,UAAW,EAGlB,qBACMpB,KAAKmE,cAEPnE,KAAKY,OAAO2C,MACV,EAAAa,EAAA,GAAU,OACV,EAAAC,EAAA,GAAO,IAAMrE,KAAKoB,WAAapB,KAAKsE,UACpC,EAAAC,EAAA,GAAK,IACL5C,UAAU,KACV3B,KAAKsE,QAAU,IAAI,KAAetE,KAAKmE,aAAa5B,UAAWvC,KAAK4C,qBAK1E,YAAYzC,GACVH,KAAKoD,cAAclD,KAAKC,GAGjB,cACP6C,MAAMwB,cACNxE,KAAKsD,mBAAmBlD,WACxBJ,KAAKoD,cAAchD,WAIrB,iBACE,GAAIJ,KAAKyE,MAAO,CACd,MAAMC,EAAiB1E,KAAK6C,UAAU8B,cAChCC,EAAc5E,KAAKyE,MAAMI,cAC/B,OAAOH,IAAmBE,GAAeA,EAAYE,SAASJ,GAGhE,OAAO,G,4BAnKD,GAAC,cAET,GAAU,MAAqB,EACrB,UAAmB,OAC7B,gE,6FACgC,G,WADG,IACpB,GAAsB,EAAJ,EAAI,CACrC,MAAe,MAAE,EAAwB,WACzC,EAAM,aAAe,WAAW,UAChC,SAA8B,KACM,GADW,KAC/C,KAAa,KAAuB,IAAa,C,MACjD,MAAW,gC,qEAGD,EAAE,GAAe,EAAF,GAAsB,MAC9C,eACD,EAAI,SAF2C,CAEzC,0BAC0B,mBAArB,iBAHoC,CAI7C,8BAAkC,kBAClC,4BAAmC,+BAAqC,4BACxE,0BAAqC,CAAE,gBAAe,gBACvD,yI,yBAPoC9C,K,glBAQtC,grDACYc,G,GCxDb,MAAeqC,GAGf,MAAMC,GAAoC,QAAcD,G,IAgC3CE,E,MA3Bb,MA2BaA,UAAgCD,EAI3C,YACmBE,EACPC,EACAC,EACA7E,EAEJwC,EAC8CD,EAC3BuC,GACzBrC,QARiB,KAAAkC,QACP,KAAAC,WACA,KAAAC,gBACA,KAAA7E,qBAG0C,KAAAuC,iBAT9C,KAAAwC,0BAA4B5E,EAAA,SAYlC,MAAM6E,EAA4BL,EAAM5E,UACpC4E,EAAM5E,UAAUX,cAAc4D,MAC1B,EAAAc,EAAA,GAAOlE,MAAcA,EAAO,aAAkBA,EAAO,kBACzD,EAAAqF,EACJxF,KAAKqF,SAAWI,SAASJ,GAAY,KAAO,EAI5CrF,KAAKsF,2BACD,EAAAI,EAAA,GACIR,EAAMtE,OAAQsE,EAAMvE,OAAQ4E,EAC5BL,EAAM9B,cAAcG,MAAK,EAAAc,EAAA,GACrBlE,MAEIA,EAAO,YACPA,EAAO,UACPA,EAAO,mBAEtBwB,UAAU,IAAM3B,KAAKO,mBAAmBiB,gBAGzC0D,EAAMvE,OACH4C,MAAK,EAAAc,EAAA,GAAO,IAAMa,EAAMS,mBACxBhE,UAAU,IAAMyD,EAAcQ,SAAST,EAAU,YAEhDpC,IACF/C,KAAK6F,eAAiB9C,EAAe8C,eACrC7F,KAAK8F,gBAAkB/C,EAAe+C,iBAc9B,eACV,OAAO9F,KAAKkF,MAAMzD,SAIpB,UACOzB,KAAKyB,UACRzB,KAAKkF,MAAMa,SAKf,cACE,OAAO/F,KAAKkF,MAAM9D,SAIpB,oBACE,OAAOpB,KAAKkF,MAAMc,oBAIpB,cACE,OAAOhG,KAAKkF,MAAMpF,GAIpB,qBACE,OAAOE,KAAKkF,MAAMjB,eAIpB,cACE,OAAQjE,KAAKkF,MAAMpB,aAAe9D,KAAKkF,MAAMzD,SAO/C,mBACE,MAAMwE,EAAajG,KAAKkG,cACxB,OAAID,GAAcjG,KAAK6F,eACd7F,KAAK6F,gBACFI,GAAcjG,KAAK8F,gBACtB9F,KAAK8F,gBAEP,KAIT,SAASjC,GACP,OAAQA,EAAMsC,SAEZ,KAAK,KACL,KAAK,MACE,QAAetC,KAClBA,EAAMuC,iBACNpG,KAAKqG,WAGP,MACF,QAKE,YAJIrG,KAAKkF,MAAM5E,WACbN,KAAKkF,MAAM5E,UAAUgG,qBAAqBzC,KAYlD,MAAM0C,EAAsBC,GACtBD,EACFvG,KAAKoF,cAAcQ,SAAS5F,KAAKmF,SAAUoB,EAAQC,GAEnDxG,KAAKmF,SAASN,cAAc4B,MAAMD,GAItC,kBACExG,KAAKoF,cAAcsB,QAAQ1G,KAAKmF,UAAUxD,UAAU4E,IAC9CA,GAAUvG,KAAKkF,MAAM5E,WACvBN,KAAKkF,MAAM5E,UAAUqG,mBAAmB3G,QAK9C,cACEA,KAAKsF,0BAA0B5D,cAC/B1B,KAAKoF,cAAcwB,eAAe5G,KAAKmF,W,4BAhLhC,cACT,MAAU,MAEV,wFACA,EAAa,UAAoB,MACjC,QAAiB,UAA8B,iCACtC,UAAW,iBACpB,EAAY,6BACV,uBAAuB,SAAe,gBACvC,SAEC,EAAO,GAAE,K,MAAgD,mBAEzD,OAAa,a,CAAiB,mBAE9B,YAAsB,SAAE,KACxB,E,UAAwB,OAAe,gB,CAAA,WACvC,W,CAAsB,gBAAE,EAAgB,c,CAAA,gBACxC,gB,CAAwB,gBAAe,kB,eACO,EAAE,oBAAkC,qBAClF,gBADkF,CAClF,uCAAoF,UAAnC,uBADiC,CAElF,wCAAmC,kCAF+C,CAEV,0BACtD,mBAAlB,EAAkB,kBAClB,OAAW,UAAW,0BACtB,iBAAa,gBAAkB,mBAChC,wL,oKACF,83D,oCACI,IAAQF,G,GAoKA4B,E,MANb,MAMaA,G,4BANF,UACT,OAAU,IACV,EAAM,UACG,YAAwC,EAElD,+FACYA,G,GAWAC,E,MANb,MAMaA,G,4BANF,cACT,OACA,EAAM,UACG,cACR,UACF,yEACYA,G,GC7MAC,E,MAfb,MAeaA,UAAqBrH,EAflC,cACG,oBAmBO,KAAAsH,YAAc,IAAI,MAUlB,KAAA/D,aAAuB,EAUtB,KAAAiB,YAAuC,UAGvC,KAAAD,eAA6C,QAfxC,iBAAc,OAAOjE,KAAKiD,YAC1B,eAACgE,GAAiBjH,KAAKiD,aAAc,QAAsBgE,GAgBzE,qBACEjH,KAAKkH,SAAS/G,QACXoD,MAAK,EAAAa,EAAA,GAAUpE,KAAKkH,WACpBvF,UAAWwF,IACVnH,KAAKgH,YAAYI,MAAMD,EAAQ9C,OAAOgD,GAAUA,EAAOnC,MAAM5E,YAAcN,OAC3EA,KAAKgH,YAAYM,oBAGrBtH,KAAKuH,YAAc,IAAI,KAAgBvH,KAAKgH,aAAaQ,WAAWC,iBAItE,qBAAqB5D,GACnB7D,KAAKuH,YAAYG,UAAU7D,GAG7B,mBAAmBwD,GACjBrH,KAAKuH,YAAYI,iBAAiBN,GAG3B,cACPrE,MAAMwB,cACNxE,KAAKgH,YAAYY,W,mBAnEpB,eAAS,EACR,OAAU,SAAe,GACzB,OAAU,IAAc,EACP,MACL,QACV,IALH,G,YAMc,MAAc,QACzB,UACE,EAAE,iCACG,SAAe,O,GAAA,K,2CAGtB,WAA+B,KAAY,aAC5C,iBACF,2C,+NACYb,G,GCFAc,E,MArCb,MAqCaA,G,4BArBJ,GAAC,cACR,IAAuC,EAAE,UAAoB,MAC7D,MAAS,IACK,YACZ,MAAiB,SACjB,YAA0B,EAC1B,SAeSA,G,+CCxCRC,GAEJ,MAFD,SAAKA,GACH,uCADF,CAAKA,QAAS,KAATA,IAEJ,GAYM,MAAMC,GAA+B,CAC1C,CACEC,UAAY,OACZC,SAAW,UACXC,MAAQJ,GAAUK,iBAClBC,MAAQ,sBACRC,gBAAkB,4gBAKlBC,OAAS,+BACTC,SAAW,2CAIFC,GAAsC,EACjD,QAAQ,QAAS,EACf,QAAM,eAAe,QAAM,CAAEtG,UAAY,oBACzC,QAAM,gBAAgB,QAAM,CAAEA,UAAY,yBAE5C,QAAQ,YAAa,EACnB,QAAM,gBAAgB,QAAM,CAAEuG,QAAU,MACxC,QAAM,kBAAkB,QAAM,CAAEA,QAAU,MAC1C,QAAW,kCAAmC,EAAC,QAAQ,GAAI,4E,0BCQ7C,gBACE,qBACE,kBACA,gBAAM,kBAAM,QACd,QACF,S,gCAL8C,8B,0BAQ9C,gBACE,qBACE,kBACA,gBAAM,oBAAQ,QAChB,QACF,S,gCALgD,gC,0BA5BtD,kBACE,uBACE,2BACE,kBACA,0BAAgB,kBAAQ,SAAsD,QAAS,QACvF,6BAAmB,SAAuB,QAC5C,QAEA,4BAAkB,UAAiC,QAEnD,6BAEE,iBACE,sBACE,uBAAuB,kBAAK,QAC5B,iBAAM,mBAAM,QACd,QACF,QAGA,wBAQA,wBAMF,QACF,QACF,S,uDAjC2B,gEAAsE,wEACnE,iDACL,wBAGH,kCAIb,4FACkB,qCAOjB,gCAQA,mC,yCA7ChB,iCACE,6DAAsB,GAAtB,CAA4B,uDAAuB,GAAnD,CAA4B,8DAA0D,GAAtF,CAA4B,8DAA6F,IACvH,sCACE,2BACE,sBAAuB,0BAAc,QACrC,kBACE,kBAAQ,SAAsD,QAChE,QACF,QAEA,mCAEI,SACJ,QACF,QAEA,mCAuCJ,Q,gDAvDiF,wBAK5B,mFAAwE,0DAC3G,iDAKV,mFAAwE,0DACtE,iCChBhB,MAAMC,GAAkB,CACtB,CAAEC,KAAO,GAAIC,UCCf,MAAM,MAAOC,EAPb,cAQkB,KAAAC,aAA+Bf,GAC/B,KAAAgB,sBAAmC,GAE5C,KAAAC,cAAyB,EACzB,KAAAC,WAAsB,EAEtB,WACL,IAAK,MAAMC,KAAenB,GAExB/H,KAAK+I,sBAAsBI,KAAK,GAAID,EAAYlB,aAAekB,EAAYjB,WAAYmB,cAAcC,QAAQ,IAAK,OAVxH,O,sCAAaR,I,wBAAAA,EAAqB,q1BFXlC,oBACE,iBACE,iBACE,gBAAwB,kBAAQ,wBAAY,QAAS,QAErD,aAAG,oEAAwD,QAC7D,QACF,QACF,QAEA,iBACE,iBACE,4BACE,0CAwDF,QACF,QACF,S,MA1DmD,4C,iREJpCL,IAAuB,oBAEzBK,GAAb,KDMO,IAAMS,GAAb,MAAM,MAAOA,GAAb,O,sCAAaA,I,wBAAAA,I,4BAFD,CAAC,cAAsBZ,KADtB,QAGAY,GAAb,G,eEOO,IAAMC,GAAb,MAAM,MAAOA,GAAb,O,sCAAaA,I,wBAAAA,I,4BAVD,CACR,KACA,KACA1B,EACA,KACA,KACAyB,GACA,SAGSC,GAAb","file":"800.f129149bd308a2223b4e.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, InjectionToken, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_ACCORDION = new InjectionToken<CdkAccordion>('CdkAccordion');\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n  providers: [{provide: CDK_ACCORDION, useExisting: CdkAccordion}],\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id = `cdk-accordion-${nextId++}`;\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input()\n  get multi(): boolean { return this._multi; }\n  set multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\n  private _multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    if (this._multi) {\n      this._openCloseAllActions.next(true);\n    }\n  }\n\n  /** Closes all enabled accordion items in an accordion where multi is enabled. */\n  closeAll(): void {\n    this._openCloseAllActions.next(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._openCloseAllActions.complete();\n  }\n\n  static ngAcceptInputType_multi: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CDK_ACCORDION, CdkAccordion} from './accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs';\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n    // registering to the same accordion.\n    {provide: CDK_ACCORDION, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnDestroy {\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() readonly destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() readonly expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\n\n  /** Whether the AccordionItem is expanded. */\n  @Input()\n  get expanded(): boolean { return this._expanded; }\n  set expanded(expanded: boolean) {\n    expanded = coerceBooleanProperty(expanded);\n\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(disabled: boolean) { this._disabled = coerceBooleanProperty(disabled); }\n  private _disabled = false;\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(@Optional() @Inject(CDK_ACCORDION) @SkipSelf() public accordion: CdkAccordion,\n              private _changeDetectorRef: ChangeDetectorRef,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n    this._removeUniqueSelectionListener =\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\n        if (this.accordion && !this.accordion.multi &&\n            this.accordion.id === accordionId && this.id !== id) {\n          this.expanded = false;\n        }\n      });\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n\n  static ngAcceptInputType_expanded: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAccordion} from './accordion';\nimport {CdkAccordionItem} from './accordion-item';\n\n\n@NgModule({\n  exports: [CdkAccordion, CdkAccordionItem],\n  declarations: [CdkAccordion, CdkAccordionItem],\n})\nexport class CdkAccordionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {distinctUntilChanged, filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordionBase, MatAccordionTogglePosition, MAT_ACCORDION} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  styleUrls: ['expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: 'expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() readonly afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() readonly afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  override accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  readonly _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  /** Toggles the expanded state of the expansion panel. */\n  override toggle(): void {\n    this.expanded = !this.expanded;\n  }\n\n  /** Sets the expanded state of the expansion panel to false. */\n  override close(): void {\n    this.expanded = false;\n  }\n\n  /** Sets the expanded state of the expansion panel to true. */\n  override open(): void {\n    this.expanded = true;\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n\n  static ngAcceptInputType_hideToggle: BooleanInput;\n}\n\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {HasTabIndex, mixinTabIndex} from '@angular/material/core';\nimport {NumberInput} from '@angular/cdk/coercion';\nimport {EMPTY, merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {MatAccordionTogglePosition} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n/** @docs-private */\nabstract class MatExpansionPanelHeaderBase {\n  abstract readonly disabled: boolean;\n}\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\n@Component({\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['expansion-panel-header.css'],\n  templateUrl: 'expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['tabIndex'],\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header mat-focus-indicator',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[style.height]': '_getHeaderHeight()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n  },\n})\nexport class MatExpansionPanelHeader extends _MatExpansionPanelHeaderMixinBase implements\n  AfterViewInit, OnDestroy, FocusableOption, HasTabIndex {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n      @Attribute('tabindex') tabIndex?: string) {\n    super();\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n    this.tabIndex = parseInt(tabIndex || '') || 0;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled(): boolean {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /**\n   * Gets the current height of the header. Null if no custom height has been\n   * specified, and if the default height from the stylesheet should be used.\n   */\n  _getHeaderHeight(): string|null {\n    const isExpanded = this._isExpanded();\n    if (isExpanded && this.expandedHeight) {\n      return this.expandedHeight;\n    } else if (!isExpanded && this.collapsedHeight) {\n      return this.collapsedHeight;\n    }\n    return null;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin?: FocusOrigin, options?: FocusOptions) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._element).subscribe(origin => {\n      if (origin && this.panel.accordion) {\n        this.panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  static ngAcceptInputType_tabIndex: NumberInput;\n}\n\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  OnDestroy,\n} from '@angular/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {startWith} from 'rxjs/operators';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if multiple panel support is enabled.\n    '[class.mat-accordion-multi]': 'this.multi',\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase,\n  AfterContentInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  /** Headers belonging to this accordion. */\n  private _ownHeaders = new QueryList<MatExpansionPanelHeader>();\n\n  /** All headers inside the accordion. Includes headers inside nested accordions. */\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._headers.changes\n      .pipe(startWith(this._headers))\n      .subscribe((headers: QueryList<MatExpansionPanelHeader>) => {\n        this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n        this._ownHeaders.notifyOnChanges();\n      });\n\n    this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    this._keyManager.onKeydown(event);\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this._ownHeaders.destroy();\n  }\n\n  static ngAcceptInputType_hideToggle: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\n\nimport { ConfigService } from '@core/services/config/config.service';\n\nenum JobTitles {\n  SoftwareEngineer = 'Software Engineer'\n}\n\nexport interface Contributor {\n  firstName : string;\n  lastName : string;\n  title : string;\n  email : string;\n  personalSummary : string;\n  gitHub ?: string;\n  linkedIn ?: string;\n}\n\nexport const CONTRIBUTORS : Contributor[] = [\n  {\n    firstName : 'Evan',\n    lastName : 'Harding',\n    title : JobTitles.SoftwareEngineer,\n    email : 'ehharding@gmail.com',\n    personalSummary : 'The creator of the site, Evan is a software engineer currently working for Lockheed Martin in Littleton, CO. He graduated ' +\n                      'from The Pennsylvania State University (Penn State) in 2019 with a major in Computer Engineering and a minor in ' +\n                      'Mathematics. His interests include gaming, reading, watching movies, artificial intelligence, and in general everything ' +\n                      'technology. He is 24 years old and lives in Castle Rock, CO with his fiancée Sarah, their Australian cattle dog Sega, and ' +\n                      'their two cats Edgar and Minerva (Minnie).',\n    gitHub : 'https://github.com/ehharding',\n    linkedIn : 'https://www.linkedin.com/in/ehharding/'\n  }\n];\n\nexport const CONTRIBUTORS_ANIMATIONS : unknown[] = [\n  trigger('hover', [\n    state('normalState', style({ transform : 'translateX(0)' })),\n    state('shiftedState', style({ transform : 'translateX(10px)' }))\n  ]),\n  trigger('openClose', [\n    state('visibleState', style({ opacity : 1 })),\n    state('invisibleState', style({ opacity : 0 })),\n    transition('visibleState <=> invisibleState', [animate(`${ ConfigService.internalAppConfiguration.constants.genericAnimationDurationMS }ms`)])\n  ])\n];\n","<header class=\"pf-contributors-header\">\n  <div class=\"row m-3\">\n    <div class=\"mx-auto pf-w-70\">\n      <h1 class=\"mat-h1 mt-2\"><strong>Contributors</strong></h1>\n\n      <p>This page lists the current contributors to the project.</p>\n    </div>\n  </div>\n</header>\n\n<div class=\"row m-3\">\n  <div class=\"mx-auto pf-w-70\">\n    <mat-accordion class=\"pf-headers-align\">\n      <mat-expansion-panel *ngFor=\"let contributor of contributors; let index = index\" [expanded]=\"index === 0\"\n        (closed)=\"panelOpen = false\" (opened)=\"panelOpen = true\" (mouseenter)=\"panelHovered = true\" (mouseleave)=\"panelHovered = false\">\n          <mat-expansion-panel-header>\n            <mat-panel-title>\n              <mat-icon class=\"me-2\">account_circle</mat-icon>\n              <span class=\"pf-contributor-shift-animation\" [@hover]=\"(panelHovered && !panelOpen) ? 'shiftedState' : 'normalState'\" [@openClose]=\"panelOpen ? 'invisibleState' : 'visibleState'\">\n                <strong>{{ contributor.firstName }} {{ contributor.lastName }}</strong>\n              </span>\n            </mat-panel-title>\n\n            <mat-panel-description class=\"pf-contributor-shift-animation\"\n              [@hover]=\"(panelHovered && !panelOpen) ? 'shiftedState' : 'normalState'\" [@openClose]=\"panelOpen ? 'invisibleState' : 'visibleState'\">\n                {{ contributor.title }}\n            </mat-panel-description>\n          </mat-expansion-panel-header>\n\n          <ng-template matExpansionPanelContent>\n            <div class=\"d-flex justify-content-center\">\n              <mat-card class=\"mat-elevation-z0\">\n                <mat-card-header>\n                  <img mat-card-avatar alt=\"{{ contributor.firstName }} {{ contributor.lastName }}'s Avatar\" src=\"assets/avatars/{{ contributorNamesKebab[index] }}.jpeg\"/>\n                  <mat-card-title><strong>{{ contributor.firstName }} {{ contributor.lastName }}</strong></mat-card-title>\n                  <mat-card-subtitle>{{ contributor.title }}</mat-card-subtitle>\n                </mat-card-header>\n\n                <mat-card-content>{{ contributor.personalSummary }}</mat-card-content>\n\n                <mat-card-actions>\n                  <!-- The First Contributor Card Action Button Is An Email Link -->\n                  <a href=\"mailto:{{ contributor.email }}?subject=Subject&body=Hi%20{{ contributor.firstName }}\">\n                    <button mat-button [matTooltip]=\"contributor.email\">\n                      <mat-icon class=\"me-2\">email</mat-icon>\n                      <span>E-MAIL</span>\n                    </button>\n                  </a>\n\n                  <!-- The Second Contributor Card Action Button Is A Link To The Respective Contributors' GitHub (Optional) -->\n                  <a *ngIf=\"contributor.gitHub\" target=\"_blank\" [href]=\"contributor.gitHub\">\n                    <button mat-button>\n                      <img alt=\"GitHub Logo\" class=\"pf-card-footer-logo me-2\" src=\"assets/images/other-logos/github-logo.svg\"/>\n                      <span>GITHUB</span>\n                    </button>\n                  </a>\n\n                  <!-- The Third Contributor Card Action Button Is A Link To The Respective Contributors' LinkedIn (Optional) -->\n                  <a *ngIf=\"contributor.linkedIn\" target=\"_blank\" [href]=\"contributor.linkedIn\">\n                    <button mat-button>\n                      <img alt=\"LinkedIn Logo\" class=\"pf-card-footer-logo me-2\" src=\"assets/images/other-logos/linkedin-logo.svg\"/>\n                      <span>LINKEDIN</span>\n                    </button>\n                  </a>\n                </mat-card-actions>\n              </mat-card>\n            </div>\n          </ng-template>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </div>\n</div>\n","/*****************************************************************************************************************************************************\n * This file handles navigation for the `Contributors` module. The URLs defined here are children of contributors/.\n ****************************************************************************************************************************************************/\n\nimport { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\n\nimport { ContributorsComponent } from '@contributors/contributors.component';\n\nconst ROUTES : Routes = [\n  { path : '', component : ContributorsComponent }\n];\n\n@NgModule({\n  exports : [RouterModule],\n  imports : [RouterModule.forChild(ROUTES)]\n})\nexport class ContributorsRoutingModule { }\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\nimport { CONTRIBUTORS, CONTRIBUTORS_ANIMATIONS, Contributor } from '@contributors/contributors.model';\n\n@Component({\n  changeDetection : ChangeDetectionStrategy.OnPush,\n  selector : 'pf-contributors',\n  styleUrls : ['contributors.component.scss'],\n  templateUrl : 'contributors.component.html',\n  animations : CONTRIBUTORS_ANIMATIONS\n})\nexport class ContributorsComponent implements OnInit {\n  public readonly contributors : Contributor[] = CONTRIBUTORS;\n  public readonly contributorNamesKebab : string[] = [];\n\n  public panelHovered : boolean = false;\n  public panelOpen : boolean = false;\n\n  public ngOnInit() : void {\n    for (const CONTRIBUTOR of CONTRIBUTORS) {\n      // We'll Convert The Contributors Name To Kebab-Case To Match The File Name (i.e. 'Evan Harding' -> evan-harding)\n      this.contributorNamesKebab.push(`${ CONTRIBUTOR.firstName } ${ CONTRIBUTOR.lastName }`.toLowerCase().replace(' ', '-'));\n    }\n  }\n}\n","import { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { NgModule } from '@angular/core';\n\nimport { ContributorsRoutingModule } from '@contributors/contributors-routing.module';\nimport { SharedModule } from '@shared/shared.module';\n\nimport { ContributorsComponent } from '@contributors/contributors.component';\n\n@NgModule({\n  declarations : [ContributorsComponent],\n  imports : [\n    MatButtonModule,\n    MatCardModule,\n    MatExpansionModule,\n    MatIconModule,\n    MatTooltipModule,\n    ContributorsRoutingModule,\n    SharedModule\n  ]\n})\nexport class ContributorsModule { }\n"],"sourceRoot":"webpack:///"}