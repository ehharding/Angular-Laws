{"version":3,"mappings":"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","names":["nextId","CDK_ACCORDION","InjectionToken","CdkAccordion","this","Subject","_multi","multi","coerceBooleanProperty","openAll","_openCloseAllActions","next","closeAll","ngOnChanges","changes","_stateChanges","ngOnDestroy","complete","t","Éµngcc0","inputs","exportAs","CdkAccordionItem","constructor","accordion","_changeDetectorRef","_expansionDispatcher","Subscription","EventEmitter","_removeUniqueSelectionListener","listen","id","accordionId","expanded","_openCloseAllSubscription","_subscribeToOpenCloseAllActions","_expanded","expandedChange","emit","opened","notify","closed","markForCheck","_disabled","disabled","destroyed","unsubscribe","toggle","close","open","subscribe","Éµngcc1","outputs","undefined","CdkAccordionModule","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","trigger","state","style","transform","transition","animate","bodyExpansion","height","visibility","MatExpansionPanelContent","_template","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","super","_bodyAnimationDone","pipe","distinctUntilChanged","x","y","fromState","toState","event","afterExpand","afterCollapse","hideToggle","_hideToggle","value","_togglePosition","togglePosition","_hasSpacing","displayMode","_getExpandedState","ngAfterContentInit","_lazyContent","startWith","filter","_portal","take","TemplatePortal","_inputChanges","_containsFocus","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","dirIndex","rf","_t","d","ctx","viewQuery","_c0","e","encapsulation","_MatExpansionPanelHeaderMixinBase","mixinTabIndex","MatExpansionPanelHeaderBase","MatExpansionPanelHeader","panel","_element","_focusMonitor","tabIndex","accordionHideToggleChange","EMPTY","parseInt","_parentChangeSubscription","merge","focusVia","expandedHeight","collapsedHeight","_toggle","_isExpanded","_getPanelId","_getTogglePosition","_showToggle","_getHeaderHeight","isExpanded","_keydown","keyCode","SPACE","ENTER","hasModifierKey","preventDefault","_handleHeaderKeydown","focus","origin","options","ngAfterViewInit","monitor","_handleHeaderFocus","stopMonitoring","Éµcmp","selectors","hostAttrs","hostVars","$event","features","MatExpansionPanelDescription","n","MatExpansionPanelTitle","MatAccordion","QueryList","show","_headers","headers","_ownHeaders","reset","header","notifyOnChanges","_keyManager","FocusKeyManager","withWrap","withHomeAndEnd","onKeydown","updateActiveItem","destroy","ÉµMatAccordion_BaseFactory","i","ÉµÉµloadQuery","MatExpansionModule","PortalModule","CONTRIBUTORS_ANIMATIONS","opacity","ConfigService","ContributorService","_httpClient","BehaviorSubject","fetchAllContributors","get","allContributors","_allContributors$","_contributorsFetchError$","error","getAllContributors","asObservable","getContributorsFetchError","i0","factory","ROUTES","path","component","_contributorService","AppRoute","ReplaySubject","ngOnInit","takeUntil","_componentDestroyed$","contributorsFetchError","contributorsFetchErrorInfo","CONTRIBUTOR","contributorNamesKebab","push","firstName","lastName","toLowerCase","replace","status","APP_CONSTANTS","httpStatusText","ContributorsComponent","changeDetection","ContributorsRoutingModule","RouterModule","ContributorsModule","imports","MatButtonModule","MatCardModule","MatFormFieldModule","MatIconModule","MatTooltipModule","SharedModule"],"sources":["../src/cdk/accordion/accordion.ts","../src/cdk/accordion/accordion-item.ts","../src/cdk/accordion/accordion-module.ts","../src/material/expansion/accordion-base.ts","../src/material/expansion/expansion-animations.ts","../src/material/expansion/expansion-panel-content.ts","../src/material/expansion/expansion-panel.ts","../src/material/expansion/expansion-panel-header.ts","../src/material/expansion/accordion.ts","../src/material/expansion/expansion-module.ts","./src/app/contributors/contributors.model.ts","./src/app/contributors/services/contributor/contributor.service.ts","./src/app/contributors/contributors.component.html","./src/app/contributors/contributors-routing.module.ts","./src/app/contributors/contributors.component.ts","./src/app/contributors/contributors.module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, InjectionToken, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_ACCORDION = new InjectionToken<CdkAccordion>('CdkAccordion');\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n  providers: [{provide: CDK_ACCORDION, useExisting: CdkAccordion}],\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id = `cdk-accordion-${nextId++}`;\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input()\n  get multi(): boolean { return this._multi; }\n  set multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\n  private _multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    if (this._multi) {\n      this._openCloseAllActions.next(true);\n    }\n  }\n\n  /** Closes all enabled accordion items in an accordion where multi is enabled. */\n  closeAll(): void {\n    this._openCloseAllActions.next(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._openCloseAllActions.complete();\n  }\n\n  static ngAcceptInputType_multi: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CDK_ACCORDION, CdkAccordion} from './accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs';\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n    // registering to the same accordion.\n    {provide: CDK_ACCORDION, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnDestroy {\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() readonly destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() readonly expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\n\n  /** Whether the AccordionItem is expanded. */\n  @Input()\n  get expanded(): boolean { return this._expanded; }\n  set expanded(expanded: boolean) {\n    expanded = coerceBooleanProperty(expanded);\n\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(disabled: boolean) { this._disabled = coerceBooleanProperty(disabled); }\n  private _disabled = false;\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(@Optional() @Inject(CDK_ACCORDION) @SkipSelf() public accordion: CdkAccordion,\n              private _changeDetectorRef: ChangeDetectorRef,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n    this._removeUniqueSelectionListener =\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\n        if (this.accordion && !this.accordion.multi &&\n            this.accordion.id === accordionId && this.id !== id) {\n          this.expanded = false;\n        }\n      });\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n\n  static ngAcceptInputType_expanded: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAccordion} from './accordion';\nimport {CdkAccordionItem} from './accordion-item';\n\n\n@NgModule({\n  exports: [CdkAccordion, CdkAccordionItem],\n  declarations: [CdkAccordion, CdkAccordionItem],\n})\nexport class CdkAccordionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {distinctUntilChanged, filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordionBase, MatAccordionTogglePosition, MAT_ACCORDION} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  styleUrls: ['expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: 'expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() readonly afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() readonly afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  override accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  readonly _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  /** Toggles the expanded state of the expansion panel. */\n  override toggle(): void {\n    this.expanded = !this.expanded;\n  }\n\n  /** Sets the expanded state of the expansion panel to false. */\n  override close(): void {\n    this.expanded = false;\n  }\n\n  /** Sets the expanded state of the expansion panel to true. */\n  override open(): void {\n    this.expanded = true;\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n\n  static ngAcceptInputType_hideToggle: BooleanInput;\n}\n\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {HasTabIndex, mixinTabIndex} from '@angular/material/core';\nimport {NumberInput} from '@angular/cdk/coercion';\nimport {EMPTY, merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {MatAccordionTogglePosition} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n/** @docs-private */\nabstract class MatExpansionPanelHeaderBase {\n  abstract readonly disabled: boolean;\n}\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\n@Component({\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['expansion-panel-header.css'],\n  templateUrl: 'expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['tabIndex'],\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header mat-focus-indicator',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[style.height]': '_getHeaderHeight()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n  },\n})\nexport class MatExpansionPanelHeader extends _MatExpansionPanelHeaderMixinBase implements\n  AfterViewInit, OnDestroy, FocusableOption, HasTabIndex {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n      @Attribute('tabindex') tabIndex?: string) {\n    super();\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n    this.tabIndex = parseInt(tabIndex || '') || 0;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled(): boolean {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /**\n   * Gets the current height of the header. Null if no custom height has been\n   * specified, and if the default height from the stylesheet should be used.\n   */\n  _getHeaderHeight(): string|null {\n    const isExpanded = this._isExpanded();\n    if (isExpanded && this.expandedHeight) {\n      return this.expandedHeight;\n    } else if (!isExpanded && this.collapsedHeight) {\n      return this.collapsedHeight;\n    }\n    return null;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin?: FocusOrigin, options?: FocusOptions) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._element).subscribe(origin => {\n      if (origin && this.panel.accordion) {\n        this.panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  static ngAcceptInputType_tabIndex: NumberInput;\n}\n\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  OnDestroy,\n} from '@angular/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {startWith} from 'rxjs/operators';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if multiple panel support is enabled.\n    '[class.mat-accordion-multi]': 'this.multi',\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase,\n  AfterContentInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  /** Headers belonging to this accordion. */\n  private _ownHeaders = new QueryList<MatExpansionPanelHeader>();\n\n  /** All headers inside the accordion. Includes headers inside nested accordions. */\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._headers.changes\n      .pipe(startWith(this._headers))\n      .subscribe((headers: QueryList<MatExpansionPanelHeader>) => {\n        this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n        this._ownHeaders.notifyOnChanges();\n      });\n\n    this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    this._keyManager.onKeydown(event);\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n\n  override ngOnDestroy() {\n    super.ngOnDestroy();\n    this._ownHeaders.destroy();\n  }\n\n  static ngAcceptInputType_hideToggle: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","import { AnimationMetadata, animate, state, style, transition, trigger } from '@angular/animations';\n\nimport { ConfigService } from '@core/services/config/config.service';\n\nexport const CONTRIBUTORS_ANIMATIONS : AnimationMetadata[] = [\n  trigger('hover', [\n    state('normalState', style({ transform : 'translateX(0)' })),\n    state('shiftedState', style({ transform : 'translateX(10px)' }))\n  ]),\n  trigger('openClose', [\n    state('visibleState', style({ opacity : 1 })),\n    state('invisibleState', style({ opacity : 0 })),\n    transition('visibleState <=> invisibleState', [animate(`${ ConfigService.appConfiguration.constants.genericAnimationDurationMS }ms`)])\n  ])\n];\n","/******************************************************************************************************************************************************************************\n * This service handles the retrieval of contributor-related data.\n *****************************************************************************************************************************************************************************/\n\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { BehaviorSubject, Observable, distinctUntilChanged } from 'rxjs';\n\nimport { Contributor } from '@contributors/services/contributor/contributor.model';\n\nimport { ConfigService } from '@core/services/config/config.service';\n\n@Injectable({ providedIn : 'any' })\nexport class ContributorService {\n  private readonly _allContributors$ : BehaviorSubject<Contributor[]> = new BehaviorSubject<Contributor[]>([] as Contributor[]);\n  private readonly _contributorsFetchError$ : BehaviorSubject<HttpErrorResponse | undefined> = new BehaviorSubject<HttpErrorResponse | undefined>(undefined);\n\n  public constructor(private readonly _httpClient : HttpClient) {\n    this.fetchAllContributors();\n  }\n\n  /**\n   * Fetches all contributors from the database and updates the class's data with the new values, or error handles.\n   */\n  public fetchAllContributors() : void {\n    this._httpClient.get<Contributor[]>(ConfigService.appConfiguration.apiServer.paths.contributors.allContributors).pipe(distinctUntilChanged()).subscribe({\n      next : (allContributors : Contributor[]) : void => {\n        this._allContributors$.next(allContributors);\n        this._contributorsFetchError$.next(undefined);\n      },\n      error : (error : HttpErrorResponse) : void => {\n        this._contributorsFetchError$.next(error);\n      }\n    });\n  }\n\n  /**\n   * Provides a Contributor[]-typed Observable stream for interested subscribers to receive all contributors from the database.\n   *\n   * @returns a Contributor[]-typed Observable stream. Subscribe to the stream to receive the object type specified asynchronously.\n   */\n  public getAllContributors() : Observable<Contributor[]> {\n    return this._allContributors$.asObservable().pipe(distinctUntilChanged());\n  }\n\n  /**\n   * Provides a HttpErrorResponse | undefined-typed Observable stream for interested subscribers to receive the latest error, if any, when the HTTP request to retrieve all\n   * contributors from the database was made.\n   *\n   * @returns a HttpErrorResponse | undefined-typed Observable stream. Subscribe to the stream to receive the object type specified asynchronously.\n   */\n  public getContributorsFetchError() : Observable<HttpErrorResponse | undefined> {\n    return this._contributorsFetchError$.asObservable().pipe(distinctUntilChanged());\n  }\n}\n","<header>\n  <div class=\"m-3 row\">\n    <div class=\"mx-auto pf-w-70\">\n      <h1 class=\"fs-4 mt-2\"><strong>Contributors</strong></h1>\n\n      <p>This page lists the current contributors to the project.</p>\n    </div>\n  </div>\n</header>\n\n<main>\n  <div class=\"m-3\">\n    <div class=\"mx-auto pf-w-70\">\n      <mat-accordion *ngIf=\"!contributorsFetchError\" class=\"pf-headers-align\">\n        <mat-expansion-panel *ngFor=\"let contributor of allContributors; let index = index\" [expanded]=\"index === 0\"\n                             (closed)=\"panelOpen = false\" (opened)=\"panelOpen = true\" (mouseenter)=\"panelHovered = true\" (mouseleave)=\"panelHovered = false\">\n          <mat-expansion-panel-header>\n            <mat-panel-title>\n              <mat-icon class=\"me-3\">account_circle</mat-icon>\n              <span class=\"pf-contributor-shift-animation\"\n                    [@hover]=\"(panelHovered && !panelOpen) ? 'shiftedState' : 'normalState'\" [@openClose]=\"panelOpen ? 'invisibleState' : 'visibleState'\">\n                <strong>{{ contributor.firstName }} {{ contributor.lastName }}</strong>\n              </span>\n            </mat-panel-title>\n\n            <mat-panel-description class=\"pf-contributor-shift-animation\"\n                                   [@hover]=\"(panelHovered && !panelOpen) ? 'shiftedState' : 'normalState'\" [@openClose]=\"panelOpen ? 'invisibleState' : 'visibleState'\">\n              {{ contributor.jobTitle }}\n            </mat-panel-description>\n          </mat-expansion-panel-header>\n\n          <ng-template matExpansionPanelContent>\n            <div class=\"d-flex justify-content-center\">\n              <mat-card class=\"mat-elevation-z0\">\n                <mat-card-header>\n                  <img mat-card-avatar alt=\"{{ contributor.firstName }} {{ contributor.lastName }}'s Avatar\" src=\"assets/avatars/{{ contributorNamesKebab[index] }}.jpg\"/>\n                  <mat-card-title><strong>{{ contributor.firstName }} {{ contributor.lastName }}</strong></mat-card-title>\n                  <mat-card-subtitle>\n                    <div class=\"col\">\n                      <div class=\"mb-2\">\n                        {{ contributor.jobTitle }}\n                      </div>\n                      <div>\n                        <a routerLink=\"/{{ AppRoute.Users }}/{{ contributor.id }}\">\n                          <button mat-stroked-button matTooltipPosition=\"right\" [matTooltip]=\"contributor.pocketFicUserName\">\n                            <mat-icon class=\"me-2\" color=\"primary\">import_contacts</mat-icon>\n                            <span>VISIT POCKET FIC PROFILE</span>\n                          </button>\n                        </a>\n                      </div>\n                    </div>\n                  </mat-card-subtitle>\n                </mat-card-header>\n\n                <mat-card-content>{{ contributor.personalSummary }}</mat-card-content>\n\n                <mat-card-actions>\n                  <!-- The First Contributor Card Action Button Is An Email Link -->\n                  <a href=\"mailto:{{ contributor.email }}?subject=Subject&body=Hi%20{{ contributor.firstName }}\">\n                    <button mat-button [matTooltip]=\"contributor.email\">\n                      <mat-icon class=\"me-2\">email</mat-icon>\n                      <span>E-MAIL</span>\n                    </button>\n                  </a>\n\n                  <!-- The Second Contributor Card Action Button Is A Link To The Respective Contributors' Resume (Optional) -->\n                  <a *ngIf=\"contributor.resume\" target=\"_blank\" [href]=\"contributor.resume\">\n                    <button mat-button>\n                      <mat-icon class=\"me-2\">contact_page</mat-icon>\n                      <span>RESUM&Eacute;</span>\n                    </button>\n                  </a>\n\n                  <!-- The Third Contributor Card Action Button Is A Link To The Respective Contributors' GitHub (Optional) -->\n                  <a *ngIf=\"contributor.gitHub\" target=\"_blank\" [href]=\"contributor.gitHub\">\n                    <button mat-button>\n                      <img alt=\"GitHub Logo\" class=\"me-2 pf-card-footer-logo\" src=\"assets/images/other-logos/github.svg\"/>\n                      <span>GITHUB</span>\n                    </button>\n                  </a>\n\n                  <!-- The Fourth Contributor Card Action Button Is A Link To The Respective Contributors' LinkedIn (Optional) -->\n                  <a *ngIf=\"contributor.linkedIn\" target=\"_blank\" [href]=\"contributor.linkedIn\">\n                    <button mat-button>\n                      <img alt=\"LinkedIn Logo\" class=\"me-2 pf-card-footer-logo\" src=\"assets/images/other-logos/linkedin.svg\"/>\n                      <span>LINKEDIN</span>\n                    </button>\n                  </a>\n                </mat-card-actions>\n              </mat-card>\n            </div>\n          </ng-template>\n        </mat-expansion-panel>\n      </mat-accordion>\n\n      <div *ngIf=\"contributorsFetchError\" class=\"row\">\n        <div class=\"col\">\n          <h1 class=\"fs-4 row\">\n            <strong>An Error Occurred Fetching the List of Contributors. Sorry About That!</strong>\n            <mat-hint class=\"fs-5\">{{ contributorsFetchErrorInfo }}</mat-hint>\n          </h1>\n\n          <div>\n            <button mat-raised-button (click)=\"fetchAllContributors()\">\n              <mat-icon class=\"me-2\">refresh</mat-icon>\n              <span>RETRY</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</main>\n","/******************************************************************************************************************************************************************************\n * This file handles navigation for the \"Contributors\" module. The URLs defined here are children of the \"/contributors\" route.\n *****************************************************************************************************************************************************************************/\n\nimport { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\n\nimport { ContributorsComponent } from '@contributors/contributors.component';\n\nconst ROUTES : Routes = [\n  { path : '', component : ContributorsComponent }\n];\n\n@NgModule({\n  exports : [RouterModule],\n  imports : [RouterModule.forChild(ROUTES)]\n})\nexport class ContributorsRoutingModule { }\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ReplaySubject, takeUntil } from 'rxjs';\n\nimport { AppRoute } from 'app/app-routing.module';\n\nimport { APP_CONSTANTS } from '@core/services/config/config.model';\nimport { CONTRIBUTORS_ANIMATIONS } from '@contributors/contributors.model';\nimport { Contributor } from '@contributors/services/contributor/contributor.model';\n\nimport { ContributorService } from '@contributors/services/contributor/contributor.service';\n\n@Component({\n  changeDetection : ChangeDetectionStrategy.OnPush,\n  selector : 'pf-contributors',\n  styleUrls : ['contributors.component.scss'],\n  templateUrl : 'contributors.component.html',\n  animations : CONTRIBUTORS_ANIMATIONS\n})\nexport class ContributorsComponent implements OnInit, OnDestroy {\n  public readonly contributorNamesKebab : string[] = [];\n\n  public panelHovered : boolean = false;\n  public panelOpen : boolean = false;\n\n  public allContributors : Contributor[] = [];\n  public contributorsFetchError : HttpErrorResponse | undefined = undefined;\n  public contributorsFetchErrorInfo : string | undefined = undefined;\n\n  public readonly AppRoute = AppRoute;\n\n  private readonly _componentDestroyed$ : ReplaySubject<boolean> = new ReplaySubject<boolean>(1);\n\n  public constructor(private readonly _changeDetectorRef : ChangeDetectorRef, private readonly _contributorService : ContributorService) { }\n\n  public ngOnInit() : void {\n    this._contributorService.getAllContributors().pipe(takeUntil(this._componentDestroyed$)).subscribe({\n      next : (allContributors : Contributor[]) : void => {\n        this.allContributors = allContributors;\n        this.contributorsFetchError = undefined;\n        this.contributorsFetchErrorInfo = undefined;\n\n        for (const CONTRIBUTOR of allContributors) {\n          // We'll Convert The Contributors Name To Kebab-Case To Match The File Name (e.g. 'Evan Harding' -> evan-harding)\n          this.contributorNamesKebab.push(`${ CONTRIBUTOR.firstName } ${ CONTRIBUTOR.lastName }`.toLowerCase().replace(' ', '-'));\n        }\n\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n\n    this._contributorService.getContributorsFetchError().pipe(takeUntil(this._componentDestroyed$)).subscribe({\n      next : (contributorsFetchError : HttpErrorResponse | undefined) : void => {\n        if (contributorsFetchError) {\n          this.contributorsFetchError = contributorsFetchError;\n          this.contributorsFetchErrorInfo = `HTTP ${ contributorsFetchError.status }: ${ APP_CONSTANTS.httpResponseCodes[contributorsFetchError.status].httpStatusText }`;\n        }\n\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n  }\n\n  public ngOnDestroy() : void {\n    this._componentDestroyed$.next(true);\n    this._componentDestroyed$.complete();\n  }\n\n  /**\n   * Triggers a new HTTP request for the retrieval of the list of contributors from the database.\n   */\n  public fetchAllContributors() : void {\n    this._contributorService.fetchAllContributors();\n  }\n}\n","/******************************************************************************************************************************************************************************\n * This module serves as the repository for all modules and components associated with the \"Contributors\" portion of the application.\n *****************************************************************************************************************************************************************************/\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { NgModule } from '@angular/core';\n\nimport { ContributorsRoutingModule } from '@contributors/contributors-routing.module';\nimport { SharedModule } from '@shared/shared.module';\n\nimport { ContributorService } from '@contributors/services/contributor/contributor.service';\n\nimport { ContributorsComponent } from '@contributors/contributors.component';\n\n@NgModule({\n  declarations : [ContributorsComponent],\n  imports : [\n    MatButtonModule,\n    MatCardModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatTooltipModule,\n    ContributorsRoutingModule,\n    SharedModule\n  ],\n  providers : [ContributorService]\n})\nexport class ContributorsModule { }\n"],"sourceRoot":"webpack:///","file":"734.js"}