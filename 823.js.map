{"version":3,"mappings":"4YASMA,EAAkB,CACtB,CAAEC,KAAO,GAAIC,UCUf,MAAM,QAYJC,YAAoCC,EAAmCC,EAA0CC,GAA7EC,eAAmCA,iBAA0CA,oBAX1GA,uBAA6B,EAC7BA,uBAA6B,EAC7BA,iBAAuB,EAEvBA,oBAA6B,IAAIC,KAAU,CAChDC,SAAW,IAAIC,KAAY,GAAIC,eAC/BC,SAAW,IAAIF,KAAY,GAAIC,iBAGhBJ,0BAAgD,IAAIM,IAAuB,GAWpFC,UAAUC,EAAoCC,GAAuB,GAEzET,KAAKU,WADHD,EACgBE,OAAOC,WAAaC,0DAEpBL,EAAmBI,WAAaC,0DAI/CC,WACLd,KAAKO,UAAUI,QAAQ,GAGlBI,cACLf,KAAKgB,qBAAqBC,MAAK,GAC/BjB,KAAKgB,qBAAqBE,WAOrBC,QAAK,IAEJC,EAFIC,OACVrB,KAAKD,aAAauB,OAAOtB,KAAKuB,eAAeC,MAAMtB,SAAUF,KAAKuB,eAAeC,MAAMnB,UAAUoB,MAAKC,OAAU1B,KAAKgB,uBAAuBW,UAAU,CACpJV,MAAIG,UAAG,UAAMQ,GACXP,EAAKvB,UAAU+B,KAAK,oBAAqB,KAAMC,WACzCT,EAAKxB,QAAQkC,SAAS,CAAC,OAF3B,6CAIJC,MAASC,IACPjC,KAAKF,UAAU+B,KAAK,sCAAuC,KAAM,IAAKC,IAA6BI,WAAa,+DAjD3GC,GAAcC,6DAAdD,EAAcE,2FAAdC,wBAAwB,6oBCpBrCF,gBACEA,iBACEA,iBACEA,iBACEA,oBACEA,gBAA6BA,kBAAQA,kBAAMA,QAASA,QACpDA,uBAEAA,kBACEA,kBACEA,kBACEA,6BACEA,sBAAWA,qBAAQA,QACnBA,oBAEAA,sBAAWA,mBAAQA,qBAAQA,QAAUA,0BAAYA,QACnDA,QACFA,QAEAA,kBACEA,6BACEA,sBAAWA,qBAAQA,QACnBA,oBACAA,sBAAkCA,yEAChCA,qBAAUA,UAAwDA,QACpEA,QAEAA,sBAAWA,mBAAQA,qBAAQA,QAAUA,0BAAYA,QACnDA,QACFA,QACFA,QAEAA,sBAAgDA,oDAA4B,IAAOA,2BAAcA,QAEjGA,sBAA4FA,gCAASE,YAASF,mBAAMA,QACtHA,QACFA,QAEAA,wBACEA,iBAA6BA,mBAAQA,2BAAcA,QAASA,QAC5DA,wBACFA,QACFA,QACFA,QACFA,QACFA,eA3CgEA,gEAC5BA,yDAKpBA,6CAc6CA,6DAE/BA,iEAUsCA,mtBDdvDD,GAAb,KDHO,IAAMI,EAAb,MAAM,sDAAOA,4DAFD,CAACC,cAAsB/C,IADtB+C,QAGAD,GAAb,iBGGO,IAAME,EAAb,MAAM,sDAAOA,4DAFD,CAACC,KAAiBC,KAAeC,IAAkBC,KAAeC,KAAmBP,EAAoBQ,QAExGN,GAAb","names":["ROUTES","path","component","constructor","_router","_snackBar","_userService","this","FormGroup","userName","FormControl","Validators","password","ReplaySubject","_onResize","$windowResizeEvent","initialize","mobileView","window","innerWidth","ConfigService","ngOnInit","ngOnDestroy","_componentDestroyed$","next","complete","login","e","i","login$","loginFormGroup","value","pipe","takeUntil","subscribe","_user","open","DEFAULT_MAT_SNACKBAR_CONFIG","navigate","error","_errorResponse","politeness","LoginComponent","i0","selectors","ctx","LoginRoutingModule","RouterModule","LoginModule","MatButtonModule","MatCardModule","MatDividerModule","MatIconModule","MatSnackBarModule","SharedModule"],"sources":["./src/app/login/login-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/login/login.module.ts"],"sourcesContent":["/******************************************************************************************************************************************************************************\n * This file handles navigation for the \"Login\" module. The URLs defined here are children of the \"/login\" route.\n *****************************************************************************************************************************************************************************/\n\nimport { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\n\nimport { LoginComponent } from '@login/login.component';\n\nconst ROUTES : Routes = [\n  { path : '', component : LoginComponent }\n];\n\n@NgModule({\n  exports : [RouterModule],\n  imports : [RouterModule.forChild(ROUTES)]\n})\nexport class LoginRoutingModule { }\n","import { ChangeDetectionStrategy, Component, HostListener, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\n\nimport { ReplaySubject, takeUntil } from 'rxjs';\n\nimport { DEFAULT_MAT_SNACKBAR_CONFIG } from '@core/services/config/config.model';\nimport { User } from '@core/services/user/user.model';\n\nimport { ConfigService } from '@core/services/config/config.service';\nimport { UserService } from '@core/services/user/user.service';\n\n@Component({\n  changeDetection : ChangeDetectionStrategy.OnPush,\n  selector : 'pf-login',\n  styleUrls : ['login.component.scss'],\n  templateUrl : 'login.component.html'\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  public hidePasswordText : boolean = true;\n  public loginCardShowing : boolean = true;\n  public mobileView : boolean = false;\n\n  public loginFormGroup : FormGroup = new FormGroup({\n    userName : new FormControl('', Validators.required),\n    password : new FormControl('', Validators.required)\n  });\n\n  private readonly _componentDestroyed$ : ReplaySubject<boolean> = new ReplaySubject<boolean>(1);\n\n  public constructor(private readonly _router : Router, private readonly _snackBar : MatSnackBar, private readonly _userService : UserService) { }\n\n  /**\n   * Executes certain actions whenever the window changes size. In this case, we set a flag that indicates if we should show a mobile-centric view or not.\n   *\n   * @param $windowResizeEvent - the resize event that triggered the function call (unless we are called when initializing)\n   * @param initialize - a flag that indicates we are in startup and should set the mobile view flag after the view is initialized\n   */\n  @HostListener('window:resize', ['$event.target'])\n  private _onResize($windowResizeEvent : typeof window, initialize : boolean = false) : void {\n    if (initialize) {\n      this.mobileView = window.innerWidth < ConfigService.appConfiguration.constants.mobileViewThresholdWidthPX;\n    } else {\n      this.mobileView = $windowResizeEvent.innerWidth < ConfigService.appConfiguration.constants.mobileViewThresholdWidthPX;\n    }\n  }\n\n  public ngOnInit() : void {\n    this._onResize(window, true);\n  }\n\n  public ngOnDestroy() : void {\n    this._componentDestroyed$.next(true);\n    this._componentDestroyed$.complete();\n  }\n\n  /**\n   * This function logs the user into the application but should only be callable when the status of the login FormGroup is valid. For now, beyond logging the user in, it\n   * merely navigates the user back to the home page.\n   */\n  public login() : void {\n    this._userService.login$(this.loginFormGroup.value.userName, this.loginFormGroup.value.password).pipe(takeUntil(this._componentDestroyed$)).subscribe({\n      next : async(_user : User) : Promise<void> => {\n        this._snackBar.open('Log In Successful', 'OK', DEFAULT_MAT_SNACKBAR_CONFIG);\n        await this._router.navigate(['']);\n      },\n      error : (_errorResponse : HttpErrorResponse) : void => {\n        this._snackBar.open('Failed to Log In. Please Try Again.', 'OK', { ...DEFAULT_MAT_SNACKBAR_CONFIG, politeness : 'assertive' });\n      }\n    });\n  }\n}\n","<main>\n  <div class=\"justify-content-center d-flex flex-row w-100\">\n    <div class=\"pf-create-account-login-card-container pf-t-30\" [ngClass]=\"{ 'pf-w-40' : !mobileView, 'w-100' : mobileView }\">\n      <div class=\"pf-flippable-div\" [ngClass]=\"{ 'flipped' : !loginCardShowing }\">\n        <mat-card>\n          <h1 class=\"fs-4 text-center\"><strong>Log In</strong></h1>\n          <mat-divider></mat-divider>\n\n          <form [formGroup]=\"loginFormGroup\">\n            <div class=\"mt-3 row\">\n              <div class=\"col w-50\">\n                <mat-form-field appearance=\"outline\" class=\"w-100\">\n                  <mat-label>USERNAME</mat-label>\n                  <input matInput formControlName=\"userName\" type=\"text\"/>\n\n                  <mat-error><strong>USERNAME</strong> is required.</mat-error>\n                </mat-form-field>\n              </div>\n\n              <div class=\"col w-50\">\n                <mat-form-field appearance=\"outline\" class=\"w-100\">\n                  <mat-label>PASSWORD</mat-label>\n                  <input matInput formControlName=\"password\" [type]=\"hidePasswordText ? 'password' : 'text'\"/>\n                  <button mat-icon-button matSuffix (click)=\"hidePasswordText = !hidePasswordText\">\n                    <mat-icon>{{ hidePasswordText ? 'visibility_off' : 'visibility' }}</mat-icon>\n                  </button>\n\n                  <mat-error><strong>PASSWORD</strong> is required.</mat-error>\n                </mat-form-field>\n              </div>\n            </div>\n\n            <button mat-button class=\"mb-2\" color=\"primary\" (click)=\"loginCardShowing = false\">CREATE ACCOUNT</button>\n\n            <button mat-raised-button class=\"w-100\" color=\"primary\" [disabled]=\"loginFormGroup.invalid\" (click)=\"login()\">LOG IN</button>\n          </form>\n        </mat-card>\n\n        <mat-card class=\"pf-create-account-card\">\n          <h1 class=\"fs-4 text-center\"><strong>Create Account</strong></h1>\n          <mat-divider></mat-divider>\n        </mat-card>\n      </div>\n    </div>\n  </div>\n</main>\n","/******************************************************************************************************************************************************************************\n * This module serves as the repository for all modules and components associated with the \"Login\" portion of the application.\n *****************************************************************************************************************************************************************************/\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { NgModule } from '@angular/core';\n\nimport { LoginRoutingModule } from '@login/login-routing.module';\nimport { SharedModule } from '@shared/shared.module';\n\nimport { LoginComponent } from '@login/login.component';\n\n@NgModule({\n  declarations : [LoginComponent],\n  imports : [MatButtonModule, MatCardModule, MatDividerModule, MatIconModule, MatSnackBarModule, LoginRoutingModule, SharedModule]\n})\nexport class LoginModule { }\n"],"sourceRoot":"webpack:///","file":"823.js"}